
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d34  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa1c  0800aa1c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa24  0800aa24  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800aa2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb0  2000008c  0800aab8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d3c  0800aab8  00020d3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b011  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003903  00000000  00000000  0003b0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0003e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b025  00000000  00000000  00040800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161fb  00000000  00000000  0006b825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a5d  00000000  00000000  00081a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017947d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  001794d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009f1c 	.word	0x08009f1c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	08009f1c 	.word	0x08009f1c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <etx_ota_download_and_flash+0x90>)
 80005e4:	f008 fd54 	bl	8009090 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <etx_ota_download_and_flash+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <etx_ota_download_and_flash+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
  slot_num_to_write    = 0xFFu;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <etx_ota_download_and_flash+0xa4>)
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000606:	f240 4209 	movw	r2, #1033	; 0x409
 800060a:	2100      	movs	r1, #0
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 800060e:	f008 fcb1 	bl	8008f74 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 8000612:	f240 4109 	movw	r1, #1033	; 0x409
 8000616:	481a      	ldr	r0, [pc, #104]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 8000618:	f000 fa0c 	bl	8000a34 <etx_receive_chunk>
 800061c:	4603      	mov	r3, r0
 800061e:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <etx_ota_download_and_flash+0x5e>
    {
      ret = etx_process_data( Rx_Buffer, len );
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 800062c:	f000 f82c 	bl	8000688 <etx_process_data>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e001      	b.n	800063a <etx_ota_download_and_flash+0x62>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 8000636:	2301      	movs	r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <etx_ota_download_and_flash+0x76>
    {
      printf("Sending NACK\r\n");
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <etx_ota_download_and_flash+0xac>)
 8000642:	f008 fd25 	bl	8009090 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fad8 	bl	8000bfc <etx_ota_send_resp>
      break;
 800064c:	e006      	b.n	800065c <etx_ota_download_and_flash+0x84>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fad4 	bl	8000bfc <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1d4      	bne.n	8000606 <etx_ota_download_and_flash+0x2e>

  return ret;
 800065c:	79fb      	ldrb	r3, [r7, #7]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08009f34 	.word	0x08009f34
 800066c:	200004b4 	.word	0x200004b4
 8000670:	200004bc 	.word	0x200004bc
 8000674:	200004b8 	.word	0x200004b8
 8000678:	200004b1 	.word	0x200004b1
 800067c:	200004c0 	.word	0x200004c0
 8000680:	200000a8 	.word	0x200000a8
 8000684:	08009f54 	.word	0x08009f54

08000688 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b09b      	sub	sp, #108	; 0x6c
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000694:	2301      	movs	r3, #1
 8000696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f000 8190 	beq.w	80009c2 <etx_process_data+0x33a>
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 818c 	beq.w	80009c2 <etx_process_data+0x33a>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	65bb      	str	r3, [r7, #88]	; 0x58
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d104      	bne.n	80006c0 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 80006b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	f000 81a8 	beq.w	8000a10 <etx_process_data+0x388>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 80006c0:	4bc1      	ldr	r3, [pc, #772]	; (80009c8 <etx_process_data+0x340>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	f200 8178 	bhi.w	80009ba <etx_process_data+0x332>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <etx_process_data+0x48>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006f3 	.word	0x080006f3
 80006d8:	0800071f 	.word	0x0800071f
 80006dc:	0800076d 	.word	0x0800076d
 80006e0:	08000851 	.word	0x08000851
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006e4:	48b9      	ldr	r0, [pc, #740]	; (80009cc <etx_process_data+0x344>)
 80006e6:	f008 fcd3 	bl	8009090 <puts>
        ret = ETX_OTA_EX_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      }
      break;
 80006f0:	e199      	b.n	8000a26 <etx_process_data+0x39e>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f040 818a 	bne.w	8000a14 <etx_process_data+0x38c>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 8000700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 8185 	bne.w	8000a14 <etx_process_data+0x38c>
          {
            printf("Received OTA START Command\r\n");
 800070a:	48b1      	ldr	r0, [pc, #708]	; (80009d0 <etx_process_data+0x348>)
 800070c:	f008 fcc0 	bl	8009090 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000710:	4bad      	ldr	r3, [pc, #692]	; (80009c8 <etx_process_data+0x340>)
 8000712:	2202      	movs	r2, #2
 8000714:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800071c:	e17a      	b.n	8000a14 <etx_process_data+0x38c>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 8000722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	2b02      	cmp	r3, #2
 8000728:	f040 8176 	bne.w	8000a18 <etx_process_data+0x390>
        {
          ota_fw_total_size = header->meta_data.package_size;
 800072c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4aa8      	ldr	r2, [pc, #672]	; (80009d4 <etx_process_data+0x34c>)
 8000732:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 8000734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4aa7      	ldr	r2, [pc, #668]	; (80009d8 <etx_process_data+0x350>)
 800073a:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 800073c:	4ba5      	ldr	r3, [pc, #660]	; (80009d4 <etx_process_data+0x34c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	48a6      	ldr	r0, [pc, #664]	; (80009dc <etx_process_data+0x354>)
 8000744:	f008 fc1e 	bl	8008f84 <iprintf>

          //get the slot number
          slot_num_to_write = get_available_slot_number();
 8000748:	f000 fb20 	bl	8000d8c <get_available_slot_number>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <etx_process_data+0x358>)
 8000752:	701a      	strb	r2, [r3, #0]
          if( slot_num_to_write != 0xFF )
 8000754:	4ba2      	ldr	r3, [pc, #648]	; (80009e0 <etx_process_data+0x358>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2bff      	cmp	r3, #255	; 0xff
 800075a:	f000 815d 	beq.w	8000a18 <etx_process_data+0x390>
          {
            ota_state = ETX_OTA_STATE_DATA;
 800075e:	4b9a      	ldr	r3, [pc, #616]	; (80009c8 <etx_process_data+0x340>)
 8000760:	2203      	movs	r2, #3
 8000762:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800076a:	e155      	b.n	8000a18 <etx_process_data+0x390>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
        uint16_t          data_len = data->data_len;
 8000770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000772:	789a      	ldrb	r2, [r3, #2]
 8000774:	78db      	ldrb	r3, [r3, #3]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	4313      	orrs	r3, r2
 800077a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 800077e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	2b01      	cmp	r3, #1
 8000784:	f040 814a 	bne.w	8000a1c <etx_process_data+0x394>
        {
          bool is_first_block = false;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          if( ota_fw_received_size == 0 )
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <etx_process_data+0x35c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d133      	bne.n	80007fe <etx_process_data+0x176>
          {
            //This is the first block
            is_first_block = true;
 8000796:	2301      	movs	r3, #1
 8000798:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

            /* Read the configuration */
            ETX_GNRL_CFG_ cfg;
            memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 800079c:	4b92      	ldr	r3, [pc, #584]	; (80009e8 <etx_process_data+0x360>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	461c      	mov	r4, r3
 80007a2:	f107 060c 	add.w	r6, r7, #12
 80007a6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80007aa:	4635      	mov	r5, r6
 80007ac:	4623      	mov	r3, r4
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	6859      	ldr	r1, [r3, #4]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b8:	3410      	adds	r4, #16
 80007ba:	3610      	adds	r6, #16
 80007bc:	4564      	cmp	r4, ip
 80007be:	d1f4      	bne.n	80007aa <etx_process_data+0x122>
 80007c0:	4632      	mov	r2, r6
 80007c2:	4623      	mov	r3, r4
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	8013      	strh	r3, [r2, #0]

            /* Before writing the data, reset the available slot */
            cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 1u;
 80007c8:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <etx_process_data+0x358>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007dc:	4413      	add	r3, r2
 80007de:	3b58      	subs	r3, #88	; 0x58
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]

            /* write back the updated config */
            ret = write_cfg_to_flash( &cfg );
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fec3 	bl	8001574 <write_cfg_to_flash>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if( ret != ETX_OTA_EX_OK )
 80007f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f040 8111 	bne.w	8000a20 <etx_process_data+0x398>
              break;
            }
          }

          /* write the chunk to the Flash (Slot location) */
          ex = write_data_to_slot( slot_num_to_write, buf+4, data_len, is_first_block );
 80007fe:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <etx_process_data+0x358>)
 8000800:	7818      	ldrb	r0, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	1d19      	adds	r1, r3, #4
 8000806:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800080a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800080e:	f000 fa25 	bl	8000c5c <write_data_to_slot>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

          if( ex == HAL_OK )
 8000818:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800081c:	2b00      	cmp	r3, #0
 800081e:	f040 80fd 	bne.w	8000a1c <etx_process_data+0x394>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000822:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <etx_process_data+0x35c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	0a99      	lsrs	r1, r3, #10
 8000828:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <etx_process_data+0x34c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	0a9b      	lsrs	r3, r3, #10
 800082e:	461a      	mov	r2, r3
 8000830:	486e      	ldr	r0, [pc, #440]	; (80009ec <etx_process_data+0x364>)
 8000832:	f008 fba7 	bl	8008f84 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <etx_process_data+0x35c>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <etx_process_data+0x34c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d302      	bcc.n	8000848 <etx_process_data+0x1c0>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000842:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <etx_process_data+0x340>)
 8000844:	2204      	movs	r2, #4
 8000846:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800084e:	e0e5      	b.n	8000a1c <etx_process_data+0x394>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	657b      	str	r3, [r7, #84]	; 0x54

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b00      	cmp	r3, #0
 800085a:	f040 80e3 	bne.w	8000a24 <etx_process_data+0x39c>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 800085e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	f040 80de 	bne.w	8000a24 <etx_process_data+0x39c>
          {
            printf("Received OTA END Command\r\n");
 8000868:	4861      	ldr	r0, [pc, #388]	; (80009f0 <etx_process_data+0x368>)
 800086a:	f008 fc11 	bl	8009090 <puts>

            printf("Validating the received Binary...\r\n");
 800086e:	4861      	ldr	r0, [pc, #388]	; (80009f4 <etx_process_data+0x36c>)
 8000870:	f008 fc0e 	bl	8009090 <puts>

            uint32_t slot_addr;
            if( slot_num_to_write == 0u )
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <etx_process_data+0x358>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <etx_process_data+0x1fa>
            {
              slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 800087c:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <etx_process_data+0x370>)
 800087e:	663b      	str	r3, [r7, #96]	; 0x60
 8000880:	e001      	b.n	8000886 <etx_process_data+0x1fe>
            }
            else
            {
              slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <etx_process_data+0x374>)
 8000884:	663b      	str	r3, [r7, #96]	; 0x60
            }

            //Calculate and verify the CRC
            uint32_t cal_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)slot_addr, ota_fw_total_size);
 8000886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000888:	4a52      	ldr	r2, [pc, #328]	; (80009d4 <etx_process_data+0x34c>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	485c      	ldr	r0, [pc, #368]	; (8000a00 <etx_process_data+0x378>)
 8000890:	f001 fd4a 	bl	8002328 <HAL_CRC_Calculate>
 8000894:	6538      	str	r0, [r7, #80]	; 0x50
            if( cal_crc != ota_fw_crc )
 8000896:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <etx_process_data+0x350>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800089c:	429a      	cmp	r2, r3
 800089e:	d003      	beq.n	80008a8 <etx_process_data+0x220>
            {
              printf("ERROR: FW CRC Mismatch\r\n");
 80008a0:	4858      	ldr	r0, [pc, #352]	; (8000a04 <etx_process_data+0x37c>)
 80008a2:	f008 fbf5 	bl	8009090 <puts>
 80008a6:	e0be      	b.n	8000a26 <etx_process_data+0x39e>
              break;
            }
            printf("Done!!!\r\n");
 80008a8:	4857      	ldr	r0, [pc, #348]	; (8000a08 <etx_process_data+0x380>)
 80008aa:	f008 fbf1 	bl	8009090 <puts>

            /* Read the configuration */
            ETX_GNRL_CFG_ cfg;
            memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 80008ae:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <etx_process_data+0x360>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461c      	mov	r4, r3
 80008b4:	f107 060c 	add.w	r6, r7, #12
 80008b8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80008bc:	4635      	mov	r5, r6
 80008be:	4623      	mov	r3, r4
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	6859      	ldr	r1, [r3, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ca:	3410      	adds	r4, #16
 80008cc:	3610      	adds	r6, #16
 80008ce:	4564      	cmp	r4, ip
 80008d0:	d1f4      	bne.n	80008bc <etx_process_data+0x234>
 80008d2:	4632      	mov	r2, r6
 80008d4:	4623      	mov	r3, r4
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	8013      	strh	r3, [r2, #0]

            //update the slot
            cfg.slot_table[slot_num_to_write].fw_crc                 = cal_crc;
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <etx_process_data+0x358>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008ee:	4413      	add	r3, r2
 80008f0:	3b5c      	subs	r3, #92	; 0x5c
 80008f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008f4:	f8c3 200b 	str.w	r2, [r3, #11]
            cfg.slot_table[slot_num_to_write].fw_size                = ota_fw_total_size;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <etx_process_data+0x358>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <etx_process_data+0x34c>)
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000910:	4413      	add	r3, r2
 8000912:	3b5c      	subs	r3, #92	; 0x5c
 8000914:	f8c3 1007 	str.w	r1, [r3, #7]
            cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 0u;
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <etx_process_data+0x358>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800092c:	4413      	add	r3, r2
 800092e:	3b58      	subs	r3, #88	; 0x58
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
            cfg.slot_table[slot_num_to_write].should_we_run_this_fw  = 1u;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <etx_process_data+0x358>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000948:	4413      	add	r3, r2
 800094a:	3b56      	subs	r3, #86	; 0x56
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]

            //reset other slots
            for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000950:	2300      	movs	r3, #0
 8000952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000956:	e017      	b.n	8000988 <etx_process_data+0x300>
            {
              if( slot_num_to_write != i )
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <etx_process_data+0x358>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000960:	429a      	cmp	r2, r3
 8000962:	d00c      	beq.n	800097e <etx_process_data+0x2f6>
              {
                //update the slot as inactive
                cfg.slot_table[i].should_we_run_this_fw = 0u;
 8000964:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000976:	4413      	add	r3, r2
 8000978:	3b56      	subs	r3, #86	; 0x56
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800097e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000982:	3301      	adds	r3, #1
 8000984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800098c:	2b01      	cmp	r3, #1
 800098e:	d9e3      	bls.n	8000958 <etx_process_data+0x2d0>
              }
            }

            //update the reboot reason
            cfg.reboot_cause = ETX_NORMAL_BOOT;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <etx_process_data+0x384>)
 8000992:	60fb      	str	r3, [r7, #12]

            /* write back the updated config */
            ret = write_cfg_to_flash( &cfg );
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fdeb 	bl	8001574 <write_cfg_to_flash>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if( ret == ETX_OTA_EX_OK )
 80009a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d13b      	bne.n	8000a24 <etx_process_data+0x39c>
            {
              ota_state = ETX_OTA_STATE_IDLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <etx_process_data+0x340>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
              ret = ETX_OTA_EX_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
          }
        }
      }
      break;
 80009b8:	e034      	b.n	8000a24 <etx_process_data+0x39c>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      }
      break;
 80009c0:	e031      	b.n	8000a26 <etx_process_data+0x39e>
    };
 80009c2:	bf00      	nop
 80009c4:	e02f      	b.n	8000a26 <etx_process_data+0x39e>
 80009c6:	bf00      	nop
 80009c8:	200004b1 	.word	0x200004b1
 80009cc:	08009f64 	.word	0x08009f64
 80009d0:	08009f7c 	.word	0x08009f7c
 80009d4:	200004b4 	.word	0x200004b4
 80009d8:	200004b8 	.word	0x200004b8
 80009dc:	08009f98 	.word	0x08009f98
 80009e0:	200004c0 	.word	0x200004c0
 80009e4:	200004bc 	.word	0x200004bc
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08009fc0 	.word	0x08009fc0
 80009f0:	08009fcc 	.word	0x08009fcc
 80009f4:	08009fe8 	.word	0x08009fe8
 80009f8:	080c0000 	.word	0x080c0000
 80009fc:	08140000 	.word	0x08140000
 8000a00:	2000078c 	.word	0x2000078c
 8000a04:	0800a00c 	.word	0x0800a00c
 8000a08:	0800a024 	.word	0x0800a024
 8000a0c:	beeffeed 	.word	0xbeeffeed
        break;
 8000a10:	bf00      	nop
 8000a12:	e008      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a14:	bf00      	nop
 8000a16:	e006      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a18:	bf00      	nop
 8000a1a:	e004      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <etx_process_data+0x39e>
              break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a24:	bf00      	nop
  }while( false );

  return ret;
 8000a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	376c      	adds	r7, #108	; 0x6c
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a32:	bf00      	nop

08000a34 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index        = 0u;
 8000a40:	2300      	movs	r3, #0
 8000a42:	83bb      	strh	r3, [r7, #28]
  uint16_t data_len;
  uint32_t cal_data_crc = 0u;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  uint32_t rec_data_crc = 0u;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000a4c:	8bbb      	ldrh	r3, [r7, #28]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	18d1      	adds	r1, r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2201      	movs	r2, #1
 8000a58:	4864      	ldr	r0, [pc, #400]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000a5a:	f004 f844 	bl	8004ae6 <HAL_UART_Receive>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000a62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 809e 	bne.w	8000ba8 <etx_receive_chunk+0x174>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 8000a6c:	8bbb      	ldrh	r3, [r7, #28]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	83ba      	strh	r2, [r7, #28]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2baa      	cmp	r3, #170	; 0xaa
 8000a7c:	d002      	beq.n	8000a84 <etx_receive_chunk+0x50>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	83fb      	strh	r3, [r7, #30]
      break;
 8000a82:	e09c      	b.n	8000bbe <etx_receive_chunk+0x18a>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000a84:	8bbb      	ldrh	r3, [r7, #28]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	83ba      	strh	r2, [r7, #28]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1899      	adds	r1, r3, r2
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2201      	movs	r2, #1
 8000a96:	4855      	ldr	r0, [pc, #340]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000a98:	f004 f825 	bl	8004ae6 <HAL_UART_Receive>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000aa0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f040 8081 	bne.w	8000bac <etx_receive_chunk+0x178>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000aaa:	8bbb      	ldrh	r3, [r7, #28]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	18d1      	adds	r1, r2, r3
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	484d      	ldr	r0, [pc, #308]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000ab8:	f004 f815 	bl	8004ae6 <HAL_UART_Receive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000ac0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d173      	bne.n	8000bb0 <etx_receive_chunk+0x17c>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000ac8:	8bbb      	ldrh	r3, [r7, #28]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	81fb      	strh	r3, [r7, #14]
    index += 2u;
 8000ad2:	8bbb      	ldrh	r3, [r7, #28]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	83bb      	strh	r3, [r7, #28]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000ad8:	2300      	movs	r3, #0
 8000ada:	837b      	strh	r3, [r7, #26]
 8000adc:	e014      	b.n	8000b08 <etx_receive_chunk+0xd4>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000ade:	8bbb      	ldrh	r3, [r7, #28]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	83ba      	strh	r2, [r7, #28]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1899      	adds	r1, r3, r2
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	2201      	movs	r2, #1
 8000af0:	483e      	ldr	r0, [pc, #248]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000af2:	f003 fff8 	bl	8004ae6 <HAL_UART_Receive>
 8000af6:	4603      	mov	r3, r0
 8000af8:	83fb      	strh	r3, [r7, #30]
      if( ret != HAL_OK )
 8000afa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <etx_receive_chunk+0xde>
    for( uint16_t i = 0u; i < data_len; i++ )
 8000b02:	8b7b      	ldrh	r3, [r7, #26]
 8000b04:	3301      	adds	r3, #1
 8000b06:	837b      	strh	r3, [r7, #26]
 8000b08:	8b7a      	ldrh	r2, [r7, #26]
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3e6      	bcc.n	8000ade <etx_receive_chunk+0xaa>
 8000b10:	e000      	b.n	8000b14 <etx_receive_chunk+0xe0>
      {
        break;
 8000b12:	bf00      	nop
      }
    }

    if( ret != HAL_OK )
 8000b14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14b      	bne.n	8000bb4 <etx_receive_chunk+0x180>
    {
      break;
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 8000b1c:	8bbb      	ldrh	r3, [r7, #28]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	18d1      	adds	r1, r2, r3
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	2204      	movs	r2, #4
 8000b28:	4830      	ldr	r0, [pc, #192]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000b2a:	f003 ffdc 	bl	8004ae6 <HAL_UART_Receive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000b32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d13e      	bne.n	8000bb8 <etx_receive_chunk+0x184>
    {
      break;
    }
    rec_data_crc = *(uint32_t *)&buf[index];
 8000b3a:	8bbb      	ldrh	r3, [r7, #28]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
    index += 4u;
 8000b44:	8bbb      	ldrh	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	83bb      	strh	r3, [r7, #28]

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000b4a:	8bbb      	ldrh	r3, [r7, #28]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	18d1      	adds	r1, r2, r3
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2201      	movs	r2, #1
 8000b56:	4825      	ldr	r0, [pc, #148]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000b58:	f003 ffc5 	bl	8004ae6 <HAL_UART_Receive>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000b60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d129      	bne.n	8000bbc <etx_receive_chunk+0x188>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 8000b68:	8bbb      	ldrh	r3, [r7, #28]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	83ba      	strh	r2, [r7, #28]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2bbb      	cmp	r3, #187	; 0xbb
 8000b78:	d002      	beq.n	8000b80 <etx_receive_chunk+0x14c>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	83fb      	strh	r3, [r7, #30]
      break;
 8000b7e:	e01e      	b.n	8000bbe <etx_receive_chunk+0x18a>
    }

    //Calculate the received data's CRC
    cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&buf[4], data_len);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3304      	adds	r3, #4
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <etx_receive_chunk+0x1bc>)
 8000b8a:	f001 fbcd 	bl	8002328 <HAL_CRC_Calculate>
 8000b8e:	6178      	str	r0, [r7, #20]

    //Verify the CRC
    if( cal_data_crc != rec_data_crc )
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d012      	beq.n	8000bbe <etx_receive_chunk+0x18a>
    {
      printf("Chunk's CRC mismatch [Cal CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	6979      	ldr	r1, [r7, #20]
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <etx_receive_chunk+0x1c0>)
 8000b9e:	f008 f9f1 	bl	8008f84 <iprintf>
                                                   cal_data_crc, rec_data_crc );
      ret = ETX_OTA_EX_ERR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	83fb      	strh	r3, [r7, #30]
      break;
 8000ba6:	e00a      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000ba8:	bf00      	nop
 8000baa:	e008      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bac:	bf00      	nop
 8000bae:	e006      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb0:	bf00      	nop
 8000bb2:	e004      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bbc:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000bbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <etx_receive_chunk+0x196>
  {
    //clear the index if error
    index = 0u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	83bb      	strh	r3, [r7, #28]
  }

  if( max_len < index )
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	8bbb      	ldrh	r3, [r7, #28]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d207      	bcs.n	8000be2 <etx_receive_chunk+0x1ae>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	8bba      	ldrh	r2, [r7, #28]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <etx_receive_chunk+0x1c4>)
 8000bda:	f008 f9d3 	bl	8008f84 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	83bb      	strh	r3, [r7, #28]
  }

  return index;
 8000be2:	8bbb      	ldrh	r3, [r7, #28]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000814 	.word	0x20000814
 8000bf0:	2000078c 	.word	0x2000078c
 8000bf4:	0800a030 	.word	0x0800a030
 8000bf8:	0800a070 	.word	0x0800a070

08000bfc <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	811a      	strh	r2, [r3, #8]
 8000c12:	23aa      	movs	r3, #170	; 0xaa
 8000c14:	733b      	strb	r3, [r7, #12]
 8000c16:	2303      	movs	r3, #3
 8000c18:	737b      	strb	r3, [r7, #13]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	81fb      	strh	r3, [r7, #14]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	743b      	strb	r3, [r7, #16]
 8000c22:	23bb      	movs	r3, #187	; 0xbb
 8000c24:	757b      	strb	r3, [r7, #21]
    .data_len    = 1u,
    .status      = type,
    .eof         = ETX_OTA_EOF
  };

  rsp.crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&rsp.status, 1);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <etx_ota_send_resp+0x58>)
 8000c32:	f001 fb79 	bl	8002328 <HAL_CRC_Calculate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f8c7 3011 	str.w	r3, [r7, #17]

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	220a      	movs	r2, #10
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <etx_ota_send_resp+0x5c>)
 8000c48:	f003 feba 	bl	80049c0 <HAL_UART_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000078c 	.word	0x2000078c
 8000c58:	20000814 	.word	0x20000814

08000c5c <write_data_to_slot>:
  */
static HAL_StatusTypeDef write_data_to_slot( uint8_t slot_num,
                                             uint8_t *data,
                                             uint16_t data_len,
                                             bool is_first_block )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6039      	str	r1, [r7, #0]
 8000c64:	4611      	mov	r1, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	80bb      	strh	r3, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;

  do
  {

    if( slot_num >= ETX_NO_OF_SLOTS )
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d903      	bls.n	8000c82 <write_data_to_slot+0x26>
    {
      ret = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8000c80:	e072      	b.n	8000d68 <write_data_to_slot+0x10c>
    }

    ret = HAL_FLASH_Unlock();
 8000c82:	f001 fd47 	bl	8002714 <HAL_FLASH_Unlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d166      	bne.n	8000d62 <write_data_to_slot+0x106>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d025      	beq.n	8000ce6 <write_data_to_slot+0x8a>
    {
      printf("Erasing the Slot %d Flash memory...\r\n", slot_num);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4835      	ldr	r0, [pc, #212]	; (8000d74 <write_data_to_slot+0x118>)
 8000ca0:	f008 f970 	bl	8008f84 <iprintf>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
      if( slot_num == 0 )
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <write_data_to_slot+0x58>
      {
        EraseInitStruct.Sector        = FLASH_SECTOR_7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	e001      	b.n	8000cb8 <write_data_to_slot+0x5c>
      }
      else
      {
        EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8000cb4:	2309      	movs	r3, #9
 8000cb6:	61bb      	str	r3, [r7, #24]
      }
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fe84 	bl	80029d8 <HAL_FLASHEx_Erase>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if( ret != HAL_OK )
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <write_data_to_slot+0x8a>
      {
        printf("Flash Erase Error\r\n");
 8000cde:	4826      	ldr	r0, [pc, #152]	; (8000d78 <write_data_to_slot+0x11c>)
 8000ce0:	f008 f9d6 	bl	8009090 <puts>
 8000ce4:	e040      	b.n	8000d68 <write_data_to_slot+0x10c>
        break;
      }
    }

    uint32_t flash_addr;
    if( slot_num == 0 )
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <write_data_to_slot+0x96>
    {
      flash_addr = ETX_APP_SLOT0_FLASH_ADDR;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <write_data_to_slot+0x120>)
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	e001      	b.n	8000cf6 <write_data_to_slot+0x9a>
    }
    else
    {
      flash_addr = ETX_APP_SLOT1_FLASH_ADDR;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <write_data_to_slot+0x124>)
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    for(int i = 0; i < data_len; i++ )
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	e021      	b.n	8000d40 <write_data_to_slot+0xe4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <write_data_to_slot+0x128>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	18d1      	adds	r1, r2, r3
                               (flash_addr + ota_fw_received_size),
                               data[i]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f001 fca2 	bl	800265c <HAL_FLASH_Program>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret == HAL_OK )
 8000d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <write_data_to_slot+0xd6>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <write_data_to_slot+0x128>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <write_data_to_slot+0x128>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e003      	b.n	8000d3a <write_data_to_slot+0xde>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <write_data_to_slot+0x12c>)
 8000d34:	f008 f9ac 	bl	8009090 <puts>
        break;
 8000d38:	e006      	b.n	8000d48 <write_data_to_slot+0xec>
    for(int i = 0; i < data_len; i++ )
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbd9      	blt.n	8000cfc <write_data_to_slot+0xa0>
      }
    }

    if( ret != HAL_OK )
 8000d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10a      	bne.n	8000d66 <write_data_to_slot+0x10a>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000d50:	f001 fd02 	bl	8002758 <HAL_FLASH_Lock>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8000d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	e002      	b.n	8000d68 <write_data_to_slot+0x10c>
      break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <write_data_to_slot+0x10c>
      break;
 8000d66:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	0800a0b4 	.word	0x0800a0b4
 8000d78:	0800a0dc 	.word	0x0800a0dc
 8000d7c:	080c0000 	.word	0x080c0000
 8000d80:	08140000 	.word	0x08140000
 8000d84:	200004bc 	.word	0x200004bc
 8000d88:	0800a0f0 	.word	0x0800a0f0

08000d8c <get_available_slot_number>:
  * @brief Return the available slot number
  * @param none
  * @retval slot number
  */
static uint8_t get_available_slot_number( void )
{
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b08f      	sub	sp, #60	; 0x3c
 8000d90:	af00      	add	r7, sp, #0
  uint8_t   slot_number = 0xFF;
 8000d92:	23ff      	movs	r3, #255	; 0xff
 8000d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Read the configuration */
  ETX_GNRL_CFG_ cfg;
  memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <get_available_slot_number+0xac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	461c      	mov	r4, r3
 8000d9e:	1d3e      	adds	r6, r7, #4
 8000da0:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000da4:	4635      	mov	r5, r6
 8000da6:	4623      	mov	r3, r4
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	3410      	adds	r4, #16
 8000db4:	3610      	adds	r6, #16
 8000db6:	4564      	cmp	r4, ip
 8000db8:	d1f4      	bne.n	8000da4 <get_available_slot_number+0x18>
 8000dba:	4632      	mov	r2, r6
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	8013      	strh	r3, [r2, #0]
   * If it is valid and not active, then use that slot.
   * If it is not valid, then use that slot.
   *
   */

   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000dc8:	e02b      	b.n	8000e22 <get_available_slot_number+0x96>
   {
     if( ( cfg.slot_table[i].is_this_slot_not_valid != 0u ) || ( cfg.slot_table[i].is_this_slot_active == 0u ) )
 8000dca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b30      	subs	r3, #48	; 0x30
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <get_available_slot_number+0x76>
 8000de6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b2f      	subs	r3, #47	; 0x2f
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10a      	bne.n	8000e18 <get_available_slot_number+0x8c>
     {
       slot_number = i;
 8000e02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
       printf("Slot %d is available for OTA update\r\n", slot_number);
 8000e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <get_available_slot_number+0xb0>)
 8000e12:	f008 f8b7 	bl	8008f84 <iprintf>
       break;
 8000e16:	e008      	b.n	8000e2a <get_available_slot_number+0x9e>
   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000e18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000e22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d9cf      	bls.n	8000dca <get_available_slot_number+0x3e>
     }
   }

   return slot_number;
 8000e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	373c      	adds	r7, #60	; 0x3c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	0800a104 	.word	0x0800a104

08000e40 <write_data_to_flash_app>:
  * @param data data to be written
  * @param data_len data length
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data, uint32_t data_len )
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000e4a:	f001 fc63 	bl	8002714 <HAL_FLASH_Unlock>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d158      	bne.n	8000f0e <write_data_to_flash_app+0xce>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f001 fc8a 	bl	8002778 <FLASH_WaitForLastOperation>

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <write_data_to_flash_app+0xe4>)
 8000e66:	2273      	movs	r2, #115	; 0x73
 8000e68:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    printf("Erasing the App Flash memory...\r\n");
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <write_data_to_flash_app+0xe8>)
 8000e6c:	f008 f910 	bl	8009090 <puts>
    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000e74:	2305      	movs	r3, #5
 8000e76:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000e80:	f107 0208 	add.w	r2, r7, #8
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fda4 	bl	80029d8 <HAL_FLASHEx_Erase>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <write_data_to_flash_app+0x66>
    {
      printf("Flash erase Error\r\n");
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <write_data_to_flash_app+0xec>)
 8000ea0:	f008 f8f6 	bl	8009090 <puts>
      break;
 8000ea4:	e038      	b.n	8000f18 <write_data_to_flash_app+0xd8>
    }

    for( uint32_t i = 0; i < data_len; i++ )
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	e01a      	b.n	8000ee2 <write_data_to_flash_app+0xa2>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	4920      	ldr	r1, [pc, #128]	; (8000f30 <write_data_to_flash_app+0xf0>)
 8000eb0:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + i),
                               data[i]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f001 fbcb 	bl	800265c <HAL_FLASH_Program>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret != HAL_OK )
 8000ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <write_data_to_flash_app+0x9c>
      {
        printf("App Flash Write Error\r\n");
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <write_data_to_flash_app+0xf4>)
 8000ed6:	f008 f8db 	bl	8009090 <puts>
        break;
 8000eda:	e006      	b.n	8000eea <write_data_to_flash_app+0xaa>
    for( uint32_t i = 0; i < data_len; i++ )
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
 8000ee2:	6a3a      	ldr	r2, [r7, #32]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3e0      	bcc.n	8000eac <write_data_to_flash_app+0x6c>
      }
    }

    if( ret != HAL_OK )
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <write_data_to_flash_app+0xd2>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000ef2:	f001 fc31 	bl	8002758 <HAL_FLASH_Lock>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <write_data_to_flash_app+0xd6>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f001 fc36 	bl	8002778 <FLASH_WaitForLastOperation>
 8000f0c:	e004      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f0e:	bf00      	nop
 8000f10:	e002      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f16:	bf00      	nop

  }while( false );

  return ret;
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023c00 	.word	0x40023c00
 8000f28:	0800a12c 	.word	0x0800a12c
 8000f2c:	0800a150 	.word	0x0800a150
 8000f30:	08040000 	.word	0x08040000
 8000f34:	0800a164 	.word	0x0800a164

08000f38 <load_new_app>:
  * @brief Load the new app to the app's actual flash memory.
  * @param none
  * @retval none
  */
void load_new_app( void )
{
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b093      	sub	sp, #76	; 0x4c
 8000f3c:	af00      	add	r7, sp, #0
  bool              is_update_available = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t           slot_num;
  HAL_StatusTypeDef ret;

  /* Read the configuration */
  ETX_GNRL_CFG_ cfg;
  memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8000f44:	4b85      	ldr	r3, [pc, #532]	; (800115c <load_new_app+0x224>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461c      	mov	r4, r3
 8000f4a:	1d3e      	adds	r6, r7, #4
 8000f4c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000f50:	4635      	mov	r5, r6
 8000f52:	4623      	mov	r3, r4
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	3410      	adds	r4, #16
 8000f60:	3610      	adds	r6, #16
 8000f62:	4564      	cmp	r4, ip
 8000f64:	d1f4      	bne.n	8000f50 <load_new_app+0x18>
 8000f66:	4632      	mov	r2, r6
 8000f68:	4623      	mov	r3, r4
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	8013      	strh	r3, [r2, #0]

  /*
   * Check the slot whether it has a new application.
   */

   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000f74:	e03a      	b.n	8000fec <load_new_app+0xb4>
   {
     if( cfg.slot_table[i].should_we_run_this_fw == 1u )
 8000f76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b3e      	subs	r3, #62	; 0x3e
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d127      	bne.n	8000fe2 <load_new_app+0xaa>
     {
       printf("New Application is available in the slot %d!!!\r\n", i);
 8000f92:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000f96:	4619      	mov	r1, r3
 8000f98:	4871      	ldr	r0, [pc, #452]	; (8001160 <load_new_app+0x228>)
 8000f9a:	f007 fff3 	bl	8008f84 <iprintf>
       is_update_available               = true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
       slot_num                          = i;
 8000fa4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000fa8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

       //update the slot
       cfg.slot_table[i].is_this_slot_active    = 1u;
 8000fac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b3f      	subs	r3, #63	; 0x3f
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
       cfg.slot_table[i].should_we_run_this_fw  = 0u;
 8000fc6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b3e      	subs	r3, #62	; 0x3e
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]

       break;
 8000fe0:	e008      	b.n	8000ff4 <load_new_app+0xbc>
   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000fe2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000fec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d9c0      	bls.n	8000f76 <load_new_app+0x3e>
     }
   }

   if( is_update_available )
 8000ff4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d053      	beq.n	80010a4 <load_new_app+0x16c>
   {
     //make other slots inactive
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001002:	e017      	b.n	8001034 <load_new_app+0xfc>
     {
       if( slot_num != i )
 8001004:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001008:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800100c:	429a      	cmp	r2, r3
 800100e:	d00c      	beq.n	800102a <load_new_app+0xf2>
       {
         //update the slot as inactive
         cfg.slot_table[i].is_this_slot_active = 0u;
 8001010:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001022:	4413      	add	r3, r2
 8001024:	3b3f      	subs	r3, #63	; 0x3f
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800102a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800102e:	3301      	adds	r3, #1
 8001030:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001034:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001038:	2b01      	cmp	r3, #1
 800103a:	d9e3      	bls.n	8001004 <load_new_app+0xcc>
       }
     }

     uint32_t slot_addr;
     if( slot_num == 0u )
 800103c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <load_new_app+0x112>
     {
       slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <load_new_app+0x22c>)
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
 8001048:	e001      	b.n	800104e <load_new_app+0x116>
     }
     else
     {
       slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 800104a:	4b47      	ldr	r3, [pc, #284]	; (8001168 <load_new_app+0x230>)
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
     }

     //Load the new app or firmware to app's flash address
     ret = write_data_to_flash_app( (uint8_t*)slot_addr, cfg.slot_table[slot_num].fw_size );
 800104e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001050:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001062:	4413      	add	r3, r2
 8001064:	3b44      	subs	r3, #68	; 0x44
 8001066:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fee8 	bl	8000e40 <write_data_to_flash_app>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
     if( ret != HAL_OK )
 8001076:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <load_new_app+0x14e>
     {
       printf("App Flash write Error\r\n");
 800107e:	483b      	ldr	r0, [pc, #236]	; (800116c <load_new_app+0x234>)
 8001080:	f008 f806 	bl	8009090 <puts>
 8001084:	e02e      	b.n	80010e4 <load_new_app+0x1ac>
     }
     else
     {
       /* write back the updated config */
       ret = write_cfg_to_flash( &cfg );
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fa73 	bl	8001574 <write_cfg_to_flash>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
       if( ret != HAL_OK )
 8001094:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001098:	2b00      	cmp	r3, #0
 800109a:	d023      	beq.n	80010e4 <load_new_app+0x1ac>
       {
         printf("Config Flash write Error\r\n");
 800109c:	4834      	ldr	r0, [pc, #208]	; (8001170 <load_new_app+0x238>)
 800109e:	f007 fff7 	bl	8009090 <puts>
 80010a2:	e01f      	b.n	80010e4 <load_new_app+0x1ac>
     }
   }
   else
   {
     //Find the active slot in case the update is not available
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010aa:	e017      	b.n	80010dc <load_new_app+0x1a4>
     {
       if( cfg.slot_table[i].is_this_slot_active == 1u )
 80010ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010be:	4413      	add	r3, r2
 80010c0:	3b3f      	subs	r3, #63	; 0x3f
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d104      	bne.n	80010d2 <load_new_app+0x19a>
       {
         slot_num = i;
 80010c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
         break;
 80010d0:	e008      	b.n	80010e4 <load_new_app+0x1ac>
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 80010d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d9e3      	bls.n	80010ac <load_new_app+0x174>
       }
     }
   }

   //Verify the application is corrupted or not
   printf("Verifying the Application...");
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <load_new_app+0x23c>)
 80010e6:	f007 ff4d 	bl	8008f84 <iprintf>

   FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	f001 fb43 	bl	8002778 <FLASH_WaitForLastOperation>
   //Verify the application
   uint32_t cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)ETX_APP_FLASH_ADDR, cfg.slot_table[slot_num].fw_size );
 80010f2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001104:	4413      	add	r3, r2
 8001106:	3b44      	subs	r3, #68	; 0x44
 8001108:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800110c:	461a      	mov	r2, r3
 800110e:	491a      	ldr	r1, [pc, #104]	; (8001178 <load_new_app+0x240>)
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <load_new_app+0x244>)
 8001112:	f001 f909 	bl	8002328 <HAL_CRC_Calculate>
 8001116:	63b8      	str	r0, [r7, #56]	; 0x38
   FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f001 fb2c 	bl	8002778 <FLASH_WaitForLastOperation>

   //Verify the CRC
   if( cal_data_crc != cfg.slot_table[slot_num].fw_crc )
 8001120:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001132:	4413      	add	r3, r2
 8001134:	3b44      	subs	r3, #68	; 0x44
 8001136:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800113a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800113c:	429a      	cmp	r2, r3
 800113e:	d006      	beq.n	800114e <load_new_app+0x216>
   {
     printf("ERROR!!!\r\n");
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <load_new_app+0x248>)
 8001142:	f007 ffa5 	bl	8009090 <puts>
     printf("Invalid Application. HALT!!!\r\n");
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <load_new_app+0x24c>)
 8001148:	f007 ffa2 	bl	8009090 <puts>
     while(1);
 800114c:	e7fe      	b.n	800114c <load_new_app+0x214>
   }
   printf("Done!!!\r\n");
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <load_new_app+0x250>)
 8001150:	f007 ff9e 	bl	8009090 <puts>
}
 8001154:	bf00      	nop
 8001156:	374c      	adds	r7, #76	; 0x4c
 8001158:	46bd      	mov	sp, r7
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	0800a17c 	.word	0x0800a17c
 8001164:	080c0000 	.word	0x080c0000
 8001168:	08140000 	.word	0x08140000
 800116c:	0800a1b0 	.word	0x0800a1b0
 8001170:	0800a1c8 	.word	0x0800a1c8
 8001174:	0800a1e4 	.word	0x0800a1e4
 8001178:	08040000 	.word	0x08040000
 800117c:	2000078c 	.word	0x2000078c
 8001180:	0800a204 	.word	0x0800a204
 8001184:	0800a210 	.word	0x0800a210
 8001188:	0800a024 	.word	0x0800a024

0800118c <check_update_frimware_SD_card>:
  * @brief Check the SD for Firmware update
  * @param none
  * @retval ETX_SD_EX_
  */
ETX_SD_EX_ check_update_frimware_SD_card( void )
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	f6ad 0dc4 	subw	sp, sp, #2244	; 0x8c4
 8001192:	af00      	add	r7, sp, #0
  ETX_SD_EX_  ret = ETX_SD_EX_ERR;
 8001194:	2303      	movs	r3, #3
 8001196:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
  FRESULT     fres;                 //Result after operations

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800119a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800119e:	2201      	movs	r2, #1
 80011a0:	49ce      	ldr	r1, [pc, #824]	; (80014dc <check_update_frimware_SD_card+0x350>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 f904 	bl	80083b0 <f_mount>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
    if (fres != FR_OK)
 80011ae:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <check_update_frimware_SD_card+0x3e>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 80011b6:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011ba:	4619      	mov	r1, r3
 80011bc:	48c8      	ldr	r0, [pc, #800]	; (80014e0 <check_update_frimware_SD_card+0x354>)
 80011be:	f007 fee1 	bl	8008f84 <iprintf>
      ret = ETX_SD_EX_NO_SD;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      break;
 80011c8:	e1bd      	b.n	8001546 <check_update_frimware_SD_card+0x3ba>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 80011ca:	48c6      	ldr	r0, [pc, #792]	; (80014e4 <check_update_frimware_SD_card+0x358>)
 80011cc:	f007 ff60 	bl	8009090 <puts>

    fres = f_open(&fil, ETX_SD_CARD_FW_PATH, FA_WRITE | FA_READ | FA_OPEN_EXISTING);
 80011d0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80011d4:	2203      	movs	r2, #3
 80011d6:	49c4      	ldr	r1, [pc, #784]	; (80014e8 <check_update_frimware_SD_card+0x35c>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f007 f92f 	bl	800843c <f_open>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
    if(fres != FR_OK)
 80011e4:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <check_update_frimware_SD_card+0x6e>
    {
      printf("No Firmware found in SD Card : (%i)\r\n", fres);
 80011ec:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011f0:	4619      	mov	r1, r3
 80011f2:	48be      	ldr	r0, [pc, #760]	; (80014ec <check_update_frimware_SD_card+0x360>)
 80011f4:	f007 fec6 	bl	8008f84 <iprintf>
      break;
 80011f8:	e1a5      	b.n	8001546 <check_update_frimware_SD_card+0x3ba>
    }

    UINT bytesRead;
    BYTE readBuf[ETX_OTA_DATA_MAX_SIZE];
    UINT fw_size = f_size(&fil);
 80011fa:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
    UINT size;

    printf("Firmware found in SD Card. \r\nFW Size = %d Bytes\r\n", fw_size);
 8001204:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 8001208:	48b9      	ldr	r0, [pc, #740]	; (80014f0 <check_update_frimware_SD_card+0x364>)
 800120a:	f007 febb 	bl	8008f84 <iprintf>

    //get the slot number
    slot_num_to_write = get_available_slot_number();
 800120e:	f7ff fdbd 	bl	8000d8c <get_available_slot_number>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4bb7      	ldr	r3, [pc, #732]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001218:	701a      	strb	r2, [r3, #0]
    if( slot_num_to_write == 0xFF )
 800121a:	4bb6      	ldr	r3, [pc, #728]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2bff      	cmp	r3, #255	; 0xff
 8001220:	d10e      	bne.n	8001240 <check_update_frimware_SD_card+0xb4>
    {
      printf("f_getfree error (%i)\r\n", fres);
 8001222:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 8001226:	4619      	mov	r1, r3
 8001228:	48b3      	ldr	r0, [pc, #716]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 800122a:	f007 feab 	bl	8008f84 <iprintf>
      ret = ETX_SD_EX_FU_ERR;
 800122e:	2302      	movs	r3, #2
 8001230:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      f_close(&fil);
 8001234:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fc7a 	bl	8008b32 <f_close>
      break;
 800123e:	e182      	b.n	8001546 <check_update_frimware_SD_card+0x3ba>
    }

    bool is_first_block = true;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 38b7 	strb.w	r3, [r7, #2231]	; 0x8b7

    /* Read the configuration */
    ETX_GNRL_CFG_ cfg;
    memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8001246:	4bad      	ldr	r3, [pc, #692]	; (80014fc <check_update_frimware_SD_card+0x370>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	463b      	mov	r3, r7
 800124c:	4614      	mov	r4, r2
 800124e:	461e      	mov	r6, r3
 8001250:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001254:	4635      	mov	r5, r6
 8001256:	4623      	mov	r3, r4
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001262:	3410      	adds	r4, #16
 8001264:	3610      	adds	r6, #16
 8001266:	4564      	cmp	r4, ip
 8001268:	d1f4      	bne.n	8001254 <check_update_frimware_SD_card+0xc8>
 800126a:	4632      	mov	r2, r6
 800126c:	4623      	mov	r3, r4
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	8013      	strh	r3, [r2, #0]

    /* Before writing the data, reset the available slot */
    cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 1u;
 8001272:	4ba0      	ldr	r3, [pc, #640]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4639      	mov	r1, r7
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	440b      	add	r3, r1
 8001286:	3304      	adds	r3, #4
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]

    /* write back the updated config */
    HAL_StatusTypeDef ex = write_cfg_to_flash( &cfg );
 800128c:	463b      	mov	r3, r7
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f970 	bl	8001574 <write_cfg_to_flash>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 38a3 	strb.w	r3, [r7, #2211]	; 0x8a3
    if( ex != HAL_OK )
 800129a:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d008      	beq.n	80012b4 <check_update_frimware_SD_card+0x128>
    {
      ret = ETX_SD_EX_FU_ERR;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      f_close(&fil);
 80012a8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80012ac:	4618      	mov	r0, r3
 80012ae:	f007 fc40 	bl	8008b32 <f_close>
      break;
 80012b2:	e148      	b.n	8001546 <check_update_frimware_SD_card+0x3ba>
    }

    ota_fw_received_size = 0;
 80012b4:	4b92      	ldr	r3, [pc, #584]	; (8001500 <check_update_frimware_SD_card+0x374>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]

    for(uint32_t i = 0; i < fw_size; )
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 38b0 	str.w	r3, [r7, #2224]	; 0x8b0
 80012c0:	e063      	b.n	800138a <check_update_frimware_SD_card+0x1fe>
    {
      if( (fw_size - i) >= ETX_OTA_DATA_MAX_SIZE )
 80012c2:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80012c6:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	d304      	bcc.n	80012dc <check_update_frimware_SD_card+0x150>
      {
        size = ETX_OTA_DATA_MAX_SIZE;
 80012d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d6:	f8c7 38b8 	str.w	r3, [r7, #2232]	; 0x8b8
 80012da:	e006      	b.n	80012ea <check_update_frimware_SD_card+0x15e>
      }
      else
      {
        size = fw_size - i;
 80012dc:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80012e0:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f8c7 38b8 	str.w	r3, [r7, #2232]	; 0x8b8
      }

      //clear the buffer
      memset(readBuf, 0, ETX_OTA_DATA_MAX_SIZE);
 80012ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 fe3d 	bl	8008f74 <memset>

      fres = f_read(&fil, readBuf, size, &bytesRead);
 80012fa:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80012fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001302:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8001306:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 800130a:	f007 fa55 	bl	80087b8 <f_read>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
      if( ( fres != FR_OK) || (size != bytesRead ) )
 8001314:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <check_update_frimware_SD_card+0x19e>
 800131c:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 8001326:	429a      	cmp	r2, r3
 8001328:	d009      	beq.n	800133e <check_update_frimware_SD_card+0x1b2>
      {
        printf("FW Read Error : (%i)\r\n", fres);
 800132a:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 800132e:	4619      	mov	r1, r3
 8001330:	4874      	ldr	r0, [pc, #464]	; (8001504 <check_update_frimware_SD_card+0x378>)
 8001332:	f007 fe27 	bl	8008f84 <iprintf>
        ret = ETX_SD_EX_FU_ERR;
 8001336:	2302      	movs	r3, #2
 8001338:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
        break;
 800133c:	e02b      	b.n	8001396 <check_update_frimware_SD_card+0x20a>
      }

      /* write the chunk to the Flash (Slot location) */
      ex = write_data_to_slot( slot_num_to_write, readBuf, size, is_first_block );
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001340:	7818      	ldrb	r0, [r3, #0]
 8001342:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8001346:	b29a      	uxth	r2, r3
 8001348:	f897 38b7 	ldrb.w	r3, [r7, #2231]	; 0x8b7
 800134c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001350:	f7ff fc84 	bl	8000c5c <write_data_to_slot>
 8001354:	4603      	mov	r3, r0
 8001356:	f887 38a3 	strb.w	r3, [r7, #2211]	; 0x8a3
      if( ex != HAL_OK )
 800135a:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <check_update_frimware_SD_card+0x1ea>
      {
        printf("Flash Erite Error : (%d)\r\n", ex);
 8001362:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 8001366:	4619      	mov	r1, r3
 8001368:	4867      	ldr	r0, [pc, #412]	; (8001508 <check_update_frimware_SD_card+0x37c>)
 800136a:	f007 fe0b 	bl	8008f84 <iprintf>
        ret = ETX_SD_EX_FU_ERR;
 800136e:	2302      	movs	r3, #2
 8001370:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
        break;
 8001374:	e00f      	b.n	8001396 <check_update_frimware_SD_card+0x20a>
      }

      is_first_block = false;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 38b7 	strb.w	r3, [r7, #2231]	; 0x8b7
      i += size;
 800137c:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 8001380:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8001384:	4413      	add	r3, r2
 8001386:	f8c7 38b0 	str.w	r3, [r7, #2224]	; 0x8b0
    for(uint32_t i = 0; i < fw_size; )
 800138a:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 800138e:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8001392:	429a      	cmp	r2, r3
 8001394:	d395      	bcc.n	80012c2 <check_update_frimware_SD_card+0x136>
    }

    if( ret == ETX_SD_EX_FU_ERR )
 8001396:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 800139a:	2b02      	cmp	r3, #2
 800139c:	d105      	bne.n	80013aa <check_update_frimware_SD_card+0x21e>
    {
      f_close(&fil);
 800139e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 fbc5 	bl	8008b32 <f_close>
      break;
 80013a8:	e0cd      	b.n	8001546 <check_update_frimware_SD_card+0x3ba>
    }

    uint32_t slot_addr;
    if( slot_num_to_write == 0u )
 80013aa:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <check_update_frimware_SD_card+0x22e>
    {
      slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 80013b2:	4b56      	ldr	r3, [pc, #344]	; (800150c <check_update_frimware_SD_card+0x380>)
 80013b4:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 80013b8:	e002      	b.n	80013c0 <check_update_frimware_SD_card+0x234>
    }
    else
    {
      slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 80013ba:	4b55      	ldr	r3, [pc, #340]	; (8001510 <check_update_frimware_SD_card+0x384>)
 80013bc:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    }

    //Calculate the CRC
    uint32_t cal_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)slot_addr, fw_size);
 80013c0:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 80013c4:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4852      	ldr	r0, [pc, #328]	; (8001514 <check_update_frimware_SD_card+0x388>)
 80013cc:	f000 ffac 	bl	8002328 <HAL_CRC_Calculate>
 80013d0:	f8c7 089c 	str.w	r0, [r7, #2204]	; 0x89c

    /* Read the configuration */
    memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 80013d4:	4b49      	ldr	r3, [pc, #292]	; (80014fc <check_update_frimware_SD_card+0x370>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	463b      	mov	r3, r7
 80013da:	4614      	mov	r4, r2
 80013dc:	461e      	mov	r6, r3
 80013de:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013e2:	4635      	mov	r5, r6
 80013e4:	4623      	mov	r3, r4
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	6859      	ldr	r1, [r3, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	3410      	adds	r4, #16
 80013f2:	3610      	adds	r6, #16
 80013f4:	4564      	cmp	r4, ip
 80013f6:	d1f4      	bne.n	80013e2 <check_update_frimware_SD_card+0x256>
 80013f8:	4632      	mov	r2, r6
 80013fa:	4623      	mov	r3, r4
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	8013      	strh	r3, [r2, #0]

    //update the slot
    cfg.slot_table[slot_num_to_write].fw_crc                 = cal_crc;
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4639      	mov	r1, r7
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	440b      	add	r3, r1
 8001414:	f8d7 289c 	ldr.w	r2, [r7, #2204]	; 0x89c
 8001418:	f8c3 200b 	str.w	r2, [r3, #11]
    cfg.slot_table[slot_num_to_write].fw_size                = fw_size;
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4639      	mov	r1, r7
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	440b      	add	r3, r1
 8001430:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 8001434:	f8c3 2007 	str.w	r2, [r3, #7]
    cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 0u;
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4639      	mov	r1, r7
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	440b      	add	r3, r1
 800144c:	3304      	adds	r3, #4
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    cfg.slot_table[slot_num_to_write].should_we_run_this_fw  = 1u;
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4639      	mov	r1, r7
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	440b      	add	r3, r1
 8001466:	3306      	adds	r3, #6
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]

    //reset other slots
    for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800146c:	2300      	movs	r3, #0
 800146e:	f887 38ab 	strb.w	r3, [r7, #2219]	; 0x8ab
 8001472:	e016      	b.n	80014a2 <check_update_frimware_SD_card+0x316>
    {
      if( slot_num_to_write != i )
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f897 28ab 	ldrb.w	r2, [r7, #2219]	; 0x8ab
 800147c:	429a      	cmp	r2, r3
 800147e:	d00b      	beq.n	8001498 <check_update_frimware_SD_card+0x30c>
      {
        //update the slot as inactive
        cfg.slot_table[i].should_we_run_this_fw = 0u;
 8001480:	f897 28ab 	ldrb.w	r2, [r7, #2219]	; 0x8ab
 8001484:	4639      	mov	r1, r7
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	440b      	add	r3, r1
 8001492:	3306      	adds	r3, #6
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8001498:	f897 38ab 	ldrb.w	r3, [r7, #2219]	; 0x8ab
 800149c:	3301      	adds	r3, #1
 800149e:	f887 38ab 	strb.w	r3, [r7, #2219]	; 0x8ab
 80014a2:	f897 38ab 	ldrb.w	r3, [r7, #2219]	; 0x8ab
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d9e4      	bls.n	8001474 <check_update_frimware_SD_card+0x2e8>
      }
    }

    //update the reboot reason
    cfg.reboot_cause = ETX_NORMAL_BOOT;
 80014aa:	463b      	mov	r3, r7
 80014ac:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <check_update_frimware_SD_card+0x38c>)
 80014ae:	601a      	str	r2, [r3, #0]

    /* write back the updated config */
    ex = write_cfg_to_flash( &cfg );
 80014b0:	463b      	mov	r3, r7
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f85e 	bl	8001574 <write_cfg_to_flash>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 38a3 	strb.w	r3, [r7, #2211]	; 0x8a3
    if( ex != HAL_OK )
 80014be:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d02a      	beq.n	800151c <check_update_frimware_SD_card+0x390>
    {
      printf("Flash Erite Error : (%d)\r\n", ex);
 80014c6:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 80014ca:	4619      	mov	r1, r3
 80014cc:	480e      	ldr	r0, [pc, #56]	; (8001508 <check_update_frimware_SD_card+0x37c>)
 80014ce:	f007 fd59 	bl	8008f84 <iprintf>
      ret = ETX_SD_EX_FU_ERR;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      break;
 80014d8:	e035      	b.n	8001546 <check_update_frimware_SD_card+0x3ba>
 80014da:	bf00      	nop
 80014dc:	0800a230 	.word	0x0800a230
 80014e0:	0800a234 	.word	0x0800a234
 80014e4:	0800a250 	.word	0x0800a250
 80014e8:	0800a274 	.word	0x0800a274
 80014ec:	0800a284 	.word	0x0800a284
 80014f0:	0800a2ac 	.word	0x0800a2ac
 80014f4:	200004c0 	.word	0x200004c0
 80014f8:	0800a2e0 	.word	0x0800a2e0
 80014fc:	20000000 	.word	0x20000000
 8001500:	200004bc 	.word	0x200004bc
 8001504:	0800a2f8 	.word	0x0800a2f8
 8001508:	0800a310 	.word	0x0800a310
 800150c:	080c0000 	.word	0x080c0000
 8001510:	08140000 	.word	0x08140000
 8001514:	2000078c 	.word	0x2000078c
 8001518:	beeffeed 	.word	0xbeeffeed
    }

    //close your file
    f_close(&fil);
 800151c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001520:	4618      	mov	r0, r3
 8001522:	f007 fb06 	bl	8008b32 <f_close>

    //Once you flash the file, please delete it.
    fres = f_unlink(ETX_SD_CARD_FW_PATH);
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <check_update_frimware_SD_card+0x3dc>)
 8001528:	f007 fb2d 	bl	8008b86 <f_unlink>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
    if (fres != FR_OK)
 8001532:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <check_update_frimware_SD_card+0x3b4>
    {
      printf("Cannot able to delete the FW file\n");
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <check_update_frimware_SD_card+0x3e0>)
 800153c:	f007 fda8 	bl	8009090 <puts>
    }

    //update the status okay
    ret = ETX_SD_EX_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf

  } while( false );

  if( ret != ETX_SD_EX_NO_SD )
 8001546:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 800154a:	2b01      	cmp	r3, #1
 800154c:	d004      	beq.n	8001558 <check_update_frimware_SD_card+0x3cc>
  {
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 800154e:	2200      	movs	r2, #0
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <check_update_frimware_SD_card+0x3e4>)
 8001552:	2000      	movs	r0, #0
 8001554:	f006 ff2c 	bl	80083b0 <f_mount>
  }

  return ret;
 8001558:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
}
 800155c:	4618      	mov	r0, r3
 800155e:	f607 07c4 	addw	r7, r7, #2244	; 0x8c4
 8001562:	46bd      	mov	sp, r7
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001566:	bf00      	nop
 8001568:	0800a274 	.word	0x0800a274
 800156c:	0800a32c 	.word	0x0800a32c
 8001570:	0800a230 	.word	0x0800a230

08001574 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( ETX_GNRL_CFG_ *cfg )
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;

  do
  {
    if( cfg == NULL )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <write_cfg_to_flash+0x16>
    {
      ret = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8001588:	e05f      	b.n	800164a <write_cfg_to_flash+0xd6>
    }

    ret = HAL_FLASH_Unlock();
 800158a:	f001 f8c3 	bl	8002714 <HAL_FLASH_Unlock>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8001594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001598:	2b00      	cmp	r3, #0
 800159a:	d151      	bne.n	8001640 <write_cfg_to_flash+0xcc>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f001 f8ea 	bl	8002778 <FLASH_WaitForLastOperation>

    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector        = FLASH_SECTOR_4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors     = 1;                    //erase only sector 4
 80015ac:	2301      	movs	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <write_cfg_to_flash+0xe4>)
 80015b6:	2273      	movs	r2, #115	; 0x73
 80015b8:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80015ba:	f107 020c 	add.w	r2, r7, #12
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fa07 	bl	80029d8 <HAL_FLASHEx_Erase>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 80015d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d135      	bne.n	8001644 <write_cfg_to_flash+0xd0>
    {
      break;
    }

    //write the configuration
    uint8_t *data = (uint8_t *) cfg;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e0:	e01a      	b.n	8001618 <write_cfg_to_flash+0xa4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	491d      	ldr	r1, [pc, #116]	; (800165c <write_cfg_to_flash+0xe8>)
 80015e6:	4419      	add	r1, r3
                               ETX_CONFIG_FLASH_ADDR + i,
                               data[i]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	2000      	movs	r0, #0
 80015f8:	f001 f830 	bl	800265c <HAL_FLASH_Program>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret != HAL_OK )
 8001602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <write_cfg_to_flash+0x9e>
      {
        printf("Slot table Flash Write Error\r\n");
 800160a:	4815      	ldr	r0, [pc, #84]	; (8001660 <write_cfg_to_flash+0xec>)
 800160c:	f007 fd40 	bl	8009090 <puts>
        break;
 8001610:	e005      	b.n	800161e <write_cfg_to_flash+0xaa>
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	3301      	adds	r3, #1
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	2b31      	cmp	r3, #49	; 0x31
 800161c:	d9e1      	bls.n	80015e2 <write_cfg_to_flash+0x6e>
      }
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800161e:	f04f 30ff 	mov.w	r0, #4294967295
 8001622:	f001 f8a9 	bl	8002778 <FLASH_WaitForLastOperation>

    if( ret != HAL_OK )
 8001626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10c      	bne.n	8001648 <write_cfg_to_flash+0xd4>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 800162e:	f001 f893 	bl	8002758 <HAL_FLASH_Lock>
 8001632:	4603      	mov	r3, r0
 8001634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8001638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800163c:	2b00      	cmp	r3, #0
 800163e:	e004      	b.n	800164a <write_cfg_to_flash+0xd6>
      break;
 8001640:	bf00      	nop
 8001642:	e002      	b.n	800164a <write_cfg_to_flash+0xd6>
      break;
 8001644:	bf00      	nop
 8001646:	e000      	b.n	800164a <write_cfg_to_flash+0xd6>
      break;
 8001648:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 800164a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800164e:	4618      	mov	r0, r3
 8001650:	3730      	adds	r7, #48	; 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00
 800165c:	08020000 	.word	0x08020000
 8001660:	0800a350 	.word	0x0800a350

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166a:	f000 fc9c 	bl	8001fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 f8ab 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 f9e5 	bl	8001a40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001676:	f000 f9b3 	bl	80019e0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800167a:	f000 f981 	bl	8001980 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800167e:	f000 f91f 	bl	80018c0 <MX_CRC_Init>
  MX_SPI1_Init();
 8001682:	f000 f93f 	bl	8001904 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001686:	f003 fec9 	bl	800541c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 800168a:	2201      	movs	r2, #1
 800168c:	2101      	movs	r1, #1
 800168e:	483e      	ldr	r0, [pc, #248]	; (8001788 <main+0x124>)
 8001690:	f001 fc64 	bl	8002f5c <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8001694:	2300      	movs	r3, #0
 8001696:	2204      	movs	r2, #4
 8001698:	4619      	mov	r1, r3
 800169a:	483c      	ldr	r0, [pc, #240]	; (800178c <main+0x128>)
 800169c:	f007 fc72 	bl	8008f84 <iprintf>

  ETX_SD_EX_ sd_ex = check_update_frimware_SD_card();
 80016a0:	f7ff fd74 	bl	800118c <check_update_frimware_SD_card>
 80016a4:	4603      	mov	r3, r0
 80016a6:	75bb      	strb	r3, [r7, #22]

  //Check for firmware in SD Card
  if( sd_ex == ETX_SD_EX_FU_ERR )
 80016a8:	7dbb      	ldrb	r3, [r7, #22]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d103      	bne.n	80016b6 <main+0x52>
  {
    /* Fw update error. Don't process. */
    printf("SD Card Fw Update : ERROR!!! HALT!!!\r\n");
 80016ae:	4838      	ldr	r0, [pc, #224]	; (8001790 <main+0x12c>)
 80016b0:	f007 fcee 	bl	8009090 <puts>
    while( 1 );
 80016b4:	e7fe      	b.n	80016b4 <main+0x50>
  }
  else if( sd_ex == ETX_SD_EX_OK )
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d05f      	beq.n	800177c <main+0x118>
  else
  {
    //check for other firmware update mechanisms

    //Read the reboot cause and act accordingly
    printf("Reading the reboot reason...\r\n");
 80016bc:	4835      	ldr	r0, [pc, #212]	; (8001794 <main+0x130>)
 80016be:	f007 fce7 	bl	8009090 <puts>

    ETX_GNRL_CFG_ *cfg          = (ETX_GNRL_CFG_*) (ETX_CONFIG_FLASH_ADDR);
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <main+0x134>)
 80016c4:	613b      	str	r3, [r7, #16]
    bool          goto_ota_mode = false;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]

    switch( cfg->reboot_cause )
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d010      	beq.n	80016f6 <main+0x92>
 80016d4:	4a31      	ldr	r2, [pc, #196]	; (800179c <main+0x138>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d016      	beq.n	8001708 <main+0xa4>
 80016da:	4a30      	ldr	r2, [pc, #192]	; (800179c <main+0x138>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d815      	bhi.n	800170c <main+0xa8>
 80016e0:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <main+0x13c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d003      	beq.n	80016ee <main+0x8a>
 80016e6:	4a2f      	ldr	r2, [pc, #188]	; (80017a4 <main+0x140>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d004      	beq.n	80016f6 <main+0x92>
        //TODO: Implement
        break;
      }
    default:
      /* should not get here */
      break;
 80016ec:	e00e      	b.n	800170c <main+0xa8>
        printf("Normal Boot\r\n");
 80016ee:	482e      	ldr	r0, [pc, #184]	; (80017a8 <main+0x144>)
 80016f0:	f007 fcce 	bl	8009090 <puts>
        break;
 80016f4:	e00b      	b.n	800170e <main+0xaa>
        printf("First time boot / OTA Request...\r\n");
 80016f6:	482d      	ldr	r0, [pc, #180]	; (80017ac <main+0x148>)
 80016f8:	f007 fcca 	bl	8009090 <puts>
        printf("Going to OTA mode...\r\n");
 80016fc:	482c      	ldr	r0, [pc, #176]	; (80017b0 <main+0x14c>)
 80016fe:	f007 fcc7 	bl	8009090 <puts>
        goto_ota_mode = true;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
        break;
 8001706:	e002      	b.n	800170e <main+0xaa>
        break;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <main+0xaa>
      break;
 800170c:	bf00      	nop
    };

    /* Check the GPIO for 3 seconds */
    GPIO_PinState OTA_Pin_state;
    uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 800170e:	f000 fc9b 	bl	8002048 <HAL_GetTick>
 8001712:	4603      	mov	r3, r0
 8001714:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001718:	60fb      	str	r3, [r7, #12]

    printf("Press the User Button PC13 to trigger OTA update...\r\n");
 800171a:	4826      	ldr	r0, [pc, #152]	; (80017b4 <main+0x150>)
 800171c:	f007 fcb8 	bl	8009090 <puts>
    do
    {
      OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8001720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001724:	4824      	ldr	r0, [pc, #144]	; (80017b8 <main+0x154>)
 8001726:	f001 fc01 	bl	8002f2c <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	72fb      	strb	r3, [r7, #11]
      uint32_t current_tick = HAL_GetTick();
 800172e:	f000 fc8b 	bl	8002048 <HAL_GetTick>
 8001732:	6078      	str	r0, [r7, #4]

      /* Check the button is pressed or not for 3seconds */
      if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <main+0xea>
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	429a      	cmp	r2, r3
 8001740:	d805      	bhi.n	800174e <main+0xea>
      {
        /* Either timeout or Button is pressed */
        break;
      }
    }while( !goto_ota_mode );
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	f083 0301 	eor.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1e8      	bne.n	8001720 <main+0xbc>

    /*Start the Firmware or Application update */
    if( ( OTA_Pin_state == GPIO_PIN_SET ) || ( goto_ota_mode ) )
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d002      	beq.n	800175a <main+0xf6>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d010      	beq.n	800177c <main+0x118>
    {
      printf("Starting Firmware Download!!!\r\n");
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <main+0x158>)
 800175c:	f007 fc98 	bl	8009090 <puts>
      /* OTA Request. Receive the data from the UART4 and flash */
      if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8001760:	f7fe ff3a 	bl	80005d8 <etx_ota_download_and_flash>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <main+0x10e>
      {
        /* Error. Don't process. */
        printf("OTA Update : ERROR!!! HALT!!!\r\n");
 800176a:	4815      	ldr	r0, [pc, #84]	; (80017c0 <main+0x15c>)
 800176c:	f007 fc90 	bl	8009090 <puts>
        while( 1 );
 8001770:	e7fe      	b.n	8001770 <main+0x10c>
      }
      else
      {
        /* Reset to load the new application */
        printf("Firmware update is done!!! Rebooting...\r\n");
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <main+0x160>)
 8001774:	f007 fc8c 	bl	8009090 <puts>
        HAL_NVIC_SystemReset();
 8001778:	f000 fd61 	bl	800223e <HAL_NVIC_SystemReset>
      }
    }
  }

  //Load the updated app, if it is available
  load_new_app();
 800177c:	f7ff fbdc 	bl	8000f38 <load_new_app>

  // Jump to application
  goto_application();
 8001780:	f000 f9ec 	bl	8001b5c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001784:	e7fe      	b.n	8001784 <main+0x120>
 8001786:	bf00      	nop
 8001788:	40020400 	.word	0x40020400
 800178c:	0800a370 	.word	0x0800a370
 8001790:	0800a390 	.word	0x0800a390
 8001794:	0800a3b8 	.word	0x0800a3b8
 8001798:	08020000 	.word	0x08020000
 800179c:	facefade 	.word	0xfacefade
 80017a0:	beeffeed 	.word	0xbeeffeed
 80017a4:	deadbeef 	.word	0xdeadbeef
 80017a8:	0800a3d8 	.word	0x0800a3d8
 80017ac:	0800a3e8 	.word	0x0800a3e8
 80017b0:	0800a40c 	.word	0x0800a40c
 80017b4:	0800a424 	.word	0x0800a424
 80017b8:	40020800 	.word	0x40020800
 80017bc:	0800a45c 	.word	0x0800a45c
 80017c0:	0800a47c 	.word	0x0800a47c
 80017c4:	0800a49c 	.word	0x0800a49c

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0b8      	sub	sp, #224	; 0xe0
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017d2:	2234      	movs	r2, #52	; 0x34
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f007 fbcc 	bl	8008f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2290      	movs	r2, #144	; 0x90
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 fbbd 	bl	8008f74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <SystemClock_Config+0xf0>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <SystemClock_Config+0xf0>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <SystemClock_Config+0xf0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <SystemClock_Config+0xf4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800181a:	4a28      	ldr	r2, [pc, #160]	; (80018bc <SystemClock_Config+0xf4>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <SystemClock_Config+0xf4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001834:	2301      	movs	r3, #1
 8001836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183a:	2310      	movs	r3, #16
 800183c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001846:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800184a:	4618      	mov	r0, r3
 800184c:	f001 fba0 	bl	8002f90 <HAL_RCC_OscConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001856:	f000 f99b 	bl	8001b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185a:	230f      	movs	r3, #15
 800185c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001878:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f001 fe34 	bl	80034ec <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800188a:	f000 f981 	bl	8001b90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800188e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001892:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001894:	2300      	movs	r3, #0
 8001896:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001898:	2300      	movs	r3, #0
 800189a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fff9 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80018ac:	f000 f970 	bl	8001b90 <Error_Handler>
  }
}
 80018b0:	bf00      	nop
 80018b2:	37e0      	adds	r7, #224	; 0xe0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <MX_CRC_Init+0x3c>)
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <MX_CRC_Init+0x40>)
 80018c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_CRC_Init+0x3c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_CRC_Init+0x3c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_CRC_Init+0x3c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_CRC_Init+0x3c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_CRC_Init+0x3c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_CRC_Init+0x3c>)
 80018ea:	f000 fcb9 	bl	8002260 <HAL_CRC_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80018f4:	f000 f94c 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000078c 	.word	0x2000078c
 8001900:	40023000 	.word	0x40023000

08001904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_SPI1_Init+0x74>)
 800190a:	4a1c      	ldr	r2, [pc, #112]	; (800197c <MX_SPI1_Init+0x78>)
 800190c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_SPI1_Init+0x74>)
 8001910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_SPI1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_SPI1_Init+0x74>)
 800191e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001922:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_SPI1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_SPI1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_SPI1_Init+0x74>)
 8001932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001936:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_SPI1_Init+0x74>)
 800193a:	2230      	movs	r2, #48	; 0x30
 800193c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_SPI1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_SPI1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_SPI1_Init+0x74>)
 8001952:	2207      	movs	r2, #7
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_SPI1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_SPI1_Init+0x74>)
 800195e:	2208      	movs	r2, #8
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_SPI1_Init+0x74>)
 8001964:	f002 fbc0 	bl	80040e8 <HAL_SPI_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800196e:	f000 f90f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200007b0 	.word	0x200007b0
 800197c:	40013000 	.word	0x40013000

08001980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <MX_USART2_UART_Init+0x5c>)
 8001988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019c4:	f002 ffae 	bl	8004924 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ce:	f000 f8df 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000814 	.word	0x20000814
 80019dc:	40004400 	.word	0x40004400

080019e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <MX_USART3_UART_Init+0x5c>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_USART3_UART_Init+0x58>)
 8001a24:	f002 ff7e 	bl	8004924 <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a2e:	f000 f8af 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000708 	.word	0x20000708
 8001a3c:	40004800 	.word	0x40004800

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a33      	ldr	r2, [pc, #204]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	481c      	ldr	r0, [pc, #112]	; (8001b2c <MX_GPIO_Init+0xec>)
 8001abc:	f001 fa4e 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac6:	481a      	ldr	r0, [pc, #104]	; (8001b30 <MX_GPIO_Init+0xf0>)
 8001ac8:	f001 fa48 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4814      	ldr	r0, [pc, #80]	; (8001b34 <MX_GPIO_Init+0xf4>)
 8001ae2:	f001 f877 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <MX_GPIO_Init+0xec>)
 8001afe:	f001 f869 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_GPIO_Init+0xf0>)
 8001b1c:	f001 f85a 	bl	8002bd4 <HAL_GPIO_Init>

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40020800 	.word	0x40020800

08001b38 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b40:	1d39      	adds	r1, r7, #4
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	2201      	movs	r2, #1
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <__io_putchar+0x20>)
 8001b4a:	f002 ff39 	bl	80049c0 <HAL_UART_Transmit>

  return ch;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000708 	.word	0x20000708

08001b5c <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <goto_application+0x28>)
 8001b64:	f007 fa94 	bl	8009090 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (ETX_APP_FLASH_ADDR + 4U)));
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <goto_application+0x2c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) ETX_APP_FLASH_ADDR);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2101      	movs	r1, #1
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <goto_application+0x30>)
 8001b74:	f001 f9f2 	bl	8002f5c <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4798      	blx	r3
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800a4c8 	.word	0x0800a4c8
 8001b88:	08040004 	.word	0x08040004
 8001b8c:	40020400 	.word	0x40020400

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <Error_Handler+0x8>
	...

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_MspInit+0x44>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_MspInit+0x44>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_MspInit+0x44>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x44>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x44>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x44>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_CRC_MspInit+0x38>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10b      	bne.n	8001c0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_CRC_MspInit+0x3c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_CRC_MspInit+0x3c>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_CRC_MspInit+0x3c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023000 	.word	0x40023000
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_SPI_MspInit+0x7c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d127      	bne.n	8001c96 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_SPI_MspInit+0x80>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_SPI_MspInit+0x80>)
 8001c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_SPI_MspInit+0x80>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_SPI_MspInit+0x80>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <HAL_SPI_MspInit+0x80>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_SPI_MspInit+0x80>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c76:	23e0      	movs	r3, #224	; 0xe0
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c86:	2305      	movs	r3, #5
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <HAL_SPI_MspInit+0x84>)
 8001c92:	f000 ff9f 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	; 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40013000 	.word	0x40013000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2e      	ldr	r2, [pc, #184]	; (8001d84 <HAL_UART_MspInit+0xd8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d128      	bne.n	8001d20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a2d      	ldr	r2, [pc, #180]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cfe:	2360      	movs	r3, #96	; 0x60
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	481c      	ldr	r0, [pc, #112]	; (8001d8c <HAL_UART_MspInit+0xe0>)
 8001d1a:	f000 ff5b 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d1e:	e02d      	b.n	8001d7c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_UART_MspInit+0xe4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d128      	bne.n	8001d7c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_UART_MspInit+0xdc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <HAL_UART_MspInit+0xe0>)
 8001d78:	f000 ff2c 	bl	8002bd4 <HAL_GPIO_Init>
}
 8001d7c:	bf00      	nop
 8001d7e:	3730      	adds	r7, #48	; 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40004400 	.word	0x40004400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40004800 	.word	0x40004800

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de0:	f000 f91e 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dfa:	f3af 8000 	nop.w
 8001dfe:	4601      	mov	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
	}

return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fe7b 	bl	8001b38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf1      	blt.n	8001e34 <_write+0x12>
	}
	return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_close>:

int _close(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e82:	605a      	str	r2, [r3, #4]
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f007 f814 	bl	8008f20 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20080000 	.word	0x20080000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200004c4 	.word	0x200004c4
 8001f2c:	20000d40 	.word	0x20000d40

08001f30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7e:	f7ff ffd7 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f006 ffd3 	bl	8008f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7ff fb6d 	bl	8001664 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001f98:	0800aa2c 	.word	0x0800aa2c
  ldr r2, =_sbss
 8001f9c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001fa0:	20000d3c 	.word	0x20000d3c

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>

08001fa6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001faa:	2003      	movs	r0, #3
 8001fac:	f000 f920 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 f805 	bl	8001fc0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fb6:	f7ff fdf1 	bl	8001b9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f931 	bl	8002246 <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f000 f903 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	2000000c 	.word	0x2000000c
 800201c:	20000008 	.word	0x20000008

08002020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x20>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x24>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_IncTick+0x24>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	2000000c 	.word	0x2000000c
 8002044:	20000898 	.word	0x20000898

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000898 	.word	0x20000898

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	4313      	orrs	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00
 80020a4:	05fa0000 	.word	0x05fa0000

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002184:	f3bf 8f4f 	dsb	sy
}
 8002188:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <__NVIC_SystemReset+0x24>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002192:	4904      	ldr	r1, [pc, #16]	; (80021a4 <__NVIC_SystemReset+0x24>)
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_SystemReset+0x28>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800219a:	f3bf 8f4f 	dsb	sy
}
 800219e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <__NVIC_SystemReset+0x20>
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	05fa0004 	.word	0x05fa0004

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff78 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff31 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff46 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff78 	bl	8002118 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff47 	bl	80020c4 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002242:	f7ff ff9d 	bl	8002180 <__NVIC_SystemReset>

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffac 	bl	80021ac <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e054      	b.n	800231c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7f5b      	ldrb	r3, [r3, #29]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fcae 	bl	8001be4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_CRC_Init+0xc4>)
 800229c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0218 	bic.w	r2, r2, #24
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e00c      	b.n	80022ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	461a      	mov	r2, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f948 	bl	8002550 <HAL_CRCEx_Polynomial_Set>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e028      	b.n	800231c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	795b      	ldrb	r3, [r3, #5]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	611a      	str	r2, [r3, #16]
 80022dc:	e004      	b.n	80022e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6912      	ldr	r2, [r2, #16]
 80022e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	04c11db7 	.word	0x04c11db7

08002328 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2202      	movs	r2, #2
 800233c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d006      	beq.n	8002364 <HAL_CRC_Calculate+0x3c>
 8002356:	2b03      	cmp	r3, #3
 8002358:	d829      	bhi.n	80023ae <HAL_CRC_Calculate+0x86>
 800235a:	2b01      	cmp	r3, #1
 800235c:	d019      	beq.n	8002392 <HAL_CRC_Calculate+0x6a>
 800235e:	2b02      	cmp	r3, #2
 8002360:	d01e      	beq.n	80023a0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002362:	e024      	b.n	80023ae <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e00a      	b.n	8002380 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	441a      	add	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3f0      	bcc.n	800236a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	613b      	str	r3, [r7, #16]
      break;
 8002390:	e00e      	b.n	80023b0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f812 	bl	80023c0 <CRC_Handle_8>
 800239c:	6138      	str	r0, [r7, #16]
      break;
 800239e:	e007      	b.n	80023b0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f899 	bl	80024dc <CRC_Handle_16>
 80023aa:	6138      	str	r0, [r7, #16]
      break;
 80023ac:	e000      	b.n	80023b0 <HAL_CRC_Calculate+0x88>
      break;
 80023ae:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80023b6:	693b      	ldr	r3, [r7, #16]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e023      	b.n	800241a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3301      	adds	r3, #1
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	440b      	add	r3, r1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80023ec:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	440b      	add	r3, r1
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80023fc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	3303      	adds	r3, #3
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	440b      	add	r3, r1
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002410:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	d3d6      	bcc.n	80023d2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d04d      	beq.n	80024ca <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	4413      	add	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d116      	bne.n	8002480 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	3301      	adds	r3, #1
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	440b      	add	r3, r1
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21b      	sxth	r3, r3
 8002472:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	8b7a      	ldrh	r2, [r7, #26]
 800247e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b03      	cmp	r3, #3
 8002488:	d11f      	bne.n	80024ca <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4413      	add	r3, r2
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	b21a      	sxth	r2, r3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3301      	adds	r3, #1
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	440b      	add	r3, r1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	8b7a      	ldrh	r2, [r7, #26]
 80024b6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4413      	add	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e013      	b.n	8002516 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4413      	add	r3, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	440b      	add	r3, r1
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	d3e6      	bcc.n	80024ee <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	4413      	add	r3, r2
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002560:	231f      	movs	r3, #31
 8002562:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002564:	bf00      	nop
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	613a      	str	r2, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <HAL_CRCEx_Polynomial_Set+0x34>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_CRCEx_Polynomial_Set+0x16>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b18      	cmp	r3, #24
 8002588:	d846      	bhi.n	8002618 <HAL_CRCEx_Polynomial_Set+0xc8>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_CRCEx_Polynomial_Set+0x40>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	0800261f 	.word	0x0800261f
 8002594:	08002619 	.word	0x08002619
 8002598:	08002619 	.word	0x08002619
 800259c:	08002619 	.word	0x08002619
 80025a0:	08002619 	.word	0x08002619
 80025a4:	08002619 	.word	0x08002619
 80025a8:	08002619 	.word	0x08002619
 80025ac:	08002619 	.word	0x08002619
 80025b0:	0800260d 	.word	0x0800260d
 80025b4:	08002619 	.word	0x08002619
 80025b8:	08002619 	.word	0x08002619
 80025bc:	08002619 	.word	0x08002619
 80025c0:	08002619 	.word	0x08002619
 80025c4:	08002619 	.word	0x08002619
 80025c8:	08002619 	.word	0x08002619
 80025cc:	08002619 	.word	0x08002619
 80025d0:	08002601 	.word	0x08002601
 80025d4:	08002619 	.word	0x08002619
 80025d8:	08002619 	.word	0x08002619
 80025dc:	08002619 	.word	0x08002619
 80025e0:	08002619 	.word	0x08002619
 80025e4:	08002619 	.word	0x08002619
 80025e8:	08002619 	.word	0x08002619
 80025ec:	08002619 	.word	0x08002619
 80025f0:	080025f5 	.word	0x080025f5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d913      	bls.n	8002622 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80025fe:	e010      	b.n	8002622 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b07      	cmp	r3, #7
 8002604:	d90f      	bls.n	8002626 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800260a:	e00c      	b.n	8002626 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	d90b      	bls.n	800262a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002616:	e008      	b.n	800262a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
      break;
 800261c:	e006      	b.n	800262c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800261e:	bf00      	nop
 8002620:	e004      	b.n	800262c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800262a:	bf00      	nop
  }
  if (status == HAL_OK)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 0118 	bic.w	r1, r3, #24
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_FLASH_Program+0xb0>)
 8002670:	7d1b      	ldrb	r3, [r3, #20]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_FLASH_Program+0x1e>
 8002676:	2302      	movs	r3, #2
 8002678:	e043      	b.n	8002702 <HAL_FLASH_Program+0xa6>
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_FLASH_Program+0xb0>)
 800267c:	2201      	movs	r2, #1
 800267e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002680:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002684:	f000 f878 	bl	8002778 <FLASH_WaitForLastOperation>
 8002688:	4603      	mov	r3, r0
 800268a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d133      	bne.n	80026fa <HAL_FLASH_Program+0x9e>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d823      	bhi.n	80026e0 <HAL_FLASH_Program+0x84>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_FLASH_Program+0x44>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026c9 	.word	0x080026c9
 80026ac:	080026d5 	.word	0x080026d5
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80026b0:	783b      	ldrb	r3, [r7, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	68b8      	ldr	r0, [r7, #8]
 80026b6:	f000 f921 	bl	80028fc <FLASH_Program_Byte>
        break;
 80026ba:	e012      	b.n	80026e2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80026bc:	883b      	ldrh	r3, [r7, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	f000 f8f5 	bl	80028b0 <FLASH_Program_HalfWord>
        break;
 80026c6:	e00c      	b.n	80026e2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	68b8      	ldr	r0, [r7, #8]
 80026ce:	f000 f8c9 	bl	8002864 <FLASH_Program_Word>
        break;
 80026d2:	e006      	b.n	80026e2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80026d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026d8:	68b8      	ldr	r0, [r7, #8]
 80026da:	f000 f88d 	bl	80027f8 <FLASH_Program_DoubleWord>
        break;
 80026de:	e000      	b.n	80026e2 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80026e0:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026e6:	f000 f847 	bl	8002778 <FLASH_WaitForLastOperation>
 80026ea:	4603      	mov	r3, r0
 80026ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_FLASH_Program+0xb4>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_FLASH_Program+0xb4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_FLASH_Program+0xb0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	751a      	strb	r2, [r3, #20]

  return status;
 8002700:	7dfb      	ldrb	r3, [r7, #23]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000089c 	.word	0x2000089c
 8002710:	40023c00 	.word	0x40023c00

08002714 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_FLASH_Unlock+0x38>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da0b      	bge.n	800273e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_FLASH_Unlock+0x38>)
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_FLASH_Unlock+0x3c>)
 800272a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_FLASH_Unlock+0x38>)
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_FLASH_Unlock+0x40>)
 8002730:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_FLASH_Unlock+0x38>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	da01      	bge.n	800273e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800273e:	79fb      	ldrb	r3, [r7, #7]
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40023c00 	.word	0x40023c00
 8002750:	45670123 	.word	0x45670123
 8002754:	cdef89ab 	.word	0xcdef89ab

08002758 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_FLASH_Lock+0x1c>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_FLASH_Lock+0x1c>)
 8002762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002766:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40023c00 	.word	0x40023c00

08002778 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <FLASH_WaitForLastOperation+0x78>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800278a:	f7ff fc5d 	bl	8002048 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002790:	e010      	b.n	80027b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d00c      	beq.n	80027b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <FLASH_WaitForLastOperation+0x38>
 80027a0:	f7ff fc52 	bl	8002048 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d201      	bcs.n	80027b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e019      	b.n	80027e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e8      	bne.n	8002792 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027cc:	f000 f8ba 	bl	8002944 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e009      	b.n	80027e8 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <FLASH_WaitForLastOperation+0x7c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
  
}  
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	2000089c 	.word	0x2000089c
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <FLASH_Program_DoubleWord+0x68>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <FLASH_Program_DoubleWord+0x68>)
 800280a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <FLASH_Program_DoubleWord+0x68>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <FLASH_Program_DoubleWord+0x68>)
 8002816:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800281a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <FLASH_Program_DoubleWord+0x68>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <FLASH_Program_DoubleWord+0x68>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800282e:	f3bf 8f6f 	isb	sy
}
 8002832:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	000a      	movs	r2, r1
 8002842:	2300      	movs	r3, #0
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	3104      	adds	r1, #4
 8002848:	4613      	mov	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800284c:	f3bf 8f4f 	dsb	sy
}
 8002850:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00

08002864 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <FLASH_Program_Word+0x48>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <FLASH_Program_Word+0x48>)
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <FLASH_Program_Word+0x48>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <FLASH_Program_Word+0x48>)
 8002880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002884:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <FLASH_Program_Word+0x48>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <FLASH_Program_Word+0x48>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002898:	f3bf 8f4f 	dsb	sy
}
 800289c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023c00 	.word	0x40023c00

080028b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <FLASH_Program_HalfWord+0x48>)
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <FLASH_Program_HalfWord+0x48>)
 80028c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <FLASH_Program_HalfWord+0x48>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <FLASH_Program_HalfWord+0x48>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <FLASH_Program_HalfWord+0x48>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <FLASH_Program_HalfWord+0x48>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80028e6:	f3bf 8f4f 	dsb	sy
}
 80028ea:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40023c00 	.word	0x40023c00

080028fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <FLASH_Program_Byte+0x44>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <FLASH_Program_Byte+0x44>)
 800290e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002912:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <FLASH_Program_Byte+0x44>)
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <FLASH_Program_Byte+0x44>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <FLASH_Program_Byte+0x44>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <FLASH_Program_Byte+0x44>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800292e:	f3bf 8f4f 	dsb	sy
}
 8002932:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40023c00 	.word	0x40023c00

08002944 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <FLASH_SetErrorCode+0x8c>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f043 0320 	orr.w	r3, r3, #32
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 800295e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <FLASH_SetErrorCode+0x8c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f043 0310 	orr.w	r3, r3, #16
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 8002976:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <FLASH_SetErrorCode+0x8c>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 800298e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <FLASH_SetErrorCode+0x8c>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 80029a6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <FLASH_SetErrorCode+0x8c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <FLASH_SetErrorCode+0x90>)
 80029be:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <FLASH_SetErrorCode+0x8c>)
 80029c2:	22f2      	movs	r2, #242	; 0xf2
 80029c4:	60da      	str	r2, [r3, #12]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40023c00 	.word	0x40023c00
 80029d4:	2000089c 	.word	0x2000089c

080029d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <HAL_FLASHEx_Erase+0xd4>)
 80029ec:	7d1b      	ldrb	r3, [r3, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_FLASHEx_Erase+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e056      	b.n	8002aa4 <HAL_FLASHEx_Erase+0xcc>
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_FLASHEx_Erase+0xd4>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a00:	f7ff feba 	bl	8002778 <FLASH_WaitForLastOperation>
 8002a04:	4603      	mov	r3, r0
 8002a06:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d146      	bne.n	8002a9c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d115      	bne.n	8002a4a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f000 f844 	bl	8002ab8 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a34:	f7ff fea0 	bl	8002778 <FLASH_WaitForLastOperation>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_FLASHEx_Erase+0xd8>)
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	491b      	ldr	r1, [pc, #108]	; (8002ab0 <HAL_FLASHEx_Erase+0xd8>)
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_FLASHEx_Erase+0xdc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	610b      	str	r3, [r1, #16]
 8002a48:	e028      	b.n	8002a9c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	e01c      	b.n	8002a8c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68b8      	ldr	r0, [r7, #8]
 8002a5c:	f000 f868 	bl	8002b30 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a64:	f7ff fe88 	bl	8002778 <FLASH_WaitForLastOperation>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_FLASHEx_Erase+0xd8>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <HAL_FLASHEx_Erase+0xd8>)
 8002a72:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002a76:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	601a      	str	r2, [r3, #0]
          break;
 8002a84:	e00a      	b.n	8002a9c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4413      	add	r3, r2
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d3da      	bcc.n	8002a52 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_FLASHEx_Erase+0xd4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	751a      	strb	r2, [r3, #20]

  return status;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000089c 	.word	0x2000089c
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	ffff7ffb 	.word	0xffff7ffb

08002ab8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <FLASH_MassErase+0x74>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <FLASH_MassErase+0x74>)
 8002aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ace:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <FLASH_MassErase+0x74>)
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	4914      	ldr	r1, [pc, #80]	; (8002b2c <FLASH_MassErase+0x74>)
 8002adc:	f248 0304 	movw	r3, #32772	; 0x8004
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	610b      	str	r3, [r1, #16]
 8002ae4:	e00f      	b.n	8002b06 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d106      	bne.n	8002afa <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <FLASH_MassErase+0x74>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <FLASH_MassErase+0x74>)
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	6113      	str	r3, [r2, #16]
 8002af8:	e005      	b.n	8002b06 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <FLASH_MassErase+0x74>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <FLASH_MassErase+0x74>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <FLASH_MassErase+0x74>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <FLASH_MassErase+0x74>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b18:	f3bf 8f4f 	dsb	sy
}
 8002b1c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00

08002b30 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e010      	b.n	8002b6e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d103      	bne.n	8002b5a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e009      	b.n	8002b6e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d103      	bne.n	8002b68 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e002      	b.n	8002b6e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002b68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b6c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b0b      	cmp	r3, #11
 8002b72:	d902      	bls.n	8002b7a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	4911      	ldr	r1, [pc, #68]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002b98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <FLASH_Erase_Sector+0xa0>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bbc:	f3bf 8f4f 	dsb	sy
}
 8002bc0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e175      	b.n	8002ee0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 8164 	bne.w	8002eda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00b      	beq.n	8002c32 <HAL_GPIO_Init+0x5e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x100>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80be 	beq.w	8002eda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_GPIO_Init+0x324>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_GPIO_Init+0x324>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_GPIO_Init+0x324>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d76:	4a61      	ldr	r2, [pc, #388]	; (8002efc <HAL_GPIO_Init+0x328>)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_GPIO_Init+0x32c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d037      	beq.n	8002e12 <HAL_GPIO_Init+0x23e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_GPIO_Init+0x330>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_GPIO_Init+0x23a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_GPIO_Init+0x334>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d02b      	beq.n	8002e0a <HAL_GPIO_Init+0x236>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <HAL_GPIO_Init+0x338>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d025      	beq.n	8002e06 <HAL_GPIO_Init+0x232>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a54      	ldr	r2, [pc, #336]	; (8002f10 <HAL_GPIO_Init+0x33c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <HAL_GPIO_Init+0x22e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a53      	ldr	r2, [pc, #332]	; (8002f14 <HAL_GPIO_Init+0x340>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x22a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <HAL_GPIO_Init+0x344>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x226>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a51      	ldr	r2, [pc, #324]	; (8002f1c <HAL_GPIO_Init+0x348>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x222>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <HAL_GPIO_Init+0x34c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x21e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4f      	ldr	r2, [pc, #316]	; (8002f24 <HAL_GPIO_Init+0x350>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x21a>
 8002dea:	2309      	movs	r3, #9
 8002dec:	e012      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002dee:	230a      	movs	r3, #10
 8002df0:	e010      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002df2:	2308      	movs	r3, #8
 8002df4:	e00e      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e00c      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	e00a      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x240>
 8002e12:	2300      	movs	r3, #0
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e24:	4935      	ldr	r1, [pc, #212]	; (8002efc <HAL_GPIO_Init+0x328>)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e56:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e80:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed4:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <HAL_GPIO_Init+0x354>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	f67f ae86 	bls.w	8002bf4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40021400 	.word	0x40021400
 8002f18:	40021800 	.word	0x40021800
 8002f1c:	40021c00 	.word	0x40021c00
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40022400 	.word	0x40022400
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e001      	b.n	8002f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e29b      	b.n	80034de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	4b96      	ldr	r3, [pc, #600]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc0:	4b93      	ldr	r3, [pc, #588]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d112      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
 8002fcc:	4b90      	ldr	r3, [pc, #576]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x130>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d168      	bne.n	80030c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e275      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x7a>
 8002ffc:	4b84      	ldr	r3, [pc, #528]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a83      	ldr	r2, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x9c>
 8003012:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7e      	ldr	r2, [pc, #504]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0xc0>
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a72      	ldr	r2, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 8003050:	4b6f      	ldr	r3, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6e      	ldr	r2, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe ffea 	bl	8002048 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe ffe6 	bl	8002048 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e229      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe ffd6 	bl	8002048 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe ffd2 	bl	8002048 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e215      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x110>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d069      	beq.n	80031a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d11c      	bne.n	8003120 <HAL_RCC_OscConfig+0x190>
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x17a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e1e9      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	493d      	ldr	r1, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	e040      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a38      	ldr	r2, [pc, #224]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe ff88 	bl	8002048 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe ff84 	bl	8002048 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1c7      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4929      	ldr	r1, [pc, #164]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
 800316e:	e018      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe ff64 	bl	8002048 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe ff60 	bl	8002048 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1a3      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d038      	beq.n	8003220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe ff41 	bl	8002048 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe ff3d 	bl	8002048 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e180      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x23a>
 80031e8:	e01a      	b.n	8003220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe ff27 	bl	8002048 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe ff23 	bl	8002048 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d903      	bls.n	8003214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e166      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
 8003210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a4 	beq.w	8003376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a88      	ldr	r2, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
 8003246:	4b86      	ldr	r3, [pc, #536]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	4b83      	ldr	r3, [pc, #524]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003262:	4b80      	ldr	r3, [pc, #512]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7f      	ldr	r2, [pc, #508]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe feeb 	bl	8002048 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe fee7 	bl	8002048 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e12a      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x31a>
 800329c:	4b70      	ldr	r3, [pc, #448]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a6f      	ldr	r2, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e02d      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x33c>
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x35e>
 80032d4:	4b62      	ldr	r3, [pc, #392]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a61      	ldr	r2, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032ee:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fe9b 	bl	8002048 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fe97 	bl	8002048 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0d8      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x386>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fe85 	bl	8002048 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fe81 	bl	8002048 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0c2      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a3c      	ldr	r2, [pc, #240]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80ae 	beq.w	80034dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d06d      	beq.n	8003468 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d14b      	bne.n	800342c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a31      	ldr	r2, [pc, #196]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fe52 	bl	8002048 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fe4e 	bl	8002048 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e091      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	071b      	lsls	r3, r3, #28
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fe20 	bl	8002048 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fe1c 	bl	8002048 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e05f      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x47c>
 800342a:	e057      	b.n	80034dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fe06 	bl	8002048 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fe02 	bl	8002048 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e045      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x4b0>
 800345e:	e03d      	b.n	80034dc <HAL_RCC_OscConfig+0x54c>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_RCC_OscConfig+0x558>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d030      	beq.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d129      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d122      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d10f      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0d0      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d910      	bls.n	8003534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 020f 	bic.w	r2, r3, #15
 800351a:	4965      	ldr	r1, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d040      	beq.n	8003610 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e073      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06b      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4936      	ldr	r1, [pc, #216]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fe fd32 	bl	8002048 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fe fd2e 	bl	8002048 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e053      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d210      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 020f 	bic.w	r2, r3, #15
 8003626:	4922      	ldr	r1, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1d0>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fc8e 	bl	8001fc0 <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800a52c 	.word	0x0800a52c
 80036bc:	20000004 	.word	0x20000004
 80036c0:	20000008 	.word	0x20000008

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b5b0      	push	{r4, r5, r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036ca:	2100      	movs	r1, #0
 80036cc:	6079      	str	r1, [r7, #4]
 80036ce:	2100      	movs	r1, #0
 80036d0:	60f9      	str	r1, [r7, #12]
 80036d2:	2100      	movs	r1, #0
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036d6:	2100      	movs	r1, #0
 80036d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036da:	4952      	ldr	r1, [pc, #328]	; (8003824 <HAL_RCC_GetSysClockFreq+0x160>)
 80036dc:	6889      	ldr	r1, [r1, #8]
 80036de:	f001 010c 	and.w	r1, r1, #12
 80036e2:	2908      	cmp	r1, #8
 80036e4:	d00d      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3e>
 80036e6:	2908      	cmp	r1, #8
 80036e8:	f200 8094 	bhi.w	8003814 <HAL_RCC_GetSysClockFreq+0x150>
 80036ec:	2900      	cmp	r1, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x32>
 80036f0:	2904      	cmp	r1, #4
 80036f2:	d003      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x38>
 80036f4:	e08e      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f6:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_GetSysClockFreq+0x164>)
 80036f8:	60bb      	str	r3, [r7, #8]
      break;
 80036fa:	e08e      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fc:	4b4b      	ldr	r3, [pc, #300]	; (800382c <HAL_RCC_GetSysClockFreq+0x168>)
 80036fe:	60bb      	str	r3, [r7, #8]
      break;
 8003700:	e08b      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003702:	4948      	ldr	r1, [pc, #288]	; (8003824 <HAL_RCC_GetSysClockFreq+0x160>)
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800370a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800370c:	4945      	ldr	r1, [pc, #276]	; (8003824 <HAL_RCC_GetSysClockFreq+0x160>)
 800370e:	6849      	ldr	r1, [r1, #4]
 8003710:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003714:	2900      	cmp	r1, #0
 8003716:	d024      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4942      	ldr	r1, [pc, #264]	; (8003824 <HAL_RCC_GetSysClockFreq+0x160>)
 800371a:	6849      	ldr	r1, [r1, #4]
 800371c:	0989      	lsrs	r1, r1, #6
 800371e:	4608      	mov	r0, r1
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003728:	f04f 0500 	mov.w	r5, #0
 800372c:	ea00 0204 	and.w	r2, r0, r4
 8003730:	ea01 0305 	and.w	r3, r1, r5
 8003734:	493d      	ldr	r1, [pc, #244]	; (800382c <HAL_RCC_GetSysClockFreq+0x168>)
 8003736:	fb01 f003 	mul.w	r0, r1, r3
 800373a:	2100      	movs	r1, #0
 800373c:	fb01 f102 	mul.w	r1, r1, r2
 8003740:	1844      	adds	r4, r0, r1
 8003742:	493a      	ldr	r1, [pc, #232]	; (800382c <HAL_RCC_GetSysClockFreq+0x168>)
 8003744:	fba2 0101 	umull	r0, r1, r2, r1
 8003748:	1863      	adds	r3, r4, r1
 800374a:	4619      	mov	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	461a      	mov	r2, r3
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f7fc fdc4 	bl	80002e0 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e04a      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_RCC_GetSysClockFreq+0x160>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	461a      	mov	r2, r3
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	ea02 0400 	and.w	r4, r2, r0
 800377a:	ea03 0501 	and.w	r5, r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	014b      	lsls	r3, r1, #5
 800378c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003790:	0142      	lsls	r2, r0, #5
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	1b00      	subs	r0, r0, r4
 8003798:	eb61 0105 	sbc.w	r1, r1, r5
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	018b      	lsls	r3, r1, #6
 80037a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037aa:	0182      	lsls	r2, r0, #6
 80037ac:	1a12      	subs	r2, r2, r0
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	00d9      	lsls	r1, r3, #3
 80037bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037c0:	00d0      	lsls	r0, r2, #3
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	1912      	adds	r2, r2, r4
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0299      	lsls	r1, r3, #10
 80037d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037da:	0290      	lsls	r0, r2, #10
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f7fc fd78 	bl	80002e0 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCC_GetSysClockFreq+0x160>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	3301      	adds	r3, #1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	60bb      	str	r3, [r7, #8]
      break;
 8003812:	e002      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_RCC_GetSysClockFreq+0x164>)
 8003816:	60bb      	str	r3, [r7, #8]
      break;
 8003818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381a:	68bb      	ldr	r3, [r7, #8]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bdb0      	pop	{r4, r5, r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	017d7840 	.word	0x017d7840

08003830 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a9b      	lsrs	r3, r3, #10
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	0800a53c 	.word	0x0800a53c

08003870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003874:	f7ff ffdc 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0b5b      	lsrs	r3, r3, #13
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	0800a53c 	.word	0x0800a53c

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d012      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c0:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	4964      	ldr	r1, [pc, #400]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f2:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	4959      	ldr	r1, [pc, #356]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d017      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800392e:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003934:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	494a      	ldr	r1, [pc, #296]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 808b 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	4b3a      	ldr	r3, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	4a39      	ldr	r2, [pc, #228]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	6413      	str	r3, [r2, #64]	; 0x40
 8003988:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fe fb52 	bl	8002048 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fb4e 	bl	8002048 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e38f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d035      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d02e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a06:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a0c:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d114      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fb16 	bl	8002048 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fe fb12 	bl	8002048 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e351      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ee      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4e:	d111      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	4901      	ldr	r1, [pc, #4]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	0ffffcff 	.word	0x0ffffcff
 8003a74:	4bb3      	ldr	r3, [pc, #716]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4ab2      	ldr	r2, [pc, #712]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	4bb0      	ldr	r3, [pc, #704]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	49ad      	ldr	r1, [pc, #692]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a9e:	4ba9      	ldr	r3, [pc, #676]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	4aa7      	ldr	r2, [pc, #668]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003aae:	4ba5      	ldr	r3, [pc, #660]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	49a2      	ldr	r1, [pc, #648]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003acc:	4b9d      	ldr	r3, [pc, #628]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ada:	499a      	ldr	r1, [pc, #616]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aee:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afc:	4991      	ldr	r1, [pc, #580]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b10:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1e:	4989      	ldr	r1, [pc, #548]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b32:	4b84      	ldr	r3, [pc, #528]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4980      	ldr	r1, [pc, #512]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b54:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	4978      	ldr	r1, [pc, #480]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b76:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f023 020c 	bic.w	r2, r3, #12
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	496f      	ldr	r1, [pc, #444]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b98:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	4967      	ldr	r1, [pc, #412]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	495e      	ldr	r1, [pc, #376]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	4956      	ldr	r1, [pc, #344]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bfe:	4b51      	ldr	r3, [pc, #324]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c20:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	4945      	ldr	r1, [pc, #276]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c42:	4b40      	ldr	r3, [pc, #256]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	493c      	ldr	r1, [pc, #240]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c64:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c94:	492b      	ldr	r1, [pc, #172]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	491b      	ldr	r1, [pc, #108]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf8:	4912      	ldr	r1, [pc, #72]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1c:	4909      	ldr	r1, [pc, #36]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00f      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	4986      	ldr	r1, [pc, #536]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d5c:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6c:	497d      	ldr	r1, [pc, #500]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d006      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80d6 	beq.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d88:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a75      	ldr	r2, [pc, #468]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fe f958 	bl	8002048 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d9c:	f7fe f954 	bl	8002048 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e195      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dae:	4b6d      	ldr	r3, [pc, #436]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d021      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	0e1b      	lsrs	r3, r3, #24
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	019a      	lsls	r2, r3, #6
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4958      	ldr	r1, [pc, #352]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e34:	d129      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e36:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e44:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4a:	0f1b      	lsrs	r3, r3, #28
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	019a      	lsls	r2, r3, #6
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	493e      	ldr	r1, [pc, #248]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e78:	f023 021f 	bic.w	r2, r3, #31
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4938      	ldr	r1, [pc, #224]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e96:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9c:	0e1b      	lsrs	r3, r3, #24
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eaa:	0f1b      	lsrs	r3, r3, #28
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	019a      	lsls	r2, r3, #6
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	4926      	ldr	r1, [pc, #152]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	491a      	ldr	r1, [pc, #104]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0e:	f7fe f89b 	bl	8002048 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f16:	f7fe f897 	bl	8002048 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b64      	cmp	r3, #100	; 0x64
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0d8      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80ce 	bne.w	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fe f87e 	bl	8002048 <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f50:	f7fe f87a 	bl	8002048 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d904      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0bb      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f68:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f74:	d0ec      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d12a      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f9e:	4b51      	ldr	r3, [pc, #324]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	0f1b      	lsrs	r3, r3, #28
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	019a      	lsls	r2, r3, #6
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	061b      	lsls	r3, r3, #24
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	4944      	ldr	r1, [pc, #272]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fda:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	493d      	ldr	r1, [pc, #244]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004008:	d11d      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400a:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004018:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	0f1b      	lsrs	r3, r3, #28
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	431a      	orrs	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	4929      	ldr	r1, [pc, #164]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	0e1b      	lsrs	r3, r3, #24
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	019a      	lsls	r2, r3, #6
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	4917      	ldr	r1, [pc, #92]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4911      	ldr	r1, [pc, #68]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd ffca 	bl	8002048 <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b8:	f7fd ffc6 	bl	8002048 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e007      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d6:	d1ef      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e09d      	b.n	8004236 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410a:	d009      	beq.n	8004120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
 8004112:	e005      	b.n	8004120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd fd72 	bl	8001c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004156:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004160:	d902      	bls.n	8004168 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e002      	b.n	800416e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004176:	d007      	beq.n	8004188 <HAL_SPI_Init+0xa0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004180:	d002      	beq.n	8004188 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	ea42 0103 	orr.w	r1, r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 0204 	and.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004204:	ea42 0103 	orr.w	r1, r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08a      	sub	sp, #40	; 0x28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800424c:	2301      	movs	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_SPI_TransmitReceive+0x26>
 8004260:	2302      	movs	r3, #2
 8004262:	e1fb      	b.n	800465c <HAL_SPI_TransmitReceive+0x41e>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800426c:	f7fd feec 	bl	8002048 <HAL_GetTick>
 8004270:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004278:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004288:	7efb      	ldrb	r3, [r7, #27]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d00e      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x6e>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004294:	d106      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x66>
 800429e:	7efb      	ldrb	r3, [r7, #27]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d003      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042aa:	e1cd      	b.n	8004648 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_SPI_TransmitReceive+0x80>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_TransmitReceive+0x80>
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042c4:	e1c0      	b.n	8004648 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d003      	beq.n	80042da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2205      	movs	r2, #5
 80042d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	887a      	ldrh	r2, [r7, #2]
 80042ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	887a      	ldrh	r2, [r7, #2]
 80042f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	887a      	ldrh	r2, [r7, #2]
 8004306:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800431c:	d802      	bhi.n	8004324 <HAL_SPI_TransmitReceive+0xe6>
 800431e:	8a3b      	ldrh	r3, [r7, #16]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d908      	bls.n	8004336 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	e007      	b.n	8004346 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004344:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d007      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800436c:	d97c      	bls.n	8004468 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_TransmitReceive+0x13e>
 8004376:	8a7b      	ldrh	r3, [r7, #18]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d169      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a0:	e056      	b.n	8004450 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d11b      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x1aa>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x1aa>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d113      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d11c      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x1f2>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	b292      	uxth	r2, r2
 800440e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442c:	2301      	movs	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004430:	f7fd fe0a 	bl	8002048 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443c:	429a      	cmp	r2, r3
 800443e:	d807      	bhi.n	8004450 <HAL_SPI_TransmitReceive+0x212>
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d003      	beq.n	8004450 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800444e:	e0fb      	b.n	8004648 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1a3      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x164>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19d      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x164>
 8004466:	e0df      	b.n	8004628 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x23a>
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	2b01      	cmp	r3, #1
 8004474:	f040 80cb 	bne.w	800460e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d912      	bls.n	80044a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b02      	subs	r3, #2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a6:	e0b2      	b.n	800460e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ce:	e09e      	b.n	800460e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d134      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x30a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02f      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x30a>
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d12c      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d912      	bls.n	800451e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b02      	subs	r3, #2
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800451c:	e012      	b.n	8004544 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d148      	bne.n	80045e8 <HAL_SPI_TransmitReceive+0x3aa>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d042      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d923      	bls.n	80045b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	b292      	uxth	r2, r2
 800457a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b02      	subs	r3, #2
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d81f      	bhi.n	80045e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	e016      	b.n	80045e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f103 020c 	add.w	r2, r3, #12
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045e8:	f7fd fd2e 	bl	8002048 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d803      	bhi.n	8004600 <HAL_SPI_TransmitReceive+0x3c2>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x3c8>
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800460c:	e01c      	b.n	8004648 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f af5b 	bne.w	80044d0 <HAL_SPI_TransmitReceive+0x292>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	f47f af54 	bne.w	80044d0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f933 	bl	8004898 <SPI_EndRxTxTransaction>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	661a      	str	r2, [r3, #96]	; 0x60
 8004644:	e000      	b.n	8004648 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800465c:	4618      	mov	r0, r3
 800465e:	3728      	adds	r7, #40	; 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004674:	f7fd fce8 	bl	8002048 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4413      	add	r3, r2
 8004682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004684:	f7fd fce0 	bl	8002048 <HAL_GetTick>
 8004688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	0d1b      	lsrs	r3, r3, #20
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	fb02 f303 	mul.w	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800469a:	e054      	b.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d050      	beq.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046a4:	f7fd fcd0 	bl	8002048 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d902      	bls.n	80046ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d13d      	bne.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d111      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d004      	beq.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d107      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004700:	d10f      	bne.n	8004722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e017      	b.n	8004766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3b01      	subs	r3, #1
 8004744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d19b      	bne.n	800469c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000004 	.word	0x20000004

08004774 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004782:	f7fd fc61 	bl	8002048 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	4413      	add	r3, r2
 8004790:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004792:	f7fd fc59 	bl	8002048 <HAL_GetTick>
 8004796:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004798:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	00da      	lsls	r2, r3, #3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	0d1b      	lsrs	r3, r3, #20
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80047b0:	e062      	b.n	8004878 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b8:	d109      	bne.n	80047ce <SPI_WaitFifoStateUntilTimeout+0x5a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80047cc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d050      	beq.n	8004878 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047d6:	f7fd fc37 	bl	8002048 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d902      	bls.n	80047ec <SPI_WaitFifoStateUntilTimeout+0x78>
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d13d      	bne.n	8004868 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004804:	d111      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d004      	beq.n	800481a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d107      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004828:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004832:	d10f      	bne.n	8004854 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004852:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e010      	b.n	800488a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3b01      	subs	r3, #1
 8004876:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	429a      	cmp	r2, r3
 8004886:	d194      	bne.n	80047b2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000004 	.word	0x20000004

08004898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff ff5f 	bl	8004774 <SPI_WaitFifoStateUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e027      	b.n	800491c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2200      	movs	r2, #0
 80048d4:	2180      	movs	r1, #128	; 0x80
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff fec4 	bl	8004664 <SPI_WaitFlagStateUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e014      	b.n	800491c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff38 	bl	8004774 <SPI_WaitFifoStateUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e000      	b.n	800491c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e040      	b.n	80049b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd f9b0 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f990 	bl	8004c88 <UART_SetConfig>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbe6 	bl	800514c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fc6d 	bl	8005290 <UART_CheckIdleState>
 80049b6:	4603      	mov	r3, r0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	f040 8081 	bne.w	8004adc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_Transmit+0x26>
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e079      	b.n	8004ade <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_UART_Transmit+0x38>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e072      	b.n	8004ade <HAL_UART_Transmit+0x11e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2221      	movs	r2, #33	; 0x21
 8004a0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fb1b 	bl	8002048 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d108      	bne.n	8004a40 <HAL_UART_Transmit+0x80>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e003      	b.n	8004a48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a50:	e02c      	b.n	8004aac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fc60 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e038      	b.n	8004ade <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3302      	adds	r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e007      	b.n	8004a9a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1cc      	bne.n	8004a52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2140      	movs	r1, #64	; 0x40
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fc2d 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e005      	b.n	8004ade <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08a      	sub	sp, #40	; 0x28
 8004aea:	af02      	add	r7, sp, #8
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	f040 80be 	bne.w	8004c7c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Receive+0x26>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0b6      	b.n	8004c7e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Receive+0x38>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e0af      	b.n	8004c7e <HAL_UART_Receive+0x198>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2222      	movs	r2, #34	; 0x22
 8004b32:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3a:	f7fd fa85 	bl	8002048 <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b58:	d10e      	bne.n	8004b78 <HAL_UART_Receive+0x92>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_UART_Receive+0x88>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b6c:	e02d      	b.n	8004bca <HAL_UART_Receive+0xe4>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	22ff      	movs	r2, #255	; 0xff
 8004b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b76:	e028      	b.n	8004bca <HAL_UART_Receive+0xe4>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_UART_Receive+0xb6>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_UART_Receive+0xac>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	22ff      	movs	r2, #255	; 0xff
 8004b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b90:	e01b      	b.n	8004bca <HAL_UART_Receive+0xe4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	227f      	movs	r2, #127	; 0x7f
 8004b96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b9a:	e016      	b.n	8004bca <HAL_UART_Receive+0xe4>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba4:	d10d      	bne.n	8004bc2 <HAL_UART_Receive+0xdc>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <HAL_UART_Receive+0xd2>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	227f      	movs	r2, #127	; 0x7f
 8004bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb6:	e008      	b.n	8004bca <HAL_UART_Receive+0xe4>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	223f      	movs	r2, #63	; 0x3f
 8004bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bc0:	e003      	b.n	8004bca <HAL_UART_Receive+0xe4>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bd0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d108      	bne.n	8004bee <HAL_UART_Receive+0x108>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e003      	b.n	8004bf6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004bfe:	e032      	b.n	8004c66 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	2120      	movs	r1, #32
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fb89 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e031      	b.n	8004c7e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10c      	bne.n	8004c3a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	8a7b      	ldrh	r3, [r7, #18]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3302      	adds	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e00c      	b.n	8004c54 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	8a7b      	ldrh	r3, [r7, #18]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	4013      	ands	r3, r2
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1c6      	bne.n	8004c00 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e000      	b.n	8004c7e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4ba7      	ldr	r3, [pc, #668]	; (8004f50 <UART_SetConfig+0x2c8>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a95      	ldr	r2, [pc, #596]	; (8004f54 <UART_SetConfig+0x2cc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d120      	bne.n	8004d46 <UART_SetConfig+0xbe>
 8004d04:	4b94      	ldr	r3, [pc, #592]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d816      	bhi.n	8004d40 <UART_SetConfig+0xb8>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x90>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d29 	.word	0x08004d29
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d2f 	.word	0x08004d2f
 8004d24:	08004d3b 	.word	0x08004d3b
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e14f      	b.n	8004fce <UART_SetConfig+0x346>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e14c      	b.n	8004fce <UART_SetConfig+0x346>
 8004d34:	2304      	movs	r3, #4
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e149      	b.n	8004fce <UART_SetConfig+0x346>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e146      	b.n	8004fce <UART_SetConfig+0x346>
 8004d40:	2310      	movs	r3, #16
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e143      	b.n	8004fce <UART_SetConfig+0x346>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a84      	ldr	r2, [pc, #528]	; (8004f5c <UART_SetConfig+0x2d4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d132      	bne.n	8004db6 <UART_SetConfig+0x12e>
 8004d50:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	d828      	bhi.n	8004db0 <UART_SetConfig+0x128>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0xdc>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004db1 	.word	0x08004db1
 8004d6c:	08004db1 	.word	0x08004db1
 8004d70:	08004db1 	.word	0x08004db1
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004db1 	.word	0x08004db1
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004db1 	.word	0x08004db1
 8004d84:	08004d9f 	.word	0x08004d9f
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db1 	.word	0x08004db1
 8004d94:	08004dab 	.word	0x08004dab
 8004d98:	2300      	movs	r3, #0
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e117      	b.n	8004fce <UART_SetConfig+0x346>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e114      	b.n	8004fce <UART_SetConfig+0x346>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e111      	b.n	8004fce <UART_SetConfig+0x346>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e10e      	b.n	8004fce <UART_SetConfig+0x346>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e10b      	b.n	8004fce <UART_SetConfig+0x346>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a69      	ldr	r2, [pc, #420]	; (8004f60 <UART_SetConfig+0x2d8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d120      	bne.n	8004e02 <UART_SetConfig+0x17a>
 8004dc0:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d013      	beq.n	8004df6 <UART_SetConfig+0x16e>
 8004dce:	2b30      	cmp	r3, #48	; 0x30
 8004dd0:	d814      	bhi.n	8004dfc <UART_SetConfig+0x174>
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d009      	beq.n	8004dea <UART_SetConfig+0x162>
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d810      	bhi.n	8004dfc <UART_SetConfig+0x174>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <UART_SetConfig+0x15c>
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d006      	beq.n	8004df0 <UART_SetConfig+0x168>
 8004de2:	e00b      	b.n	8004dfc <UART_SetConfig+0x174>
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e0f1      	b.n	8004fce <UART_SetConfig+0x346>
 8004dea:	2302      	movs	r3, #2
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e0ee      	b.n	8004fce <UART_SetConfig+0x346>
 8004df0:	2304      	movs	r3, #4
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e0eb      	b.n	8004fce <UART_SetConfig+0x346>
 8004df6:	2308      	movs	r3, #8
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e0e8      	b.n	8004fce <UART_SetConfig+0x346>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e0e5      	b.n	8004fce <UART_SetConfig+0x346>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a57      	ldr	r2, [pc, #348]	; (8004f64 <UART_SetConfig+0x2dc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d120      	bne.n	8004e4e <UART_SetConfig+0x1c6>
 8004e0c:	4b52      	ldr	r3, [pc, #328]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e16:	2bc0      	cmp	r3, #192	; 0xc0
 8004e18:	d013      	beq.n	8004e42 <UART_SetConfig+0x1ba>
 8004e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e1c:	d814      	bhi.n	8004e48 <UART_SetConfig+0x1c0>
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d009      	beq.n	8004e36 <UART_SetConfig+0x1ae>
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d810      	bhi.n	8004e48 <UART_SetConfig+0x1c0>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <UART_SetConfig+0x1a8>
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d006      	beq.n	8004e3c <UART_SetConfig+0x1b4>
 8004e2e:	e00b      	b.n	8004e48 <UART_SetConfig+0x1c0>
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e0cb      	b.n	8004fce <UART_SetConfig+0x346>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e0c8      	b.n	8004fce <UART_SetConfig+0x346>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e0c5      	b.n	8004fce <UART_SetConfig+0x346>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e0c2      	b.n	8004fce <UART_SetConfig+0x346>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e0bf      	b.n	8004fce <UART_SetConfig+0x346>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a45      	ldr	r2, [pc, #276]	; (8004f68 <UART_SetConfig+0x2e0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d125      	bne.n	8004ea4 <UART_SetConfig+0x21c>
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e66:	d017      	beq.n	8004e98 <UART_SetConfig+0x210>
 8004e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6c:	d817      	bhi.n	8004e9e <UART_SetConfig+0x216>
 8004e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e72:	d00b      	beq.n	8004e8c <UART_SetConfig+0x204>
 8004e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e78:	d811      	bhi.n	8004e9e <UART_SetConfig+0x216>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <UART_SetConfig+0x1fe>
 8004e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e82:	d006      	beq.n	8004e92 <UART_SetConfig+0x20a>
 8004e84:	e00b      	b.n	8004e9e <UART_SetConfig+0x216>
 8004e86:	2300      	movs	r3, #0
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e0a0      	b.n	8004fce <UART_SetConfig+0x346>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e09d      	b.n	8004fce <UART_SetConfig+0x346>
 8004e92:	2304      	movs	r3, #4
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e09a      	b.n	8004fce <UART_SetConfig+0x346>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e097      	b.n	8004fce <UART_SetConfig+0x346>
 8004e9e:	2310      	movs	r3, #16
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e094      	b.n	8004fce <UART_SetConfig+0x346>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	; (8004f6c <UART_SetConfig+0x2e4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d125      	bne.n	8004efa <UART_SetConfig+0x272>
 8004eae:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ebc:	d017      	beq.n	8004eee <UART_SetConfig+0x266>
 8004ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec2:	d817      	bhi.n	8004ef4 <UART_SetConfig+0x26c>
 8004ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec8:	d00b      	beq.n	8004ee2 <UART_SetConfig+0x25a>
 8004eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ece:	d811      	bhi.n	8004ef4 <UART_SetConfig+0x26c>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <UART_SetConfig+0x254>
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d006      	beq.n	8004ee8 <UART_SetConfig+0x260>
 8004eda:	e00b      	b.n	8004ef4 <UART_SetConfig+0x26c>
 8004edc:	2301      	movs	r3, #1
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e075      	b.n	8004fce <UART_SetConfig+0x346>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e072      	b.n	8004fce <UART_SetConfig+0x346>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e06f      	b.n	8004fce <UART_SetConfig+0x346>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e06c      	b.n	8004fce <UART_SetConfig+0x346>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e069      	b.n	8004fce <UART_SetConfig+0x346>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <UART_SetConfig+0x2e8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d137      	bne.n	8004f74 <UART_SetConfig+0x2ec>
 8004f04:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <UART_SetConfig+0x2d0>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f12:	d017      	beq.n	8004f44 <UART_SetConfig+0x2bc>
 8004f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f18:	d817      	bhi.n	8004f4a <UART_SetConfig+0x2c2>
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1e:	d00b      	beq.n	8004f38 <UART_SetConfig+0x2b0>
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f24:	d811      	bhi.n	8004f4a <UART_SetConfig+0x2c2>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <UART_SetConfig+0x2aa>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d006      	beq.n	8004f3e <UART_SetConfig+0x2b6>
 8004f30:	e00b      	b.n	8004f4a <UART_SetConfig+0x2c2>
 8004f32:	2300      	movs	r3, #0
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e04a      	b.n	8004fce <UART_SetConfig+0x346>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e047      	b.n	8004fce <UART_SetConfig+0x346>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e044      	b.n	8004fce <UART_SetConfig+0x346>
 8004f44:	2308      	movs	r3, #8
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e041      	b.n	8004fce <UART_SetConfig+0x346>
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e03e      	b.n	8004fce <UART_SetConfig+0x346>
 8004f50:	efff69f3 	.word	0xefff69f3
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40004400 	.word	0x40004400
 8004f60:	40004800 	.word	0x40004800
 8004f64:	40004c00 	.word	0x40004c00
 8004f68:	40005000 	.word	0x40005000
 8004f6c:	40011400 	.word	0x40011400
 8004f70:	40007800 	.word	0x40007800
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a71      	ldr	r2, [pc, #452]	; (8005140 <UART_SetConfig+0x4b8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d125      	bne.n	8004fca <UART_SetConfig+0x342>
 8004f7e:	4b71      	ldr	r3, [pc, #452]	; (8005144 <UART_SetConfig+0x4bc>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f8c:	d017      	beq.n	8004fbe <UART_SetConfig+0x336>
 8004f8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f92:	d817      	bhi.n	8004fc4 <UART_SetConfig+0x33c>
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d00b      	beq.n	8004fb2 <UART_SetConfig+0x32a>
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d811      	bhi.n	8004fc4 <UART_SetConfig+0x33c>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <UART_SetConfig+0x324>
 8004fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa8:	d006      	beq.n	8004fb8 <UART_SetConfig+0x330>
 8004faa:	e00b      	b.n	8004fc4 <UART_SetConfig+0x33c>
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e00d      	b.n	8004fce <UART_SetConfig+0x346>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e00a      	b.n	8004fce <UART_SetConfig+0x346>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e007      	b.n	8004fce <UART_SetConfig+0x346>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e004      	b.n	8004fce <UART_SetConfig+0x346>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e001      	b.n	8004fce <UART_SetConfig+0x346>
 8004fca:	2310      	movs	r3, #16
 8004fcc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd6:	d15b      	bne.n	8005090 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d827      	bhi.n	800502e <UART_SetConfig+0x3a6>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0x35c>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	0800502f 	.word	0x0800502f
 8004ff4:	0800501f 	.word	0x0800501f
 8004ff8:	0800502f 	.word	0x0800502f
 8004ffc:	0800502f 	.word	0x0800502f
 8005000:	0800502f 	.word	0x0800502f
 8005004:	08005027 	.word	0x08005027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005008:	f7fe fc1e 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800500c:	61b8      	str	r0, [r7, #24]
        break;
 800500e:	e013      	b.n	8005038 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fe fc2e 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8005014:	61b8      	str	r0, [r7, #24]
        break;
 8005016:	e00f      	b.n	8005038 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005018:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <UART_SetConfig+0x4c0>)
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e00c      	b.n	8005038 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501e:	f7fe fb51 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005022:	61b8      	str	r0, [r7, #24]
        break;
 8005024:	e008      	b.n	8005038 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502a:	61bb      	str	r3, [r7, #24]
        break;
 800502c:	e004      	b.n	8005038 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	77bb      	strb	r3, [r7, #30]
        break;
 8005036:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d074      	beq.n	8005128 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	005a      	lsls	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	441a      	add	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	b29b      	uxth	r3, r3
 8005054:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b0f      	cmp	r3, #15
 800505a:	d916      	bls.n	800508a <UART_SetConfig+0x402>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d212      	bcs.n	800508a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f023 030f 	bic.w	r3, r3, #15
 800506c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	b29b      	uxth	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	b29a      	uxth	r2, r3
 800507a:	89fb      	ldrh	r3, [r7, #14]
 800507c:	4313      	orrs	r3, r2
 800507e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	89fa      	ldrh	r2, [r7, #14]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	e04e      	b.n	8005128 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	77bb      	strb	r3, [r7, #30]
 800508e:	e04b      	b.n	8005128 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005090:	7ffb      	ldrb	r3, [r7, #31]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d827      	bhi.n	80050e6 <UART_SetConfig+0x45e>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x414>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7fe fbc2 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80050c4:	61b8      	str	r0, [r7, #24]
        break;
 80050c6:	e013      	b.n	80050f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fe fbd2 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 80050cc:	61b8      	str	r0, [r7, #24]
        break;
 80050ce:	e00f      	b.n	80050f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <UART_SetConfig+0x4c0>)
 80050d2:	61bb      	str	r3, [r7, #24]
        break;
 80050d4:	e00c      	b.n	80050f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fe faf5 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80050da:	61b8      	str	r0, [r7, #24]
        break;
 80050dc:	e008      	b.n	80050f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	61bb      	str	r3, [r7, #24]
        break;
 80050e4:	e004      	b.n	80050f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	77bb      	strb	r3, [r7, #30]
        break;
 80050ee:	bf00      	nop
    }

    if (pclk != 0U)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	085a      	lsrs	r2, r3, #1
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	441a      	add	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	d908      	bls.n	8005124 <UART_SetConfig+0x49c>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d204      	bcs.n	8005124 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	e001      	b.n	8005128 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005134:	7fbb      	ldrb	r3, [r7, #30]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40007c00 	.word	0x40007c00
 8005144:	40023800 	.word	0x40023800
 8005148:	00f42400 	.word	0x00f42400

0800514c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01a      	beq.n	8005262 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524a:	d10a      	bne.n	8005262 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af02      	add	r7, sp, #8
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a0:	f7fc fed2 	bl	8002048 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d10e      	bne.n	80052d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f82d 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e023      	b.n	800531a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d10e      	bne.n	80052fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f817 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e00d      	b.n	800531a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005332:	e05e      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d05a      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533c:	f7fc fe84 	bl	8002048 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	429a      	cmp	r2, r3
 800534a:	d302      	bcc.n	8005352 <UART_WaitOnFlagUntilTimeout+0x30>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d11b      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005360:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e043      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02c      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a6:	d124      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e00f      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	429a      	cmp	r2, r3
 800540e:	d091      	beq.n	8005334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005420:	4904      	ldr	r1, [pc, #16]	; (8005434 <MX_FATFS_Init+0x18>)
 8005422:	4805      	ldr	r0, [pc, #20]	; (8005438 <MX_FATFS_Init+0x1c>)
 8005424:	f003 fca6 	bl	8008d74 <FATFS_LinkDriver>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <MX_FATFS_Init+0x20>)
 800542e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005430:	bf00      	nop
 8005432:	bd80      	pop	{r7, pc}
 8005434:	200008b8 	.word	0x200008b8
 8005438:	20000010 	.word	0x20000010
 800543c:	200008bc 	.word	0x200008bc

08005440 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005444:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005446:	4618      	mov	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return USER_SPI_initialize(pdrv);
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f9dd 	bl	800581c <USER_SPI_initialize>
 8005462:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fabb 	bl	80059f4 <USER_SPI_status>
 800547e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 8005498:	7bf8      	ldrb	r0, [r7, #15]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	f000 fabe 	bl	8005a20 <USER_SPI_read>
 80054a4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count);
 80054be:	7bf8      	ldrb	r0, [r7, #15]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	f000 fb11 	bl	8005aec <USER_SPI_write>
 80054ca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	603a      	str	r2, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	460b      	mov	r3, r1
 80054e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 80054e4:	79b9      	ldrb	r1, [r7, #6]
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fb7a 	bl	8005be4 <USER_SPI_ioctl>
 80054f0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <SPI_Timer_On>:
BYTE CardType;      /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005504:	f7fc fda0 	bl	8002048 <HAL_GetTick>
 8005508:	4603      	mov	r3, r0
 800550a:	4a04      	ldr	r2, [pc, #16]	; (800551c <SPI_Timer_On+0x20>)
 800550c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800550e:	4a04      	ldr	r2, [pc, #16]	; (8005520 <SPI_Timer_On+0x24>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000d24 	.word	0x20000d24
 8005520:	20000d28 	.word	0x20000d28

08005524 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005528:	f7fc fd8e 	bl	8002048 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <SPI_Timer_Status+0x24>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <SPI_Timer_Status+0x28>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	bf34      	ite	cc
 800553c:	2301      	movcc	r3, #1
 800553e:	2300      	movcs	r3, #0
 8005540:	b2db      	uxtb	r3, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000d24 	.word	0x20000d24
 800554c:	20000d28 	.word	0x20000d28

08005550 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
  BYTE dat  /* Data to send */
)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800555a:	f107 020f 	add.w	r2, r7, #15
 800555e:	1df9      	adds	r1, r7, #7
 8005560:	2332      	movs	r3, #50	; 0x32
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2301      	movs	r3, #1
 8005566:	4804      	ldr	r0, [pc, #16]	; (8005578 <xchg_spi+0x28>)
 8005568:	f7fe fe69 	bl	800423e <HAL_SPI_TransmitReceive>
    return rxDat;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200007b0 	.word	0x200007b0

0800557c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
  BYTE *buff,   /* Pointer to data buffer */
  UINT btr    /* Number of bytes to receive (even number) */
)
{
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  for(UINT i=0; i<btr; i++) {
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e00a      	b.n	80055a2 <rcvr_spi_multi+0x26>
    *(buff+i) = xchg_spi(0xFF);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	18d4      	adds	r4, r2, r3
 8005592:	20ff      	movs	r0, #255	; 0xff
 8005594:	f7ff ffdc 	bl	8005550 <xchg_spi>
 8005598:	4603      	mov	r3, r0
 800559a:	7023      	strb	r3, [r4, #0]
  for(UINT i=0; i<btr; i++) {
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3f0      	bcc.n	800558c <rcvr_spi_multi+0x10>
  }
}
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd90      	pop	{r4, r7, pc}

080055b4 <xmit_spi_multi>:
static
void xmit_spi_multi (
  const BYTE *buff, /* Pointer to the data */
  UINT btx      /* Number of bytes to send (even number) */
)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  for(UINT i=0; i<btx; i++) {
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e009      	b.n	80055d8 <xmit_spi_multi+0x24>
    xchg_spi(*(buff+i));
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff ffbf 	bl	8005550 <xchg_spi>
  for(UINT i=0; i<btx; i++) {
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3f1      	bcc.n	80055c4 <xmit_spi_multi+0x10>
  }
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <wait_ready>:

static
int wait_ready (  /* 1:Ready, 0:Timeout */
  UINT wt     /* Timeout [ms] */
)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  //wait_ready needs its own timer, unfortunately, so it can't use the
  //spi_timer functions
  uint32_t waitSpiTimerTickStart;
  uint32_t waitSpiTimerTickDelay;

  waitSpiTimerTickStart = HAL_GetTick();
 80055f2:	f7fc fd29 	bl	8002048 <HAL_GetTick>
 80055f6:	6178      	str	r0, [r7, #20]
  waitSpiTimerTickDelay = (uint32_t)wt;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	613b      	str	r3, [r7, #16]
  do {
    d = xchg_spi(0xFF);
 80055fc:	20ff      	movs	r0, #255	; 0xff
 80055fe:	f7ff ffa7 	bl	8005550 <xchg_spi>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
    /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
  } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2bff      	cmp	r3, #255	; 0xff
 800560a:	d007      	beq.n	800561c <wait_ready+0x32>
 800560c:	f7fc fd1c 	bl	8002048 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	429a      	cmp	r2, r3
 800561a:	d8ef      	bhi.n	80055fc <wait_ready+0x12>

  return (d == 0xFF) ? 1 : 0;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  CS_HIGH();    /* Set CS# high */
 8005634:	2201      	movs	r2, #1
 8005636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800563a:	4804      	ldr	r0, [pc, #16]	; (800564c <despiselect+0x1c>)
 800563c:	f7fd fc8e 	bl	8002f5c <HAL_GPIO_WritePin>
  xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005640:	20ff      	movs	r0, #255	; 0xff
 8005642:	f7ff ff85 	bl	8005550 <xchg_spi>

}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40020c00 	.word	0x40020c00

08005650 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)  /* 1:OK, 0:Timeout */
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  CS_LOW();   /* Set CS# low */
 8005654:	2200      	movs	r2, #0
 8005656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800565a:	480a      	ldr	r0, [pc, #40]	; (8005684 <spiselect+0x34>)
 800565c:	f7fd fc7e 	bl	8002f5c <HAL_GPIO_WritePin>
  xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8005660:	20ff      	movs	r0, #255	; 0xff
 8005662:	f7ff ff75 	bl	8005550 <xchg_spi>
  if (wait_ready(500)) return 1;  /* Wait for card ready */
 8005666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800566a:	f7ff ffbe 	bl	80055ea <wait_ready>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <spiselect+0x28>
 8005674:	2301      	movs	r3, #1
 8005676:	e002      	b.n	800567e <spiselect+0x2e>

  despiselect();
 8005678:	f7ff ffda 	bl	8005630 <despiselect>
  return 0; /* Timeout */
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40020c00 	.word	0x40020c00

08005688 <rcvr_datablock>:
static
int rcvr_datablock (  /* 1:OK, 0:Error */
  BYTE *buff,     /* Data buffer */
  UINT btr      /* Data block length (byte) */
)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  BYTE token;


  SPI_Timer_On(200);
 8005692:	20c8      	movs	r0, #200	; 0xc8
 8005694:	f7ff ff32 	bl	80054fc <SPI_Timer_On>
  do {              /* Wait for DataStart token in timeout of 200ms */
    token = xchg_spi(0xFF);
 8005698:	20ff      	movs	r0, #255	; 0xff
 800569a:	f7ff ff59 	bl	8005550 <xchg_spi>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
    /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
  } while ((token == 0xFF) && SPI_Timer_Status());
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2bff      	cmp	r3, #255	; 0xff
 80056a6:	d104      	bne.n	80056b2 <rcvr_datablock+0x2a>
 80056a8:	f7ff ff3c 	bl	8005524 <SPI_Timer_Status>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f2      	bne.n	8005698 <rcvr_datablock+0x10>
  if(token != 0xFE) return 0;   /* Function fails if invalid DataStart token or timeout */
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2bfe      	cmp	r3, #254	; 0xfe
 80056b6:	d001      	beq.n	80056bc <rcvr_datablock+0x34>
 80056b8:	2300      	movs	r3, #0
 80056ba:	e00a      	b.n	80056d2 <rcvr_datablock+0x4a>

  rcvr_spi_multi(buff, btr);    /* Store trailing data to the buffer */
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ff5c 	bl	800557c <rcvr_spi_multi>
  xchg_spi(0xFF); xchg_spi(0xFF);     /* Discard CRC */
 80056c4:	20ff      	movs	r0, #255	; 0xff
 80056c6:	f7ff ff43 	bl	8005550 <xchg_spi>
 80056ca:	20ff      	movs	r0, #255	; 0xff
 80056cc:	f7ff ff40 	bl	8005550 <xchg_spi>

  return 1;           /* Function succeeded */
 80056d0:	2301      	movs	r3, #1
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <xmit_datablock>:
static
int xmit_datablock (  /* 1:OK, 0:Failed */
  const BYTE *buff, /* Ponter to 512 byte data to be sent */
  BYTE token      /* Token */
)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70fb      	strb	r3, [r7, #3]
  BYTE resp;


  if (!wait_ready(500)) return 0;   /* Wait for card ready */
 80056e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056ea:	f7ff ff7e 	bl	80055ea <wait_ready>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <xmit_datablock+0x1e>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e01e      	b.n	8005736 <xmit_datablock+0x5c>

  xchg_spi(token);          /* Send token */
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff ff28 	bl	8005550 <xchg_spi>
  if (token != 0xFD) {        /* Send data if token is other than StopTran */
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2bfd      	cmp	r3, #253	; 0xfd
 8005704:	d016      	beq.n	8005734 <xmit_datablock+0x5a>
    xmit_spi_multi(buff, 512);    /* Data */
 8005706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ff52 	bl	80055b4 <xmit_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 8005710:	20ff      	movs	r0, #255	; 0xff
 8005712:	f7ff ff1d 	bl	8005550 <xchg_spi>
 8005716:	20ff      	movs	r0, #255	; 0xff
 8005718:	f7ff ff1a 	bl	8005550 <xchg_spi>

    resp = xchg_spi(0xFF);        /* Receive data resp */
 800571c:	20ff      	movs	r0, #255	; 0xff
 800571e:	f7ff ff17 	bl	8005550 <xchg_spi>
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
    if ((resp & 0x1F) != 0x05) return 0;  /* Function fails if the data packet was not accepted */
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2b05      	cmp	r3, #5
 800572e:	d001      	beq.n	8005734 <xmit_datablock+0x5a>
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <xmit_datablock+0x5c>
  }
  return 1;
 8005734:	2301      	movs	r3, #1
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <send_cmd>:
static
BYTE send_cmd (   /* Return value: R1 resp (bit7==1:Failed to send) */
  BYTE cmd,   /* Command index */
  DWORD arg   /* Argument */
)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	4603      	mov	r3, r0
 8005746:	6039      	str	r1, [r7, #0]
 8005748:	71fb      	strb	r3, [r7, #7]
  BYTE n, res;


  if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	2b00      	cmp	r3, #0
 8005750:	da0e      	bge.n	8005770 <send_cmd+0x32>
    cmd &= 0x7F;
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005758:	71fb      	strb	r3, [r7, #7]
    res = send_cmd(CMD55, 0);
 800575a:	2100      	movs	r1, #0
 800575c:	2037      	movs	r0, #55	; 0x37
 800575e:	f7ff ffee 	bl	800573e <send_cmd>
 8005762:	4603      	mov	r3, r0
 8005764:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d901      	bls.n	8005770 <send_cmd+0x32>
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	e051      	b.n	8005814 <send_cmd+0xd6>
  }

  /* Select the card and wait for ready except to stop multiple block read */
  if (cmd != CMD12) {
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b0c      	cmp	r3, #12
 8005774:	d008      	beq.n	8005788 <send_cmd+0x4a>
    despiselect();
 8005776:	f7ff ff5b 	bl	8005630 <despiselect>
    if (!spiselect()) return 0xFF;
 800577a:	f7ff ff69 	bl	8005650 <spiselect>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <send_cmd+0x4a>
 8005784:	23ff      	movs	r3, #255	; 0xff
 8005786:	e045      	b.n	8005814 <send_cmd+0xd6>
  }

  /* Send command packet */
  xchg_spi(0x40 | cmd);       /* Start + command index */
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fedd 	bl	8005550 <xchg_spi>
  xchg_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	0e1b      	lsrs	r3, r3, #24
 800579a:	b2db      	uxtb	r3, r3
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fed7 	bl	8005550 <xchg_spi>
  xchg_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fed1 	bl	8005550 <xchg_spi>
  xchg_spi((BYTE)(arg >> 8));     /* Argument[15..8] */
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fecb 	bl	8005550 <xchg_spi>
  xchg_spi((BYTE)arg);        /* Argument[7..0] */
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fec6 	bl	8005550 <xchg_spi>
  n = 0x01;             /* Dummy CRC + Stop */
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <send_cmd+0x94>
 80057ce:	2395      	movs	r3, #149	; 0x95
 80057d0:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d101      	bne.n	80057dc <send_cmd+0x9e>
 80057d8:	2387      	movs	r3, #135	; 0x87
 80057da:	73fb      	strb	r3, [r7, #15]
  xchg_spi(n);
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff feb6 	bl	8005550 <xchg_spi>

  /* Receive command resp */
  if (cmd == CMD12) xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	2b0c      	cmp	r3, #12
 80057e8:	d102      	bne.n	80057f0 <send_cmd+0xb2>
 80057ea:	20ff      	movs	r0, #255	; 0xff
 80057ec:	f7ff feb0 	bl	8005550 <xchg_spi>
  n = 10;               /* Wait for response (10 bytes max) */
 80057f0:	230a      	movs	r3, #10
 80057f2:	73fb      	strb	r3, [r7, #15]
  do {
    res = xchg_spi(0xFF);
 80057f4:	20ff      	movs	r0, #255	; 0xff
 80057f6:	f7ff feab 	bl	8005550 <xchg_spi>
 80057fa:	4603      	mov	r3, r0
 80057fc:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80057fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005802:	2b00      	cmp	r3, #0
 8005804:	da05      	bge.n	8005812 <send_cmd+0xd4>
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	3b01      	subs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <send_cmd+0xb6>

  return res;             /* Return received response */
 8005812:	7bbb      	ldrb	r3, [r7, #14]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
  BYTE drv    /* Physical drive number (0) */
)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
  BYTE n, cmd, ty, ocr[4];

  if (drv != 0) return STA_NOINIT;    /* Supports only drive 0 */
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <USER_SPI_initialize+0x14>
 800582c:	2301      	movs	r3, #1
 800582e:	e0d6      	b.n	80059de <USER_SPI_initialize+0x1c2>
  //assume SPI already init init_spi(); /* Initialize SPI */

  if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 8005830:	4b6d      	ldr	r3, [pc, #436]	; (80059e8 <USER_SPI_initialize+0x1cc>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <USER_SPI_initialize+0x2a>
 800583e:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <USER_SPI_initialize+0x1cc>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e0cb      	b.n	80059de <USER_SPI_initialize+0x1c2>

  FCLK_SLOW();
 8005846:	4b69      	ldr	r3, [pc, #420]	; (80059ec <USER_SPI_initialize+0x1d0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005850:	4b66      	ldr	r3, [pc, #408]	; (80059ec <USER_SPI_initialize+0x1d0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005858:	601a      	str	r2, [r3, #0]
  for (n = 10; n; n--) xchg_spi(0xFF);  /* Send 80 dummy clocks */
 800585a:	230a      	movs	r3, #10
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e005      	b.n	800586c <USER_SPI_initialize+0x50>
 8005860:	20ff      	movs	r0, #255	; 0xff
 8005862:	f7ff fe75 	bl	8005550 <xchg_spi>
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	3b01      	subs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f6      	bne.n	8005860 <USER_SPI_initialize+0x44>

  ty = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	737b      	strb	r3, [r7, #13]
  if (send_cmd(CMD0, 0) == 1) {     /* Put the card SPI/Idle state */
 8005876:	2100      	movs	r1, #0
 8005878:	2000      	movs	r0, #0
 800587a:	f7ff ff60 	bl	800573e <send_cmd>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	f040 808b 	bne.w	800599c <USER_SPI_initialize+0x180>
    SPI_Timer_On(1000);         /* Initialization timeout = 1 sec */
 8005886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800588a:	f7ff fe37 	bl	80054fc <SPI_Timer_On>
    if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 800588e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005892:	2008      	movs	r0, #8
 8005894:	f7ff ff53 	bl	800573e <send_cmd>
 8005898:	4603      	mov	r3, r0
 800589a:	2b01      	cmp	r3, #1
 800589c:	d151      	bne.n	8005942 <USER_SPI_initialize+0x126>
      for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);  /* Get 32 bit return value of R7 resp */
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e00d      	b.n	80058c0 <USER_SPI_initialize+0xa4>
 80058a4:	7bfc      	ldrb	r4, [r7, #15]
 80058a6:	20ff      	movs	r0, #255	; 0xff
 80058a8:	f7ff fe52 	bl	8005550 <xchg_spi>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	4423      	add	r3, r4
 80058b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	3301      	adds	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d9ee      	bls.n	80058a4 <USER_SPI_initialize+0x88>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {       /* Is the card supports vcc of 2.7-3.6V? */
 80058c6:	7abb      	ldrb	r3, [r7, #10]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d167      	bne.n	800599c <USER_SPI_initialize+0x180>
 80058cc:	7afb      	ldrb	r3, [r7, #11]
 80058ce:	2baa      	cmp	r3, #170	; 0xaa
 80058d0:	d164      	bne.n	800599c <USER_SPI_initialize+0x180>
        while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 80058d2:	bf00      	nop
 80058d4:	f7ff fe26 	bl	8005524 <SPI_Timer_Status>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <USER_SPI_initialize+0xd2>
 80058de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058e2:	20a9      	movs	r0, #169	; 0xa9
 80058e4:	f7ff ff2b 	bl	800573e <send_cmd>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f2      	bne.n	80058d4 <USER_SPI_initialize+0xb8>
        if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
 80058ee:	f7ff fe19 	bl	8005524 <SPI_Timer_Status>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d051      	beq.n	800599c <USER_SPI_initialize+0x180>
 80058f8:	2100      	movs	r1, #0
 80058fa:	203a      	movs	r0, #58	; 0x3a
 80058fc:	f7ff ff1f 	bl	800573e <send_cmd>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d14a      	bne.n	800599c <USER_SPI_initialize+0x180>
          for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
 800590a:	e00d      	b.n	8005928 <USER_SPI_initialize+0x10c>
 800590c:	7bfc      	ldrb	r4, [r7, #15]
 800590e:	20ff      	movs	r0, #255	; 0xff
 8005910:	f7ff fe1e 	bl	8005550 <xchg_spi>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	f107 0310 	add.w	r3, r7, #16
 800591c:	4423      	add	r3, r4
 800591e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	3301      	adds	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d9ee      	bls.n	800590c <USER_SPI_initialize+0xf0>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800592e:	7a3b      	ldrb	r3, [r7, #8]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <USER_SPI_initialize+0x120>
 8005938:	230c      	movs	r3, #12
 800593a:	e000      	b.n	800593e <USER_SPI_initialize+0x122>
 800593c:	2304      	movs	r3, #4
 800593e:	737b      	strb	r3, [r7, #13]
 8005940:	e02c      	b.n	800599c <USER_SPI_initialize+0x180>
        }
      }
    } else {  /* Not SDv2 card */
      if (send_cmd(ACMD41, 0) <= 1)   { /* SDv1 or MMC? */
 8005942:	2100      	movs	r1, #0
 8005944:	20a9      	movs	r0, #169	; 0xa9
 8005946:	f7ff fefa 	bl	800573e <send_cmd>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d804      	bhi.n	800595a <USER_SPI_initialize+0x13e>
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 8005950:	2302      	movs	r3, #2
 8005952:	737b      	strb	r3, [r7, #13]
 8005954:	23a9      	movs	r3, #169	; 0xa9
 8005956:	73bb      	strb	r3, [r7, #14]
 8005958:	e003      	b.n	8005962 <USER_SPI_initialize+0x146>
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 (CMD1(0)) */
 800595a:	2301      	movs	r3, #1
 800595c:	737b      	strb	r3, [r7, #13]
 800595e:	2301      	movs	r3, #1
 8005960:	73bb      	strb	r3, [r7, #14]
      }
      while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;    /* Wait for end of initialization */
 8005962:	bf00      	nop
 8005964:	f7ff fdde 	bl	8005524 <SPI_Timer_Status>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <USER_SPI_initialize+0x162>
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fee3 	bl	800573e <send_cmd>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f2      	bne.n	8005964 <USER_SPI_initialize+0x148>
      if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 800597e:	f7ff fdd1 	bl	8005524 <SPI_Timer_Status>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <USER_SPI_initialize+0x17c>
 8005988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800598c:	2010      	movs	r0, #16
 800598e:	f7ff fed6 	bl	800573e <send_cmd>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <USER_SPI_initialize+0x180>
        ty = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	737b      	strb	r3, [r7, #13]
    }
  }
  CardType = ty;  /* Card type */
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <USER_SPI_initialize+0x1d4>)
 800599e:	7b7b      	ldrb	r3, [r7, #13]
 80059a0:	7013      	strb	r3, [r2, #0]
  despiselect();
 80059a2:	f7ff fe45 	bl	8005630 <despiselect>

  if (ty) {     /* OK */
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <USER_SPI_initialize+0x1b6>
    FCLK_FAST();      /* Set fast clock */
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <USER_SPI_initialize+0x1d0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <USER_SPI_initialize+0x1d0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0210 	orr.w	r2, r2, #16
 80059be:	601a      	str	r2, [r3, #0]
    Stat &= ~STA_NOINIT;  /* Clear STA_NOINIT flag */
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <USER_SPI_initialize+0x1cc>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <USER_SPI_initialize+0x1cc>)
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e002      	b.n	80059d8 <USER_SPI_initialize+0x1bc>
  } else {      /* Failed */
    Stat = STA_NOINIT;
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <USER_SPI_initialize+0x1cc>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <USER_SPI_initialize+0x1cc>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd90      	pop	{r4, r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000024 	.word	0x20000024
 80059ec:	200007b0 	.word	0x200007b0
 80059f0:	200004c8 	.word	0x200004c8

080059f4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
  BYTE drv    /* Physical drive number (0) */
)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;   /* Supports only drive 0 */
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <USER_SPI_status+0x14>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e002      	b.n	8005a0e <USER_SPI_status+0x1a>

  return Stat;  /* Return disk status */
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <USER_SPI_status+0x28>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000024 	.word	0x20000024

08005a20 <USER_SPI_read>:
  BYTE drv,   /* Physical drive number (0) */
  BYTE *buff,   /* Pointer to the data buffer to store read data */
  DWORD sector, /* Start sector number (LBA) */
  UINT count    /* Number of sectors to read (1..128) */
)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  if (drv || !count) return RES_PARERR;   /* Check parameter */
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <USER_SPI_read+0x1c>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <USER_SPI_read+0x20>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	e04d      	b.n	8005adc <USER_SPI_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <USER_SPI_read+0xc4>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <USER_SPI_read+0x32>
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e044      	b.n	8005adc <USER_SPI_read+0xbc>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 8005a52:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <USER_SPI_read+0xc8>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <USER_SPI_read+0x44>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	025b      	lsls	r3, r3, #9
 8005a62:	607b      	str	r3, [r7, #4]

  if (count == 1) { /* Single sector read */
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d111      	bne.n	8005a8e <USER_SPI_read+0x6e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	2011      	movs	r0, #17
 8005a6e:	f7ff fe66 	bl	800573e <send_cmd>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d129      	bne.n	8005acc <USER_SPI_read+0xac>
      && rcvr_datablock(buff, 512)) {
 8005a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f7ff fe03 	bl	8005688 <rcvr_datablock>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d021      	beq.n	8005acc <USER_SPI_read+0xac>
      count = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	e01e      	b.n	8005acc <USER_SPI_read+0xac>
    }
  }
  else {        /* Multiple sector read */
    if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	2012      	movs	r0, #18
 8005a92:	f7ff fe54 	bl	800573e <send_cmd>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d117      	bne.n	8005acc <USER_SPI_read+0xac>
      do {
        if (!rcvr_datablock(buff, 512)) break;
 8005a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aa0:	68b8      	ldr	r0, [r7, #8]
 8005aa2:	f7ff fdf1 	bl	8005688 <rcvr_datablock>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <USER_SPI_read+0xa2>
        buff += 512;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ab2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ed      	bne.n	8005a9c <USER_SPI_read+0x7c>
 8005ac0:	e000      	b.n	8005ac4 <USER_SPI_read+0xa4>
        if (!rcvr_datablock(buff, 512)) break;
 8005ac2:	bf00      	nop
      send_cmd(CMD12, 0);       /* STOP_TRANSMISSION */
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	200c      	movs	r0, #12
 8005ac8:	f7ff fe39 	bl	800573e <send_cmd>
    }
  }
  despiselect();
 8005acc:	f7ff fdb0 	bl	8005630 <despiselect>

  return count ? RES_ERROR : RES_OK;  /* Return result */
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000024 	.word	0x20000024
 8005ae8:	200004c8 	.word	0x200004c8

08005aec <USER_SPI_write>:
  BYTE drv,     /* Physical drive number (0) */
  const BYTE *buff, /* Ponter to the data to write */
  DWORD sector,   /* Start sector number (LBA) */
  UINT count      /* Number of sectors to write (1..128) */
)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]
  if (drv || !count) return RES_PARERR;   /* Check parameter */
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <USER_SPI_write+0x1c>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <USER_SPI_write+0x20>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	e063      	b.n	8005bd4 <USER_SPI_write+0xe8>
  if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check drive status */
 8005b0c:	4b33      	ldr	r3, [pc, #204]	; (8005bdc <USER_SPI_write+0xf0>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <USER_SPI_write+0x32>
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e05a      	b.n	8005bd4 <USER_SPI_write+0xe8>
  if (Stat & STA_PROTECT) return RES_WRPRT; /* Check write protect */
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <USER_SPI_write+0xf0>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <USER_SPI_write+0x44>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e051      	b.n	8005bd4 <USER_SPI_write+0xe8>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 8005b30:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <USER_SPI_write+0xf4>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <USER_SPI_write+0x56>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	025b      	lsls	r3, r3, #9
 8005b40:	607b      	str	r3, [r7, #4]

  if (count == 1) { /* Single sector write */
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d110      	bne.n	8005b6a <USER_SPI_write+0x7e>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	2018      	movs	r0, #24
 8005b4c:	f7ff fdf7 	bl	800573e <send_cmd>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d136      	bne.n	8005bc4 <USER_SPI_write+0xd8>
      && xmit_datablock(buff, 0xFE)) {
 8005b56:	21fe      	movs	r1, #254	; 0xfe
 8005b58:	68b8      	ldr	r0, [r7, #8]
 8005b5a:	f7ff fdbe 	bl	80056da <xmit_datablock>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02f      	beq.n	8005bc4 <USER_SPI_write+0xd8>
      count = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	e02c      	b.n	8005bc4 <USER_SPI_write+0xd8>
    }
  }
  else {        /* Multiple sector write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <USER_SPI_write+0xf4>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f003 0306 	and.w	r3, r3, #6
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <USER_SPI_write+0x92>
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	2097      	movs	r0, #151	; 0x97
 8005b7a:	f7ff fde0 	bl	800573e <send_cmd>
    if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	2019      	movs	r0, #25
 8005b82:	f7ff fddc 	bl	800573e <send_cmd>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11b      	bne.n	8005bc4 <USER_SPI_write+0xd8>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
 8005b8c:	21fc      	movs	r1, #252	; 0xfc
 8005b8e:	68b8      	ldr	r0, [r7, #8]
 8005b90:	f7ff fda3 	bl	80056da <xmit_datablock>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <USER_SPI_write+0xc4>
        buff += 512;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ba0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ee      	bne.n	8005b8c <USER_SPI_write+0xa0>
 8005bae:	e000      	b.n	8005bb2 <USER_SPI_write+0xc6>
        if (!xmit_datablock(buff, 0xFC)) break;
 8005bb0:	bf00      	nop
      if (!xmit_datablock(0, 0xFD)) count = 1;  /* STOP_TRAN token */
 8005bb2:	21fd      	movs	r1, #253	; 0xfd
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7ff fd90 	bl	80056da <xmit_datablock>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USER_SPI_write+0xd8>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	603b      	str	r3, [r7, #0]
    }
  }
  despiselect();
 8005bc4:	f7ff fd34 	bl	8005630 <despiselect>

  return count ? RES_ERROR : RES_OK;  /* Return result */
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000024 	.word	0x20000024
 8005be0:	200004c8 	.word	0x200004c8

08005be4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
  BYTE drv,   /* Physical drive number (0) */
  BYTE cmd,   /* Control command code */
  void *buff    /* Pointer to the conrtol data */
)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08c      	sub	sp, #48	; 0x30
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	603a      	str	r2, [r7, #0]
 8005bee:	71fb      	strb	r3, [r7, #7]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16];
  DWORD *dp, st, ed, csize;


  if (drv) return RES_PARERR;         /* Check parameter */
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <USER_SPI_ioctl+0x1a>
 8005bfa:	2304      	movs	r3, #4
 8005bfc:	e15a      	b.n	8005eb4 <USER_SPI_ioctl+0x2d0>
  if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
 8005bfe:	4baf      	ldr	r3, [pc, #700]	; (8005ebc <USER_SPI_ioctl+0x2d8>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <USER_SPI_ioctl+0x2c>
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e151      	b.n	8005eb4 <USER_SPI_ioctl+0x2d0>

  res = RES_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  switch (cmd) {
 8005c16:	79bb      	ldrb	r3, [r7, #6]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	f200 8136 	bhi.w	8005e8a <USER_SPI_ioctl+0x2a6>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <USER_SPI_ioctl+0x40>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c39 	.word	0x08005c39
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005e8b 	.word	0x08005e8b
 8005c30:	08005cf9 	.word	0x08005cf9
 8005c34:	08005def 	.word	0x08005def
  case CTRL_SYNC :    /* Wait for end of internal write process of the drive */
    if (spiselect()) res = RES_OK;
 8005c38:	f7ff fd0a 	bl	8005650 <spiselect>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8127 	beq.w	8005e92 <USER_SPI_ioctl+0x2ae>
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c4a:	e122      	b.n	8005e92 <USER_SPI_ioctl+0x2ae>

  case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
    if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	2009      	movs	r0, #9
 8005c50:	f7ff fd75 	bl	800573e <send_cmd>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 811d 	bne.w	8005e96 <USER_SPI_ioctl+0x2b2>
 8005c5c:	f107 030c 	add.w	r3, r7, #12
 8005c60:	2110      	movs	r1, #16
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fd10 	bl	8005688 <rcvr_datablock>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8113 	beq.w	8005e96 <USER_SPI_ioctl+0x2b2>
      if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8005c70:	7b3b      	ldrb	r3, [r7, #12]
 8005c72:	099b      	lsrs	r3, r3, #6
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d111      	bne.n	8005c9e <USER_SPI_ioctl+0xba>
        csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005c7a:	7d7b      	ldrb	r3, [r7, #21]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	7d3b      	ldrb	r3, [r7, #20]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	4413      	add	r3, r2
 8005c84:	461a      	mov	r2, r3
 8005c86:	7cfb      	ldrb	r3, [r7, #19]
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005c8e:	4413      	add	r3, r2
 8005c90:	3301      	adds	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
        *(DWORD*)buff = csize << 10;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	029a      	lsls	r2, r3, #10
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e028      	b.n	8005cf0 <USER_SPI_ioctl+0x10c>
      } else {          /* SDC ver 1.XX or MMC ver 3 */
        n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005c9e:	7c7b      	ldrb	r3, [r7, #17]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	7dbb      	ldrb	r3, [r7, #22]
 8005ca8:	09db      	lsrs	r3, r3, #7
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	7d7b      	ldrb	r3, [r7, #21]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 0306 	and.w	r3, r3, #6
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005cc6:	7d3b      	ldrb	r3, [r7, #20]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	7cfb      	ldrb	r3, [r7, #19]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	7cbb      	ldrb	r3, [r7, #18]
 8005cd6:	029b      	lsls	r3, r3, #10
 8005cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cdc:	4413      	add	r3, r2
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
        *(DWORD*)buff = csize << (n - 9);
 8005ce2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ce6:	3b09      	subs	r3, #9
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	409a      	lsls	r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	601a      	str	r2, [r3, #0]
      }
      res = RES_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    break;
 8005cf6:	e0ce      	b.n	8005e96 <USER_SPI_ioctl+0x2b2>

  case GET_BLOCK_SIZE : /* Get erase block size in unit of sector (DWORD) */
    if (CardType & CT_SD2) {  /* SDC ver 2.00 */
 8005cf8:	4b71      	ldr	r3, [pc, #452]	; (8005ec0 <USER_SPI_ioctl+0x2dc>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d031      	beq.n	8005d68 <USER_SPI_ioctl+0x184>
      if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8005d04:	2100      	movs	r1, #0
 8005d06:	208d      	movs	r0, #141	; 0x8d
 8005d08:	f7ff fd19 	bl	800573e <send_cmd>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 80c3 	bne.w	8005e9a <USER_SPI_ioctl+0x2b6>
        xchg_spi(0xFF);
 8005d14:	20ff      	movs	r0, #255	; 0xff
 8005d16:	f7ff fc1b 	bl	8005550 <xchg_spi>
        if (rcvr_datablock(csd, 16)) {        /* Read partial block */
 8005d1a:	f107 030c 	add.w	r3, r7, #12
 8005d1e:	2110      	movs	r1, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fcb1 	bl	8005688 <rcvr_datablock>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80b6 	beq.w	8005e9a <USER_SPI_ioctl+0x2b6>
          for (n = 64 - 16; n; n--) xchg_spi(0xFF); /* Purge trailing data */
 8005d2e:	2330      	movs	r3, #48	; 0x30
 8005d30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005d34:	e007      	b.n	8005d46 <USER_SPI_ioctl+0x162>
 8005d36:	20ff      	movs	r0, #255	; 0xff
 8005d38:	f7ff fc0a 	bl	8005550 <xchg_spi>
 8005d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d40:	3b01      	subs	r3, #1
 8005d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005d46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f3      	bne.n	8005d36 <USER_SPI_ioctl+0x152>
          *(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005d4e:	7dbb      	ldrb	r3, [r7, #22]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	2310      	movs	r3, #16
 8005d58:	fa03 f202 	lsl.w	r2, r3, r2
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	601a      	str	r2, [r3, #0]
          res = RES_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
        }
        res = RES_OK;
      }
    }
    break;
 8005d66:	e098      	b.n	8005e9a <USER_SPI_ioctl+0x2b6>
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 8005d68:	2100      	movs	r1, #0
 8005d6a:	2009      	movs	r0, #9
 8005d6c:	f7ff fce7 	bl	800573e <send_cmd>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 8091 	bne.w	8005e9a <USER_SPI_ioctl+0x2b6>
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	2110      	movs	r1, #16
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fc82 	bl	8005688 <rcvr_datablock>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8087 	beq.w	8005e9a <USER_SPI_ioctl+0x2b6>
        if (CardType & CT_SD1) {  /* SDC ver 1.XX */
 8005d8c:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <USER_SPI_ioctl+0x2dc>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d012      	beq.n	8005dbe <USER_SPI_ioctl+0x1da>
          *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005da0:	7dfa      	ldrb	r2, [r7, #23]
 8005da2:	09d2      	lsrs	r2, r2, #7
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	4413      	add	r3, r2
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	7e7b      	ldrb	r3, [r7, #25]
 8005dac:	099b      	lsrs	r3, r3, #6
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e013      	b.n	8005de6 <USER_SPI_ioctl+0x202>
          *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005dbe:	7dbb      	ldrb	r3, [r7, #22]
 8005dc0:	109b      	asrs	r3, r3, #2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	3301      	adds	r3, #1
 8005dca:	7dfa      	ldrb	r2, [r7, #23]
 8005dcc:	00d2      	lsls	r2, r2, #3
 8005dce:	f002 0218 	and.w	r2, r2, #24
 8005dd2:	7df9      	ldrb	r1, [r7, #23]
 8005dd4:	0949      	lsrs	r1, r1, #5
 8005dd6:	b2c9      	uxtb	r1, r1
 8005dd8:	440a      	add	r2, r1
 8005dda:	3201      	adds	r2, #1
 8005ddc:	fb02 f303 	mul.w	r3, r2, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	601a      	str	r2, [r3, #0]
        res = RES_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005dec:	e055      	b.n	8005e9a <USER_SPI_ioctl+0x2b6>

  case CTRL_TRIM :  /* Erase a block of sectors (used when _USE_ERASE == 1) */
    if (!(CardType & CT_SDC)) break;        /* Check if the card is SDC */
 8005dee:	4b34      	ldr	r3, [pc, #208]	; (8005ec0 <USER_SPI_ioctl+0x2dc>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	f003 0306 	and.w	r3, r3, #6
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d051      	beq.n	8005e9e <USER_SPI_ioctl+0x2ba>
    if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
 8005dfa:	f107 020c 	add.w	r2, r7, #12
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	210b      	movs	r1, #11
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff feee 	bl	8005be4 <USER_SPI_ioctl>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d149      	bne.n	8005ea2 <USER_SPI_ioctl+0x2be>
    if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 8005e0e:	7b3b      	ldrb	r3, [r7, #12]
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <USER_SPI_ioctl+0x23e>
 8005e18:	7dbb      	ldrb	r3, [r7, #22]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d041      	beq.n	8005ea6 <USER_SPI_ioctl+0x2c2>
    dp = buff; st = dp[0]; ed = dp[1];        /* Load sector block */
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	623b      	str	r3, [r7, #32]
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
    if (!(CardType & CT_BLOCK)) {
 8005e32:	4b23      	ldr	r3, [pc, #140]	; (8005ec0 <USER_SPI_ioctl+0x2dc>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d105      	bne.n	8005e4a <USER_SPI_ioctl+0x266>
      st *= 512; ed *= 512;
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	025b      	lsls	r3, r3, #9
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	025b      	lsls	r3, r3, #9
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8005e4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e4c:	2020      	movs	r0, #32
 8005e4e:	f7ff fc76 	bl	800573e <send_cmd>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d128      	bne.n	8005eaa <USER_SPI_ioctl+0x2c6>
 8005e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e5a:	2021      	movs	r0, #33	; 0x21
 8005e5c:	f7ff fc6f 	bl	800573e <send_cmd>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d121      	bne.n	8005eaa <USER_SPI_ioctl+0x2c6>
 8005e66:	2100      	movs	r1, #0
 8005e68:	2026      	movs	r0, #38	; 0x26
 8005e6a:	f7ff fc68 	bl	800573e <send_cmd>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11a      	bne.n	8005eaa <USER_SPI_ioctl+0x2c6>
 8005e74:	f247 5030 	movw	r0, #30000	; 0x7530
 8005e78:	f7ff fbb7 	bl	80055ea <wait_ready>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <USER_SPI_ioctl+0x2c6>
      res = RES_OK; /* FatFs does not check result of this command */
 8005e82:	2300      	movs	r3, #0
 8005e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    break;
 8005e88:	e00f      	b.n	8005eaa <USER_SPI_ioctl+0x2c6>

  default:
    res = RES_PARERR;
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e90:	e00c      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    break;
 8005e92:	bf00      	nop
 8005e94:	e00a      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    break;
 8005e96:	bf00      	nop
 8005e98:	e008      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    break;
 8005e9a:	bf00      	nop
 8005e9c:	e006      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    if (!(CardType & CT_SDC)) break;        /* Check if the card is SDC */
 8005e9e:	bf00      	nop
 8005ea0:	e004      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <USER_SPI_ioctl+0x2c8>
    break;
 8005eaa:	bf00      	nop
  }

  despiselect();
 8005eac:	f7ff fbc0 	bl	8005630 <despiselect>

  return res;
 8005eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3730      	adds	r7, #48	; 0x30
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000024 	.word	0x20000024
 8005ec0:	200004c8 	.word	0x200004c8

08005ec4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <disk_status+0x30>)
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	79fa      	ldrb	r2, [r7, #7]
 8005edc:	4905      	ldr	r1, [pc, #20]	; (8005ef4 <disk_status+0x30>)
 8005ede:	440a      	add	r2, r1
 8005ee0:	7a12      	ldrb	r2, [r2, #8]
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4798      	blx	r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	200006f4 	.word	0x200006f4

08005ef8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <disk_initialize+0x48>)
 8005f0a:	5cd3      	ldrb	r3, [r2, r3]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d111      	bne.n	8005f34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	4a0b      	ldr	r2, [pc, #44]	; (8005f40 <disk_initialize+0x48>)
 8005f14:	2101      	movs	r1, #1
 8005f16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <disk_initialize+0x48>)
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	79fa      	ldrb	r2, [r7, #7]
 8005f26:	4906      	ldr	r1, [pc, #24]	; (8005f40 <disk_initialize+0x48>)
 8005f28:	440a      	add	r2, r1
 8005f2a:	7a12      	ldrb	r2, [r2, #8]
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	200006f4 	.word	0x200006f4

08005f44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	4a0a      	ldr	r2, [pc, #40]	; (8005f80 <disk_read+0x3c>)
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	689c      	ldr	r4, [r3, #8]
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4a07      	ldr	r2, [pc, #28]	; (8005f80 <disk_read+0x3c>)
 8005f64:	4413      	add	r3, r2
 8005f66:	7a18      	ldrb	r0, [r3, #8]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	47a0      	blx	r4
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200006f4 	.word	0x200006f4

08005f84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <disk_write+0x3c>)
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68dc      	ldr	r4, [r3, #12]
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <disk_write+0x3c>)
 8005fa4:	4413      	add	r3, r2
 8005fa6:	7a18      	ldrb	r0, [r3, #8]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	47a0      	blx	r4
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200006f4 	.word	0x200006f4

08005fc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	603a      	str	r2, [r7, #0]
 8005fce:	71fb      	strb	r3, [r7, #7]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <disk_ioctl+0x38>)
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	79fa      	ldrb	r2, [r7, #7]
 8005fe2:	4906      	ldr	r1, [pc, #24]	; (8005ffc <disk_ioctl+0x38>)
 8005fe4:	440a      	add	r2, r1
 8005fe6:	7a10      	ldrb	r0, [r2, #8]
 8005fe8:	79b9      	ldrb	r1, [r7, #6]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	4798      	blx	r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200006f4 	.word	0x200006f4

08006000 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3301      	adds	r3, #1
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	b21a      	sxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b21b      	sxth	r3, r3
 800601c:	4313      	orrs	r3, r2
 800601e:	b21b      	sxth	r3, r3
 8006020:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006022:	89fb      	ldrh	r3, [r7, #14]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3303      	adds	r3, #3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	3202      	adds	r2, #2
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	3201      	adds	r2, #1
 8006056:	7812      	ldrb	r2, [r2, #0]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
	return rv;
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	887a      	ldrh	r2, [r7, #2]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	1c53      	adds	r3, r2, #1
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	6179      	str	r1, [r7, #20]
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3b01      	subs	r3, #1
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f1      	bne.n	800611e <mem_cpy+0x1a>
	}
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	617a      	str	r2, [r7, #20]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3b01      	subs	r3, #1
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f3      	bne.n	8006156 <mem_set+0x10>
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	; 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	61fa      	str	r2, [r7, #28]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	61ba      	str	r2, [r7, #24]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	1acb      	subs	r3, r1, r3
 80061a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	607b      	str	r3, [r7, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <mem_cmp+0x40>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0eb      	beq.n	8006194 <mem_cmp+0x18>

	return r;
 80061bc:	697b      	ldr	r3, [r7, #20]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061d4:	e002      	b.n	80061dc <chk_chr+0x12>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3301      	adds	r3, #1
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <chk_chr+0x26>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d1f2      	bne.n	80061d6 <chk_chr+0xc>
	return *str;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	781b      	ldrb	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e029      	b.n	8006268 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006214:	4a27      	ldr	r2, [pc, #156]	; (80062b4 <chk_lock+0xb4>)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	4413      	add	r3, r2
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01d      	beq.n	800625e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006222:	4a24      	ldr	r2, [pc, #144]	; (80062b4 <chk_lock+0xb4>)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	4413      	add	r3, r2
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d116      	bne.n	8006262 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006234:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <chk_lock+0xb4>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006244:	429a      	cmp	r2, r3
 8006246:	d10c      	bne.n	8006262 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006248:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <chk_lock+0xb4>)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	4413      	add	r3, r2
 8006250:	3308      	adds	r3, #8
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006258:	429a      	cmp	r2, r3
 800625a:	d102      	bne.n	8006262 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800625c:	e007      	b.n	800626e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800625e:	2301      	movs	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d9d2      	bls.n	8006214 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d109      	bne.n	8006288 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <chk_lock+0x80>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d101      	bne.n	8006284 <chk_lock+0x84>
 8006280:	2300      	movs	r3, #0
 8006282:	e010      	b.n	80062a6 <chk_lock+0xa6>
 8006284:	2312      	movs	r3, #18
 8006286:	e00e      	b.n	80062a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <chk_lock+0xa0>
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <chk_lock+0xb4>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	330c      	adds	r3, #12
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629e:	d101      	bne.n	80062a4 <chk_lock+0xa4>
 80062a0:	2310      	movs	r3, #16
 80062a2:	e000      	b.n	80062a6 <chk_lock+0xa6>
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	200004d4 	.word	0x200004d4

080062b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	e002      	b.n	80062ca <enq_lock+0x12>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3301      	adds	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d806      	bhi.n	80062de <enq_lock+0x26>
 80062d0:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <enq_lock+0x40>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	4413      	add	r3, r2
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f2      	bne.n	80062c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	200004d4 	.word	0x200004d4

080062fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e01f      	b.n	800634c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800630c:	4a41      	ldr	r2, [pc, #260]	; (8006414 <inc_lock+0x118>)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	4413      	add	r3, r2
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d113      	bne.n	8006346 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800631e:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <inc_lock+0x118>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	4413      	add	r3, r2
 8006326:	3304      	adds	r3, #4
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800632e:	429a      	cmp	r2, r3
 8006330:	d109      	bne.n	8006346 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006332:	4a38      	ldr	r2, [pc, #224]	; (8006414 <inc_lock+0x118>)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4413      	add	r3, r2
 800633a:	3308      	adds	r3, #8
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006342:	429a      	cmp	r2, r3
 8006344:	d006      	beq.n	8006354 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d9dc      	bls.n	800630c <inc_lock+0x10>
 8006352:	e000      	b.n	8006356 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006354:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d132      	bne.n	80063c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <inc_lock+0x6c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d806      	bhi.n	800637c <inc_lock+0x80>
 800636e:	4a29      	ldr	r2, [pc, #164]	; (8006414 <inc_lock+0x118>)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	4413      	add	r3, r2
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f2      	bne.n	8006362 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d101      	bne.n	8006386 <inc_lock+0x8a>
 8006382:	2300      	movs	r3, #0
 8006384:	e040      	b.n	8006408 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4922      	ldr	r1, [pc, #136]	; (8006414 <inc_lock+0x118>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	440b      	add	r3, r1
 8006392:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	491e      	ldr	r1, [pc, #120]	; (8006414 <inc_lock+0x118>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	440b      	add	r3, r1
 80063a0:	3304      	adds	r3, #4
 80063a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	491a      	ldr	r1, [pc, #104]	; (8006414 <inc_lock+0x118>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	440b      	add	r3, r1
 80063b0:	3308      	adds	r3, #8
 80063b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80063b4:	4a17      	ldr	r2, [pc, #92]	; (8006414 <inc_lock+0x118>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	4413      	add	r3, r2
 80063bc:	330c      	adds	r3, #12
 80063be:	2200      	movs	r2, #0
 80063c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <inc_lock+0xe0>
 80063c8:	4a12      	ldr	r2, [pc, #72]	; (8006414 <inc_lock+0x118>)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	4413      	add	r3, r2
 80063d0:	330c      	adds	r3, #12
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <inc_lock+0xe0>
 80063d8:	2300      	movs	r3, #0
 80063da:	e015      	b.n	8006408 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d108      	bne.n	80063f4 <inc_lock+0xf8>
 80063e2:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <inc_lock+0x118>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	4413      	add	r3, r2
 80063ea:	330c      	adds	r3, #12
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	3301      	adds	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	e001      	b.n	80063f8 <inc_lock+0xfc>
 80063f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063f8:	4906      	ldr	r1, [pc, #24]	; (8006414 <inc_lock+0x118>)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	440b      	add	r3, r1
 8006400:	330c      	adds	r3, #12
 8006402:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	200004d4 	.word	0x200004d4

08006418 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3b01      	subs	r3, #1
 8006424:	607b      	str	r3, [r7, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d825      	bhi.n	8006478 <dec_lock+0x60>
		n = Files[i].ctr;
 800642c:	4a17      	ldr	r2, [pc, #92]	; (800648c <dec_lock+0x74>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	4413      	add	r3, r2
 8006434:	330c      	adds	r3, #12
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d101      	bne.n	8006446 <dec_lock+0x2e>
 8006442:	2300      	movs	r3, #0
 8006444:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006446:	89fb      	ldrh	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <dec_lock+0x3a>
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	3b01      	subs	r3, #1
 8006450:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006452:	4a0e      	ldr	r2, [pc, #56]	; (800648c <dec_lock+0x74>)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	4413      	add	r3, r2
 800645a:	330c      	adds	r3, #12
 800645c:	89fa      	ldrh	r2, [r7, #14]
 800645e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <dec_lock+0x5a>
 8006466:	4a09      	ldr	r2, [pc, #36]	; (800648c <dec_lock+0x74>)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	4413      	add	r3, r2
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	737b      	strb	r3, [r7, #13]
 8006476:	e001      	b.n	800647c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006478:	2302      	movs	r3, #2
 800647a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800647c:	7b7b      	ldrb	r3, [r7, #13]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	200004d4 	.word	0x200004d4

08006490 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e010      	b.n	80064c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800649e:	4a0d      	ldr	r2, [pc, #52]	; (80064d4 <clear_lock+0x44>)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	4413      	add	r3, r2
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d105      	bne.n	80064ba <clear_lock+0x2a>
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <clear_lock+0x44>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	4413      	add	r3, r2
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3301      	adds	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d9eb      	bls.n	800649e <clear_lock+0xe>
	}
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	200004d4 	.word	0x200004d4

080064d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	78db      	ldrb	r3, [r3, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d034      	beq.n	8006556 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7858      	ldrb	r0, [r3, #1]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064fc:	2301      	movs	r3, #1
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	f7ff fd40 	bl	8005f84 <disk_write>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <sync_window+0x38>
			res = FR_DISK_ERR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e022      	b.n	8006556 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	1ad2      	subs	r2, r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	429a      	cmp	r2, r3
 8006524:	d217      	bcs.n	8006556 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	789b      	ldrb	r3, [r3, #2]
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	e010      	b.n	8006550 <sync_window+0x78>
					wsect += fs->fsize;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7858      	ldrb	r0, [r3, #1]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006542:	2301      	movs	r3, #1
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	f7ff fd1d 	bl	8005f84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3b01      	subs	r3, #1
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d8eb      	bhi.n	800652e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d01b      	beq.n	80065b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ffad 	bl	80064d8 <sync_window>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d113      	bne.n	80065b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7858      	ldrb	r0, [r3, #1]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006592:	2301      	movs	r3, #1
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	f7ff fcd5 	bl	8005f44 <disk_read>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80065a0:	f04f 33ff 	mov.w	r3, #4294967295
 80065a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff87 	bl	80064d8 <sync_window>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d158      	bne.n	8006686 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d148      	bne.n	800666e <sync_fs+0xb2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d144      	bne.n	800666e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3334      	adds	r3, #52	; 0x34
 80065e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fda9 	bl	8006146 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3334      	adds	r3, #52	; 0x34
 80065f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fd38 	bl	8006076 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3334      	adds	r3, #52	; 0x34
 800660a:	4921      	ldr	r1, [pc, #132]	; (8006690 <sync_fs+0xd4>)
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fd4d 	bl	80060ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3334      	adds	r3, #52	; 0x34
 8006616:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800661a:	491e      	ldr	r1, [pc, #120]	; (8006694 <sync_fs+0xd8>)
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fd45 	bl	80060ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3334      	adds	r3, #52	; 0x34
 8006626:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7ff fd3b 	bl	80060ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3334      	adds	r3, #52	; 0x34
 800663a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7ff fd31 	bl	80060ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7858      	ldrb	r0, [r3, #1]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006662:	2301      	movs	r3, #1
 8006664:	f7ff fc8e 	bl	8005f84 <disk_write>
			fs->fsi_flag = 0;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fca4 	bl	8005fc4 <disk_ioctl>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <sync_fs+0xca>
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	41615252 	.word	0x41615252
 8006694:	61417272 	.word	0x61417272

08006698 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	3b02      	subs	r3, #2
 80066a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	3b02      	subs	r3, #2
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d301      	bcc.n	80066b8 <clust2sect+0x20>
 80066b4:	2300      	movs	r3, #0
 80066b6:	e008      	b.n	80066ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	895b      	ldrh	r3, [r3, #10]
 80066bc:	461a      	mov	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	fb03 f202 	mul.w	r2, r3, r2
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4413      	add	r3, r2
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d904      	bls.n	80066f6 <get_fat+0x20>
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80066f6:	2301      	movs	r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	e08f      	b.n	800681c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b03      	cmp	r3, #3
 8006708:	d062      	beq.n	80067d0 <get_fat+0xfa>
 800670a:	2b03      	cmp	r3, #3
 800670c:	dc7c      	bgt.n	8006808 <get_fat+0x132>
 800670e:	2b01      	cmp	r3, #1
 8006710:	d002      	beq.n	8006718 <get_fat+0x42>
 8006712:	2b02      	cmp	r3, #2
 8006714:	d042      	beq.n	800679c <get_fat+0xc6>
 8006716:	e077      	b.n	8006808 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	0a5b      	lsrs	r3, r3, #9
 800672e:	4413      	add	r3, r2
 8006730:	4619      	mov	r1, r3
 8006732:	6938      	ldr	r0, [r7, #16]
 8006734:	f7ff ff14 	bl	8006560 <move_window>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d167      	bne.n	800680e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	60fa      	str	r2, [r7, #12]
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006750:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	4413      	add	r3, r2
 800675c:	4619      	mov	r1, r3
 800675e:	6938      	ldr	r0, [r7, #16]
 8006760:	f7ff fefe 	bl	8006560 <move_window>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d153      	bne.n	8006812 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	461a      	mov	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <get_fat+0xbc>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	091b      	lsrs	r3, r3, #4
 8006790:	e002      	b.n	8006798 <get_fat+0xc2>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006798:	617b      	str	r3, [r7, #20]
			break;
 800679a:	e03f      	b.n	800681c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	4413      	add	r3, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6938      	ldr	r0, [r7, #16]
 80067aa:	f7ff fed9 	bl	8006560 <move_window>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d130      	bne.n	8006816 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80067c2:	4413      	add	r3, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fc1b 	bl	8006000 <ld_word>
 80067ca:	4603      	mov	r3, r0
 80067cc:	617b      	str	r3, [r7, #20]
			break;
 80067ce:	e025      	b.n	800681c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	09db      	lsrs	r3, r3, #7
 80067d8:	4413      	add	r3, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6938      	ldr	r0, [r7, #16]
 80067de:	f7ff febf 	bl	8006560 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d118      	bne.n	800681a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80067f6:	4413      	add	r3, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fc19 	bl	8006030 <ld_dword>
 80067fe:	4603      	mov	r3, r0
 8006800:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006804:	617b      	str	r3, [r7, #20]
			break;
 8006806:	e009      	b.n	800681c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006808:	2301      	movs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e006      	b.n	800681c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800680e:	bf00      	nop
 8006810:	e004      	b.n	800681c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800681a:	bf00      	nop
		}
	}

	return val;
 800681c:	697b      	ldr	r3, [r7, #20]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006826:	b590      	push	{r4, r7, lr}
 8006828:	b089      	sub	sp, #36	; 0x24
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006832:	2302      	movs	r3, #2
 8006834:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b01      	cmp	r3, #1
 800683a:	f240 80d2 	bls.w	80069e2 <put_fat+0x1bc>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	f080 80cc 	bcs.w	80069e2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b03      	cmp	r3, #3
 8006850:	f000 8096 	beq.w	8006980 <put_fat+0x15a>
 8006854:	2b03      	cmp	r3, #3
 8006856:	f300 80cd 	bgt.w	80069f4 <put_fat+0x1ce>
 800685a:	2b01      	cmp	r3, #1
 800685c:	d002      	beq.n	8006864 <put_fat+0x3e>
 800685e:	2b02      	cmp	r3, #2
 8006860:	d06e      	beq.n	8006940 <put_fat+0x11a>
 8006862:	e0c7      	b.n	80069f4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4413      	add	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	0a5b      	lsrs	r3, r3, #9
 800687a:	4413      	add	r3, r2
 800687c:	4619      	mov	r1, r3
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff fe6e 	bl	8006560 <move_window>
 8006884:	4603      	mov	r3, r0
 8006886:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006888:	7ffb      	ldrb	r3, [r7, #31]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 80ab 	bne.w	80069e6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	1c59      	adds	r1, r3, #1
 800689a:	61b9      	str	r1, [r7, #24]
 800689c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a0:	4413      	add	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00d      	beq.n	80068ca <put_fat+0xa4>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	b25a      	sxtb	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	e001      	b.n	80068ce <put_fat+0xa8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	0a5b      	lsrs	r3, r3, #9
 80068e0:	4413      	add	r3, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fe3b 	bl	8006560 <move_window>
 80068ea:	4603      	mov	r3, r0
 80068ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d17a      	bne.n	80069ea <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006900:	4413      	add	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <put_fat+0xf0>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e00e      	b.n	8006934 <put_fat+0x10e>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f023 030f 	bic.w	r3, r3, #15
 8006920:	b25a      	sxtb	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	b25b      	sxtb	r3, r3
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	b25b      	sxtb	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b25b      	sxtb	r3, r3
 8006932:	b2db      	uxtb	r3, r3
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	70da      	strb	r2, [r3, #3]
			break;
 800693e:	e059      	b.n	80069f4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	4413      	add	r3, r2
 800694a:	4619      	mov	r1, r3
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fe07 	bl	8006560 <move_window>
 8006952:	4603      	mov	r3, r0
 8006954:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006956:	7ffb      	ldrb	r3, [r7, #31]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d148      	bne.n	80069ee <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800696a:	4413      	add	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	b292      	uxth	r2, r2
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fb7f 	bl	8006076 <st_word>
			fs->wflag = 1;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	70da      	strb	r2, [r3, #3]
			break;
 800697e:	e039      	b.n	80069f4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	09db      	lsrs	r3, r3, #7
 8006988:	4413      	add	r3, r2
 800698a:	4619      	mov	r1, r3
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fde7 	bl	8006560 <move_window>
 8006992:	4603      	mov	r3, r0
 8006994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006996:	7ffb      	ldrb	r3, [r7, #31]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d12a      	bne.n	80069f2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069b0:	4413      	add	r3, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fb3c 	bl	8006030 <ld_dword>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069be:	4323      	orrs	r3, r4
 80069c0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069d0:	4413      	add	r3, r2
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fb69 	bl	80060ac <st_dword>
			fs->wflag = 1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	70da      	strb	r2, [r3, #3]
			break;
 80069e0:	e008      	b.n	80069f4 <put_fat+0x1ce>
		}
	}
 80069e2:	bf00      	nop
 80069e4:	e006      	b.n	80069f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069e6:	bf00      	nop
 80069e8:	e004      	b.n	80069f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069f2:	bf00      	nop
	return res;
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3724      	adds	r7, #36	; 0x24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd90      	pop	{r4, r7, pc}

080069fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b088      	sub	sp, #32
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d904      	bls.n	8006a24 <remove_chain+0x26>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d301      	bcc.n	8006a28 <remove_chain+0x2a>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e04b      	b.n	8006ac0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	69b8      	ldr	r0, [r7, #24]
 8006a36:	f7ff fef6 	bl	8006826 <put_fat>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <remove_chain+0x4a>
 8006a44:	7ffb      	ldrb	r3, [r7, #31]
 8006a46:	e03b      	b.n	8006ac0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff fe43 	bl	80066d6 <get_fat>
 8006a50:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d031      	beq.n	8006abc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <remove_chain+0x64>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e02e      	b.n	8006ac0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d101      	bne.n	8006a6e <remove_chain+0x70>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e028      	b.n	8006ac0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a6e:	2200      	movs	r2, #0
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	69b8      	ldr	r0, [r7, #24]
 8006a74:	f7ff fed7 	bl	8006826 <put_fat>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a7c:	7ffb      	ldrb	r3, [r7, #31]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <remove_chain+0x88>
 8006a82:	7ffb      	ldrb	r3, [r7, #31]
 8006a84:	e01c      	b.n	8006ac0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	3b02      	subs	r3, #2
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d20b      	bcs.n	8006aac <remove_chain+0xae>
			fs->free_clst++;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	791b      	ldrb	r3, [r3, #4]
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d3c6      	bcc.n	8006a48 <remove_chain+0x4a>
 8006aba:	e000      	b.n	8006abe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006abc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10d      	bne.n	8006afa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <create_chain+0x2c>
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d31b      	bcc.n	8006b2c <create_chain+0x64>
 8006af4:	2301      	movs	r3, #1
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e018      	b.n	8006b2c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff fdea 	bl	80066d6 <get_fat>
 8006b02:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d801      	bhi.n	8006b0e <create_chain+0x46>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e070      	b.n	8006bf0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d101      	bne.n	8006b1a <create_chain+0x52>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	e06a      	b.n	8006bf0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d201      	bcs.n	8006b28 <create_chain+0x60>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	e063      	b.n	8006bf0 <create_chain+0x128>
		scl = clst;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d307      	bcc.n	8006b50 <create_chain+0x88>
				ncl = 2;
 8006b40:	2302      	movs	r3, #2
 8006b42:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d901      	bls.n	8006b50 <create_chain+0x88>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e04f      	b.n	8006bf0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fdbf 	bl	80066d6 <get_fat>
 8006b58:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d003      	beq.n	8006b6e <create_chain+0xa6>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d101      	bne.n	8006b72 <create_chain+0xaa>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	e03e      	b.n	8006bf0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d1da      	bne.n	8006b30 <create_chain+0x68>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e038      	b.n	8006bf0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b7e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	69f9      	ldr	r1, [r7, #28]
 8006b86:	6938      	ldr	r0, [r7, #16]
 8006b88:	f7ff fe4d 	bl	8006826 <put_fat>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <create_chain+0xe2>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6938      	ldr	r0, [r7, #16]
 8006ba2:	f7ff fe40 	bl	8006826 <put_fat>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d116      	bne.n	8006bde <create_chain+0x116>
		fs->last_clst = ncl;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	3b02      	subs	r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d804      	bhi.n	8006bce <create_chain+0x106>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	791b      	ldrb	r3, [r3, #4]
 8006bd2:	f043 0301 	orr.w	r3, r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	711a      	strb	r2, [r3, #4]
 8006bdc:	e007      	b.n	8006bee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d102      	bne.n	8006bea <create_chain+0x122>
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295
 8006be8:	e000      	b.n	8006bec <create_chain+0x124>
 8006bea:	2301      	movs	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006bee:	69fb      	ldr	r3, [r7, #28]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	0a5b      	lsrs	r3, r3, #9
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	8952      	ldrh	r2, [r2, #10]
 8006c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	613a      	str	r2, [r7, #16]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <clmt_clust+0x3a>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e010      	b.n	8006c54 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d307      	bcc.n	8006c4a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3304      	adds	r3, #4
 8006c46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c48:	e7e9      	b.n	8006c1e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006c4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c76:	d204      	bcs.n	8006c82 <dir_sdi+0x22>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c82:	2302      	movs	r3, #2
 8006c84:	e063      	b.n	8006d4e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <dir_sdi+0x46>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d902      	bls.n	8006ca6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10c      	bne.n	8006cc6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	8912      	ldrh	r2, [r2, #8]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d301      	bcc.n	8006cbc <dir_sdi+0x5c>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e048      	b.n	8006d4e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	61da      	str	r2, [r3, #28]
 8006cc4:	e029      	b.n	8006d1a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	895b      	ldrh	r3, [r3, #10]
 8006cca:	025b      	lsls	r3, r3, #9
 8006ccc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cce:	e019      	b.n	8006d04 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fcfe 	bl	80066d6 <get_fat>
 8006cda:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d101      	bne.n	8006ce8 <dir_sdi+0x88>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e032      	b.n	8006d4e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d904      	bls.n	8006cf8 <dir_sdi+0x98>
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d301      	bcc.n	8006cfc <dir_sdi+0x9c>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e028      	b.n	8006d4e <dir_sdi+0xee>
			ofs -= csz;
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d2e1      	bcs.n	8006cd0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006d0c:	6979      	ldr	r1, [r7, #20]
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7ff fcc2 	bl	8006698 <clust2sect>
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <dir_sdi+0xcc>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e010      	b.n	8006d4e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	0a5b      	lsrs	r3, r3, #9
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	441a      	add	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	3320      	adds	r3, #32
 8006d6c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <dir_next+0x28>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d7c:	d301      	bcc.n	8006d82 <dir_next+0x2c>
 8006d7e:	2304      	movs	r3, #4
 8006d80:	e0aa      	b.n	8006ed8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 8098 	bne.w	8006ebe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10b      	bne.n	8006db8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	8912      	ldrh	r2, [r2, #8]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	f0c0 8088 	bcc.w	8006ebe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	61da      	str	r2, [r3, #28]
 8006db4:	2304      	movs	r3, #4
 8006db6:	e08f      	b.n	8006ed8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	0a5b      	lsrs	r3, r3, #9
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	8952      	ldrh	r2, [r2, #10]
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d17a      	bne.n	8006ebe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7ff fc80 	bl	80066d6 <get_fat>
 8006dd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d801      	bhi.n	8006de2 <dir_next+0x8c>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e07a      	b.n	8006ed8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d101      	bne.n	8006dee <dir_next+0x98>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e074      	b.n	8006ed8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d358      	bcc.n	8006eaa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	61da      	str	r2, [r3, #28]
 8006e04:	2304      	movs	r3, #4
 8006e06:	e067      	b.n	8006ed8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f7ff fe59 	bl	8006ac8 <create_chain>
 8006e16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <dir_next+0xcc>
 8006e1e:	2307      	movs	r3, #7
 8006e20:	e05a      	b.n	8006ed8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <dir_next+0xd6>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e055      	b.n	8006ed8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d101      	bne.n	8006e38 <dir_next+0xe2>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e04f      	b.n	8006ed8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fb4d 	bl	80064d8 <sync_window>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <dir_next+0xf2>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e047      	b.n	8006ed8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3334      	adds	r3, #52	; 0x34
 8006e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff f977 	bl	8006146 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fc1a 	bl	8006698 <clust2sect>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
 8006e6a:	e012      	b.n	8006e92 <dir_next+0x13c>
						fs->wflag = 1;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fb30 	bl	80064d8 <sync_window>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <dir_next+0x12c>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e02a      	b.n	8006ed8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	3301      	adds	r3, #1
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	895b      	ldrh	r3, [r3, #10]
 8006e96:	461a      	mov	r2, r3
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d3e6      	bcc.n	8006e6c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006eb0:	6979      	ldr	r1, [r7, #20]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff fbf0 	bl	8006698 <clust2sect>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed0:	441a      	add	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff feb4 	bl	8006c60 <dir_sdi>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d12b      	bne.n	8006f5a <dir_alloc+0x7a>
		n = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fb27 	bl	8006560 <move_window>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d11d      	bne.n	8006f58 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2be5      	cmp	r3, #229	; 0xe5
 8006f24:	d004      	beq.n	8006f30 <dir_alloc+0x50>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d107      	bne.n	8006f40 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3301      	adds	r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d102      	bne.n	8006f44 <dir_alloc+0x64>
 8006f3e:	e00c      	b.n	8006f5a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f44:	2101      	movs	r1, #1
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ff05 	bl	8006d56 <dir_next>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0d7      	beq.n	8006f06 <dir_alloc+0x26>
 8006f56:	e000      	b.n	8006f5a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f58:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d101      	bne.n	8006f64 <dir_alloc+0x84>
 8006f60:	2307      	movs	r3, #7
 8006f62:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	331a      	adds	r3, #26
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff f83f 	bl	8006000 <ld_word>
 8006f82:	4603      	mov	r3, r0
 8006f84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d109      	bne.n	8006fa2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	3314      	adds	r3, #20
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff f834 	bl	8006000 <ld_word>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	331a      	adds	r3, #26
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	b292      	uxth	r2, r2
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff f857 	bl	8006076 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d109      	bne.n	8006fe4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f103 0214 	add.w	r2, r3, #20
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7ff f849 	bl	8006076 <st_word>
	}
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006fec:	b590      	push	{r4, r7, lr}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	331a      	adds	r3, #26
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff f800 	bl	8006000 <ld_word>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <cmp_lfn+0x1e>
 8007006:	2300      	movs	r3, #0
 8007008:	e059      	b.n	80070be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	4613      	mov	r3, r2
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007020:	2301      	movs	r3, #1
 8007022:	81fb      	strh	r3, [r7, #14]
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	e033      	b.n	8007092 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800702a:	4a27      	ldr	r2, [pc, #156]	; (80070c8 <cmp_lfn+0xdc>)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4413      	add	r3, r2
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4413      	add	r3, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe ffe1 	bl	8006000 <ld_word>
 800703e:	4603      	mov	r3, r0
 8007040:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007042:	89fb      	ldrh	r3, [r7, #14]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01a      	beq.n	800707e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2bfe      	cmp	r3, #254	; 0xfe
 800704c:	d812      	bhi.n	8007074 <cmp_lfn+0x88>
 800704e:	89bb      	ldrh	r3, [r7, #12]
 8007050:	4618      	mov	r0, r3
 8007052:	f001 fedb 	bl	8008e0c <ff_wtoupper>
 8007056:	4603      	mov	r3, r0
 8007058:	461c      	mov	r4, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	617a      	str	r2, [r7, #20]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f001 fecf 	bl	8008e0c <ff_wtoupper>
 800706e:	4603      	mov	r3, r0
 8007070:	429c      	cmp	r4, r3
 8007072:	d001      	beq.n	8007078 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007074:	2300      	movs	r3, #0
 8007076:	e022      	b.n	80070be <cmp_lfn+0xd2>
			}
			wc = uc;
 8007078:	89bb      	ldrh	r3, [r7, #12]
 800707a:	81fb      	strh	r3, [r7, #14]
 800707c:	e006      	b.n	800708c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800707e:	89bb      	ldrh	r3, [r7, #12]
 8007080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007084:	4293      	cmp	r3, r2
 8007086:	d001      	beq.n	800708c <cmp_lfn+0xa0>
 8007088:	2300      	movs	r3, #0
 800708a:	e018      	b.n	80070be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3301      	adds	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d9c8      	bls.n	800702a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <cmp_lfn+0xd0>
 80070a4:	89fb      	ldrh	r3, [r7, #14]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <cmp_lfn+0xd0>
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <cmp_lfn+0xd0>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80070bc:	2301      	movs	r3, #1
}
 80070be:	4618      	mov	r0, r3
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd90      	pop	{r4, r7, pc}
 80070c6:	bf00      	nop
 80070c8:	0800a5c4 	.word	0x0800a5c4

080070cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	331a      	adds	r3, #26
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe ff90 	bl	8006000 <ld_word>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <pick_lfn+0x1e>
 80070e6:	2300      	movs	r3, #0
 80070e8:	e04d      	b.n	8007186 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f2:	1e5a      	subs	r2, r3, #1
 80070f4:	4613      	mov	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007100:	2301      	movs	r3, #1
 8007102:	81fb      	strh	r3, [r7, #14]
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	e028      	b.n	800715c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800710a:	4a21      	ldr	r2, [pc, #132]	; (8007190 <pick_lfn+0xc4>)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	4413      	add	r3, r2
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	4413      	add	r3, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe ff71 	bl	8006000 <ld_word>
 800711e:	4603      	mov	r3, r0
 8007120:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007122:	89fb      	ldrh	r3, [r7, #14]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00f      	beq.n	8007148 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2bfe      	cmp	r3, #254	; 0xfe
 800712c:	d901      	bls.n	8007132 <pick_lfn+0x66>
 800712e:	2300      	movs	r3, #0
 8007130:	e029      	b.n	8007186 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007132:	89bb      	ldrh	r3, [r7, #12]
 8007134:	81fb      	strh	r3, [r7, #14]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	617a      	str	r2, [r7, #20]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	89fa      	ldrh	r2, [r7, #14]
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	e006      	b.n	8007156 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007148:	89bb      	ldrh	r3, [r7, #12]
 800714a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800714e:	4293      	cmp	r3, r2
 8007150:	d001      	beq.n	8007156 <pick_lfn+0x8a>
 8007152:	2300      	movs	r3, #0
 8007154:	e017      	b.n	8007186 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b0c      	cmp	r3, #12
 8007160:	d9d3      	bls.n	800710a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2bfe      	cmp	r3, #254	; 0xfe
 8007172:	d901      	bls.n	8007178 <pick_lfn+0xac>
 8007174:	2300      	movs	r3, #0
 8007176:	e006      	b.n	8007186 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4413      	add	r3, r2
 8007180:	2200      	movs	r2, #0
 8007182:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007184:	2301      	movs	r3, #1
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	0800a5c4 	.word	0x0800a5c4

08007194 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	460b      	mov	r3, r1
 80071a4:	71fb      	strb	r3, [r7, #7]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	330d      	adds	r3, #13
 80071ae:	79ba      	ldrb	r2, [r7, #6]
 80071b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	330b      	adds	r3, #11
 80071b6:	220f      	movs	r2, #15
 80071b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	330c      	adds	r3, #12
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	331a      	adds	r3, #26
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe ff54 	bl	8006076 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	1e5a      	subs	r2, r3, #1
 80071d2:	4613      	mov	r3, r2
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	82fb      	strh	r3, [r7, #22]
 80071e2:	2300      	movs	r3, #0
 80071e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80071e6:	8afb      	ldrh	r3, [r7, #22]
 80071e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <put_lfn+0x6c>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	61fa      	str	r2, [r7, #28]
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007200:	4a17      	ldr	r2, [pc, #92]	; (8007260 <put_lfn+0xcc>)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	4413      	add	r3, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	8afa      	ldrh	r2, [r7, #22]
 8007210:	4611      	mov	r1, r2
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe ff2f 	bl	8006076 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007218:	8afb      	ldrh	r3, [r7, #22]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <put_lfn+0x90>
 800721e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007222:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	3301      	adds	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d9da      	bls.n	80071e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007230:	8afb      	ldrh	r3, [r7, #22]
 8007232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007236:	4293      	cmp	r3, r2
 8007238:	d006      	beq.n	8007248 <put_lfn+0xb4>
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <put_lfn+0xbc>
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	79fa      	ldrb	r2, [r7, #7]
 8007254:	701a      	strb	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	0800a5c4 	.word	0x0800a5c4

08007264 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08c      	sub	sp, #48	; 0x30
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007272:	220b      	movs	r2, #11
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7fe ff44 	bl	8006104 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b05      	cmp	r3, #5
 8007280:	d929      	bls.n	80072d6 <gen_numname+0x72>
		sr = seq;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007286:	e020      	b.n	80072ca <gen_numname+0x66>
			wc = *lfn++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	1c9a      	adds	r2, r3, #2
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007292:	2300      	movs	r3, #0
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
 8007296:	e015      	b.n	80072c4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	005a      	lsls	r2, r3, #1
 800729c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	4413      	add	r3, r2
 80072a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80072a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <gen_numname+0x5a>
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	4b31      	ldr	r3, [pc, #196]	; (8007380 <gen_numname+0x11c>)
 80072ba:	4053      	eors	r3, r2
 80072bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	3301      	adds	r3, #1
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d9e6      	bls.n	8007298 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1da      	bne.n	8007288 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80072d6:	2307      	movs	r3, #7
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	3330      	adds	r3, #48	; 0x30
 80072e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80072ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ee:	2b39      	cmp	r3, #57	; 0x39
 80072f0:	d904      	bls.n	80072fc <gen_numname+0x98>
 80072f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072f6:	3307      	adds	r3, #7
 80072f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	1e5a      	subs	r2, r3, #1
 8007300:	62ba      	str	r2, [r7, #40]	; 0x28
 8007302:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007306:	4413      	add	r3, r2
 8007308:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800730c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1de      	bne.n	80072da <gen_numname+0x76>
	ns[i] = '~';
 800731c:	f107 0214 	add.w	r2, r7, #20
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	4413      	add	r3, r2
 8007324:	227e      	movs	r2, #126	; 0x7e
 8007326:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007328:	2300      	movs	r3, #0
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	e002      	b.n	8007334 <gen_numname+0xd0>
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	3301      	adds	r3, #1
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
 8007334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	429a      	cmp	r2, r3
 800733a:	d205      	bcs.n	8007348 <gen_numname+0xe4>
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	4413      	add	r3, r2
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b20      	cmp	r3, #32
 8007346:	d1f2      	bne.n	800732e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2b07      	cmp	r3, #7
 800734c:	d808      	bhi.n	8007360 <gen_numname+0xfc>
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	62ba      	str	r2, [r7, #40]	; 0x28
 8007354:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007358:	4413      	add	r3, r2
 800735a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800735e:	e000      	b.n	8007362 <gen_numname+0xfe>
 8007360:	2120      	movs	r1, #32
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	627a      	str	r2, [r7, #36]	; 0x24
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	460a      	mov	r2, r1
 800736e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	2b07      	cmp	r3, #7
 8007374:	d9e8      	bls.n	8007348 <gen_numname+0xe4>
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	3730      	adds	r7, #48	; 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	00011021 	.word	0x00011021

08007384 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007390:	230b      	movs	r3, #11
 8007392:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	0852      	lsrs	r2, r2, #1
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	4313      	orrs	r3, r2
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	1c59      	adds	r1, r3, #1
 80073a4:	6079      	str	r1, [r7, #4]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	4413      	add	r3, r2
 80073aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1ed      	bne.n	8007394 <sum_sfn+0x10>
	return sum;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b086      	sub	sp, #24
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80073d0:	2304      	movs	r3, #4
 80073d2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80073da:	23ff      	movs	r3, #255	; 0xff
 80073dc:	757b      	strb	r3, [r7, #21]
 80073de:	23ff      	movs	r3, #255	; 0xff
 80073e0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80073e2:	e081      	b.n	80074e8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6938      	ldr	r0, [r7, #16]
 80073ec:	f7ff f8b8 	bl	8006560 <move_window>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d17c      	bne.n	80074f4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007408:	2304      	movs	r3, #4
 800740a:	75fb      	strb	r3, [r7, #23]
 800740c:	e077      	b.n	80074fe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	330b      	adds	r3, #11
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800741a:	73fb      	strb	r3, [r7, #15]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7bfa      	ldrb	r2, [r7, #15]
 8007420:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007422:	7dbb      	ldrb	r3, [r7, #22]
 8007424:	2be5      	cmp	r3, #229	; 0xe5
 8007426:	d00e      	beq.n	8007446 <dir_read+0x80>
 8007428:	7dbb      	ldrb	r3, [r7, #22]
 800742a:	2b2e      	cmp	r3, #46	; 0x2e
 800742c:	d00b      	beq.n	8007446 <dir_read+0x80>
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	f023 0320 	bic.w	r3, r3, #32
 8007434:	2b08      	cmp	r3, #8
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	4293      	cmp	r3, r2
 8007444:	d002      	beq.n	800744c <dir_read+0x86>
				ord = 0xFF;
 8007446:	23ff      	movs	r3, #255	; 0xff
 8007448:	757b      	strb	r3, [r7, #21]
 800744a:	e044      	b.n	80074d6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	2b0f      	cmp	r3, #15
 8007450:	d12f      	bne.n	80074b2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007452:	7dbb      	ldrb	r3, [r7, #22]
 8007454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	7b5b      	ldrb	r3, [r3, #13]
 8007462:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007464:	7dbb      	ldrb	r3, [r7, #22]
 8007466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746a:	75bb      	strb	r3, [r7, #22]
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007478:	7dba      	ldrb	r2, [r7, #22]
 800747a:	7d7b      	ldrb	r3, [r7, #21]
 800747c:	429a      	cmp	r2, r3
 800747e:	d115      	bne.n	80074ac <dir_read+0xe6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	330d      	adds	r3, #13
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	7d3a      	ldrb	r2, [r7, #20]
 800748a:	429a      	cmp	r2, r3
 800748c:	d10e      	bne.n	80074ac <dir_read+0xe6>
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7ff fe17 	bl	80070cc <pick_lfn>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <dir_read+0xe6>
 80074a4:	7d7b      	ldrb	r3, [r7, #21]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	e000      	b.n	80074ae <dir_read+0xe8>
 80074ac:	23ff      	movs	r3, #255	; 0xff
 80074ae:	757b      	strb	r3, [r7, #21]
 80074b0:	e011      	b.n	80074d6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80074b2:	7d7b      	ldrb	r3, [r7, #21]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <dir_read+0x106>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff ff61 	bl	8007384 <sum_sfn>
 80074c2:	4603      	mov	r3, r0
 80074c4:	461a      	mov	r2, r3
 80074c6:	7d3b      	ldrb	r3, [r7, #20]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d015      	beq.n	80074f8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f04f 32ff 	mov.w	r2, #4294967295
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80074d4:	e010      	b.n	80074f8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fc3c 	bl	8006d56 <dir_next>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <dir_read+0x136>
	while (dp->sect) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f47f af79 	bne.w	80073e4 <dir_read+0x1e>
 80074f2:	e004      	b.n	80074fe <dir_read+0x138>
		if (res != FR_OK) break;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <dir_read+0x138>
					break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <dir_read+0x138>
		if (res != FR_OK) break;
 80074fc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <dir_read+0x144>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	61da      	str	r2, [r3, #28]
	return res;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007522:	2100      	movs	r1, #0
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fb9b 	bl	8006c60 <dir_sdi>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <dir_find+0x24>
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	e0a9      	b.n	800768c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007538:	23ff      	movs	r3, #255	; 0xff
 800753a:	753b      	strb	r3, [r7, #20]
 800753c:	7d3b      	ldrb	r3, [r7, #20]
 800753e:	757b      	strb	r3, [r7, #21]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	4619      	mov	r1, r3
 800754e:	6938      	ldr	r0, [r7, #16]
 8007550:	f7ff f806 	bl	8006560 <move_window>
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f040 8090 	bne.w	8007680 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007568:	7dbb      	ldrb	r3, [r7, #22]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <dir_find+0x60>
 800756e:	2304      	movs	r3, #4
 8007570:	75fb      	strb	r3, [r7, #23]
 8007572:	e08a      	b.n	800768a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	330b      	adds	r3, #11
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7bfa      	ldrb	r2, [r7, #15]
 8007586:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007588:	7dbb      	ldrb	r3, [r7, #22]
 800758a:	2be5      	cmp	r3, #229	; 0xe5
 800758c:	d007      	beq.n	800759e <dir_find+0x8a>
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <dir_find+0x98>
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b0f      	cmp	r3, #15
 800759c:	d006      	beq.n	80075ac <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800759e:	23ff      	movs	r3, #255	; 0xff
 80075a0:	757b      	strb	r3, [r7, #21]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
 80075aa:	e05e      	b.n	800766a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b0f      	cmp	r3, #15
 80075b0:	d136      	bne.n	8007620 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d154      	bne.n	800766a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075c0:	7dbb      	ldrb	r3, [r7, #22]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	7b5b      	ldrb	r3, [r3, #13]
 80075d0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075d2:	7dbb      	ldrb	r3, [r7, #22]
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	75bb      	strb	r3, [r7, #22]
 80075da:	7dbb      	ldrb	r3, [r7, #22]
 80075dc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80075e6:	7dba      	ldrb	r2, [r7, #22]
 80075e8:	7d7b      	ldrb	r3, [r7, #21]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d115      	bne.n	800761a <dir_find+0x106>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	330d      	adds	r3, #13
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	7d3a      	ldrb	r2, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d10e      	bne.n	800761a <dir_find+0x106>
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f7ff fcf0 	bl	8006fec <cmp_lfn>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <dir_find+0x106>
 8007612:	7d7b      	ldrb	r3, [r7, #21]
 8007614:	3b01      	subs	r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	e000      	b.n	800761c <dir_find+0x108>
 800761a:	23ff      	movs	r3, #255	; 0xff
 800761c:	757b      	strb	r3, [r7, #21]
 800761e:	e024      	b.n	800766a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007620:	7d7b      	ldrb	r3, [r7, #21]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <dir_find+0x126>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff feaa 	bl	8007384 <sum_sfn>
 8007630:	4603      	mov	r3, r0
 8007632:	461a      	mov	r2, r3
 8007634:	7d3b      	ldrb	r3, [r7, #20]
 8007636:	4293      	cmp	r3, r2
 8007638:	d024      	beq.n	8007684 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <dir_find+0x14a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a18      	ldr	r0, [r3, #32]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	220b      	movs	r2, #11
 8007652:	4619      	mov	r1, r3
 8007654:	f7fe fd92 	bl	800617c <mem_cmp>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d014      	beq.n	8007688 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800765e:	23ff      	movs	r3, #255	; 0xff
 8007660:	757b      	strb	r3, [r7, #21]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800766a:	2100      	movs	r1, #0
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff fb72 	bl	8006d56 <dir_next>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f43f af65 	beq.w	8007548 <dir_find+0x34>
 800767e:	e004      	b.n	800768a <dir_find+0x176>
		if (res != FR_OK) break;
 8007680:	bf00      	nop
 8007682:	e002      	b.n	800768a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007684:	bf00      	nop
 8007686:	e000      	b.n	800768a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007688:	bf00      	nop

	return res;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <dir_register+0x20>
 80076b0:	2306      	movs	r3, #6
 80076b2:	e0e0      	b.n	8007876 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076b4:	2300      	movs	r3, #0
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
 80076b8:	e002      	b.n	80076c0 <dir_register+0x2c>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	3301      	adds	r3, #1
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f4      	bne.n	80076ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80076d6:	f107 030c 	add.w	r3, r7, #12
 80076da:	220c      	movs	r2, #12
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe fd11 	bl	8006104 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d032      	beq.n	8007752 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2240      	movs	r2, #64	; 0x40
 80076f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80076f4:	2301      	movs	r3, #1
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f8:	e016      	b.n	8007728 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	f107 010c 	add.w	r1, r7, #12
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	f7ff fdab 	bl	8007264 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ff00 	bl	8007514 <dir_find>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800771a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	3301      	adds	r3, #1
 8007726:	62bb      	str	r3, [r7, #40]	; 0x28
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	2b63      	cmp	r3, #99	; 0x63
 800772c:	d9e5      	bls.n	80076fa <dir_register+0x66>
 800772e:	e000      	b.n	8007732 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007730:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	2b64      	cmp	r3, #100	; 0x64
 8007736:	d101      	bne.n	800773c <dir_register+0xa8>
 8007738:	2307      	movs	r3, #7
 800773a:	e09c      	b.n	8007876 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800773c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007740:	2b04      	cmp	r3, #4
 8007742:	d002      	beq.n	800774a <dir_register+0xb6>
 8007744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007748:	e095      	b.n	8007876 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800774a:	7dfa      	ldrb	r2, [r7, #23]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <dir_register+0xd8>
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	330c      	adds	r3, #12
 8007760:	4a47      	ldr	r2, [pc, #284]	; (8007880 <dir_register+0x1ec>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	089b      	lsrs	r3, r3, #2
 8007768:	3301      	adds	r3, #1
 800776a:	e000      	b.n	800776e <dir_register+0xda>
 800776c:	2301      	movs	r3, #1
 800776e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007770:	6a39      	ldr	r1, [r7, #32]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fbb4 	bl	8006ee0 <dir_alloc>
 8007778:	4603      	mov	r3, r0
 800777a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800777e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007782:	2b00      	cmp	r3, #0
 8007784:	d148      	bne.n	8007818 <dir_register+0x184>
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	3b01      	subs	r3, #1
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d042      	beq.n	8007818 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695a      	ldr	r2, [r3, #20]
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	015b      	lsls	r3, r3, #5
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fa5e 	bl	8006c60 <dir_sdi>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80077aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d132      	bne.n	8007818 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3324      	adds	r3, #36	; 0x24
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff fde4 	bl	8007384 <sum_sfn>
 80077bc:	4603      	mov	r3, r0
 80077be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	4619      	mov	r1, r3
 80077c6:	69f8      	ldr	r0, [r7, #28]
 80077c8:	f7fe feca 	bl	8006560 <move_window>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80077d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d11d      	bne.n	8007816 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	68d8      	ldr	r0, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a19      	ldr	r1, [r3, #32]
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	7efb      	ldrb	r3, [r7, #27]
 80077e8:	f7ff fcd4 	bl	8007194 <put_lfn>
				fs->wflag = 1;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2201      	movs	r2, #1
 80077f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff faae 	bl	8006d56 <dir_next>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <dir_register+0x184>
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	3b01      	subs	r3, #1
 800780c:	623b      	str	r3, [r7, #32]
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1d5      	bne.n	80077c0 <dir_register+0x12c>
 8007814:	e000      	b.n	8007818 <dir_register+0x184>
				if (res != FR_OK) break;
 8007816:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800781c:	2b00      	cmp	r3, #0
 800781e:	d128      	bne.n	8007872 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	4619      	mov	r1, r3
 8007826:	69f8      	ldr	r0, [r7, #28]
 8007828:	f7fe fe9a 	bl	8006560 <move_window>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007836:	2b00      	cmp	r3, #0
 8007838:	d11b      	bne.n	8007872 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	2220      	movs	r2, #32
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fc7f 	bl	8006146 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a18      	ldr	r0, [r3, #32]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3324      	adds	r3, #36	; 0x24
 8007850:	220b      	movs	r2, #11
 8007852:	4619      	mov	r1, r3
 8007854:	f7fe fc56 	bl	8006104 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	330c      	adds	r3, #12
 8007864:	f002 0218 	and.w	r2, r2, #24
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2201      	movs	r2, #1
 8007870:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007876:	4618      	mov	r0, r3
 8007878:	3730      	adds	r7, #48	; 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	4ec4ec4f 	.word	0x4ec4ec4f

08007884 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d007      	beq.n	80078b2 <dir_remove+0x2e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff f9d9 	bl	8006c60 <dir_sdi>
 80078ae:	4603      	mov	r3, r0
 80078b0:	e000      	b.n	80078b4 <dir_remove+0x30>
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d128      	bne.n	800790e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6938      	ldr	r0, [r7, #16]
 80078c4:	f7fe fe4c 	bl	8006560 <move_window>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d115      	bne.n	80078fe <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	22e5      	movs	r2, #229	; 0xe5
 80078d8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2201      	movs	r2, #1
 80078de:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d90b      	bls.n	8007902 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff fa32 	bl	8006d56 <dir_next>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0df      	beq.n	80078bc <dir_remove+0x38>
 80078fc:	e002      	b.n	8007904 <dir_remove+0x80>
			if (res != FR_OK) break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007902:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	2b04      	cmp	r3, #4
 8007908:	d101      	bne.n	800790e <dir_remove+0x8a>
 800790a:	2302      	movs	r3, #2
 800790c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	61ba      	str	r2, [r7, #24]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007948:	2b1f      	cmp	r3, #31
 800794a:	d940      	bls.n	80079ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800794c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800794e:	2b2f      	cmp	r3, #47	; 0x2f
 8007950:	d006      	beq.n	8007960 <create_name+0x48>
 8007952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007954:	2b5c      	cmp	r3, #92	; 0x5c
 8007956:	d110      	bne.n	800797a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007958:	e002      	b.n	8007960 <create_name+0x48>
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3301      	adds	r3, #1
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	4413      	add	r3, r2
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b2f      	cmp	r3, #47	; 0x2f
 800796a:	d0f6      	beq.n	800795a <create_name+0x42>
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	4413      	add	r3, r2
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b5c      	cmp	r3, #92	; 0x5c
 8007976:	d0f0      	beq.n	800795a <create_name+0x42>
			break;
 8007978:	e02a      	b.n	80079d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2bfe      	cmp	r3, #254	; 0xfe
 800797e:	d901      	bls.n	8007984 <create_name+0x6c>
 8007980:	2306      	movs	r3, #6
 8007982:	e177      	b.n	8007c74 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007986:	b2db      	uxtb	r3, r3
 8007988:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800798a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798c:	2101      	movs	r1, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fa00 	bl	8008d94 <ff_convert>
 8007994:	4603      	mov	r3, r0
 8007996:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <create_name+0x8a>
 800799e:	2306      	movs	r3, #6
 80079a0:	e168      	b.n	8007c74 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80079a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079a4:	2b7f      	cmp	r3, #127	; 0x7f
 80079a6:	d809      	bhi.n	80079bc <create_name+0xa4>
 80079a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079aa:	4619      	mov	r1, r3
 80079ac:	48b3      	ldr	r0, [pc, #716]	; (8007c7c <create_name+0x364>)
 80079ae:	f7fe fc0c 	bl	80061ca <chk_chr>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <create_name+0xa4>
 80079b8:	2306      	movs	r3, #6
 80079ba:	e15b      	b.n	8007c74 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	617a      	str	r2, [r7, #20]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079cc:	e7b4      	b.n	8007938 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	441a      	add	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079dc:	2b1f      	cmp	r3, #31
 80079de:	d801      	bhi.n	80079e4 <create_name+0xcc>
 80079e0:	2304      	movs	r3, #4
 80079e2:	e000      	b.n	80079e6 <create_name+0xce>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079ea:	e011      	b.n	8007a10 <create_name+0xf8>
		w = lfn[di - 1];
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80079f2:	4413      	add	r3, r2
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80079fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d002      	beq.n	8007a0a <create_name+0xf2>
 8007a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a06:	2b2e      	cmp	r3, #46	; 0x2e
 8007a08:	d106      	bne.n	8007a18 <create_name+0x100>
		di--;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1ea      	bne.n	80079ec <create_name+0xd4>
 8007a16:	e000      	b.n	8007a1a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007a18:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <create_name+0x118>
 8007a2c:	2306      	movs	r3, #6
 8007a2e:	e121      	b.n	8007c74 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	220b      	movs	r2, #11
 8007a36:	2120      	movs	r1, #32
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fb84 	bl	8006146 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	e002      	b.n	8007a4a <create_name+0x132>
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	d0f5      	beq.n	8007a44 <create_name+0x12c>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	2b2e      	cmp	r3, #46	; 0x2e
 8007a64:	d0ee      	beq.n	8007a44 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <create_name+0x168>
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	f043 0303 	orr.w	r3, r3, #3
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a78:	e002      	b.n	8007a80 <create_name+0x168>
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <create_name+0x182>
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007a8c:	4413      	add	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	2b2e      	cmp	r3, #46	; 0x2e
 8007a98:	d1ef      	bne.n	8007a7a <create_name+0x162>

	i = b = 0; ni = 8;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	61ba      	str	r2, [r7, #24]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8090 	beq.w	8007be0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d006      	beq.n	8007ad4 <create_name+0x1bc>
 8007ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8007aca:	d10a      	bne.n	8007ae2 <create_name+0x1ca>
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d006      	beq.n	8007ae2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ad8:	f043 0303 	orr.w	r3, r3, #3
 8007adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ae0:	e07d      	b.n	8007bde <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d203      	bcs.n	8007af2 <create_name+0x1da>
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d123      	bne.n	8007b3a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b0b      	cmp	r3, #11
 8007af6:	d106      	bne.n	8007b06 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007afc:	f043 0303 	orr.w	r3, r3, #3
 8007b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b04:	e06f      	b.n	8007be6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d005      	beq.n	8007b1a <create_name+0x202>
 8007b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b12:	f043 0303 	orr.w	r3, r3, #3
 8007b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d860      	bhi.n	8007be4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	2308      	movs	r3, #8
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	230b      	movs	r3, #11
 8007b2c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b38:	e051      	b.n	8007bde <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007b3e:	d914      	bls.n	8007b6a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b42:	2100      	movs	r1, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f925 	bl	8008d94 <ff_convert>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <create_name+0x246>
 8007b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b56:	3b80      	subs	r3, #128	; 0x80
 8007b58:	4a49      	ldr	r2, [pc, #292]	; (8007c80 <create_name+0x368>)
 8007b5a:	5cd3      	ldrb	r3, [r2, r3]
 8007b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b62:	f043 0302 	orr.w	r3, r3, #2
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <create_name+0x268>
 8007b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b72:	4619      	mov	r1, r3
 8007b74:	4843      	ldr	r0, [pc, #268]	; (8007c84 <create_name+0x36c>)
 8007b76:	f7fe fb28 	bl	80061ca <chk_chr>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d008      	beq.n	8007b92 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b80:	235f      	movs	r3, #95	; 0x5f
 8007b82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b88:	f043 0303 	orr.w	r3, r3, #3
 8007b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b90:	e01b      	b.n	8007bca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d909      	bls.n	8007bac <create_name+0x294>
 8007b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b9a:	2b5a      	cmp	r3, #90	; 0x5a
 8007b9c:	d806      	bhi.n	8007bac <create_name+0x294>
					b |= 2;
 8007b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ba2:	f043 0302 	orr.w	r3, r3, #2
 8007ba6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007baa:	e00e      	b.n	8007bca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bae:	2b60      	cmp	r3, #96	; 0x60
 8007bb0:	d90b      	bls.n	8007bca <create_name+0x2b2>
 8007bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb4:	2b7a      	cmp	r3, #122	; 0x7a
 8007bb6:	d808      	bhi.n	8007bca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc6:	3b20      	subs	r3, #32
 8007bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	623a      	str	r2, [r7, #32]
 8007bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bd2:	b2d1      	uxtb	r1, r2
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	460a      	mov	r2, r1
 8007bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007bde:	e763      	b.n	8007aa8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007be4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bec:	2be5      	cmp	r3, #229	; 0xe5
 8007bee:	d103      	bne.n	8007bf8 <create_name+0x2e0>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d104      	bne.n	8007c08 <create_name+0x2f0>
 8007bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c0c:	f003 030c 	and.w	r3, r3, #12
 8007c10:	2b0c      	cmp	r3, #12
 8007c12:	d005      	beq.n	8007c20 <create_name+0x308>
 8007c14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d105      	bne.n	8007c2c <create_name+0x314>
 8007c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c24:	f043 0302 	orr.w	r3, r3, #2
 8007c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d117      	bne.n	8007c68 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d105      	bne.n	8007c50 <create_name+0x338>
 8007c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c48:	f043 0310 	orr.w	r3, r3, #16
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c54:	f003 030c 	and.w	r3, r3, #12
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d105      	bne.n	8007c68 <create_name+0x350>
 8007c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c60:	f043 0308 	orr.w	r3, r3, #8
 8007c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007c72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3728      	adds	r7, #40	; 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	0800a4e4 	.word	0x0800a4e4
 8007c80:	0800a544 	.word	0x0800a544
 8007c84:	0800a4f0 	.word	0x0800a4f0

08007c88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c9c:	e002      	b.n	8007ca4 <follow_path+0x1c>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8007caa:	d0f8      	beq.n	8007c9e <follow_path+0x16>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8007cb2:	d0f4      	beq.n	8007c9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b1f      	cmp	r3, #31
 8007cc0:	d80a      	bhi.n	8007cd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007cca:	2100      	movs	r1, #0
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7fe ffc7 	bl	8006c60 <dir_sdi>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
 8007cd6:	e043      	b.n	8007d60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cd8:	463b      	mov	r3, r7
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fe1b 	bl	8007918 <create_name>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d134      	bne.n	8007d56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fc11 	bl	8007514 <dir_find>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007cfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d127      	bne.n	8007d5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d122      	bne.n	8007d5a <follow_path+0xd2>
 8007d14:	2305      	movs	r3, #5
 8007d16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d18:	e01f      	b.n	8007d5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d11c      	bne.n	8007d5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	799b      	ldrb	r3, [r3, #6]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d30:	2305      	movs	r3, #5
 8007d32:	75fb      	strb	r3, [r7, #23]
 8007d34:	e014      	b.n	8007d60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d44:	4413      	add	r3, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff f910 	bl	8006f6e <ld_clust>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d54:	e7c0      	b.n	8007cd8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d56:	bf00      	nop
 8007d58:	e002      	b.n	8007d60 <follow_path+0xd8>
				break;
 8007d5a:	bf00      	nop
 8007d5c:	e000      	b.n	8007d60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d5e:	bf00      	nop
			}
		}
	}

	return res;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d72:	f04f 33ff 	mov.w	r3, #4294967295
 8007d76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d031      	beq.n	8007de4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	e002      	b.n	8007d8e <get_ldnumber+0x24>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b1f      	cmp	r3, #31
 8007d94:	d903      	bls.n	8007d9e <get_ldnumber+0x34>
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b3a      	cmp	r3, #58	; 0x3a
 8007d9c:	d1f4      	bne.n	8007d88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b3a      	cmp	r3, #58	; 0x3a
 8007da4:	d11c      	bne.n	8007de0 <get_ldnumber+0x76>
			tp = *path;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	60fa      	str	r2, [r7, #12]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	3b30      	subs	r3, #48	; 0x30
 8007db6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	d80e      	bhi.n	8007ddc <get_ldnumber+0x72>
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d10a      	bne.n	8007ddc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d107      	bne.n	8007ddc <get_ldnumber+0x72>
					vol = (int)i;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	e002      	b.n	8007de6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007de4:	693b      	ldr	r3, [r7, #16]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
	...

08007df4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	70da      	strb	r2, [r3, #3]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe fba6 	bl	8006560 <move_window>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <check_fs+0x2a>
 8007e1a:	2304      	movs	r3, #4
 8007e1c:	e038      	b.n	8007e90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3334      	adds	r3, #52	; 0x34
 8007e22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe f8ea 	bl	8006000 <ld_word>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d001      	beq.n	8007e3c <check_fs+0x48>
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e029      	b.n	8007e90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e42:	2be9      	cmp	r3, #233	; 0xe9
 8007e44:	d009      	beq.n	8007e5a <check_fs+0x66>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e4c:	2beb      	cmp	r3, #235	; 0xeb
 8007e4e:	d11e      	bne.n	8007e8e <check_fs+0x9a>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e56:	2b90      	cmp	r3, #144	; 0x90
 8007e58:	d119      	bne.n	8007e8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3334      	adds	r3, #52	; 0x34
 8007e5e:	3336      	adds	r3, #54	; 0x36
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe f8e5 	bl	8006030 <ld_dword>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e6c:	4a0a      	ldr	r2, [pc, #40]	; (8007e98 <check_fs+0xa4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d101      	bne.n	8007e76 <check_fs+0x82>
 8007e72:	2300      	movs	r3, #0
 8007e74:	e00c      	b.n	8007e90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3334      	adds	r3, #52	; 0x34
 8007e7a:	3352      	adds	r3, #82	; 0x52
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe f8d7 	bl	8006030 <ld_dword>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4a05      	ldr	r2, [pc, #20]	; (8007e9c <check_fs+0xa8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d101      	bne.n	8007e8e <check_fs+0x9a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e000      	b.n	8007e90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e8e:	2302      	movs	r3, #2
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	00544146 	.word	0x00544146
 8007e9c:	33544146 	.word	0x33544146

08007ea0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b096      	sub	sp, #88	; 0x58
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff ff58 	bl	8007d6a <get_ldnumber>
 8007eba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da01      	bge.n	8007ec6 <find_volume+0x26>
 8007ec2:	230b      	movs	r3, #11
 8007ec4:	e231      	b.n	800832a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007ec6:	4aa8      	ldr	r2, [pc, #672]	; (8008168 <find_volume+0x2c8>)
 8007ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ece:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <find_volume+0x3a>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	e227      	b.n	800832a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ede:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	f023 0301 	bic.w	r3, r3, #1
 8007ee6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01a      	beq.n	8007f26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fd ffe5 	bl	8005ec4 <disk_status>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007f00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10c      	bne.n	8007f26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <find_volume+0x82>
 8007f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f1e:	230a      	movs	r3, #10
 8007f20:	e203      	b.n	800832a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8007f22:	2300      	movs	r3, #0
 8007f24:	e201      	b.n	800832a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fd ffdd 	bl	8005ef8 <disk_initialize>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f50:	2303      	movs	r3, #3
 8007f52:	e1ea      	b.n	800832a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <find_volume+0xca>
 8007f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f66:	230a      	movs	r3, #10
 8007f68:	e1df      	b.n	800832a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f72:	f7ff ff3f 	bl	8007df4 <check_fs>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d14b      	bne.n	800801c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f84:	2300      	movs	r3, #0
 8007f86:	643b      	str	r3, [r7, #64]	; 0x40
 8007f88:	e01f      	b.n	8007fca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007f98:	4413      	add	r3, r2
 8007f9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d006      	beq.n	8007fb4 <find_volume+0x114>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	3308      	adds	r3, #8
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe f840 	bl	8006030 <ld_dword>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	e000      	b.n	8007fb6 <find_volume+0x116>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d9dc      	bls.n	8007f8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <find_volume+0x140>
 8007fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007fe8:	4413      	add	r3, r2
 8007fea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007fee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <find_volume+0x162>
 8007ff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ffa:	f7ff fefb 	bl	8007df4 <check_fs>
 8007ffe:	4603      	mov	r3, r0
 8008000:	e000      	b.n	8008004 <find_volume+0x164>
 8008002:	2303      	movs	r3, #3
 8008004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800800c:	2b01      	cmp	r3, #1
 800800e:	d905      	bls.n	800801c <find_volume+0x17c>
 8008010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008012:	3301      	adds	r3, #1
 8008014:	643b      	str	r3, [r7, #64]	; 0x40
 8008016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008018:	2b03      	cmp	r3, #3
 800801a:	d9e1      	bls.n	8007fe0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800801c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008020:	2b04      	cmp	r3, #4
 8008022:	d101      	bne.n	8008028 <find_volume+0x188>
 8008024:	2301      	movs	r3, #1
 8008026:	e180      	b.n	800832a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800802c:	2b01      	cmp	r3, #1
 800802e:	d901      	bls.n	8008034 <find_volume+0x194>
 8008030:	230d      	movs	r3, #13
 8008032:	e17a      	b.n	800832a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	3334      	adds	r3, #52	; 0x34
 8008038:	330b      	adds	r3, #11
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd ffe0 	bl	8006000 <ld_word>
 8008040:	4603      	mov	r3, r0
 8008042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008046:	d001      	beq.n	800804c <find_volume+0x1ac>
 8008048:	230d      	movs	r3, #13
 800804a:	e16e      	b.n	800832a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	3334      	adds	r3, #52	; 0x34
 8008050:	3316      	adds	r3, #22
 8008052:	4618      	mov	r0, r3
 8008054:	f7fd ffd4 	bl	8006000 <ld_word>
 8008058:	4603      	mov	r3, r0
 800805a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800805c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <find_volume+0x1d0>
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	3334      	adds	r3, #52	; 0x34
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	4618      	mov	r0, r3
 800806a:	f7fd ffe1 	bl	8006030 <ld_dword>
 800806e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008074:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	789b      	ldrb	r3, [r3, #2]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d005      	beq.n	8008094 <find_volume+0x1f4>
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	789b      	ldrb	r3, [r3, #2]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d001      	beq.n	8008094 <find_volume+0x1f4>
 8008090:	230d      	movs	r3, #13
 8008092:	e14a      	b.n	800832a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	789b      	ldrb	r3, [r3, #2]
 8008098:	461a      	mov	r2, r3
 800809a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809c:	fb02 f303 	mul.w	r3, r2, r3
 80080a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	895b      	ldrh	r3, [r3, #10]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d008      	beq.n	80080c8 <find_volume+0x228>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	895b      	ldrh	r3, [r3, #10]
 80080ba:	461a      	mov	r2, r3
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	895b      	ldrh	r3, [r3, #10]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <find_volume+0x22c>
 80080c8:	230d      	movs	r3, #13
 80080ca:	e12e      	b.n	800832a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	3334      	adds	r3, #52	; 0x34
 80080d0:	3311      	adds	r3, #17
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fd ff94 	bl	8006000 <ld_word>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	891b      	ldrh	r3, [r3, #8]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <find_volume+0x252>
 80080ee:	230d      	movs	r3, #13
 80080f0:	e11b      	b.n	800832a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	3334      	adds	r3, #52	; 0x34
 80080f6:	3313      	adds	r3, #19
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fd ff81 	bl	8006000 <ld_word>
 80080fe:	4603      	mov	r3, r0
 8008100:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <find_volume+0x276>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	3334      	adds	r3, #52	; 0x34
 800810c:	3320      	adds	r3, #32
 800810e:	4618      	mov	r0, r3
 8008110:	f7fd ff8e 	bl	8006030 <ld_dword>
 8008114:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	3334      	adds	r3, #52	; 0x34
 800811a:	330e      	adds	r3, #14
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd ff6f 	bl	8006000 <ld_word>
 8008122:	4603      	mov	r3, r0
 8008124:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <find_volume+0x290>
 800812c:	230d      	movs	r3, #13
 800812e:	e0fc      	b.n	800832a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008134:	4413      	add	r3, r2
 8008136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008138:	8912      	ldrh	r2, [r2, #8]
 800813a:	0912      	lsrs	r2, r2, #4
 800813c:	b292      	uxth	r2, r2
 800813e:	4413      	add	r3, r2
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	429a      	cmp	r2, r3
 8008148:	d201      	bcs.n	800814e <find_volume+0x2ae>
 800814a:	230d      	movs	r3, #13
 800814c:	e0ed      	b.n	800832a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800814e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008156:	8952      	ldrh	r2, [r2, #10]
 8008158:	fbb3 f3f2 	udiv	r3, r3, r2
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <find_volume+0x2cc>
 8008164:	230d      	movs	r3, #13
 8008166:	e0e0      	b.n	800832a <find_volume+0x48a>
 8008168:	200004cc 	.word	0x200004cc
		fmt = FS_FAT32;
 800816c:	2303      	movs	r3, #3
 800816e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008178:	4293      	cmp	r3, r2
 800817a:	d802      	bhi.n	8008182 <find_volume+0x2e2>
 800817c:	2302      	movs	r3, #2
 800817e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008188:	4293      	cmp	r3, r2
 800818a:	d802      	bhi.n	8008192 <find_volume+0x2f2>
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1c9a      	adds	r2, r3, #2
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800819e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80081a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a4:	441a      	add	r2, r3
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80081aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	441a      	add	r2, r3
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80081b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d11e      	bne.n	80081fa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	3334      	adds	r3, #52	; 0x34
 80081c0:	332a      	adds	r3, #42	; 0x2a
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fd ff1c 	bl	8006000 <ld_word>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <find_volume+0x332>
 80081ce:	230d      	movs	r3, #13
 80081d0:	e0ab      	b.n	800832a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	891b      	ldrh	r3, [r3, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <find_volume+0x33e>
 80081da:	230d      	movs	r3, #13
 80081dc:	e0a5      	b.n	800832a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	3334      	adds	r3, #52	; 0x34
 80081e2:	332c      	adds	r3, #44	; 0x2c
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fd ff23 	bl	8006030 <ld_dword>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	647b      	str	r3, [r7, #68]	; 0x44
 80081f8:	e01f      	b.n	800823a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	891b      	ldrh	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <find_volume+0x366>
 8008202:	230d      	movs	r3, #13
 8008204:	e091      	b.n	800832a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	441a      	add	r2, r3
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008216:	2b02      	cmp	r3, #2
 8008218:	d103      	bne.n	8008222 <find_volume+0x382>
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	e00a      	b.n	8008238 <find_volume+0x398>
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	4613      	mov	r3, r2
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4413      	add	r3, r2
 800822c:	085a      	lsrs	r2, r3, #1
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008238:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	69da      	ldr	r2, [r3, #28]
 800823e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008240:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008244:	0a5b      	lsrs	r3, r3, #9
 8008246:	429a      	cmp	r2, r3
 8008248:	d201      	bcs.n	800824e <find_volume+0x3ae>
 800824a:	230d      	movs	r3, #13
 800824c:	e06d      	b.n	800832a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	f04f 32ff 	mov.w	r2, #4294967295
 8008254:	615a      	str	r2, [r3, #20]
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	695a      	ldr	r2, [r3, #20]
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008268:	2b03      	cmp	r3, #3
 800826a:	d149      	bne.n	8008300 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	3334      	adds	r3, #52	; 0x34
 8008270:	3330      	adds	r3, #48	; 0x30
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd fec4 	bl	8006000 <ld_word>
 8008278:	4603      	mov	r3, r0
 800827a:	2b01      	cmp	r3, #1
 800827c:	d140      	bne.n	8008300 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800827e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008280:	3301      	adds	r3, #1
 8008282:	4619      	mov	r1, r3
 8008284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008286:	f7fe f96b 	bl	8006560 <move_window>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d137      	bne.n	8008300 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	2200      	movs	r2, #0
 8008294:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	3334      	adds	r3, #52	; 0x34
 800829a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd feae 	bl	8006000 <ld_word>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d127      	bne.n	8008300 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	3334      	adds	r3, #52	; 0x34
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fd febb 	bl	8006030 <ld_dword>
 80082ba:	4603      	mov	r3, r0
 80082bc:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <find_volume+0x494>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d11e      	bne.n	8008300 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	3334      	adds	r3, #52	; 0x34
 80082c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fd feb0 	bl	8006030 <ld_dword>
 80082d0:	4603      	mov	r3, r0
 80082d2:	4a19      	ldr	r2, [pc, #100]	; (8008338 <find_volume+0x498>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d113      	bne.n	8008300 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	3334      	adds	r3, #52	; 0x34
 80082dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd fea5 	bl	8006030 <ld_dword>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	3334      	adds	r3, #52	; 0x34
 80082f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd fe9b 	bl	8006030 <ld_dword>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008306:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <find_volume+0x49c>)
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	3301      	adds	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <find_volume+0x49c>)
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <find_volume+0x49c>)
 8008316:	881a      	ldrh	r2, [r3, #0]
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	4a08      	ldr	r2, [pc, #32]	; (8008340 <find_volume+0x4a0>)
 8008320:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008322:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008324:	f7fe f8b4 	bl	8006490 <clear_lock>
#endif
	return FR_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3758      	adds	r7, #88	; 0x58
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	41615252 	.word	0x41615252
 8008338:	61417272 	.word	0x61417272
 800833c:	200004d0 	.word	0x200004d0
 8008340:	200004f4 	.word	0x200004f4

08008344 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800834e:	2309      	movs	r3, #9
 8008350:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01c      	beq.n	8008392 <validate+0x4e>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d018      	beq.n	8008392 <validate+0x4e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d013      	beq.n	8008392 <validate+0x4e>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	889a      	ldrh	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	88db      	ldrh	r3, [r3, #6]
 8008374:	429a      	cmp	r2, r3
 8008376:	d10c      	bne.n	8008392 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	785b      	ldrb	r3, [r3, #1]
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd fda0 	bl	8005ec4 <disk_status>
 8008384:	4603      	mov	r3, r0
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <validate+0x4e>
			res = FR_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <validate+0x5a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	e000      	b.n	80083a0 <validate+0x5c>
 800839e:	2300      	movs	r3, #0
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	6013      	str	r3, [r2, #0]
	return res;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80083c2:	f107 0310 	add.w	r3, r7, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fccf 	bl	8007d6a <get_ldnumber>
 80083cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da01      	bge.n	80083d8 <f_mount+0x28>
 80083d4:	230b      	movs	r3, #11
 80083d6:	e02b      	b.n	8008430 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083d8:	4a17      	ldr	r2, [pc, #92]	; (8008438 <f_mount+0x88>)
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083e8:	69b8      	ldr	r0, [r7, #24]
 80083ea:	f7fe f851 	bl	8006490 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	490d      	ldr	r1, [pc, #52]	; (8008438 <f_mount+0x88>)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <f_mount+0x66>
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d001      	beq.n	800841a <f_mount+0x6a>
 8008416:	2300      	movs	r3, #0
 8008418:	e00a      	b.n	8008430 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800841a:	f107 010c 	add.w	r1, r7, #12
 800841e:	f107 0308 	add.w	r3, r7, #8
 8008422:	2200      	movs	r2, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fd3b 	bl	8007ea0 <find_volume>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800842e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200004cc 	.word	0x200004cc

0800843c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b09a      	sub	sp, #104	; 0x68
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <f_open+0x18>
 8008450:	2309      	movs	r3, #9
 8008452:	e1ad      	b.n	80087b0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800845a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800845c:	79fa      	ldrb	r2, [r7, #7]
 800845e:	f107 0114 	add.w	r1, r7, #20
 8008462:	f107 0308 	add.w	r3, r7, #8
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fd1a 	bl	8007ea0 <find_volume>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 8191 	bne.w	800879e <f_open+0x362>
		dj.obj.fs = fs;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	f107 0318 	add.w	r3, r7, #24
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fbfd 	bl	8007c88 <follow_path>
 800848e:	4603      	mov	r3, r0
 8008490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11a      	bne.n	80084d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800849c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084a0:	b25b      	sxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	da03      	bge.n	80084ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80084a6:	2306      	movs	r3, #6
 80084a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80084ac:	e011      	b.n	80084d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bf14      	ite	ne
 80084b8:	2301      	movne	r3, #1
 80084ba:	2300      	moveq	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	f107 0318 	add.w	r3, r7, #24
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd fe9a 	bl	8006200 <chk_lock>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084d2:	79fb      	ldrb	r3, [r7, #7]
 80084d4:	f003 031c 	and.w	r3, r3, #28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d07f      	beq.n	80085dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80084dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d017      	beq.n	8008514 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d10e      	bne.n	800850a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084ec:	f7fd fee4 	bl	80062b8 <enq_lock>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <f_open+0xc8>
 80084f6:	f107 0318 	add.w	r3, r7, #24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff f8ca 	bl	8007694 <dir_register>
 8008500:	4603      	mov	r3, r0
 8008502:	e000      	b.n	8008506 <f_open+0xca>
 8008504:	2312      	movs	r3, #18
 8008506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	f043 0308 	orr.w	r3, r3, #8
 8008510:	71fb      	strb	r3, [r7, #7]
 8008512:	e010      	b.n	8008536 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008514:	7fbb      	ldrb	r3, [r7, #30]
 8008516:	f003 0311 	and.w	r3, r3, #17
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <f_open+0xea>
					res = FR_DENIED;
 800851e:	2307      	movs	r3, #7
 8008520:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008524:	e007      	b.n	8008536 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <f_open+0xfa>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008536:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800853a:	2b00      	cmp	r3, #0
 800853c:	d168      	bne.n	8008610 <f_open+0x1d4>
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	f003 0308 	and.w	r3, r3, #8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d063      	beq.n	8008610 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008548:	f7fc ff7a 	bl	8005440 <get_fattime>
 800854c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	330e      	adds	r3, #14
 8008552:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008554:	4618      	mov	r0, r3
 8008556:	f7fd fda9 	bl	80060ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	3316      	adds	r3, #22
 800855e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008560:	4618      	mov	r0, r3
 8008562:	f7fd fda3 	bl	80060ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	330b      	adds	r3, #11
 800856a:	2220      	movs	r2, #32
 800856c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fcfa 	bl	8006f6e <ld_clust>
 800857a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008580:	2200      	movs	r2, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fd12 	bl	8006fac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	331c      	adds	r3, #28
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fd fd8c 	bl	80060ac <st_dword>
					fs->wflag = 1;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2201      	movs	r2, #1
 8008598:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800859a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800859c:	2b00      	cmp	r3, #0
 800859e:	d037      	beq.n	8008610 <f_open+0x1d4>
						dw = fs->winsect;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80085a6:	f107 0318 	add.w	r3, r7, #24
 80085aa:	2200      	movs	r2, #0
 80085ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fa25 	bl	80069fe <remove_chain>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80085ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d126      	bne.n	8008610 <f_open+0x1d4>
							res = move_window(fs, dw);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd ffca 	bl	8006560 <move_window>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085d6:	3a01      	subs	r2, #1
 80085d8:	611a      	str	r2, [r3, #16]
 80085da:	e019      	b.n	8008610 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d115      	bne.n	8008610 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085e4:	7fbb      	ldrb	r3, [r7, #30]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80085ee:	2304      	movs	r3, #4
 80085f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80085f4:	e00c      	b.n	8008610 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <f_open+0x1d4>
 8008600:	7fbb      	ldrb	r3, [r7, #30]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <f_open+0x1d4>
						res = FR_DENIED;
 800860a:	2307      	movs	r3, #7
 800860c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008614:	2b00      	cmp	r3, #0
 8008616:	d128      	bne.n	800866a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008628:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	bf14      	ite	ne
 8008642:	2301      	movne	r3, #1
 8008644:	2300      	moveq	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	f107 0318 	add.w	r3, r7, #24
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f7fd fe53 	bl	80062fc <inc_lock>
 8008656:	4602      	mov	r2, r0
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <f_open+0x22e>
 8008664:	2302      	movs	r3, #2
 8008666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800866a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800866e:	2b00      	cmp	r3, #0
 8008670:	f040 8095 	bne.w	800879e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fc77 	bl	8006f6e <ld_clust>
 8008680:	4602      	mov	r2, r0
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	331c      	adds	r3, #28
 800868a:	4618      	mov	r0, r3
 800868c:	f7fd fcd0 	bl	8006030 <ld_dword>
 8008690:	4602      	mov	r2, r0
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	88da      	ldrh	r2, [r3, #6]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	79fa      	ldrb	r2, [r7, #7]
 80086ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3330      	adds	r3, #48	; 0x30
 80086c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fd fd3a 	bl	8006146 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d060      	beq.n	800879e <f_open+0x362>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05c      	beq.n	800879e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	895b      	ldrh	r3, [r3, #10]
 80086f0:	025b      	lsls	r3, r3, #9
 80086f2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008700:	e016      	b.n	8008730 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd ffe5 	bl	80066d6 <get_fat>
 800870c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800870e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008710:	2b01      	cmp	r3, #1
 8008712:	d802      	bhi.n	800871a <f_open+0x2de>
 8008714:	2302      	movs	r3, #2
 8008716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800871a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d102      	bne.n	8008728 <f_open+0x2ec>
 8008722:	2301      	movs	r3, #1
 8008724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800872a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008734:	2b00      	cmp	r3, #0
 8008736:	d103      	bne.n	8008740 <f_open+0x304>
 8008738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800873a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873c:	429a      	cmp	r2, r3
 800873e:	d8e0      	bhi.n	8008702 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008744:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008746:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800874a:	2b00      	cmp	r3, #0
 800874c:	d127      	bne.n	800879e <f_open+0x362>
 800874e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	2b00      	cmp	r3, #0
 8008756:	d022      	beq.n	800879e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd ff9b 	bl	8006698 <clust2sect>
 8008762:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <f_open+0x336>
						res = FR_INT_ERR;
 800876a:	2302      	movs	r3, #2
 800876c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008770:	e015      	b.n	800879e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008774:	0a5a      	lsrs	r2, r3, #9
 8008776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008778:	441a      	add	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	7858      	ldrb	r0, [r3, #1]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a1a      	ldr	r2, [r3, #32]
 800878c:	2301      	movs	r3, #1
 800878e:	f7fd fbd9 	bl	8005f44 <disk_read>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <f_open+0x362>
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800879e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <f_open+0x370>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80087ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3768      	adds	r7, #104	; 0x68
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08e      	sub	sp, #56	; 0x38
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f107 0214 	add.w	r2, r7, #20
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fdb3 	bl	8008344 <validate>
 80087de:	4603      	mov	r3, r0
 80087e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d107      	bne.n	80087fc <f_read+0x44>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	7d5b      	ldrb	r3, [r3, #21]
 80087f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <f_read+0x4a>
 80087fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008800:	e115      	b.n	8008a2e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	7d1b      	ldrb	r3, [r3, #20]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <f_read+0x5a>
 800880e:	2307      	movs	r3, #7
 8008810:	e10d      	b.n	8008a2e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	429a      	cmp	r2, r3
 8008824:	f240 80fe 	bls.w	8008a24 <f_read+0x26c>
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800882c:	e0fa      	b.n	8008a24 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008836:	2b00      	cmp	r3, #0
 8008838:	f040 80c6 	bne.w	80089c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	0a5b      	lsrs	r3, r3, #9
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	8952      	ldrh	r2, [r2, #10]
 8008846:	3a01      	subs	r2, #1
 8008848:	4013      	ands	r3, r2
 800884a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d12f      	bne.n	80088b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d103      	bne.n	8008862 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
 8008860:	e013      	b.n	800888a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	4619      	mov	r1, r3
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7fe f9c1 	bl	8006bf8 <clmt_clust>
 8008876:	6338      	str	r0, [r7, #48]	; 0x30
 8008878:	e007      	b.n	800888a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f7fd ff27 	bl	80066d6 <get_fat>
 8008888:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	2b01      	cmp	r3, #1
 800888e:	d804      	bhi.n	800889a <f_read+0xe2>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2202      	movs	r2, #2
 8008894:	755a      	strb	r2, [r3, #21]
 8008896:	2302      	movs	r3, #2
 8008898:	e0c9      	b.n	8008a2e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d104      	bne.n	80088ac <f_read+0xf4>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	755a      	strb	r2, [r3, #21]
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0c0      	b.n	8008a2e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	4619      	mov	r1, r3
 80088ba:	4610      	mov	r0, r2
 80088bc:	f7fd feec 	bl	8006698 <clust2sect>
 80088c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <f_read+0x11a>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2202      	movs	r2, #2
 80088cc:	755a      	strb	r2, [r3, #21]
 80088ce:	2302      	movs	r3, #2
 80088d0:	e0ad      	b.n	8008a2e <f_read+0x276>
			sect += csect;
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0a5b      	lsrs	r3, r3, #9
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d039      	beq.n	800895a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	4413      	add	r3, r2
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	8952      	ldrh	r2, [r2, #10]
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d905      	bls.n	8008900 <f_read+0x148>
					cc = fs->csize - csect;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	895b      	ldrh	r3, [r3, #10]
 80088f8:	461a      	mov	r2, r3
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	7858      	ldrb	r0, [r3, #1]
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800890a:	f7fd fb1b 	bl	8005f44 <disk_read>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <f_read+0x166>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	755a      	strb	r2, [r3, #21]
 800891a:	2301      	movs	r3, #1
 800891c:	e087      	b.n	8008a2e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	7d1b      	ldrb	r3, [r3, #20]
 8008922:	b25b      	sxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	da14      	bge.n	8008952 <f_read+0x19a>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a1a      	ldr	r2, [r3, #32]
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008932:	429a      	cmp	r2, r3
 8008934:	d90d      	bls.n	8008952 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a1a      	ldr	r2, [r3, #32]
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	025b      	lsls	r3, r3, #9
 8008940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008942:	18d0      	adds	r0, r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3330      	adds	r3, #48	; 0x30
 8008948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800894c:	4619      	mov	r1, r3
 800894e:	f7fd fbd9 	bl	8006104 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	025b      	lsls	r3, r3, #9
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008958:	e050      	b.n	80089fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	429a      	cmp	r2, r3
 8008962:	d02e      	beq.n	80089c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	7d1b      	ldrb	r3, [r3, #20]
 8008968:	b25b      	sxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	da18      	bge.n	80089a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	7858      	ldrb	r0, [r3, #1]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a1a      	ldr	r2, [r3, #32]
 800897c:	2301      	movs	r3, #1
 800897e:	f7fd fb01 	bl	8005f84 <disk_write>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d004      	beq.n	8008992 <f_read+0x1da>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	755a      	strb	r2, [r3, #21]
 800898e:	2301      	movs	r3, #1
 8008990:	e04d      	b.n	8008a2e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	7d1b      	ldrb	r3, [r3, #20]
 8008996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899a:	b2da      	uxtb	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	7858      	ldrb	r0, [r3, #1]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089aa:	2301      	movs	r3, #1
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	f7fd fac9 	bl	8005f44 <disk_read>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <f_read+0x20a>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	755a      	strb	r2, [r3, #21]
 80089be:	2301      	movs	r3, #1
 80089c0:	e035      	b.n	8008a2e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80089d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80089d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d901      	bls.n	80089e2 <f_read+0x22a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f0:	4413      	add	r3, r2
 80089f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089f4:	4619      	mov	r1, r3
 80089f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089f8:	f7fd fb84 	bl	8006104 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80089fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	4413      	add	r3, r2
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	699a      	ldr	r2, [r3, #24]
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	441a      	add	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	619a      	str	r2, [r3, #24]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	441a      	add	r2, r3
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f47f af01 	bne.w	800882e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3738      	adds	r7, #56	; 0x38
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b086      	sub	sp, #24
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f107 0208 	add.w	r2, r7, #8
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fc7c 	bl	8008344 <validate>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d168      	bne.n	8008b28 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7d1b      	ldrb	r3, [r3, #20]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d062      	beq.n	8008b28 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7d1b      	ldrb	r3, [r3, #20]
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da15      	bge.n	8008a98 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7858      	ldrb	r0, [r3, #1]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1a      	ldr	r2, [r3, #32]
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f7fd fa82 	bl	8005f84 <disk_write>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <f_sync+0x54>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e04f      	b.n	8008b2a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7d1b      	ldrb	r3, [r3, #20]
 8008a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a98:	f7fc fcd2 	bl	8005440 <get_fattime>
 8008a9c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	f7fd fd5a 	bl	8006560 <move_window>
 8008aac:	4603      	mov	r3, r0
 8008aae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d138      	bne.n	8008b28 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	330b      	adds	r3, #11
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	330b      	adds	r3, #11
 8008ac6:	f042 0220 	orr.w	r2, r2, #32
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	f7fe fa67 	bl	8006fac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f103 021c 	add.w	r2, r3, #28
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f7fd fade 	bl	80060ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3316      	adds	r3, #22
 8008af4:	6939      	ldr	r1, [r7, #16]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fd fad8 	bl	80060ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3312      	adds	r3, #18
 8008b00:	2100      	movs	r1, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fd fab7 	bl	8006076 <st_word>
					fs->wflag = 1;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd fd53 	bl	80065bc <sync_fs>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7d1b      	ldrb	r3, [r3, #20]
 8008b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff ff7b 	bl	8008a36 <f_sync>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d118      	bne.n	8008b7c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f107 0208 	add.w	r2, r7, #8
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff fbf6 	bl	8008344 <validate>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10c      	bne.n	8008b7c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fd fc56 	bl	8006418 <dec_lock>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d102      	bne.n	8008b7c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b0a0      	sub	sp, #128	; 0x80
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008b92:	f107 010c 	add.w	r1, r7, #12
 8008b96:	1d3b      	adds	r3, r7, #4
 8008b98:	2202      	movs	r2, #2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff f980 	bl	8007ea0 <find_volume>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8008baa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f040 808e 	bne.w	8008cd0 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f863 	bl	8007c88 <follow_path>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008bc8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d108      	bne.n	8008be2 <f_unlink+0x5c>
 8008bd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fd fb12 	bl	8006200 <chk_lock>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d172      	bne.n	8008cd0 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008bea:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008bee:	b25b      	sxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	da03      	bge.n	8008bfc <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008bf4:	2306      	movs	r3, #6
 8008bf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008bfa:	e008      	b.n	8008c0e <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008bfc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008c08:	2307      	movs	r3, #7
 8008c0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 8008c0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d134      	bne.n	8008c80 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe f9a6 	bl	8006f6e <ld_clust>
 8008c22:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008c24:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d027      	beq.n	8008c80 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c36:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008c38:	f107 0310 	add.w	r3, r7, #16
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe f80e 	bl	8006c60 <dir_sdi>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8008c4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d116      	bne.n	8008c80 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008c52:	f107 0310 	add.w	r3, r7, #16
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fbb4 	bl	80073c6 <dir_read>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008c64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <f_unlink+0xec>
 8008c6c:	2307      	movs	r3, #7
 8008c6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008c72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d102      	bne.n	8008c80 <f_unlink+0xfa>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8008c80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d123      	bne.n	8008cd0 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fdf9 	bl	8007884 <dir_remove>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008c98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10c      	bne.n	8008cba <f_unlink+0x134>
 8008ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d009      	beq.n	8008cba <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008ca6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008caa:	2200      	movs	r2, #0
 8008cac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd fea5 	bl	80069fe <remove_chain>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008cba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d106      	bne.n	8008cd0 <f_unlink+0x14a>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fd fc79 	bl	80065bc <sync_fs>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008cd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3780      	adds	r7, #128	; 0x80
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cea:	2301      	movs	r3, #1
 8008cec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008cf2:	4b1f      	ldr	r3, [pc, #124]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008cf4:	7a5b      	ldrb	r3, [r3, #9]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d131      	bne.n	8008d60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008cfe:	7a5b      	ldrb	r3, [r3, #9]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d06:	2100      	movs	r1, #0
 8008d08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d0a:	4b19      	ldr	r3, [pc, #100]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d0c:	7a5b      	ldrb	r3, [r3, #9]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d1c:	7a5b      	ldrb	r3, [r3, #9]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d24:	4413      	add	r3, r2
 8008d26:	79fa      	ldrb	r2, [r7, #7]
 8008d28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d2a:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d2c:	7a5b      	ldrb	r3, [r3, #9]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	b2d1      	uxtb	r1, r2
 8008d34:	4a0e      	ldr	r2, [pc, #56]	; (8008d70 <FATFS_LinkDriverEx+0x94>)
 8008d36:	7251      	strb	r1, [r2, #9]
 8008d38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d3a:	7dbb      	ldrb	r3, [r7, #22]
 8008d3c:	3330      	adds	r3, #48	; 0x30
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	3301      	adds	r3, #1
 8008d48:	223a      	movs	r2, #58	; 0x3a
 8008d4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3302      	adds	r3, #2
 8008d50:	222f      	movs	r2, #47	; 0x2f
 8008d52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	3303      	adds	r3, #3
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	200006f4 	.word	0x200006f4

08008d74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff ffaa 	bl	8008cdc <FATFS_LinkDriverEx>
 8008d88:	4603      	mov	r3, r0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	2b7f      	cmp	r3, #127	; 0x7f
 8008da4:	d802      	bhi.n	8008dac <ff_convert+0x18>
		c = chr;
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	81fb      	strh	r3, [r7, #14]
 8008daa:	e025      	b.n	8008df8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	2bff      	cmp	r3, #255	; 0xff
 8008db6:	d805      	bhi.n	8008dc4 <ff_convert+0x30>
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	3b80      	subs	r3, #128	; 0x80
 8008dbc:	4a12      	ldr	r2, [pc, #72]	; (8008e08 <ff_convert+0x74>)
 8008dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc2:	e000      	b.n	8008dc6 <ff_convert+0x32>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	81fb      	strh	r3, [r7, #14]
 8008dc8:	e016      	b.n	8008df8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008dca:	2300      	movs	r3, #0
 8008dcc:	81fb      	strh	r3, [r7, #14]
 8008dce:	e009      	b.n	8008de4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008dd0:	89fb      	ldrh	r3, [r7, #14]
 8008dd2:	4a0d      	ldr	r2, [pc, #52]	; (8008e08 <ff_convert+0x74>)
 8008dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d006      	beq.n	8008dec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008dde:	89fb      	ldrh	r3, [r7, #14]
 8008de0:	3301      	adds	r3, #1
 8008de2:	81fb      	strh	r3, [r7, #14]
 8008de4:	89fb      	ldrh	r3, [r7, #14]
 8008de6:	2b7f      	cmp	r3, #127	; 0x7f
 8008de8:	d9f2      	bls.n	8008dd0 <ff_convert+0x3c>
 8008dea:	e000      	b.n	8008dee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008dec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	3380      	adds	r3, #128	; 0x80
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008df8:	89fb      	ldrh	r3, [r7, #14]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	0800a5d4 	.word	0x0800a5d4

08008e0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e1c:	d201      	bcs.n	8008e22 <ff_wtoupper+0x16>
 8008e1e:	4b3e      	ldr	r3, [pc, #248]	; (8008f18 <ff_wtoupper+0x10c>)
 8008e20:	e000      	b.n	8008e24 <ff_wtoupper+0x18>
 8008e22:	4b3e      	ldr	r3, [pc, #248]	; (8008f1c <ff_wtoupper+0x110>)
 8008e24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	1c9a      	adds	r2, r3, #2
 8008e2a:	617a      	str	r2, [r7, #20]
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008e30:	8a7b      	ldrh	r3, [r7, #18]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d068      	beq.n	8008f08 <ff_wtoupper+0xfc>
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	8a7b      	ldrh	r3, [r7, #18]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d364      	bcc.n	8008f08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	1c9a      	adds	r2, r3, #2
 8008e42:	617a      	str	r2, [r7, #20]
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	823b      	strh	r3, [r7, #16]
 8008e48:	8a3b      	ldrh	r3, [r7, #16]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	81fb      	strh	r3, [r7, #14]
 8008e4e:	8a3b      	ldrh	r3, [r7, #16]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008e54:	88fa      	ldrh	r2, [r7, #6]
 8008e56:	8a79      	ldrh	r1, [r7, #18]
 8008e58:	8a3b      	ldrh	r3, [r7, #16]
 8008e5a:	440b      	add	r3, r1
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	da49      	bge.n	8008ef4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008e60:	89fb      	ldrh	r3, [r7, #14]
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d84f      	bhi.n	8008f06 <ff_wtoupper+0xfa>
 8008e66:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <ff_wtoupper+0x60>)
 8008e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008ea3 	.word	0x08008ea3
 8008e74:	08008eb9 	.word	0x08008eb9
 8008e78:	08008ec1 	.word	0x08008ec1
 8008e7c:	08008ec9 	.word	0x08008ec9
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	08008ed9 	.word	0x08008ed9
 8008e88:	08008ee1 	.word	0x08008ee1
 8008e8c:	08008ee9 	.word	0x08008ee9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	8a7b      	ldrh	r3, [r7, #18]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	80fb      	strh	r3, [r7, #6]
 8008ea0:	e027      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	8a7b      	ldrh	r3, [r7, #18]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	88fa      	ldrh	r2, [r7, #6]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	80fb      	strh	r3, [r7, #6]
 8008eb6:	e01c      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	3b10      	subs	r3, #16
 8008ebc:	80fb      	strh	r3, [r7, #6]
 8008ebe:	e018      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	3b20      	subs	r3, #32
 8008ec4:	80fb      	strh	r3, [r7, #6]
 8008ec6:	e014      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	3b30      	subs	r3, #48	; 0x30
 8008ecc:	80fb      	strh	r3, [r7, #6]
 8008ece:	e010      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	3b1a      	subs	r3, #26
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	e00c      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	3308      	adds	r3, #8
 8008edc:	80fb      	strh	r3, [r7, #6]
 8008ede:	e008      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008ee0:	88fb      	ldrh	r3, [r7, #6]
 8008ee2:	3b50      	subs	r3, #80	; 0x50
 8008ee4:	80fb      	strh	r3, [r7, #6]
 8008ee6:	e004      	b.n	8008ef2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008eee:	80fb      	strh	r3, [r7, #6]
 8008ef0:	bf00      	nop
			}
			break;
 8008ef2:	e008      	b.n	8008f06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008ef4:	89fb      	ldrh	r3, [r7, #14]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d195      	bne.n	8008e26 <ff_wtoupper+0x1a>
 8008efa:	8a3b      	ldrh	r3, [r7, #16]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4413      	add	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008f04:	e78f      	b.n	8008e26 <ff_wtoupper+0x1a>
			break;
 8008f06:	bf00      	nop
	}

	return chr;
 8008f08:	88fb      	ldrh	r3, [r7, #6]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	0800a6d4 	.word	0x0800a6d4
 8008f1c:	0800a8c8 	.word	0x0800a8c8

08008f20 <__errno>:
 8008f20:	4b01      	ldr	r3, [pc, #4]	; (8008f28 <__errno+0x8>)
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20000028 	.word	0x20000028

08008f2c <__libc_init_array>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4d0d      	ldr	r5, [pc, #52]	; (8008f64 <__libc_init_array+0x38>)
 8008f30:	4c0d      	ldr	r4, [pc, #52]	; (8008f68 <__libc_init_array+0x3c>)
 8008f32:	1b64      	subs	r4, r4, r5
 8008f34:	10a4      	asrs	r4, r4, #2
 8008f36:	2600      	movs	r6, #0
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	d109      	bne.n	8008f50 <__libc_init_array+0x24>
 8008f3c:	4d0b      	ldr	r5, [pc, #44]	; (8008f6c <__libc_init_array+0x40>)
 8008f3e:	4c0c      	ldr	r4, [pc, #48]	; (8008f70 <__libc_init_array+0x44>)
 8008f40:	f000 ffec 	bl	8009f1c <_init>
 8008f44:	1b64      	subs	r4, r4, r5
 8008f46:	10a4      	asrs	r4, r4, #2
 8008f48:	2600      	movs	r6, #0
 8008f4a:	42a6      	cmp	r6, r4
 8008f4c:	d105      	bne.n	8008f5a <__libc_init_array+0x2e>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f54:	4798      	blx	r3
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7ee      	b.n	8008f38 <__libc_init_array+0xc>
 8008f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5e:	4798      	blx	r3
 8008f60:	3601      	adds	r6, #1
 8008f62:	e7f2      	b.n	8008f4a <__libc_init_array+0x1e>
 8008f64:	0800aa24 	.word	0x0800aa24
 8008f68:	0800aa24 	.word	0x0800aa24
 8008f6c:	0800aa24 	.word	0x0800aa24
 8008f70:	0800aa28 	.word	0x0800aa28

08008f74 <memset>:
 8008f74:	4402      	add	r2, r0
 8008f76:	4603      	mov	r3, r0
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d100      	bne.n	8008f7e <memset+0xa>
 8008f7c:	4770      	bx	lr
 8008f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f82:	e7f9      	b.n	8008f78 <memset+0x4>

08008f84 <iprintf>:
 8008f84:	b40f      	push	{r0, r1, r2, r3}
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <iprintf+0x2c>)
 8008f88:	b513      	push	{r0, r1, r4, lr}
 8008f8a:	681c      	ldr	r4, [r3, #0]
 8008f8c:	b124      	cbz	r4, 8008f98 <iprintf+0x14>
 8008f8e:	69a3      	ldr	r3, [r4, #24]
 8008f90:	b913      	cbnz	r3, 8008f98 <iprintf+0x14>
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fa5e 	bl	8009454 <__sinit>
 8008f98:	ab05      	add	r3, sp, #20
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	68a1      	ldr	r1, [r4, #8]
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fc2f 	bl	8009804 <_vfiprintf_r>
 8008fa6:	b002      	add	sp, #8
 8008fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fac:	b004      	add	sp, #16
 8008fae:	4770      	bx	lr
 8008fb0:	20000028 	.word	0x20000028

08008fb4 <_puts_r>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	460e      	mov	r6, r1
 8008fb8:	4605      	mov	r5, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <_puts_r+0x10>
 8008fbc:	6983      	ldr	r3, [r0, #24]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_puts_r+0x10>
 8008fc0:	f000 fa48 	bl	8009454 <__sinit>
 8008fc4:	69ab      	ldr	r3, [r5, #24]
 8008fc6:	68ac      	ldr	r4, [r5, #8]
 8008fc8:	b913      	cbnz	r3, 8008fd0 <_puts_r+0x1c>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 fa42 	bl	8009454 <__sinit>
 8008fd0:	4b2c      	ldr	r3, [pc, #176]	; (8009084 <_puts_r+0xd0>)
 8008fd2:	429c      	cmp	r4, r3
 8008fd4:	d120      	bne.n	8009018 <_puts_r+0x64>
 8008fd6:	686c      	ldr	r4, [r5, #4]
 8008fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fda:	07db      	lsls	r3, r3, #31
 8008fdc:	d405      	bmi.n	8008fea <_puts_r+0x36>
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	0598      	lsls	r0, r3, #22
 8008fe2:	d402      	bmi.n	8008fea <_puts_r+0x36>
 8008fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fe6:	f000 fad3 	bl	8009590 <__retarget_lock_acquire_recursive>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	0719      	lsls	r1, r3, #28
 8008fee:	d51d      	bpl.n	800902c <_puts_r+0x78>
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	b1db      	cbz	r3, 800902c <_puts_r+0x78>
 8008ff4:	3e01      	subs	r6, #1
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	60a3      	str	r3, [r4, #8]
 8009000:	bb39      	cbnz	r1, 8009052 <_puts_r+0x9e>
 8009002:	2b00      	cmp	r3, #0
 8009004:	da38      	bge.n	8009078 <_puts_r+0xc4>
 8009006:	4622      	mov	r2, r4
 8009008:	210a      	movs	r1, #10
 800900a:	4628      	mov	r0, r5
 800900c:	f000 f848 	bl	80090a0 <__swbuf_r>
 8009010:	3001      	adds	r0, #1
 8009012:	d011      	beq.n	8009038 <_puts_r+0x84>
 8009014:	250a      	movs	r5, #10
 8009016:	e011      	b.n	800903c <_puts_r+0x88>
 8009018:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <_puts_r+0xd4>)
 800901a:	429c      	cmp	r4, r3
 800901c:	d101      	bne.n	8009022 <_puts_r+0x6e>
 800901e:	68ac      	ldr	r4, [r5, #8]
 8009020:	e7da      	b.n	8008fd8 <_puts_r+0x24>
 8009022:	4b1a      	ldr	r3, [pc, #104]	; (800908c <_puts_r+0xd8>)
 8009024:	429c      	cmp	r4, r3
 8009026:	bf08      	it	eq
 8009028:	68ec      	ldreq	r4, [r5, #12]
 800902a:	e7d5      	b.n	8008fd8 <_puts_r+0x24>
 800902c:	4621      	mov	r1, r4
 800902e:	4628      	mov	r0, r5
 8009030:	f000 f888 	bl	8009144 <__swsetup_r>
 8009034:	2800      	cmp	r0, #0
 8009036:	d0dd      	beq.n	8008ff4 <_puts_r+0x40>
 8009038:	f04f 35ff 	mov.w	r5, #4294967295
 800903c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800903e:	07da      	lsls	r2, r3, #31
 8009040:	d405      	bmi.n	800904e <_puts_r+0x9a>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	059b      	lsls	r3, r3, #22
 8009046:	d402      	bmi.n	800904e <_puts_r+0x9a>
 8009048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800904a:	f000 faa2 	bl	8009592 <__retarget_lock_release_recursive>
 800904e:	4628      	mov	r0, r5
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	2b00      	cmp	r3, #0
 8009054:	da04      	bge.n	8009060 <_puts_r+0xac>
 8009056:	69a2      	ldr	r2, [r4, #24]
 8009058:	429a      	cmp	r2, r3
 800905a:	dc06      	bgt.n	800906a <_puts_r+0xb6>
 800905c:	290a      	cmp	r1, #10
 800905e:	d004      	beq.n	800906a <_puts_r+0xb6>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	6022      	str	r2, [r4, #0]
 8009066:	7019      	strb	r1, [r3, #0]
 8009068:	e7c5      	b.n	8008ff6 <_puts_r+0x42>
 800906a:	4622      	mov	r2, r4
 800906c:	4628      	mov	r0, r5
 800906e:	f000 f817 	bl	80090a0 <__swbuf_r>
 8009072:	3001      	adds	r0, #1
 8009074:	d1bf      	bne.n	8008ff6 <_puts_r+0x42>
 8009076:	e7df      	b.n	8009038 <_puts_r+0x84>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	250a      	movs	r5, #10
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	701d      	strb	r5, [r3, #0]
 8009082:	e7db      	b.n	800903c <_puts_r+0x88>
 8009084:	0800a9a8 	.word	0x0800a9a8
 8009088:	0800a9c8 	.word	0x0800a9c8
 800908c:	0800a988 	.word	0x0800a988

08009090 <puts>:
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <puts+0xc>)
 8009092:	4601      	mov	r1, r0
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f7ff bf8d 	b.w	8008fb4 <_puts_r>
 800909a:	bf00      	nop
 800909c:	20000028 	.word	0x20000028

080090a0 <__swbuf_r>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	460e      	mov	r6, r1
 80090a4:	4614      	mov	r4, r2
 80090a6:	4605      	mov	r5, r0
 80090a8:	b118      	cbz	r0, 80090b2 <__swbuf_r+0x12>
 80090aa:	6983      	ldr	r3, [r0, #24]
 80090ac:	b90b      	cbnz	r3, 80090b2 <__swbuf_r+0x12>
 80090ae:	f000 f9d1 	bl	8009454 <__sinit>
 80090b2:	4b21      	ldr	r3, [pc, #132]	; (8009138 <__swbuf_r+0x98>)
 80090b4:	429c      	cmp	r4, r3
 80090b6:	d12b      	bne.n	8009110 <__swbuf_r+0x70>
 80090b8:	686c      	ldr	r4, [r5, #4]
 80090ba:	69a3      	ldr	r3, [r4, #24]
 80090bc:	60a3      	str	r3, [r4, #8]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	071a      	lsls	r2, r3, #28
 80090c2:	d52f      	bpl.n	8009124 <__swbuf_r+0x84>
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	b36b      	cbz	r3, 8009124 <__swbuf_r+0x84>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	6820      	ldr	r0, [r4, #0]
 80090cc:	1ac0      	subs	r0, r0, r3
 80090ce:	6963      	ldr	r3, [r4, #20]
 80090d0:	b2f6      	uxtb	r6, r6
 80090d2:	4283      	cmp	r3, r0
 80090d4:	4637      	mov	r7, r6
 80090d6:	dc04      	bgt.n	80090e2 <__swbuf_r+0x42>
 80090d8:	4621      	mov	r1, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f926 	bl	800932c <_fflush_r>
 80090e0:	bb30      	cbnz	r0, 8009130 <__swbuf_r+0x90>
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	60a3      	str	r3, [r4, #8]
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	6022      	str	r2, [r4, #0]
 80090ee:	701e      	strb	r6, [r3, #0]
 80090f0:	6963      	ldr	r3, [r4, #20]
 80090f2:	3001      	adds	r0, #1
 80090f4:	4283      	cmp	r3, r0
 80090f6:	d004      	beq.n	8009102 <__swbuf_r+0x62>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	07db      	lsls	r3, r3, #31
 80090fc:	d506      	bpl.n	800910c <__swbuf_r+0x6c>
 80090fe:	2e0a      	cmp	r6, #10
 8009100:	d104      	bne.n	800910c <__swbuf_r+0x6c>
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f911 	bl	800932c <_fflush_r>
 800910a:	b988      	cbnz	r0, 8009130 <__swbuf_r+0x90>
 800910c:	4638      	mov	r0, r7
 800910e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <__swbuf_r+0x9c>)
 8009112:	429c      	cmp	r4, r3
 8009114:	d101      	bne.n	800911a <__swbuf_r+0x7a>
 8009116:	68ac      	ldr	r4, [r5, #8]
 8009118:	e7cf      	b.n	80090ba <__swbuf_r+0x1a>
 800911a:	4b09      	ldr	r3, [pc, #36]	; (8009140 <__swbuf_r+0xa0>)
 800911c:	429c      	cmp	r4, r3
 800911e:	bf08      	it	eq
 8009120:	68ec      	ldreq	r4, [r5, #12]
 8009122:	e7ca      	b.n	80090ba <__swbuf_r+0x1a>
 8009124:	4621      	mov	r1, r4
 8009126:	4628      	mov	r0, r5
 8009128:	f000 f80c 	bl	8009144 <__swsetup_r>
 800912c:	2800      	cmp	r0, #0
 800912e:	d0cb      	beq.n	80090c8 <__swbuf_r+0x28>
 8009130:	f04f 37ff 	mov.w	r7, #4294967295
 8009134:	e7ea      	b.n	800910c <__swbuf_r+0x6c>
 8009136:	bf00      	nop
 8009138:	0800a9a8 	.word	0x0800a9a8
 800913c:	0800a9c8 	.word	0x0800a9c8
 8009140:	0800a988 	.word	0x0800a988

08009144 <__swsetup_r>:
 8009144:	4b32      	ldr	r3, [pc, #200]	; (8009210 <__swsetup_r+0xcc>)
 8009146:	b570      	push	{r4, r5, r6, lr}
 8009148:	681d      	ldr	r5, [r3, #0]
 800914a:	4606      	mov	r6, r0
 800914c:	460c      	mov	r4, r1
 800914e:	b125      	cbz	r5, 800915a <__swsetup_r+0x16>
 8009150:	69ab      	ldr	r3, [r5, #24]
 8009152:	b913      	cbnz	r3, 800915a <__swsetup_r+0x16>
 8009154:	4628      	mov	r0, r5
 8009156:	f000 f97d 	bl	8009454 <__sinit>
 800915a:	4b2e      	ldr	r3, [pc, #184]	; (8009214 <__swsetup_r+0xd0>)
 800915c:	429c      	cmp	r4, r3
 800915e:	d10f      	bne.n	8009180 <__swsetup_r+0x3c>
 8009160:	686c      	ldr	r4, [r5, #4]
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	d42c      	bmi.n	80091c6 <__swsetup_r+0x82>
 800916c:	06dd      	lsls	r5, r3, #27
 800916e:	d411      	bmi.n	8009194 <__swsetup_r+0x50>
 8009170:	2309      	movs	r3, #9
 8009172:	6033      	str	r3, [r6, #0]
 8009174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	e03e      	b.n	80091fe <__swsetup_r+0xba>
 8009180:	4b25      	ldr	r3, [pc, #148]	; (8009218 <__swsetup_r+0xd4>)
 8009182:	429c      	cmp	r4, r3
 8009184:	d101      	bne.n	800918a <__swsetup_r+0x46>
 8009186:	68ac      	ldr	r4, [r5, #8]
 8009188:	e7eb      	b.n	8009162 <__swsetup_r+0x1e>
 800918a:	4b24      	ldr	r3, [pc, #144]	; (800921c <__swsetup_r+0xd8>)
 800918c:	429c      	cmp	r4, r3
 800918e:	bf08      	it	eq
 8009190:	68ec      	ldreq	r4, [r5, #12]
 8009192:	e7e6      	b.n	8009162 <__swsetup_r+0x1e>
 8009194:	0758      	lsls	r0, r3, #29
 8009196:	d512      	bpl.n	80091be <__swsetup_r+0x7a>
 8009198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919a:	b141      	cbz	r1, 80091ae <__swsetup_r+0x6a>
 800919c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a0:	4299      	cmp	r1, r3
 80091a2:	d002      	beq.n	80091aa <__swsetup_r+0x66>
 80091a4:	4630      	mov	r0, r6
 80091a6:	f000 fa59 	bl	800965c <_free_r>
 80091aa:	2300      	movs	r3, #0
 80091ac:	6363      	str	r3, [r4, #52]	; 0x34
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	2300      	movs	r3, #0
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	6923      	ldr	r3, [r4, #16]
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f043 0308 	orr.w	r3, r3, #8
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	b94b      	cbnz	r3, 80091de <__swsetup_r+0x9a>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d4:	d003      	beq.n	80091de <__swsetup_r+0x9a>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 f9ff 	bl	80095dc <__smakebuf_r>
 80091de:	89a0      	ldrh	r0, [r4, #12]
 80091e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e4:	f010 0301 	ands.w	r3, r0, #1
 80091e8:	d00a      	beq.n	8009200 <__swsetup_r+0xbc>
 80091ea:	2300      	movs	r3, #0
 80091ec:	60a3      	str	r3, [r4, #8]
 80091ee:	6963      	ldr	r3, [r4, #20]
 80091f0:	425b      	negs	r3, r3
 80091f2:	61a3      	str	r3, [r4, #24]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	b943      	cbnz	r3, 800920a <__swsetup_r+0xc6>
 80091f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091fc:	d1ba      	bne.n	8009174 <__swsetup_r+0x30>
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	0781      	lsls	r1, r0, #30
 8009202:	bf58      	it	pl
 8009204:	6963      	ldrpl	r3, [r4, #20]
 8009206:	60a3      	str	r3, [r4, #8]
 8009208:	e7f4      	b.n	80091f4 <__swsetup_r+0xb0>
 800920a:	2000      	movs	r0, #0
 800920c:	e7f7      	b.n	80091fe <__swsetup_r+0xba>
 800920e:	bf00      	nop
 8009210:	20000028 	.word	0x20000028
 8009214:	0800a9a8 	.word	0x0800a9a8
 8009218:	0800a9c8 	.word	0x0800a9c8
 800921c:	0800a988 	.word	0x0800a988

08009220 <__sflush_r>:
 8009220:	898a      	ldrh	r2, [r1, #12]
 8009222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009226:	4605      	mov	r5, r0
 8009228:	0710      	lsls	r0, r2, #28
 800922a:	460c      	mov	r4, r1
 800922c:	d458      	bmi.n	80092e0 <__sflush_r+0xc0>
 800922e:	684b      	ldr	r3, [r1, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	dc05      	bgt.n	8009240 <__sflush_r+0x20>
 8009234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	dc02      	bgt.n	8009240 <__sflush_r+0x20>
 800923a:	2000      	movs	r0, #0
 800923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009242:	2e00      	cmp	r6, #0
 8009244:	d0f9      	beq.n	800923a <__sflush_r+0x1a>
 8009246:	2300      	movs	r3, #0
 8009248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800924c:	682f      	ldr	r7, [r5, #0]
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	d032      	beq.n	80092b8 <__sflush_r+0x98>
 8009252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	075a      	lsls	r2, r3, #29
 8009258:	d505      	bpl.n	8009266 <__sflush_r+0x46>
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	1ac0      	subs	r0, r0, r3
 800925e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009260:	b10b      	cbz	r3, 8009266 <__sflush_r+0x46>
 8009262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009264:	1ac0      	subs	r0, r0, r3
 8009266:	2300      	movs	r3, #0
 8009268:	4602      	mov	r2, r0
 800926a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800926c:	6a21      	ldr	r1, [r4, #32]
 800926e:	4628      	mov	r0, r5
 8009270:	47b0      	blx	r6
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	d106      	bne.n	8009286 <__sflush_r+0x66>
 8009278:	6829      	ldr	r1, [r5, #0]
 800927a:	291d      	cmp	r1, #29
 800927c:	d82c      	bhi.n	80092d8 <__sflush_r+0xb8>
 800927e:	4a2a      	ldr	r2, [pc, #168]	; (8009328 <__sflush_r+0x108>)
 8009280:	40ca      	lsrs	r2, r1
 8009282:	07d6      	lsls	r6, r2, #31
 8009284:	d528      	bpl.n	80092d8 <__sflush_r+0xb8>
 8009286:	2200      	movs	r2, #0
 8009288:	6062      	str	r2, [r4, #4]
 800928a:	04d9      	lsls	r1, r3, #19
 800928c:	6922      	ldr	r2, [r4, #16]
 800928e:	6022      	str	r2, [r4, #0]
 8009290:	d504      	bpl.n	800929c <__sflush_r+0x7c>
 8009292:	1c42      	adds	r2, r0, #1
 8009294:	d101      	bne.n	800929a <__sflush_r+0x7a>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b903      	cbnz	r3, 800929c <__sflush_r+0x7c>
 800929a:	6560      	str	r0, [r4, #84]	; 0x54
 800929c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800929e:	602f      	str	r7, [r5, #0]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d0ca      	beq.n	800923a <__sflush_r+0x1a>
 80092a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a8:	4299      	cmp	r1, r3
 80092aa:	d002      	beq.n	80092b2 <__sflush_r+0x92>
 80092ac:	4628      	mov	r0, r5
 80092ae:	f000 f9d5 	bl	800965c <_free_r>
 80092b2:	2000      	movs	r0, #0
 80092b4:	6360      	str	r0, [r4, #52]	; 0x34
 80092b6:	e7c1      	b.n	800923c <__sflush_r+0x1c>
 80092b8:	6a21      	ldr	r1, [r4, #32]
 80092ba:	2301      	movs	r3, #1
 80092bc:	4628      	mov	r0, r5
 80092be:	47b0      	blx	r6
 80092c0:	1c41      	adds	r1, r0, #1
 80092c2:	d1c7      	bne.n	8009254 <__sflush_r+0x34>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0c4      	beq.n	8009254 <__sflush_r+0x34>
 80092ca:	2b1d      	cmp	r3, #29
 80092cc:	d001      	beq.n	80092d2 <__sflush_r+0xb2>
 80092ce:	2b16      	cmp	r3, #22
 80092d0:	d101      	bne.n	80092d6 <__sflush_r+0xb6>
 80092d2:	602f      	str	r7, [r5, #0]
 80092d4:	e7b1      	b.n	800923a <__sflush_r+0x1a>
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	e7ad      	b.n	800923c <__sflush_r+0x1c>
 80092e0:	690f      	ldr	r7, [r1, #16]
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	d0a9      	beq.n	800923a <__sflush_r+0x1a>
 80092e6:	0793      	lsls	r3, r2, #30
 80092e8:	680e      	ldr	r6, [r1, #0]
 80092ea:	bf08      	it	eq
 80092ec:	694b      	ldreq	r3, [r1, #20]
 80092ee:	600f      	str	r7, [r1, #0]
 80092f0:	bf18      	it	ne
 80092f2:	2300      	movne	r3, #0
 80092f4:	eba6 0807 	sub.w	r8, r6, r7
 80092f8:	608b      	str	r3, [r1, #8]
 80092fa:	f1b8 0f00 	cmp.w	r8, #0
 80092fe:	dd9c      	ble.n	800923a <__sflush_r+0x1a>
 8009300:	6a21      	ldr	r1, [r4, #32]
 8009302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009304:	4643      	mov	r3, r8
 8009306:	463a      	mov	r2, r7
 8009308:	4628      	mov	r0, r5
 800930a:	47b0      	blx	r6
 800930c:	2800      	cmp	r0, #0
 800930e:	dc06      	bgt.n	800931e <__sflush_r+0xfe>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e78e      	b.n	800923c <__sflush_r+0x1c>
 800931e:	4407      	add	r7, r0
 8009320:	eba8 0800 	sub.w	r8, r8, r0
 8009324:	e7e9      	b.n	80092fa <__sflush_r+0xda>
 8009326:	bf00      	nop
 8009328:	20400001 	.word	0x20400001

0800932c <_fflush_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	690b      	ldr	r3, [r1, #16]
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b913      	cbnz	r3, 800933c <_fflush_r+0x10>
 8009336:	2500      	movs	r5, #0
 8009338:	4628      	mov	r0, r5
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	b118      	cbz	r0, 8009346 <_fflush_r+0x1a>
 800933e:	6983      	ldr	r3, [r0, #24]
 8009340:	b90b      	cbnz	r3, 8009346 <_fflush_r+0x1a>
 8009342:	f000 f887 	bl	8009454 <__sinit>
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <_fflush_r+0x6c>)
 8009348:	429c      	cmp	r4, r3
 800934a:	d11b      	bne.n	8009384 <_fflush_r+0x58>
 800934c:	686c      	ldr	r4, [r5, #4]
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0ef      	beq.n	8009336 <_fflush_r+0xa>
 8009356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009358:	07d0      	lsls	r0, r2, #31
 800935a:	d404      	bmi.n	8009366 <_fflush_r+0x3a>
 800935c:	0599      	lsls	r1, r3, #22
 800935e:	d402      	bmi.n	8009366 <_fflush_r+0x3a>
 8009360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009362:	f000 f915 	bl	8009590 <__retarget_lock_acquire_recursive>
 8009366:	4628      	mov	r0, r5
 8009368:	4621      	mov	r1, r4
 800936a:	f7ff ff59 	bl	8009220 <__sflush_r>
 800936e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009370:	07da      	lsls	r2, r3, #31
 8009372:	4605      	mov	r5, r0
 8009374:	d4e0      	bmi.n	8009338 <_fflush_r+0xc>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	059b      	lsls	r3, r3, #22
 800937a:	d4dd      	bmi.n	8009338 <_fflush_r+0xc>
 800937c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937e:	f000 f908 	bl	8009592 <__retarget_lock_release_recursive>
 8009382:	e7d9      	b.n	8009338 <_fflush_r+0xc>
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <_fflush_r+0x70>)
 8009386:	429c      	cmp	r4, r3
 8009388:	d101      	bne.n	800938e <_fflush_r+0x62>
 800938a:	68ac      	ldr	r4, [r5, #8]
 800938c:	e7df      	b.n	800934e <_fflush_r+0x22>
 800938e:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <_fflush_r+0x74>)
 8009390:	429c      	cmp	r4, r3
 8009392:	bf08      	it	eq
 8009394:	68ec      	ldreq	r4, [r5, #12]
 8009396:	e7da      	b.n	800934e <_fflush_r+0x22>
 8009398:	0800a9a8 	.word	0x0800a9a8
 800939c:	0800a9c8 	.word	0x0800a9c8
 80093a0:	0800a988 	.word	0x0800a988

080093a4 <std>:
 80093a4:	2300      	movs	r3, #0
 80093a6:	b510      	push	{r4, lr}
 80093a8:	4604      	mov	r4, r0
 80093aa:	e9c0 3300 	strd	r3, r3, [r0]
 80093ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093b2:	6083      	str	r3, [r0, #8]
 80093b4:	8181      	strh	r1, [r0, #12]
 80093b6:	6643      	str	r3, [r0, #100]	; 0x64
 80093b8:	81c2      	strh	r2, [r0, #14]
 80093ba:	6183      	str	r3, [r0, #24]
 80093bc:	4619      	mov	r1, r3
 80093be:	2208      	movs	r2, #8
 80093c0:	305c      	adds	r0, #92	; 0x5c
 80093c2:	f7ff fdd7 	bl	8008f74 <memset>
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <std+0x38>)
 80093c8:	6263      	str	r3, [r4, #36]	; 0x24
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <std+0x3c>)
 80093cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <std+0x40>)
 80093d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <std+0x44>)
 80093d4:	6224      	str	r4, [r4, #32]
 80093d6:	6323      	str	r3, [r4, #48]	; 0x30
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	bf00      	nop
 80093dc:	08009dad 	.word	0x08009dad
 80093e0:	08009dcf 	.word	0x08009dcf
 80093e4:	08009e07 	.word	0x08009e07
 80093e8:	08009e2b 	.word	0x08009e2b

080093ec <_cleanup_r>:
 80093ec:	4901      	ldr	r1, [pc, #4]	; (80093f4 <_cleanup_r+0x8>)
 80093ee:	f000 b8af 	b.w	8009550 <_fwalk_reent>
 80093f2:	bf00      	nop
 80093f4:	0800932d 	.word	0x0800932d

080093f8 <__sfmoreglue>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	1e4a      	subs	r2, r1, #1
 80093fc:	2568      	movs	r5, #104	; 0x68
 80093fe:	4355      	muls	r5, r2
 8009400:	460e      	mov	r6, r1
 8009402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009406:	f000 f979 	bl	80096fc <_malloc_r>
 800940a:	4604      	mov	r4, r0
 800940c:	b140      	cbz	r0, 8009420 <__sfmoreglue+0x28>
 800940e:	2100      	movs	r1, #0
 8009410:	e9c0 1600 	strd	r1, r6, [r0]
 8009414:	300c      	adds	r0, #12
 8009416:	60a0      	str	r0, [r4, #8]
 8009418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800941c:	f7ff fdaa 	bl	8008f74 <memset>
 8009420:	4620      	mov	r0, r4
 8009422:	bd70      	pop	{r4, r5, r6, pc}

08009424 <__sfp_lock_acquire>:
 8009424:	4801      	ldr	r0, [pc, #4]	; (800942c <__sfp_lock_acquire+0x8>)
 8009426:	f000 b8b3 	b.w	8009590 <__retarget_lock_acquire_recursive>
 800942a:	bf00      	nop
 800942c:	20000d34 	.word	0x20000d34

08009430 <__sfp_lock_release>:
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__sfp_lock_release+0x8>)
 8009432:	f000 b8ae 	b.w	8009592 <__retarget_lock_release_recursive>
 8009436:	bf00      	nop
 8009438:	20000d34 	.word	0x20000d34

0800943c <__sinit_lock_acquire>:
 800943c:	4801      	ldr	r0, [pc, #4]	; (8009444 <__sinit_lock_acquire+0x8>)
 800943e:	f000 b8a7 	b.w	8009590 <__retarget_lock_acquire_recursive>
 8009442:	bf00      	nop
 8009444:	20000d2f 	.word	0x20000d2f

08009448 <__sinit_lock_release>:
 8009448:	4801      	ldr	r0, [pc, #4]	; (8009450 <__sinit_lock_release+0x8>)
 800944a:	f000 b8a2 	b.w	8009592 <__retarget_lock_release_recursive>
 800944e:	bf00      	nop
 8009450:	20000d2f 	.word	0x20000d2f

08009454 <__sinit>:
 8009454:	b510      	push	{r4, lr}
 8009456:	4604      	mov	r4, r0
 8009458:	f7ff fff0 	bl	800943c <__sinit_lock_acquire>
 800945c:	69a3      	ldr	r3, [r4, #24]
 800945e:	b11b      	cbz	r3, 8009468 <__sinit+0x14>
 8009460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009464:	f7ff bff0 	b.w	8009448 <__sinit_lock_release>
 8009468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800946c:	6523      	str	r3, [r4, #80]	; 0x50
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <__sinit+0x68>)
 8009470:	4a13      	ldr	r2, [pc, #76]	; (80094c0 <__sinit+0x6c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	62a2      	str	r2, [r4, #40]	; 0x28
 8009476:	42a3      	cmp	r3, r4
 8009478:	bf04      	itt	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	61a3      	streq	r3, [r4, #24]
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f820 	bl	80094c4 <__sfp>
 8009484:	6060      	str	r0, [r4, #4]
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f81c 	bl	80094c4 <__sfp>
 800948c:	60a0      	str	r0, [r4, #8]
 800948e:	4620      	mov	r0, r4
 8009490:	f000 f818 	bl	80094c4 <__sfp>
 8009494:	2200      	movs	r2, #0
 8009496:	60e0      	str	r0, [r4, #12]
 8009498:	2104      	movs	r1, #4
 800949a:	6860      	ldr	r0, [r4, #4]
 800949c:	f7ff ff82 	bl	80093a4 <std>
 80094a0:	68a0      	ldr	r0, [r4, #8]
 80094a2:	2201      	movs	r2, #1
 80094a4:	2109      	movs	r1, #9
 80094a6:	f7ff ff7d 	bl	80093a4 <std>
 80094aa:	68e0      	ldr	r0, [r4, #12]
 80094ac:	2202      	movs	r2, #2
 80094ae:	2112      	movs	r1, #18
 80094b0:	f7ff ff78 	bl	80093a4 <std>
 80094b4:	2301      	movs	r3, #1
 80094b6:	61a3      	str	r3, [r4, #24]
 80094b8:	e7d2      	b.n	8009460 <__sinit+0xc>
 80094ba:	bf00      	nop
 80094bc:	0800a984 	.word	0x0800a984
 80094c0:	080093ed 	.word	0x080093ed

080094c4 <__sfp>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	4607      	mov	r7, r0
 80094c8:	f7ff ffac 	bl	8009424 <__sfp_lock_acquire>
 80094cc:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <__sfp+0x84>)
 80094ce:	681e      	ldr	r6, [r3, #0]
 80094d0:	69b3      	ldr	r3, [r6, #24]
 80094d2:	b913      	cbnz	r3, 80094da <__sfp+0x16>
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7ff ffbd 	bl	8009454 <__sinit>
 80094da:	3648      	adds	r6, #72	; 0x48
 80094dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	d503      	bpl.n	80094ec <__sfp+0x28>
 80094e4:	6833      	ldr	r3, [r6, #0]
 80094e6:	b30b      	cbz	r3, 800952c <__sfp+0x68>
 80094e8:	6836      	ldr	r6, [r6, #0]
 80094ea:	e7f7      	b.n	80094dc <__sfp+0x18>
 80094ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094f0:	b9d5      	cbnz	r5, 8009528 <__sfp+0x64>
 80094f2:	4b16      	ldr	r3, [pc, #88]	; (800954c <__sfp+0x88>)
 80094f4:	60e3      	str	r3, [r4, #12]
 80094f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094fa:	6665      	str	r5, [r4, #100]	; 0x64
 80094fc:	f000 f847 	bl	800958e <__retarget_lock_init_recursive>
 8009500:	f7ff ff96 	bl	8009430 <__sfp_lock_release>
 8009504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800950c:	6025      	str	r5, [r4, #0]
 800950e:	61a5      	str	r5, [r4, #24]
 8009510:	2208      	movs	r2, #8
 8009512:	4629      	mov	r1, r5
 8009514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009518:	f7ff fd2c 	bl	8008f74 <memset>
 800951c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009524:	4620      	mov	r0, r4
 8009526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009528:	3468      	adds	r4, #104	; 0x68
 800952a:	e7d9      	b.n	80094e0 <__sfp+0x1c>
 800952c:	2104      	movs	r1, #4
 800952e:	4638      	mov	r0, r7
 8009530:	f7ff ff62 	bl	80093f8 <__sfmoreglue>
 8009534:	4604      	mov	r4, r0
 8009536:	6030      	str	r0, [r6, #0]
 8009538:	2800      	cmp	r0, #0
 800953a:	d1d5      	bne.n	80094e8 <__sfp+0x24>
 800953c:	f7ff ff78 	bl	8009430 <__sfp_lock_release>
 8009540:	230c      	movs	r3, #12
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	e7ee      	b.n	8009524 <__sfp+0x60>
 8009546:	bf00      	nop
 8009548:	0800a984 	.word	0x0800a984
 800954c:	ffff0001 	.word	0xffff0001

08009550 <_fwalk_reent>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	4606      	mov	r6, r0
 8009556:	4688      	mov	r8, r1
 8009558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800955c:	2700      	movs	r7, #0
 800955e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009562:	f1b9 0901 	subs.w	r9, r9, #1
 8009566:	d505      	bpl.n	8009574 <_fwalk_reent+0x24>
 8009568:	6824      	ldr	r4, [r4, #0]
 800956a:	2c00      	cmp	r4, #0
 800956c:	d1f7      	bne.n	800955e <_fwalk_reent+0xe>
 800956e:	4638      	mov	r0, r7
 8009570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009574:	89ab      	ldrh	r3, [r5, #12]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d907      	bls.n	800958a <_fwalk_reent+0x3a>
 800957a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800957e:	3301      	adds	r3, #1
 8009580:	d003      	beq.n	800958a <_fwalk_reent+0x3a>
 8009582:	4629      	mov	r1, r5
 8009584:	4630      	mov	r0, r6
 8009586:	47c0      	blx	r8
 8009588:	4307      	orrs	r7, r0
 800958a:	3568      	adds	r5, #104	; 0x68
 800958c:	e7e9      	b.n	8009562 <_fwalk_reent+0x12>

0800958e <__retarget_lock_init_recursive>:
 800958e:	4770      	bx	lr

08009590 <__retarget_lock_acquire_recursive>:
 8009590:	4770      	bx	lr

08009592 <__retarget_lock_release_recursive>:
 8009592:	4770      	bx	lr

08009594 <__swhatbuf_r>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	460e      	mov	r6, r1
 8009598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959c:	2900      	cmp	r1, #0
 800959e:	b096      	sub	sp, #88	; 0x58
 80095a0:	4614      	mov	r4, r2
 80095a2:	461d      	mov	r5, r3
 80095a4:	da07      	bge.n	80095b6 <__swhatbuf_r+0x22>
 80095a6:	2300      	movs	r3, #0
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	89b3      	ldrh	r3, [r6, #12]
 80095ac:	061a      	lsls	r2, r3, #24
 80095ae:	d410      	bmi.n	80095d2 <__swhatbuf_r+0x3e>
 80095b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b4:	e00e      	b.n	80095d4 <__swhatbuf_r+0x40>
 80095b6:	466a      	mov	r2, sp
 80095b8:	f000 fc5e 	bl	8009e78 <_fstat_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	dbf2      	blt.n	80095a6 <__swhatbuf_r+0x12>
 80095c0:	9a01      	ldr	r2, [sp, #4]
 80095c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095ca:	425a      	negs	r2, r3
 80095cc:	415a      	adcs	r2, r3
 80095ce:	602a      	str	r2, [r5, #0]
 80095d0:	e7ee      	b.n	80095b0 <__swhatbuf_r+0x1c>
 80095d2:	2340      	movs	r3, #64	; 0x40
 80095d4:	2000      	movs	r0, #0
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	b016      	add	sp, #88	; 0x58
 80095da:	bd70      	pop	{r4, r5, r6, pc}

080095dc <__smakebuf_r>:
 80095dc:	898b      	ldrh	r3, [r1, #12]
 80095de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095e0:	079d      	lsls	r5, r3, #30
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	d507      	bpl.n	80095f8 <__smakebuf_r+0x1c>
 80095e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	2301      	movs	r3, #1
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	b002      	add	sp, #8
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	ab01      	add	r3, sp, #4
 80095fa:	466a      	mov	r2, sp
 80095fc:	f7ff ffca 	bl	8009594 <__swhatbuf_r>
 8009600:	9900      	ldr	r1, [sp, #0]
 8009602:	4605      	mov	r5, r0
 8009604:	4630      	mov	r0, r6
 8009606:	f000 f879 	bl	80096fc <_malloc_r>
 800960a:	b948      	cbnz	r0, 8009620 <__smakebuf_r+0x44>
 800960c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009610:	059a      	lsls	r2, r3, #22
 8009612:	d4ef      	bmi.n	80095f4 <__smakebuf_r+0x18>
 8009614:	f023 0303 	bic.w	r3, r3, #3
 8009618:	f043 0302 	orr.w	r3, r3, #2
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	e7e3      	b.n	80095e8 <__smakebuf_r+0xc>
 8009620:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <__smakebuf_r+0x7c>)
 8009622:	62b3      	str	r3, [r6, #40]	; 0x28
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	6020      	str	r0, [r4, #0]
 8009628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	9b00      	ldr	r3, [sp, #0]
 8009630:	6163      	str	r3, [r4, #20]
 8009632:	9b01      	ldr	r3, [sp, #4]
 8009634:	6120      	str	r0, [r4, #16]
 8009636:	b15b      	cbz	r3, 8009650 <__smakebuf_r+0x74>
 8009638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963c:	4630      	mov	r0, r6
 800963e:	f000 fc2d 	bl	8009e9c <_isatty_r>
 8009642:	b128      	cbz	r0, 8009650 <__smakebuf_r+0x74>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f023 0303 	bic.w	r3, r3, #3
 800964a:	f043 0301 	orr.w	r3, r3, #1
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	89a0      	ldrh	r0, [r4, #12]
 8009652:	4305      	orrs	r5, r0
 8009654:	81a5      	strh	r5, [r4, #12]
 8009656:	e7cd      	b.n	80095f4 <__smakebuf_r+0x18>
 8009658:	080093ed 	.word	0x080093ed

0800965c <_free_r>:
 800965c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965e:	2900      	cmp	r1, #0
 8009660:	d048      	beq.n	80096f4 <_free_r+0x98>
 8009662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009666:	9001      	str	r0, [sp, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f1a1 0404 	sub.w	r4, r1, #4
 800966e:	bfb8      	it	lt
 8009670:	18e4      	addlt	r4, r4, r3
 8009672:	f000 fc35 	bl	8009ee0 <__malloc_lock>
 8009676:	4a20      	ldr	r2, [pc, #128]	; (80096f8 <_free_r+0x9c>)
 8009678:	9801      	ldr	r0, [sp, #4]
 800967a:	6813      	ldr	r3, [r2, #0]
 800967c:	4615      	mov	r5, r2
 800967e:	b933      	cbnz	r3, 800968e <_free_r+0x32>
 8009680:	6063      	str	r3, [r4, #4]
 8009682:	6014      	str	r4, [r2, #0]
 8009684:	b003      	add	sp, #12
 8009686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800968a:	f000 bc2f 	b.w	8009eec <__malloc_unlock>
 800968e:	42a3      	cmp	r3, r4
 8009690:	d90b      	bls.n	80096aa <_free_r+0x4e>
 8009692:	6821      	ldr	r1, [r4, #0]
 8009694:	1862      	adds	r2, r4, r1
 8009696:	4293      	cmp	r3, r2
 8009698:	bf04      	itt	eq
 800969a:	681a      	ldreq	r2, [r3, #0]
 800969c:	685b      	ldreq	r3, [r3, #4]
 800969e:	6063      	str	r3, [r4, #4]
 80096a0:	bf04      	itt	eq
 80096a2:	1852      	addeq	r2, r2, r1
 80096a4:	6022      	streq	r2, [r4, #0]
 80096a6:	602c      	str	r4, [r5, #0]
 80096a8:	e7ec      	b.n	8009684 <_free_r+0x28>
 80096aa:	461a      	mov	r2, r3
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	b10b      	cbz	r3, 80096b4 <_free_r+0x58>
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	d9fa      	bls.n	80096aa <_free_r+0x4e>
 80096b4:	6811      	ldr	r1, [r2, #0]
 80096b6:	1855      	adds	r5, r2, r1
 80096b8:	42a5      	cmp	r5, r4
 80096ba:	d10b      	bne.n	80096d4 <_free_r+0x78>
 80096bc:	6824      	ldr	r4, [r4, #0]
 80096be:	4421      	add	r1, r4
 80096c0:	1854      	adds	r4, r2, r1
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	6011      	str	r1, [r2, #0]
 80096c6:	d1dd      	bne.n	8009684 <_free_r+0x28>
 80096c8:	681c      	ldr	r4, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	6053      	str	r3, [r2, #4]
 80096ce:	4421      	add	r1, r4
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	e7d7      	b.n	8009684 <_free_r+0x28>
 80096d4:	d902      	bls.n	80096dc <_free_r+0x80>
 80096d6:	230c      	movs	r3, #12
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	e7d3      	b.n	8009684 <_free_r+0x28>
 80096dc:	6825      	ldr	r5, [r4, #0]
 80096de:	1961      	adds	r1, r4, r5
 80096e0:	428b      	cmp	r3, r1
 80096e2:	bf04      	itt	eq
 80096e4:	6819      	ldreq	r1, [r3, #0]
 80096e6:	685b      	ldreq	r3, [r3, #4]
 80096e8:	6063      	str	r3, [r4, #4]
 80096ea:	bf04      	itt	eq
 80096ec:	1949      	addeq	r1, r1, r5
 80096ee:	6021      	streq	r1, [r4, #0]
 80096f0:	6054      	str	r4, [r2, #4]
 80096f2:	e7c7      	b.n	8009684 <_free_r+0x28>
 80096f4:	b003      	add	sp, #12
 80096f6:	bd30      	pop	{r4, r5, pc}
 80096f8:	20000700 	.word	0x20000700

080096fc <_malloc_r>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	1ccd      	adds	r5, r1, #3
 8009700:	f025 0503 	bic.w	r5, r5, #3
 8009704:	3508      	adds	r5, #8
 8009706:	2d0c      	cmp	r5, #12
 8009708:	bf38      	it	cc
 800970a:	250c      	movcc	r5, #12
 800970c:	2d00      	cmp	r5, #0
 800970e:	4606      	mov	r6, r0
 8009710:	db01      	blt.n	8009716 <_malloc_r+0x1a>
 8009712:	42a9      	cmp	r1, r5
 8009714:	d903      	bls.n	800971e <_malloc_r+0x22>
 8009716:	230c      	movs	r3, #12
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	2000      	movs	r0, #0
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971e:	f000 fbdf 	bl	8009ee0 <__malloc_lock>
 8009722:	4921      	ldr	r1, [pc, #132]	; (80097a8 <_malloc_r+0xac>)
 8009724:	680a      	ldr	r2, [r1, #0]
 8009726:	4614      	mov	r4, r2
 8009728:	b99c      	cbnz	r4, 8009752 <_malloc_r+0x56>
 800972a:	4f20      	ldr	r7, [pc, #128]	; (80097ac <_malloc_r+0xb0>)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	b923      	cbnz	r3, 800973a <_malloc_r+0x3e>
 8009730:	4621      	mov	r1, r4
 8009732:	4630      	mov	r0, r6
 8009734:	f000 fb2a 	bl	8009d8c <_sbrk_r>
 8009738:	6038      	str	r0, [r7, #0]
 800973a:	4629      	mov	r1, r5
 800973c:	4630      	mov	r0, r6
 800973e:	f000 fb25 	bl	8009d8c <_sbrk_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d123      	bne.n	800978e <_malloc_r+0x92>
 8009746:	230c      	movs	r3, #12
 8009748:	6033      	str	r3, [r6, #0]
 800974a:	4630      	mov	r0, r6
 800974c:	f000 fbce 	bl	8009eec <__malloc_unlock>
 8009750:	e7e3      	b.n	800971a <_malloc_r+0x1e>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	1b5b      	subs	r3, r3, r5
 8009756:	d417      	bmi.n	8009788 <_malloc_r+0x8c>
 8009758:	2b0b      	cmp	r3, #11
 800975a:	d903      	bls.n	8009764 <_malloc_r+0x68>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	441c      	add	r4, r3
 8009760:	6025      	str	r5, [r4, #0]
 8009762:	e004      	b.n	800976e <_malloc_r+0x72>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	42a2      	cmp	r2, r4
 8009768:	bf0c      	ite	eq
 800976a:	600b      	streq	r3, [r1, #0]
 800976c:	6053      	strne	r3, [r2, #4]
 800976e:	4630      	mov	r0, r6
 8009770:	f000 fbbc 	bl	8009eec <__malloc_unlock>
 8009774:	f104 000b 	add.w	r0, r4, #11
 8009778:	1d23      	adds	r3, r4, #4
 800977a:	f020 0007 	bic.w	r0, r0, #7
 800977e:	1ac2      	subs	r2, r0, r3
 8009780:	d0cc      	beq.n	800971c <_malloc_r+0x20>
 8009782:	1a1b      	subs	r3, r3, r0
 8009784:	50a3      	str	r3, [r4, r2]
 8009786:	e7c9      	b.n	800971c <_malloc_r+0x20>
 8009788:	4622      	mov	r2, r4
 800978a:	6864      	ldr	r4, [r4, #4]
 800978c:	e7cc      	b.n	8009728 <_malloc_r+0x2c>
 800978e:	1cc4      	adds	r4, r0, #3
 8009790:	f024 0403 	bic.w	r4, r4, #3
 8009794:	42a0      	cmp	r0, r4
 8009796:	d0e3      	beq.n	8009760 <_malloc_r+0x64>
 8009798:	1a21      	subs	r1, r4, r0
 800979a:	4630      	mov	r0, r6
 800979c:	f000 faf6 	bl	8009d8c <_sbrk_r>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d1dd      	bne.n	8009760 <_malloc_r+0x64>
 80097a4:	e7cf      	b.n	8009746 <_malloc_r+0x4a>
 80097a6:	bf00      	nop
 80097a8:	20000700 	.word	0x20000700
 80097ac:	20000704 	.word	0x20000704

080097b0 <__sfputc_r>:
 80097b0:	6893      	ldr	r3, [r2, #8]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	b410      	push	{r4}
 80097b8:	6093      	str	r3, [r2, #8]
 80097ba:	da08      	bge.n	80097ce <__sfputc_r+0x1e>
 80097bc:	6994      	ldr	r4, [r2, #24]
 80097be:	42a3      	cmp	r3, r4
 80097c0:	db01      	blt.n	80097c6 <__sfputc_r+0x16>
 80097c2:	290a      	cmp	r1, #10
 80097c4:	d103      	bne.n	80097ce <__sfputc_r+0x1e>
 80097c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ca:	f7ff bc69 	b.w	80090a0 <__swbuf_r>
 80097ce:	6813      	ldr	r3, [r2, #0]
 80097d0:	1c58      	adds	r0, r3, #1
 80097d2:	6010      	str	r0, [r2, #0]
 80097d4:	7019      	strb	r1, [r3, #0]
 80097d6:	4608      	mov	r0, r1
 80097d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097dc:	4770      	bx	lr

080097de <__sfputs_r>:
 80097de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	4614      	mov	r4, r2
 80097e6:	18d5      	adds	r5, r2, r3
 80097e8:	42ac      	cmp	r4, r5
 80097ea:	d101      	bne.n	80097f0 <__sfputs_r+0x12>
 80097ec:	2000      	movs	r0, #0
 80097ee:	e007      	b.n	8009800 <__sfputs_r+0x22>
 80097f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f4:	463a      	mov	r2, r7
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ffda 	bl	80097b0 <__sfputc_r>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d1f3      	bne.n	80097e8 <__sfputs_r+0xa>
 8009800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009804 <_vfiprintf_r>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	460d      	mov	r5, r1
 800980a:	b09d      	sub	sp, #116	; 0x74
 800980c:	4614      	mov	r4, r2
 800980e:	4698      	mov	r8, r3
 8009810:	4606      	mov	r6, r0
 8009812:	b118      	cbz	r0, 800981c <_vfiprintf_r+0x18>
 8009814:	6983      	ldr	r3, [r0, #24]
 8009816:	b90b      	cbnz	r3, 800981c <_vfiprintf_r+0x18>
 8009818:	f7ff fe1c 	bl	8009454 <__sinit>
 800981c:	4b89      	ldr	r3, [pc, #548]	; (8009a44 <_vfiprintf_r+0x240>)
 800981e:	429d      	cmp	r5, r3
 8009820:	d11b      	bne.n	800985a <_vfiprintf_r+0x56>
 8009822:	6875      	ldr	r5, [r6, #4]
 8009824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009826:	07d9      	lsls	r1, r3, #31
 8009828:	d405      	bmi.n	8009836 <_vfiprintf_r+0x32>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	059a      	lsls	r2, r3, #22
 800982e:	d402      	bmi.n	8009836 <_vfiprintf_r+0x32>
 8009830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009832:	f7ff fead 	bl	8009590 <__retarget_lock_acquire_recursive>
 8009836:	89ab      	ldrh	r3, [r5, #12]
 8009838:	071b      	lsls	r3, r3, #28
 800983a:	d501      	bpl.n	8009840 <_vfiprintf_r+0x3c>
 800983c:	692b      	ldr	r3, [r5, #16]
 800983e:	b9eb      	cbnz	r3, 800987c <_vfiprintf_r+0x78>
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff fc7e 	bl	8009144 <__swsetup_r>
 8009848:	b1c0      	cbz	r0, 800987c <_vfiprintf_r+0x78>
 800984a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984c:	07dc      	lsls	r4, r3, #31
 800984e:	d50e      	bpl.n	800986e <_vfiprintf_r+0x6a>
 8009850:	f04f 30ff 	mov.w	r0, #4294967295
 8009854:	b01d      	add	sp, #116	; 0x74
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	4b7b      	ldr	r3, [pc, #492]	; (8009a48 <_vfiprintf_r+0x244>)
 800985c:	429d      	cmp	r5, r3
 800985e:	d101      	bne.n	8009864 <_vfiprintf_r+0x60>
 8009860:	68b5      	ldr	r5, [r6, #8]
 8009862:	e7df      	b.n	8009824 <_vfiprintf_r+0x20>
 8009864:	4b79      	ldr	r3, [pc, #484]	; (8009a4c <_vfiprintf_r+0x248>)
 8009866:	429d      	cmp	r5, r3
 8009868:	bf08      	it	eq
 800986a:	68f5      	ldreq	r5, [r6, #12]
 800986c:	e7da      	b.n	8009824 <_vfiprintf_r+0x20>
 800986e:	89ab      	ldrh	r3, [r5, #12]
 8009870:	0598      	lsls	r0, r3, #22
 8009872:	d4ed      	bmi.n	8009850 <_vfiprintf_r+0x4c>
 8009874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009876:	f7ff fe8c 	bl	8009592 <__retarget_lock_release_recursive>
 800987a:	e7e9      	b.n	8009850 <_vfiprintf_r+0x4c>
 800987c:	2300      	movs	r3, #0
 800987e:	9309      	str	r3, [sp, #36]	; 0x24
 8009880:	2320      	movs	r3, #32
 8009882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009886:	f8cd 800c 	str.w	r8, [sp, #12]
 800988a:	2330      	movs	r3, #48	; 0x30
 800988c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a50 <_vfiprintf_r+0x24c>
 8009890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009894:	f04f 0901 	mov.w	r9, #1
 8009898:	4623      	mov	r3, r4
 800989a:	469a      	mov	sl, r3
 800989c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a0:	b10a      	cbz	r2, 80098a6 <_vfiprintf_r+0xa2>
 80098a2:	2a25      	cmp	r2, #37	; 0x25
 80098a4:	d1f9      	bne.n	800989a <_vfiprintf_r+0x96>
 80098a6:	ebba 0b04 	subs.w	fp, sl, r4
 80098aa:	d00b      	beq.n	80098c4 <_vfiprintf_r+0xc0>
 80098ac:	465b      	mov	r3, fp
 80098ae:	4622      	mov	r2, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff ff93 	bl	80097de <__sfputs_r>
 80098b8:	3001      	adds	r0, #1
 80098ba:	f000 80aa 	beq.w	8009a12 <_vfiprintf_r+0x20e>
 80098be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c0:	445a      	add	r2, fp
 80098c2:	9209      	str	r2, [sp, #36]	; 0x24
 80098c4:	f89a 3000 	ldrb.w	r3, [sl]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 80a2 	beq.w	8009a12 <_vfiprintf_r+0x20e>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f04f 32ff 	mov.w	r2, #4294967295
 80098d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d8:	f10a 0a01 	add.w	sl, sl, #1
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	9307      	str	r3, [sp, #28]
 80098e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098e4:	931a      	str	r3, [sp, #104]	; 0x68
 80098e6:	4654      	mov	r4, sl
 80098e8:	2205      	movs	r2, #5
 80098ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ee:	4858      	ldr	r0, [pc, #352]	; (8009a50 <_vfiprintf_r+0x24c>)
 80098f0:	f7f6 fca6 	bl	8000240 <memchr>
 80098f4:	9a04      	ldr	r2, [sp, #16]
 80098f6:	b9d8      	cbnz	r0, 8009930 <_vfiprintf_r+0x12c>
 80098f8:	06d1      	lsls	r1, r2, #27
 80098fa:	bf44      	itt	mi
 80098fc:	2320      	movmi	r3, #32
 80098fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009902:	0713      	lsls	r3, r2, #28
 8009904:	bf44      	itt	mi
 8009906:	232b      	movmi	r3, #43	; 0x2b
 8009908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800990c:	f89a 3000 	ldrb.w	r3, [sl]
 8009910:	2b2a      	cmp	r3, #42	; 0x2a
 8009912:	d015      	beq.n	8009940 <_vfiprintf_r+0x13c>
 8009914:	9a07      	ldr	r2, [sp, #28]
 8009916:	4654      	mov	r4, sl
 8009918:	2000      	movs	r0, #0
 800991a:	f04f 0c0a 	mov.w	ip, #10
 800991e:	4621      	mov	r1, r4
 8009920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009924:	3b30      	subs	r3, #48	; 0x30
 8009926:	2b09      	cmp	r3, #9
 8009928:	d94e      	bls.n	80099c8 <_vfiprintf_r+0x1c4>
 800992a:	b1b0      	cbz	r0, 800995a <_vfiprintf_r+0x156>
 800992c:	9207      	str	r2, [sp, #28]
 800992e:	e014      	b.n	800995a <_vfiprintf_r+0x156>
 8009930:	eba0 0308 	sub.w	r3, r0, r8
 8009934:	fa09 f303 	lsl.w	r3, r9, r3
 8009938:	4313      	orrs	r3, r2
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	46a2      	mov	sl, r4
 800993e:	e7d2      	b.n	80098e6 <_vfiprintf_r+0xe2>
 8009940:	9b03      	ldr	r3, [sp, #12]
 8009942:	1d19      	adds	r1, r3, #4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	9103      	str	r1, [sp, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfbb      	ittet	lt
 800994c:	425b      	neglt	r3, r3
 800994e:	f042 0202 	orrlt.w	r2, r2, #2
 8009952:	9307      	strge	r3, [sp, #28]
 8009954:	9307      	strlt	r3, [sp, #28]
 8009956:	bfb8      	it	lt
 8009958:	9204      	strlt	r2, [sp, #16]
 800995a:	7823      	ldrb	r3, [r4, #0]
 800995c:	2b2e      	cmp	r3, #46	; 0x2e
 800995e:	d10c      	bne.n	800997a <_vfiprintf_r+0x176>
 8009960:	7863      	ldrb	r3, [r4, #1]
 8009962:	2b2a      	cmp	r3, #42	; 0x2a
 8009964:	d135      	bne.n	80099d2 <_vfiprintf_r+0x1ce>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	1d1a      	adds	r2, r3, #4
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	9203      	str	r2, [sp, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfb8      	it	lt
 8009972:	f04f 33ff 	movlt.w	r3, #4294967295
 8009976:	3402      	adds	r4, #2
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a60 <_vfiprintf_r+0x25c>
 800997e:	7821      	ldrb	r1, [r4, #0]
 8009980:	2203      	movs	r2, #3
 8009982:	4650      	mov	r0, sl
 8009984:	f7f6 fc5c 	bl	8000240 <memchr>
 8009988:	b140      	cbz	r0, 800999c <_vfiprintf_r+0x198>
 800998a:	2340      	movs	r3, #64	; 0x40
 800998c:	eba0 000a 	sub.w	r0, r0, sl
 8009990:	fa03 f000 	lsl.w	r0, r3, r0
 8009994:	9b04      	ldr	r3, [sp, #16]
 8009996:	4303      	orrs	r3, r0
 8009998:	3401      	adds	r4, #1
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a0:	482c      	ldr	r0, [pc, #176]	; (8009a54 <_vfiprintf_r+0x250>)
 80099a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099a6:	2206      	movs	r2, #6
 80099a8:	f7f6 fc4a 	bl	8000240 <memchr>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d03f      	beq.n	8009a30 <_vfiprintf_r+0x22c>
 80099b0:	4b29      	ldr	r3, [pc, #164]	; (8009a58 <_vfiprintf_r+0x254>)
 80099b2:	bb1b      	cbnz	r3, 80099fc <_vfiprintf_r+0x1f8>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	3307      	adds	r3, #7
 80099b8:	f023 0307 	bic.w	r3, r3, #7
 80099bc:	3308      	adds	r3, #8
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c2:	443b      	add	r3, r7
 80099c4:	9309      	str	r3, [sp, #36]	; 0x24
 80099c6:	e767      	b.n	8009898 <_vfiprintf_r+0x94>
 80099c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099cc:	460c      	mov	r4, r1
 80099ce:	2001      	movs	r0, #1
 80099d0:	e7a5      	b.n	800991e <_vfiprintf_r+0x11a>
 80099d2:	2300      	movs	r3, #0
 80099d4:	3401      	adds	r4, #1
 80099d6:	9305      	str	r3, [sp, #20]
 80099d8:	4619      	mov	r1, r3
 80099da:	f04f 0c0a 	mov.w	ip, #10
 80099de:	4620      	mov	r0, r4
 80099e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e4:	3a30      	subs	r2, #48	; 0x30
 80099e6:	2a09      	cmp	r2, #9
 80099e8:	d903      	bls.n	80099f2 <_vfiprintf_r+0x1ee>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0c5      	beq.n	800997a <_vfiprintf_r+0x176>
 80099ee:	9105      	str	r1, [sp, #20]
 80099f0:	e7c3      	b.n	800997a <_vfiprintf_r+0x176>
 80099f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f6:	4604      	mov	r4, r0
 80099f8:	2301      	movs	r3, #1
 80099fa:	e7f0      	b.n	80099de <_vfiprintf_r+0x1da>
 80099fc:	ab03      	add	r3, sp, #12
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <_vfiprintf_r+0x258>)
 8009a04:	a904      	add	r1, sp, #16
 8009a06:	4630      	mov	r0, r6
 8009a08:	f3af 8000 	nop.w
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	1c78      	adds	r0, r7, #1
 8009a10:	d1d6      	bne.n	80099c0 <_vfiprintf_r+0x1bc>
 8009a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a14:	07d9      	lsls	r1, r3, #31
 8009a16:	d405      	bmi.n	8009a24 <_vfiprintf_r+0x220>
 8009a18:	89ab      	ldrh	r3, [r5, #12]
 8009a1a:	059a      	lsls	r2, r3, #22
 8009a1c:	d402      	bmi.n	8009a24 <_vfiprintf_r+0x220>
 8009a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a20:	f7ff fdb7 	bl	8009592 <__retarget_lock_release_recursive>
 8009a24:	89ab      	ldrh	r3, [r5, #12]
 8009a26:	065b      	lsls	r3, r3, #25
 8009a28:	f53f af12 	bmi.w	8009850 <_vfiprintf_r+0x4c>
 8009a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2e:	e711      	b.n	8009854 <_vfiprintf_r+0x50>
 8009a30:	ab03      	add	r3, sp, #12
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	462a      	mov	r2, r5
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <_vfiprintf_r+0x258>)
 8009a38:	a904      	add	r1, sp, #16
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 f880 	bl	8009b40 <_printf_i>
 8009a40:	e7e4      	b.n	8009a0c <_vfiprintf_r+0x208>
 8009a42:	bf00      	nop
 8009a44:	0800a9a8 	.word	0x0800a9a8
 8009a48:	0800a9c8 	.word	0x0800a9c8
 8009a4c:	0800a988 	.word	0x0800a988
 8009a50:	0800a9e8 	.word	0x0800a9e8
 8009a54:	0800a9f2 	.word	0x0800a9f2
 8009a58:	00000000 	.word	0x00000000
 8009a5c:	080097df 	.word	0x080097df
 8009a60:	0800a9ee 	.word	0x0800a9ee

08009a64 <_printf_common>:
 8009a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	4616      	mov	r6, r2
 8009a6a:	4699      	mov	r9, r3
 8009a6c:	688a      	ldr	r2, [r1, #8]
 8009a6e:	690b      	ldr	r3, [r1, #16]
 8009a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a74:	4293      	cmp	r3, r2
 8009a76:	bfb8      	it	lt
 8009a78:	4613      	movlt	r3, r2
 8009a7a:	6033      	str	r3, [r6, #0]
 8009a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a80:	4607      	mov	r7, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	b10a      	cbz	r2, 8009a8a <_printf_common+0x26>
 8009a86:	3301      	adds	r3, #1
 8009a88:	6033      	str	r3, [r6, #0]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	0699      	lsls	r1, r3, #26
 8009a8e:	bf42      	ittt	mi
 8009a90:	6833      	ldrmi	r3, [r6, #0]
 8009a92:	3302      	addmi	r3, #2
 8009a94:	6033      	strmi	r3, [r6, #0]
 8009a96:	6825      	ldr	r5, [r4, #0]
 8009a98:	f015 0506 	ands.w	r5, r5, #6
 8009a9c:	d106      	bne.n	8009aac <_printf_common+0x48>
 8009a9e:	f104 0a19 	add.w	sl, r4, #25
 8009aa2:	68e3      	ldr	r3, [r4, #12]
 8009aa4:	6832      	ldr	r2, [r6, #0]
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	dc26      	bgt.n	8009afa <_printf_common+0x96>
 8009aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ab0:	1e13      	subs	r3, r2, #0
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	bf18      	it	ne
 8009ab6:	2301      	movne	r3, #1
 8009ab8:	0692      	lsls	r2, r2, #26
 8009aba:	d42b      	bmi.n	8009b14 <_printf_common+0xb0>
 8009abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c0      	blx	r8
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d01e      	beq.n	8009b08 <_printf_common+0xa4>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	68e5      	ldr	r5, [r4, #12]
 8009ace:	6832      	ldr	r2, [r6, #0]
 8009ad0:	f003 0306 	and.w	r3, r3, #6
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	bf08      	it	eq
 8009ad8:	1aad      	subeq	r5, r5, r2
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	6922      	ldr	r2, [r4, #16]
 8009ade:	bf0c      	ite	eq
 8009ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ae4:	2500      	movne	r5, #0
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	bfc4      	itt	gt
 8009aea:	1a9b      	subgt	r3, r3, r2
 8009aec:	18ed      	addgt	r5, r5, r3
 8009aee:	2600      	movs	r6, #0
 8009af0:	341a      	adds	r4, #26
 8009af2:	42b5      	cmp	r5, r6
 8009af4:	d11a      	bne.n	8009b2c <_printf_common+0xc8>
 8009af6:	2000      	movs	r0, #0
 8009af8:	e008      	b.n	8009b0c <_printf_common+0xa8>
 8009afa:	2301      	movs	r3, #1
 8009afc:	4652      	mov	r2, sl
 8009afe:	4649      	mov	r1, r9
 8009b00:	4638      	mov	r0, r7
 8009b02:	47c0      	blx	r8
 8009b04:	3001      	adds	r0, #1
 8009b06:	d103      	bne.n	8009b10 <_printf_common+0xac>
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b10:	3501      	adds	r5, #1
 8009b12:	e7c6      	b.n	8009aa2 <_printf_common+0x3e>
 8009b14:	18e1      	adds	r1, r4, r3
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	2030      	movs	r0, #48	; 0x30
 8009b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b1e:	4422      	add	r2, r4
 8009b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b28:	3302      	adds	r3, #2
 8009b2a:	e7c7      	b.n	8009abc <_printf_common+0x58>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4622      	mov	r2, r4
 8009b30:	4649      	mov	r1, r9
 8009b32:	4638      	mov	r0, r7
 8009b34:	47c0      	blx	r8
 8009b36:	3001      	adds	r0, #1
 8009b38:	d0e6      	beq.n	8009b08 <_printf_common+0xa4>
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7d9      	b.n	8009af2 <_printf_common+0x8e>
	...

08009b40 <_printf_i>:
 8009b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	460c      	mov	r4, r1
 8009b46:	4691      	mov	r9, r2
 8009b48:	7e27      	ldrb	r7, [r4, #24]
 8009b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b4c:	2f78      	cmp	r7, #120	; 0x78
 8009b4e:	4680      	mov	r8, r0
 8009b50:	469a      	mov	sl, r3
 8009b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b56:	d807      	bhi.n	8009b68 <_printf_i+0x28>
 8009b58:	2f62      	cmp	r7, #98	; 0x62
 8009b5a:	d80a      	bhi.n	8009b72 <_printf_i+0x32>
 8009b5c:	2f00      	cmp	r7, #0
 8009b5e:	f000 80d8 	beq.w	8009d12 <_printf_i+0x1d2>
 8009b62:	2f58      	cmp	r7, #88	; 0x58
 8009b64:	f000 80a3 	beq.w	8009cae <_printf_i+0x16e>
 8009b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b70:	e03a      	b.n	8009be8 <_printf_i+0xa8>
 8009b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b76:	2b15      	cmp	r3, #21
 8009b78:	d8f6      	bhi.n	8009b68 <_printf_i+0x28>
 8009b7a:	a001      	add	r0, pc, #4	; (adr r0, 8009b80 <_printf_i+0x40>)
 8009b7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bed 	.word	0x08009bed
 8009b88:	08009b69 	.word	0x08009b69
 8009b8c:	08009b69 	.word	0x08009b69
 8009b90:	08009b69 	.word	0x08009b69
 8009b94:	08009b69 	.word	0x08009b69
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b69 	.word	0x08009b69
 8009ba0:	08009b69 	.word	0x08009b69
 8009ba4:	08009b69 	.word	0x08009b69
 8009ba8:	08009b69 	.word	0x08009b69
 8009bac:	08009cf9 	.word	0x08009cf9
 8009bb0:	08009c1d 	.word	0x08009c1d
 8009bb4:	08009cdb 	.word	0x08009cdb
 8009bb8:	08009b69 	.word	0x08009b69
 8009bbc:	08009b69 	.word	0x08009b69
 8009bc0:	08009d1b 	.word	0x08009d1b
 8009bc4:	08009b69 	.word	0x08009b69
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b69 	.word	0x08009b69
 8009bd0:	08009b69 	.word	0x08009b69
 8009bd4:	08009ce3 	.word	0x08009ce3
 8009bd8:	680b      	ldr	r3, [r1, #0]
 8009bda:	1d1a      	adds	r2, r3, #4
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	600a      	str	r2, [r1, #0]
 8009be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009be8:	2301      	movs	r3, #1
 8009bea:	e0a3      	b.n	8009d34 <_printf_i+0x1f4>
 8009bec:	6825      	ldr	r5, [r4, #0]
 8009bee:	6808      	ldr	r0, [r1, #0]
 8009bf0:	062e      	lsls	r6, r5, #24
 8009bf2:	f100 0304 	add.w	r3, r0, #4
 8009bf6:	d50a      	bpl.n	8009c0e <_printf_i+0xce>
 8009bf8:	6805      	ldr	r5, [r0, #0]
 8009bfa:	600b      	str	r3, [r1, #0]
 8009bfc:	2d00      	cmp	r5, #0
 8009bfe:	da03      	bge.n	8009c08 <_printf_i+0xc8>
 8009c00:	232d      	movs	r3, #45	; 0x2d
 8009c02:	426d      	negs	r5, r5
 8009c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c08:	485e      	ldr	r0, [pc, #376]	; (8009d84 <_printf_i+0x244>)
 8009c0a:	230a      	movs	r3, #10
 8009c0c:	e019      	b.n	8009c42 <_printf_i+0x102>
 8009c0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c12:	6805      	ldr	r5, [r0, #0]
 8009c14:	600b      	str	r3, [r1, #0]
 8009c16:	bf18      	it	ne
 8009c18:	b22d      	sxthne	r5, r5
 8009c1a:	e7ef      	b.n	8009bfc <_printf_i+0xbc>
 8009c1c:	680b      	ldr	r3, [r1, #0]
 8009c1e:	6825      	ldr	r5, [r4, #0]
 8009c20:	1d18      	adds	r0, r3, #4
 8009c22:	6008      	str	r0, [r1, #0]
 8009c24:	0628      	lsls	r0, r5, #24
 8009c26:	d501      	bpl.n	8009c2c <_printf_i+0xec>
 8009c28:	681d      	ldr	r5, [r3, #0]
 8009c2a:	e002      	b.n	8009c32 <_printf_i+0xf2>
 8009c2c:	0669      	lsls	r1, r5, #25
 8009c2e:	d5fb      	bpl.n	8009c28 <_printf_i+0xe8>
 8009c30:	881d      	ldrh	r5, [r3, #0]
 8009c32:	4854      	ldr	r0, [pc, #336]	; (8009d84 <_printf_i+0x244>)
 8009c34:	2f6f      	cmp	r7, #111	; 0x6f
 8009c36:	bf0c      	ite	eq
 8009c38:	2308      	moveq	r3, #8
 8009c3a:	230a      	movne	r3, #10
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c42:	6866      	ldr	r6, [r4, #4]
 8009c44:	60a6      	str	r6, [r4, #8]
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	bfa2      	ittt	ge
 8009c4a:	6821      	ldrge	r1, [r4, #0]
 8009c4c:	f021 0104 	bicge.w	r1, r1, #4
 8009c50:	6021      	strge	r1, [r4, #0]
 8009c52:	b90d      	cbnz	r5, 8009c58 <_printf_i+0x118>
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	d04d      	beq.n	8009cf4 <_printf_i+0x1b4>
 8009c58:	4616      	mov	r6, r2
 8009c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c62:	5dc7      	ldrb	r7, [r0, r7]
 8009c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c68:	462f      	mov	r7, r5
 8009c6a:	42bb      	cmp	r3, r7
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	d9f4      	bls.n	8009c5a <_printf_i+0x11a>
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d10b      	bne.n	8009c8c <_printf_i+0x14c>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	07df      	lsls	r7, r3, #31
 8009c78:	d508      	bpl.n	8009c8c <_printf_i+0x14c>
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	bfde      	ittt	le
 8009c82:	2330      	movle	r3, #48	; 0x30
 8009c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c8c:	1b92      	subs	r2, r2, r6
 8009c8e:	6122      	str	r2, [r4, #16]
 8009c90:	f8cd a000 	str.w	sl, [sp]
 8009c94:	464b      	mov	r3, r9
 8009c96:	aa03      	add	r2, sp, #12
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f7ff fee2 	bl	8009a64 <_printf_common>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d14c      	bne.n	8009d3e <_printf_i+0x1fe>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	b004      	add	sp, #16
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	4835      	ldr	r0, [pc, #212]	; (8009d84 <_printf_i+0x244>)
 8009cb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	680e      	ldr	r6, [r1, #0]
 8009cb8:	061f      	lsls	r7, r3, #24
 8009cba:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cbe:	600e      	str	r6, [r1, #0]
 8009cc0:	d514      	bpl.n	8009cec <_printf_i+0x1ac>
 8009cc2:	07d9      	lsls	r1, r3, #31
 8009cc4:	bf44      	itt	mi
 8009cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cca:	6023      	strmi	r3, [r4, #0]
 8009ccc:	b91d      	cbnz	r5, 8009cd6 <_printf_i+0x196>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	f023 0320 	bic.w	r3, r3, #32
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	2310      	movs	r3, #16
 8009cd8:	e7b0      	b.n	8009c3c <_printf_i+0xfc>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	f043 0320 	orr.w	r3, r3, #32
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	2378      	movs	r3, #120	; 0x78
 8009ce4:	4828      	ldr	r0, [pc, #160]	; (8009d88 <_printf_i+0x248>)
 8009ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cea:	e7e3      	b.n	8009cb4 <_printf_i+0x174>
 8009cec:	065e      	lsls	r6, r3, #25
 8009cee:	bf48      	it	mi
 8009cf0:	b2ad      	uxthmi	r5, r5
 8009cf2:	e7e6      	b.n	8009cc2 <_printf_i+0x182>
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	e7bb      	b.n	8009c70 <_printf_i+0x130>
 8009cf8:	680b      	ldr	r3, [r1, #0]
 8009cfa:	6826      	ldr	r6, [r4, #0]
 8009cfc:	6960      	ldr	r0, [r4, #20]
 8009cfe:	1d1d      	adds	r5, r3, #4
 8009d00:	600d      	str	r5, [r1, #0]
 8009d02:	0635      	lsls	r5, r6, #24
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	d501      	bpl.n	8009d0c <_printf_i+0x1cc>
 8009d08:	6018      	str	r0, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <_printf_i+0x1d2>
 8009d0c:	0671      	lsls	r1, r6, #25
 8009d0e:	d5fb      	bpl.n	8009d08 <_printf_i+0x1c8>
 8009d10:	8018      	strh	r0, [r3, #0]
 8009d12:	2300      	movs	r3, #0
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	4616      	mov	r6, r2
 8009d18:	e7ba      	b.n	8009c90 <_printf_i+0x150>
 8009d1a:	680b      	ldr	r3, [r1, #0]
 8009d1c:	1d1a      	adds	r2, r3, #4
 8009d1e:	600a      	str	r2, [r1, #0]
 8009d20:	681e      	ldr	r6, [r3, #0]
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	2100      	movs	r1, #0
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7f6 fa8a 	bl	8000240 <memchr>
 8009d2c:	b108      	cbz	r0, 8009d32 <_printf_i+0x1f2>
 8009d2e:	1b80      	subs	r0, r0, r6
 8009d30:	6060      	str	r0, [r4, #4]
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	6123      	str	r3, [r4, #16]
 8009d36:	2300      	movs	r3, #0
 8009d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d3c:	e7a8      	b.n	8009c90 <_printf_i+0x150>
 8009d3e:	6923      	ldr	r3, [r4, #16]
 8009d40:	4632      	mov	r2, r6
 8009d42:	4649      	mov	r1, r9
 8009d44:	4640      	mov	r0, r8
 8009d46:	47d0      	blx	sl
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d0ab      	beq.n	8009ca4 <_printf_i+0x164>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	079b      	lsls	r3, r3, #30
 8009d50:	d413      	bmi.n	8009d7a <_printf_i+0x23a>
 8009d52:	68e0      	ldr	r0, [r4, #12]
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	4298      	cmp	r0, r3
 8009d58:	bfb8      	it	lt
 8009d5a:	4618      	movlt	r0, r3
 8009d5c:	e7a4      	b.n	8009ca8 <_printf_i+0x168>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4632      	mov	r2, r6
 8009d62:	4649      	mov	r1, r9
 8009d64:	4640      	mov	r0, r8
 8009d66:	47d0      	blx	sl
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d09b      	beq.n	8009ca4 <_printf_i+0x164>
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	68e3      	ldr	r3, [r4, #12]
 8009d70:	9903      	ldr	r1, [sp, #12]
 8009d72:	1a5b      	subs	r3, r3, r1
 8009d74:	42ab      	cmp	r3, r5
 8009d76:	dcf2      	bgt.n	8009d5e <_printf_i+0x21e>
 8009d78:	e7eb      	b.n	8009d52 <_printf_i+0x212>
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	f104 0619 	add.w	r6, r4, #25
 8009d80:	e7f5      	b.n	8009d6e <_printf_i+0x22e>
 8009d82:	bf00      	nop
 8009d84:	0800a9f9 	.word	0x0800a9f9
 8009d88:	0800aa0a 	.word	0x0800aa0a

08009d8c <_sbrk_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d06      	ldr	r5, [pc, #24]	; (8009da8 <_sbrk_r+0x1c>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f8 f894 	bl	8001ec4 <_sbrk>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_sbrk_r+0x1a>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_sbrk_r+0x1a>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	20000d38 	.word	0x20000d38

08009dac <__sread>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	460c      	mov	r4, r1
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	f000 f8a0 	bl	8009ef8 <_read_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	bfab      	itete	ge
 8009dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc0:	181b      	addge	r3, r3, r0
 8009dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dc6:	bfac      	ite	ge
 8009dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dca:	81a3      	strhlt	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__swrite>:
 8009dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	461f      	mov	r7, r3
 8009dd4:	898b      	ldrh	r3, [r1, #12]
 8009dd6:	05db      	lsls	r3, r3, #23
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4616      	mov	r6, r2
 8009dde:	d505      	bpl.n	8009dec <__swrite+0x1e>
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	2302      	movs	r3, #2
 8009de6:	2200      	movs	r2, #0
 8009de8:	f000 f868 	bl	8009ebc <_lseek_r>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	f000 b817 	b.w	8009e34 <_write_r>

08009e06 <__sseek>:
 8009e06:	b510      	push	{r4, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0e:	f000 f855 	bl	8009ebc <_lseek_r>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	bf15      	itete	ne
 8009e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strheq	r3, [r4, #12]
 8009e24:	bf18      	it	ne
 8009e26:	81a3      	strhne	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__sclose>:
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 b813 	b.w	8009e58 <_close_r>
	...

08009e34 <_write_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_write_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f7 ffed 	bl	8001e22 <_write>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_write_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_write_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20000d38 	.word	0x20000d38

08009e58 <_close_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_close_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f7 fff9 	bl	8001e5a <_close>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_close_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_close_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20000d38 	.word	0x20000d38

08009e78 <_fstat_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d07      	ldr	r5, [pc, #28]	; (8009e98 <_fstat_r+0x20>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	4611      	mov	r1, r2
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	f7f7 fff4 	bl	8001e72 <_fstat>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d102      	bne.n	8009e94 <_fstat_r+0x1c>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	b103      	cbz	r3, 8009e94 <_fstat_r+0x1c>
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	bf00      	nop
 8009e98:	20000d38 	.word	0x20000d38

08009e9c <_isatty_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d06      	ldr	r5, [pc, #24]	; (8009eb8 <_isatty_r+0x1c>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	f7f7 fff3 	bl	8001e92 <_isatty>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_isatty_r+0x1a>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_isatty_r+0x1a>
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	20000d38 	.word	0x20000d38

08009ebc <_lseek_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	4d07      	ldr	r5, [pc, #28]	; (8009edc <_lseek_r+0x20>)
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	602a      	str	r2, [r5, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f7f7 ffec 	bl	8001ea8 <_lseek>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_lseek_r+0x1e>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_lseek_r+0x1e>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	20000d38 	.word	0x20000d38

08009ee0 <__malloc_lock>:
 8009ee0:	4801      	ldr	r0, [pc, #4]	; (8009ee8 <__malloc_lock+0x8>)
 8009ee2:	f7ff bb55 	b.w	8009590 <__retarget_lock_acquire_recursive>
 8009ee6:	bf00      	nop
 8009ee8:	20000d30 	.word	0x20000d30

08009eec <__malloc_unlock>:
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <__malloc_unlock+0x8>)
 8009eee:	f7ff bb50 	b.w	8009592 <__retarget_lock_release_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	20000d30 	.word	0x20000d30

08009ef8 <_read_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d07      	ldr	r5, [pc, #28]	; (8009f18 <_read_r+0x20>)
 8009efc:	4604      	mov	r4, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	4611      	mov	r1, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	602a      	str	r2, [r5, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7f7 ff6e 	bl	8001de8 <_read>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_read_r+0x1e>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_read_r+0x1e>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20000d38 	.word	0x20000d38

08009f1c <_init>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr

08009f28 <_fini>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr
