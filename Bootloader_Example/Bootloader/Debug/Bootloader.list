
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cac  08004cac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cb4  08004cb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000070  08004d2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08004d2c  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c391  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ee  00000000  00000000  0002c42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028243  00000000  00000000  0002f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a97c  00000000  00000000  000578c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27c2  00000000  00000000  0006223f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154a01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b1c  00000000  00000000  00154a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080049d8 	.word	0x080049d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080049d8 	.word	0x080049d8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005e2:	481f      	ldr	r0, [pc, #124]	; (8000660 <etx_ota_download_and_flash+0x88>)
 80005e4:	f003 fab2 	bl	8003b4c <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <etx_ota_download_and_flash+0x8c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <etx_ota_download_and_flash+0x90>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <etx_ota_download_and_flash+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <etx_ota_download_and_flash+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000600:	f240 4209 	movw	r2, #1033	; 0x409
 8000604:	2100      	movs	r1, #0
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 8000608:	f003 fa12 	bl	8003a30 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 800060c:	f240 4109 	movw	r1, #1033	; 0x409
 8000610:	4818      	ldr	r0, [pc, #96]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 8000612:	f000 f907 	bl	8000824 <etx_receive_chunk>
 8000616:	4603      	mov	r3, r0
 8000618:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 800061a:	88bb      	ldrh	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 8000626:	f000 f829 	bl	800067c <etx_process_data>
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e001      	b.n	8000634 <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 8000630:	2301      	movs	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 800063c:	f003 fa86 	bl	8003b4c <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 8000640:	2001      	movs	r0, #1
 8000642:	f000 f9ab 	bl	800099c <etx_ota_send_resp>
      break;
 8000646:	e006      	b.n	8000656 <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f9a7 	bl	800099c <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <etx_ota_download_and_flash+0x98>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1d4      	bne.n	8000600 <etx_ota_download_and_flash+0x28>

  return ret;
 8000656:	79fb      	ldrb	r3, [r7, #7]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	080049f0 	.word	0x080049f0
 8000664:	20000498 	.word	0x20000498
 8000668:	200004a0 	.word	0x200004a0
 800066c:	2000049c 	.word	0x2000049c
 8000670:	20000495 	.word	0x20000495
 8000674:	2000008c 	.word	0x2000008c
 8000678:	08004a10 	.word	0x08004a10

0800067c <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000688:	2301      	movs	r3, #1
 800068a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80a3 	beq.w	80007dc <etx_process_data+0x160>
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 809f 	beq.w	80007dc <etx_process_data+0x160>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d104      	bne.n	80006b4 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	f000 8096 	beq.w	80007e0 <etx_process_data+0x164>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 80006b4:	4b52      	ldr	r3, [pc, #328]	; (8000800 <etx_process_data+0x184>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	f200 808b 	bhi.w	80007d4 <etx_process_data+0x158>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <etx_process_data+0x48>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006d9 	.word	0x080006d9
 80006c8:	080006e7 	.word	0x080006e7
 80006cc:	0800070f 	.word	0x0800070f
 80006d0:	08000745 	.word	0x08000745
 80006d4:	080007ad 	.word	0x080007ad
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006d8:	484a      	ldr	r0, [pc, #296]	; (8000804 <etx_process_data+0x188>)
 80006da:	f003 fa37 	bl	8003b4c <puts>
        ret = ETX_OTA_EX_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80006e4:	e085      	b.n	80007f2 <etx_process_data+0x176>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d178      	bne.n	80007e4 <etx_process_data+0x168>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d174      	bne.n	80007e4 <etx_process_data+0x168>
          {
            printf("Received OTA START Command\r\n");
 80006fa:	4843      	ldr	r0, [pc, #268]	; (8000808 <etx_process_data+0x18c>)
 80006fc:	f003 fa26 	bl	8003b4c <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000700:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <etx_process_data+0x184>)
 8000702:	2202      	movs	r2, #2
 8000704:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 800070c:	e06a      	b.n	80007e4 <etx_process_data+0x168>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d166      	bne.n	80007e8 <etx_process_data+0x16c>
        {
          ota_fw_total_size = header->meta_data.package_size;
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	4a3b      	ldr	r2, [pc, #236]	; (800080c <etx_process_data+0x190>)
 8000720:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4a3a      	ldr	r2, [pc, #232]	; (8000810 <etx_process_data+0x194>)
 8000728:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <etx_process_data+0x190>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	4838      	ldr	r0, [pc, #224]	; (8000814 <etx_process_data+0x198>)
 8000732:	f003 f985 	bl	8003a40 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <etx_process_data+0x184>)
 8000738:	2203      	movs	r2, #3
 800073a:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      break;
 8000742:	e051      	b.n	80007e8 <etx_process_data+0x16c>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	789a      	ldrb	r2, [r3, #2]
 800074c:	78db      	ldrb	r3, [r3, #3]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	4313      	orrs	r3, r2
 8000752:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d147      	bne.n	80007ec <etx_process_data+0x170>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf, data_len, ( ota_fw_received_size == 0) );
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <etx_process_data+0x19c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf0c      	ite	eq
 8000764:	2301      	moveq	r3, #1
 8000766:	2300      	movne	r3, #0
 8000768:	b2da      	uxtb	r2, r3
 800076a:	8afb      	ldrh	r3, [r7, #22]
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f93a 	bl	80009e8 <write_data_to_flash_app>
 8000774:	4603      	mov	r3, r0
 8000776:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000778:	7d7b      	ldrb	r3, [r7, #21]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d136      	bne.n	80007ec <etx_process_data+0x170>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <etx_process_data+0x19c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0a99      	lsrs	r1, r3, #10
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <etx_process_data+0x190>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	0a9b      	lsrs	r3, r3, #10
 800078a:	461a      	mov	r2, r3
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <etx_process_data+0x1a0>)
 800078e:	f003 f957 	bl	8003a40 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <etx_process_data+0x19c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <etx_process_data+0x190>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d302      	bcc.n	80007a4 <etx_process_data+0x128>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <etx_process_data+0x184>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80007aa:	e01f      	b.n	80007ec <etx_process_data+0x170>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11b      	bne.n	80007f0 <etx_process_data+0x174>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d117      	bne.n	80007f0 <etx_process_data+0x174>
          {
            printf("Received OTA END Command\r\n");
 80007c0:	4817      	ldr	r0, [pc, #92]	; (8000820 <etx_process_data+0x1a4>)
 80007c2:	f003 f9c3 	bl	8003b4c <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <etx_process_data+0x184>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80007d2:	e00d      	b.n	80007f0 <etx_process_data+0x174>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80007da:	e00a      	b.n	80007f2 <etx_process_data+0x176>
    };
 80007dc:	bf00      	nop
 80007de:	e008      	b.n	80007f2 <etx_process_data+0x176>
        break;
 80007e0:	bf00      	nop
 80007e2:	e006      	b.n	80007f2 <etx_process_data+0x176>
      break;
 80007e4:	bf00      	nop
 80007e6:	e004      	b.n	80007f2 <etx_process_data+0x176>
      break;
 80007e8:	bf00      	nop
 80007ea:	e002      	b.n	80007f2 <etx_process_data+0x176>
      break;
 80007ec:	bf00      	nop
 80007ee:	e000      	b.n	80007f2 <etx_process_data+0x176>
      break;
 80007f0:	bf00      	nop
  }while( false );

  return ret;
 80007f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000495 	.word	0x20000495
 8000804:	08004a20 	.word	0x08004a20
 8000808:	08004a38 	.word	0x08004a38
 800080c:	20000498 	.word	0x20000498
 8000810:	2000049c 	.word	0x2000049c
 8000814:	08004a54 	.word	0x08004a54
 8000818:	200004a0 	.word	0x200004a0
 800081c:	08004a7c 	.word	0x08004a7c
 8000820:	08004a88 	.word	0x08004a88

08000824 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 8000830:	2300      	movs	r3, #0
 8000832:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000834:	89bb      	ldrh	r3, [r7, #12]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	18d1      	adds	r1, r2, r3
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	2201      	movs	r2, #1
 8000840:	4854      	ldr	r0, [pc, #336]	; (8000994 <etx_receive_chunk+0x170>)
 8000842:	f002 fc30 	bl	80030a6 <HAL_UART_Receive>
 8000846:	4603      	mov	r3, r0
 8000848:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800084a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d17f      	bne.n	8000952 <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 8000852:	89bb      	ldrh	r3, [r7, #12]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	81ba      	strh	r2, [r7, #12]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2baa      	cmp	r3, #170	; 0xaa
 8000862:	d002      	beq.n	800086a <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000864:	2301      	movs	r3, #1
 8000866:	81fb      	strh	r3, [r7, #14]
      break;
 8000868:	e07c      	b.n	8000964 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	81ba      	strh	r2, [r7, #12]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1899      	adds	r1, r3, r2
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	2201      	movs	r2, #1
 800087c:	4845      	ldr	r0, [pc, #276]	; (8000994 <etx_receive_chunk+0x170>)
 800087e:	f002 fc12 	bl	80030a6 <HAL_UART_Receive>
 8000882:	4603      	mov	r3, r0
 8000884:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d163      	bne.n	8000956 <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 800088e:	89bb      	ldrh	r3, [r7, #12]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	18d1      	adds	r1, r2, r3
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	2202      	movs	r2, #2
 800089a:	483e      	ldr	r0, [pc, #248]	; (8000994 <etx_receive_chunk+0x170>)
 800089c:	f002 fc03 	bl	80030a6 <HAL_UART_Receive>
 80008a0:	4603      	mov	r3, r0
 80008a2:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d156      	bne.n	800095a <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 80008ac:	89bb      	ldrh	r3, [r7, #12]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	813b      	strh	r3, [r7, #8]
    index += 2u;
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	3302      	adds	r3, #2
 80008ba:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 80008bc:	2300      	movs	r3, #0
 80008be:	817b      	strh	r3, [r7, #10]
 80008c0:	e014      	b.n	80008ec <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 80008c2:	89bb      	ldrh	r3, [r7, #12]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	81ba      	strh	r2, [r7, #12]
 80008c8:	461a      	mov	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	1899      	adds	r1, r3, r2
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	2201      	movs	r2, #1
 80008d4:	482f      	ldr	r0, [pc, #188]	; (8000994 <etx_receive_chunk+0x170>)
 80008d6:	f002 fbe6 	bl	80030a6 <HAL_UART_Receive>
 80008da:	4603      	mov	r3, r0
 80008dc:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 80008de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d107      	bne.n	80008f6 <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 80008e6:	897b      	ldrh	r3, [r7, #10]
 80008e8:	3301      	adds	r3, #1
 80008ea:	817b      	strh	r3, [r7, #10]
 80008ec:	897a      	ldrh	r2, [r7, #10]
 80008ee:	893b      	ldrh	r3, [r7, #8]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3e6      	bcc.n	80008c2 <etx_receive_chunk+0x9e>
 80008f4:	e000      	b.n	80008f8 <etx_receive_chunk+0xd4>
      {
        break;
 80008f6:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 80008f8:	89bb      	ldrh	r3, [r7, #12]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	18d1      	adds	r1, r2, r3
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	2204      	movs	r2, #4
 8000904:	4823      	ldr	r0, [pc, #140]	; (8000994 <etx_receive_chunk+0x170>)
 8000906:	f002 fbce 	bl	80030a6 <HAL_UART_Receive>
 800090a:	4603      	mov	r3, r0
 800090c:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800090e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d123      	bne.n	800095e <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 8000916:	89bb      	ldrh	r3, [r7, #12]
 8000918:	3304      	adds	r3, #4
 800091a:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 800091c:	89bb      	ldrh	r3, [r7, #12]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	18d1      	adds	r1, r2, r3
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	2201      	movs	r2, #1
 8000928:	481a      	ldr	r0, [pc, #104]	; (8000994 <etx_receive_chunk+0x170>)
 800092a:	f002 fbbc 	bl	80030a6 <HAL_UART_Receive>
 800092e:	4603      	mov	r3, r0
 8000930:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d113      	bne.n	8000962 <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 800093a:	89bb      	ldrh	r3, [r7, #12]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	81ba      	strh	r2, [r7, #12]
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2bbb      	cmp	r3, #187	; 0xbb
 800094a:	d00b      	beq.n	8000964 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 800094c:	2301      	movs	r3, #1
 800094e:	81fb      	strh	r3, [r7, #14]
      break;
 8000950:	e008      	b.n	8000964 <etx_receive_chunk+0x140>
      break;
 8000952:	bf00      	nop
 8000954:	e006      	b.n	8000964 <etx_receive_chunk+0x140>
      break;
 8000956:	bf00      	nop
 8000958:	e004      	b.n	8000964 <etx_receive_chunk+0x140>
      break;
 800095a:	bf00      	nop
 800095c:	e002      	b.n	8000964 <etx_receive_chunk+0x140>
      break;
 800095e:	bf00      	nop
 8000960:	e000      	b.n	8000964 <etx_receive_chunk+0x140>
      break;
 8000962:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 800096c:	2300      	movs	r3, #0
 800096e:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000970:	887a      	ldrh	r2, [r7, #2]
 8000972:	89bb      	ldrh	r3, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	89ba      	ldrh	r2, [r7, #12]
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <etx_receive_chunk+0x174>)
 8000980:	f003 f85e 	bl	8003a40 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000984:	2300      	movs	r3, #0
 8000986:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 8000988:	89bb      	ldrh	r3, [r7, #12]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000534 	.word	0x20000534
 8000998:	08004aa4 	.word	0x08004aa4

0800099c <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 80009a6:	23aa      	movs	r3, #170	; 0xaa
 80009a8:	733b      	strb	r3, [r7, #12]
 80009aa:	2303      	movs	r3, #3
 80009ac:	737b      	strb	r3, [r7, #13]
 80009ae:	2301      	movs	r3, #1
 80009b0:	81fb      	strh	r3, [r7, #14]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	743b      	strb	r3, [r7, #16]
 80009b6:	2300      	movs	r3, #0
 80009b8:	747b      	strb	r3, [r7, #17]
 80009ba:	2300      	movs	r3, #0
 80009bc:	74bb      	strb	r3, [r7, #18]
 80009be:	2300      	movs	r3, #0
 80009c0:	74fb      	strb	r3, [r7, #19]
 80009c2:	2300      	movs	r3, #0
 80009c4:	753b      	strb	r3, [r7, #20]
 80009c6:	23bb      	movs	r3, #187	; 0xbb
 80009c8:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 80009ca:	f107 010c 	add.w	r1, r7, #12
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	220a      	movs	r2, #10
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <etx_ota_send_resp+0x48>)
 80009d6:	f002 fad3 	bl	8002f80 <HAL_UART_Transmit>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000534 	.word	0x20000534

080009e8 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]
 80009f4:	4613      	mov	r3, r2
 80009f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 80009f8:	f000 fd8a 	bl	8001510 <HAL_FLASH_Unlock>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d154      	bne.n	8000ab4 <write_data_to_flash_app+0xcc>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000a0a:	787b      	ldrb	r3, [r7, #1]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d019      	beq.n	8000a44 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 8000a10:	482e      	ldr	r0, [pc, #184]	; (8000acc <write_data_to_flash_app+0xe4>)
 8000a12:	f003 f89b 	bl	8003b4c <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000a26:	f107 0208 	add.w	r2, r7, #8
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fecf 	bl	80017d4 <HAL_FLASHEx_Erase>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 8000a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d139      	bne.n	8000ab8 <write_data_to_flash_app+0xd0>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
 8000a48:	e023      	b.n	8000a92 <write_data_to_flash_app+0xaa>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <write_data_to_flash_app+0xe8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4921      	ldr	r1, [pc, #132]	; (8000ad4 <write_data_to_flash_app+0xec>)
 8000a50:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[4+i]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	3304      	adds	r3, #4
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 fcf7 	bl	8001458 <HAL_FLASH_Program>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret == HAL_OK )
 8000a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d105      	bne.n	8000a84 <write_data_to_flash_app+0x9c>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <write_data_to_flash_app+0xe8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <write_data_to_flash_app+0xe8>)
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e003      	b.n	8000a8c <write_data_to_flash_app+0xa4>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <write_data_to_flash_app+0xf0>)
 8000a86:	f003 f861 	bl	8003b4c <puts>
        break;
 8000a8a:	e006      	b.n	8000a9a <write_data_to_flash_app+0xb2>
    for(int i = 0; i < data_len; i++ )
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
 8000a92:	887b      	ldrh	r3, [r7, #2]
 8000a94:	6a3a      	ldr	r2, [r7, #32]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbd7      	blt.n	8000a4a <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10c      	bne.n	8000abc <write_data_to_flash_app+0xd4>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000aa2:	f000 fd57 	bl	8001554 <HAL_FLASH_Lock>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	e004      	b.n	8000abe <write_data_to_flash_app+0xd6>
      break;
 8000ab4:	bf00      	nop
 8000ab6:	e002      	b.n	8000abe <write_data_to_flash_app+0xd6>
        break;
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <write_data_to_flash_app+0xd6>
      break;
 8000abc:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08004ae8 	.word	0x08004ae8
 8000ad0:	200004a0 	.word	0x200004a0
 8000ad4:	08040000 	.word	0x08040000
 8000ad8:	08004b08 	.word	0x08004b08

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae2:	f000 fb5c 	bl	800119e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae6:	f000 f851 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f000 f92b 	bl	8000d44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000aee:	f000 f8f9 	bl	8000ce4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000af2:	f000 f8c7 	bl	8000c84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	481d      	ldr	r0, [pc, #116]	; (8000b70 <main+0x94>)
 8000afc:	f001 f92c 	bl	8001d58 <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8000b00:	2300      	movs	r3, #0
 8000b02:	2202      	movs	r2, #2
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	; (8000b74 <main+0x98>)
 8000b08:	f002 ff9a 	bl	8003a40 <iprintf>
  //HAL_Delay(2000);   //2sec delay for nothing

  /* Check the GPIO for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000b0c:	f000 fb98 	bl	8001240 <HAL_GetTick>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000b16:	60fb      	str	r3, [r7, #12]

  printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <main+0x9c>)
 8000b1a:	f003 f817 	bl	8003b4c <puts>
  do
  {
    OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4816      	ldr	r0, [pc, #88]	; (8000b7c <main+0xa0>)
 8000b24:	f001 f900 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	72fb      	strb	r3, [r7, #11]
    uint32_t current_tick = HAL_GetTick();
 8000b2c:	f000 fb88 	bl	8001240 <HAL_GetTick>
 8000b30:	6078      	str	r0, [r7, #4]

    /* Check the button is pressed or not for 3seconds */
    if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8000b32:	7afb      	ldrb	r3, [r7, #11]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d104      	bne.n	8000b42 <main+0x66>
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d800      	bhi.n	8000b42 <main+0x66>
  {
 8000b40:	e7ed      	b.n	8000b1e <main+0x42>
      break;
    }
  }while( 1 );

  /*Start the Firmware or Application update */
  if( OTA_Pin_state == GPIO_PIN_SET )
 8000b42:	7afb      	ldrb	r3, [r7, #11]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d110      	bne.n	8000b6a <main+0x8e>
  {
    printf("Starting Firmware Download!!!\r\n");
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <main+0xa4>)
 8000b4a:	f002 ffff 	bl	8003b4c <puts>
    /* OTA Request. Receive the data from the UART4 and flash */
    if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000b4e:	f7ff fd43 	bl	80005d8 <etx_ota_download_and_flash>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <main+0x84>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <main+0xa8>)
 8000b5a:	f002 fff7 	bl	8003b4c <puts>
      while( 1 );
 8000b5e:	e7fe      	b.n	8000b5e <main+0x82>
    }
    else
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <main+0xac>)
 8000b62:	f002 fff3 	bl	8003b4c <puts>
      HAL_NVIC_SystemReset();
 8000b66:	f000 fc66 	bl	8001436 <HAL_NVIC_SystemReset>
    }
  }

  // Jump to application
  goto_application();
 8000b6a:	f000 f957 	bl	8000e1c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x92>
 8000b70:	40020400 	.word	0x40020400
 8000b74:	08004b1c 	.word	0x08004b1c
 8000b78:	08004b3c 	.word	0x08004b3c
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	08004b74 	.word	0x08004b74
 8000b84:	08004b94 	.word	0x08004b94
 8000b88:	08004bb4 	.word	0x08004bb4

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0b8      	sub	sp, #224	; 0xe0
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b96:	2234      	movs	r2, #52	; 0x34
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 ff48 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2290      	movs	r2, #144	; 0x90
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 ff39 	bl	8003a30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <SystemClock_Config+0xf0>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <SystemClock_Config+0xf0>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <SystemClock_Config+0xf0>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <SystemClock_Config+0xf4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bde:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <SystemClock_Config+0xf4>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SystemClock_Config+0xf4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfe:	2310      	movs	r3, #16
 8000c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f8bc 	bl	8001d8c <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c1a:	f000 f919 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fb50 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c4e:	f000 f8ff 	bl	8000e50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8000c52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c56:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fd15 	bl	8002694 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c70:	f000 f8ee 	bl	8000e50 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	37e0      	adds	r7, #224	; 0xe0
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc8:	f002 f90c 	bl	8002ee4 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f000 f8bd 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000534 	.word	0x20000534
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_USART3_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d28:	f002 f8dc 	bl	8002ee4 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 f88d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200004b0 	.word	0x200004b0
 8000d40:	40004800 	.word	0x40004800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	4812      	ldr	r0, [pc, #72]	; (8000df0 <MX_GPIO_Init+0xac>)
 8000da8:	f000 ffd6 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0xb0>)
 8000dc2:	f000 fe05 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_GPIO_Init+0xac>)
 8000dde:	f000 fdf7 	bl	80019d0 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40020800 	.word	0x40020800

08000df8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e00:	1d39      	adds	r1, r7, #4
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	2201      	movs	r2, #1
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <__io_putchar+0x20>)
 8000e0a:	f002 f8b9 	bl	8002f80 <HAL_UART_Transmit>

  return ch;
 8000e0e:	687b      	ldr	r3, [r7, #4]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200004b0 	.word	0x200004b0

08000e1c <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <goto_application+0x28>)
 8000e24:	f002 fe92 	bl	8003b4c <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <goto_application+0x2c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) 0x08040000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <goto_application+0x30>)
 8000e34:	f000 ff90 	bl	8001d58 <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4798      	blx	r3
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08004be0 	.word	0x08004be0
 8000e48:	08040004 	.word	0x08040004
 8000e4c:	40020400 	.word	0x40020400

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <HAL_UART_MspInit+0xd8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d128      	bne.n	8000f18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <HAL_UART_MspInit+0xe0>)
 8000f12:	f000 fd5d 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f16:	e02d      	b.n	8000f74 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <HAL_UART_MspInit+0xe4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d128      	bne.n	8000f74 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_UART_MspInit+0xdc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f64:	2307      	movs	r3, #7
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_UART_MspInit+0xe0>)
 8000f70:	f000 fd2e 	bl	80019d0 <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40004800 	.word	0x40004800

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f91e 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e00a      	b.n	8001008 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ff2:	f3af 8000 	nop.w
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf0      	blt.n	8000ff2 <_read+0x12>
	}

return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e009      	b.n	8001040 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fedf 	bl	8000df8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf1      	blt.n	800102c <_write+0x12>
	}
	return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	605a      	str	r2, [r3, #4]
	return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f002 fc76 	bl	80039dc <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20080000 	.word	0x20080000
 800111c:	00000400 	.word	0x00000400
 8001120:	200004a4 	.word	0x200004a4
 8001124:	200005e8 	.word	0x200005e8

08001128 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001168:	4c0b      	ldr	r4, [pc, #44]	; (8001198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001176:	f7ff ffd7 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f002 fc35 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff fcad 	bl	8000adc <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001190:	08004cbc 	.word	0x08004cbc
  ldr r2, =_sbss
 8001194:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001198:	200005e8 	.word	0x200005e8

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>

0800119e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f000 f920 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f805 	bl	80011b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011ae:	f7ff fe55 	bl	8000e5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f931 	bl	800143e <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f903 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	200005b8 	.word	0x200005b8

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200005b8 	.word	0x200005b8

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	4313      	orrs	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	05fa0000 	.word	0x05fa0000

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800137c:	f3bf 8f4f 	dsb	sy
}
 8001380:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <__NVIC_SystemReset+0x24>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800138a:	4904      	ldr	r1, [pc, #16]	; (800139c <__NVIC_SystemReset+0x24>)
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_SystemReset+0x28>)
 800138e:	4313      	orrs	r3, r2
 8001390:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001392:	f3bf 8f4f 	dsb	sy
}
 8001396:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <__NVIC_SystemReset+0x20>
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	05fa0004 	.word	0x05fa0004

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff78 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff46 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff78 	bl	8001310 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800143a:	f7ff ff9d 	bl	8001378 <__NVIC_SystemReset>

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffac 	bl	80013a4 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800146a:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_FLASH_Program+0xb0>)
 800146c:	7d1b      	ldrb	r3, [r3, #20]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_FLASH_Program+0x1e>
 8001472:	2302      	movs	r3, #2
 8001474:	e043      	b.n	80014fe <HAL_FLASH_Program+0xa6>
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_FLASH_Program+0xb0>)
 8001478:	2201      	movs	r2, #1
 800147a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800147c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001480:	f000 f878 	bl	8001574 <FLASH_WaitForLastOperation>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d133      	bne.n	80014f6 <HAL_FLASH_Program+0x9e>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d823      	bhi.n	80014dc <HAL_FLASH_Program+0x84>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_FLASH_Program+0x44>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	080014b9 	.word	0x080014b9
 80014a4:	080014c5 	.word	0x080014c5
 80014a8:	080014d1 	.word	0x080014d1
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80014ac:	783b      	ldrb	r3, [r7, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f000 f921 	bl	80016f8 <FLASH_Program_Byte>
        break;
 80014b6:	e012      	b.n	80014de <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80014b8:	883b      	ldrh	r3, [r7, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f000 f8f5 	bl	80016ac <FLASH_Program_HalfWord>
        break;
 80014c2:	e00c      	b.n	80014de <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	f000 f8c9 	bl	8001660 <FLASH_Program_Word>
        break;
 80014ce:	e006      	b.n	80014de <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80014d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014d4:	68b8      	ldr	r0, [r7, #8]
 80014d6:	f000 f88d 	bl	80015f4 <FLASH_Program_DoubleWord>
        break;
 80014da:	e000      	b.n	80014de <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80014dc:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e2:	f000 f847 	bl	8001574 <FLASH_WaitForLastOperation>
 80014e6:	4603      	mov	r3, r0
 80014e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_FLASH_Program+0xb4>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_FLASH_Program+0xb4>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_FLASH_Program+0xb0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	751a      	strb	r2, [r3, #20]

  return status;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200005bc 	.word	0x200005bc
 800150c:	40023c00 	.word	0x40023c00

08001510 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_FLASH_Unlock+0x38>)
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da0b      	bge.n	800153a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_FLASH_Unlock+0x38>)
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_FLASH_Unlock+0x3c>)
 8001526:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_FLASH_Unlock+0x38>)
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_FLASH_Unlock+0x40>)
 800152c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_FLASH_Unlock+0x38>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da01      	bge.n	800153a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40023c00 	.word	0x40023c00
 800154c:	45670123 	.word	0x45670123
 8001550:	cdef89ab 	.word	0xcdef89ab

08001554 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_FLASH_Lock+0x1c>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_FLASH_Lock+0x1c>)
 800155e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001562:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40023c00 	.word	0x40023c00

08001574 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <FLASH_WaitForLastOperation+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001586:	f7ff fe5b 	bl	8001240 <HAL_GetTick>
 800158a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800158c:	e010      	b.n	80015b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d00c      	beq.n	80015b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <FLASH_WaitForLastOperation+0x38>
 800159c:	f7ff fe50 	bl	8001240 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d201      	bcs.n	80015b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e019      	b.n	80015e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <FLASH_WaitForLastOperation+0x7c>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e8      	bne.n	800158e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <FLASH_WaitForLastOperation+0x7c>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80015c8:	f000 f8ba 	bl	8001740 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e009      	b.n	80015e4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <FLASH_WaitForLastOperation+0x7c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <FLASH_WaitForLastOperation+0x7c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
  
}  
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200005bc 	.word	0x200005bc
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <FLASH_Program_DoubleWord+0x68>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	4a15      	ldr	r2, [pc, #84]	; (800165c <FLASH_Program_DoubleWord+0x68>)
 8001606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800160a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <FLASH_Program_DoubleWord+0x68>)
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <FLASH_Program_DoubleWord+0x68>)
 8001612:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <FLASH_Program_DoubleWord+0x68>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <FLASH_Program_DoubleWord+0x68>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800162a:	f3bf 8f6f 	isb	sy
}
 800162e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	000a      	movs	r2, r1
 800163e:	2300      	movs	r3, #0
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	3104      	adds	r1, #4
 8001644:	4613      	mov	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001648:	f3bf 8f4f 	dsb	sy
}
 800164c:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <FLASH_Program_Word+0x48>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <FLASH_Program_Word+0x48>)
 8001670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <FLASH_Program_Word+0x48>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <FLASH_Program_Word+0x48>)
 800167c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001680:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <FLASH_Program_Word+0x48>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <FLASH_Program_Word+0x48>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001694:	f3bf 8f4f 	dsb	sy
}
 8001698:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <FLASH_Program_HalfWord+0x48>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <FLASH_Program_HalfWord+0x48>)
 80016be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <FLASH_Program_HalfWord+0x48>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <FLASH_Program_HalfWord+0x48>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <FLASH_Program_HalfWord+0x48>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <FLASH_Program_HalfWord+0x48>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e2:	f3bf 8f4f 	dsb	sy
}
 80016e6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40023c00 	.word	0x40023c00

080016f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <FLASH_Program_Byte+0x44>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <FLASH_Program_Byte+0x44>)
 800170a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800170e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <FLASH_Program_Byte+0x44>)
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <FLASH_Program_Byte+0x44>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <FLASH_Program_Byte+0x44>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <FLASH_Program_Byte+0x44>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800172a:	f3bf 8f4f 	dsb	sy
}
 800172e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40023c00 	.word	0x40023c00

08001740 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <FLASH_SetErrorCode+0x8c>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 800175a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <FLASH_SetErrorCode+0x8c>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 8001772:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <FLASH_SetErrorCode+0x8c>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 800178a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <FLASH_SetErrorCode+0x8c>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 80017a2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <FLASH_SetErrorCode+0x8c>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <FLASH_SetErrorCode+0x90>)
 80017ba:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <FLASH_SetErrorCode+0x8c>)
 80017be:	22f2      	movs	r2, #242	; 0xf2
 80017c0:	60da      	str	r2, [r3, #12]
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	200005bc 	.word	0x200005bc

080017d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_FLASHEx_Erase+0xd4>)
 80017e8:	7d1b      	ldrb	r3, [r3, #20]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_FLASHEx_Erase+0x1e>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e056      	b.n	80018a0 <HAL_FLASHEx_Erase+0xcc>
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_FLASHEx_Erase+0xd4>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017fc:	f7ff feba 	bl	8001574 <FLASH_WaitForLastOperation>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d146      	bne.n	8001898 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d115      	bne.n	8001846 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f000 f844 	bl	80018b4 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800182c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001830:	f7ff fea0 	bl	8001574 <FLASH_WaitForLastOperation>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_FLASHEx_Erase+0xd8>)
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	491b      	ldr	r1, [pc, #108]	; (80018ac <HAL_FLASHEx_Erase+0xd8>)
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_FLASHEx_Erase+0xdc>)
 8001840:	4013      	ands	r3, r2
 8001842:	610b      	str	r3, [r1, #16]
 8001844:	e028      	b.n	8001898 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	e01c      	b.n	8001888 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f000 f868 	bl	800192c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800185c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001860:	f7ff fe88 	bl	8001574 <FLASH_WaitForLastOperation>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_FLASHEx_Erase+0xd8>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_FLASHEx_Erase+0xd8>)
 800186e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001872:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	601a      	str	r2, [r3, #0]
          break;
 8001880:	e00a      	b.n	8001898 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4413      	add	r3, r2
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	429a      	cmp	r2, r3
 8001896:	d3da      	bcc.n	800184e <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_FLASHEx_Erase+0xd4>)
 800189a:	2200      	movs	r2, #0
 800189c:	751a      	strb	r2, [r3, #20]

  return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200005bc 	.word	0x200005bc
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	ffff7ffb 	.word	0xffff7ffb

080018b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <FLASH_MassErase+0x74>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <FLASH_MassErase+0x74>)
 80018c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ca:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d107      	bne.n	80018e2 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <FLASH_MassErase+0x74>)
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	4914      	ldr	r1, [pc, #80]	; (8001928 <FLASH_MassErase+0x74>)
 80018d8:	f248 0304 	movw	r3, #32772	; 0x8004
 80018dc:	4313      	orrs	r3, r2
 80018de:	610b      	str	r3, [r1, #16]
 80018e0:	e00f      	b.n	8001902 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d106      	bne.n	80018f6 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <FLASH_MassErase+0x74>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <FLASH_MassErase+0x74>)
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f2:	6113      	str	r3, [r2, #16]
 80018f4:	e005      	b.n	8001902 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <FLASH_MassErase+0x74>)
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <FLASH_MassErase+0x74>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <FLASH_MassErase+0x74>)
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	4313      	orrs	r3, r2
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <FLASH_MassErase+0x74>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8001914:	f3bf 8f4f 	dsb	sy
}
 8001918:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00

0800192c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e010      	b.n	800196a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d103      	bne.n	8001956 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e009      	b.n	800196a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d103      	bne.n	8001964 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800195c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e002      	b.n	800196a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001964:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001968:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0b      	cmp	r3, #11
 800196e:	d902      	bls.n	8001976 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 800197c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001980:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	4911      	ldr	r1, [pc, #68]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 8001994:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001998:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	4a09      	ldr	r2, [pc, #36]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <FLASH_Erase_Sector+0xa0>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e175      	b.n	8001cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8164 	bne.w	8001cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00b      	beq.n	8001a2e <HAL_GPIO_Init+0x5e>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x100>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b12      	cmp	r3, #18
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	69b9      	ldr	r1, [r7, #24]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80be 	beq.w	8001cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b72:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_GPIO_Init+0x32c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d037      	beq.n	8001c0e <HAL_GPIO_Init+0x23e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_GPIO_Init+0x23a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02b      	beq.n	8001c06 <HAL_GPIO_Init+0x236>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a55      	ldr	r2, [pc, #340]	; (8001d08 <HAL_GPIO_Init+0x338>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x232>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x33c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x22e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a53      	ldr	r2, [pc, #332]	; (8001d10 <HAL_GPIO_Init+0x340>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x22a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x344>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_GPIO_Init+0x348>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_GPIO_Init+0x34c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x21a>
 8001be6:	2309      	movs	r3, #9
 8001be8:	e012      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bea:	230a      	movs	r3, #10
 8001bec:	e010      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	e00e      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f ae86 	bls.w	80019f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40022400 	.word	0x40022400
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e29b      	b.n	80022da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8087 	beq.w	8001ebe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db0:	4b96      	ldr	r3, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d00c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbc:	4b93      	ldr	r3, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d112      	bne.n	8001dee <HAL_RCC_OscConfig+0x62>
 8001dc8:	4b90      	ldr	r3, [pc, #576]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd4:	d10b      	bne.n	8001dee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd6:	4b8d      	ldr	r3, [pc, #564]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d06c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x130>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d168      	bne.n	8001ebc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e275      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7a>
 8001df8:	4b84      	ldr	r3, [pc, #528]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a83      	ldr	r2, [pc, #524]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e02e      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x9c>
 8001e0e:	4b7f      	ldr	r3, [pc, #508]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7e      	ldr	r2, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b7c      	ldr	r3, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7b      	ldr	r2, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e01d      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a6e      	ldr	r2, [pc, #440]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6b      	ldr	r2, [pc, #428]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f9e8 	bl	8001240 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f9e4 	bl	8001240 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e229      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b61      	ldr	r3, [pc, #388]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f9d4 	bl	8001240 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f9d0 	bl	8001240 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e215      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x110>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d069      	beq.n	8001f9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d11c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x190>
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d116      	bne.n	8001f1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x17a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e1e9      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	493d      	ldr	r1, [pc, #244]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	e040      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a38      	ldr	r2, [pc, #224]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f986 	bl	8001240 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff f982 	bl	8001240 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1c7      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4929      	ldr	r1, [pc, #164]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
 8001f6a:	e018      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f962 	bl	8001240 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff f95e 	bl	8001240 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1a3      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d038      	beq.n	800201c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb6:	4a15      	ldr	r2, [pc, #84]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f93f 	bl	8001240 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f93b 	bl	8001240 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e180      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x23a>
 8001fe4:	e01a      	b.n	800201c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f925 	bl	8001240 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f921 	bl	8001240 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d903      	bls.n	8002010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e166      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
 800200c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b92      	ldr	r3, [pc, #584]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a4 	beq.w	8002172 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b8c      	ldr	r3, [pc, #560]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b89      	ldr	r3, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a88      	ldr	r2, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b86      	ldr	r3, [pc, #536]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002052:	4b83      	ldr	r3, [pc, #524]	; (8002260 <HAL_RCC_OscConfig+0x4d4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800205e:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_OscConfig+0x4d4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7f      	ldr	r2, [pc, #508]	; (8002260 <HAL_RCC_OscConfig+0x4d4>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff f8e9 	bl	8001240 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff f8e5 	bl	8001240 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12a      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002084:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCC_OscConfig+0x4d4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x31a>
 8002098:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a6f      	ldr	r2, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	e02d      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x33c>
 80020ae:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	e01c      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d10c      	bne.n	80020ea <HAL_RCC_OscConfig+0x35e>
 80020d0:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a61      	ldr	r2, [pc, #388]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	4b5f      	ldr	r3, [pc, #380]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a5e      	ldr	r2, [pc, #376]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	e00b      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
 80020ea:	4b5c      	ldr	r3, [pc, #368]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5b      	ldr	r2, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d015      	beq.n	8002136 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff f899 	bl	8001240 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff f895 	bl	8001240 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0d8      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ee      	beq.n	8002112 <HAL_RCC_OscConfig+0x386>
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7ff f883 	bl	8001240 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff f87f 	bl	8001240 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0c2      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d105      	bne.n	8002172 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a3c      	ldr	r2, [pc, #240]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80ae 	beq.w	80022d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d06d      	beq.n	8002264 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d14b      	bne.n	8002228 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a31      	ldr	r2, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff f850 	bl	8001240 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f84c 	bl	8001240 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e091      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	071b      	lsls	r3, r3, #28
 80021ee:	491b      	ldr	r1, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f81e 	bl	8001240 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f81a 	bl	8001240 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e05f      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x47c>
 8002226:	e057      	b.n	80022d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 800222e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff f804 	bl	8001240 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff f800 	bl	8001240 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e045      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x4b0>
 800225a:	e03d      	b.n	80022d8 <HAL_RCC_OscConfig+0x54c>
 800225c:	40023800 	.word	0x40023800
 8002260:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_RCC_OscConfig+0x558>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d030      	beq.n	80022d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d129      	bne.n	80022d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d122      	bne.n	80022d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800229a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800229c:	4293      	cmp	r3, r2
 800229e:	d119      	bne.n	80022d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10f      	bne.n	80022d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d0      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	4965      	ldr	r1, [pc, #404]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002352:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d040      	beq.n	800240c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e073      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06b      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4936      	ldr	r1, [pc, #216]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe ff30 	bl	8001240 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe ff2c 	bl	8001240 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e053      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d210      	bcs.n	800243c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 020f 	bic.w	r2, r3, #15
 8002422:	4922      	ldr	r1, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	490a      	ldr	r1, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x1cc>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1d4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fe8c 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08004bfc 	.word	0x08004bfc
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024c6:	2100      	movs	r1, #0
 80024c8:	6079      	str	r1, [r7, #4]
 80024ca:	2100      	movs	r1, #0
 80024cc:	60f9      	str	r1, [r7, #12]
 80024ce:	2100      	movs	r1, #0
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80024d2:	2100      	movs	r1, #0
 80024d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d6:	4952      	ldr	r1, [pc, #328]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 80024d8:	6889      	ldr	r1, [r1, #8]
 80024da:	f001 010c 	and.w	r1, r1, #12
 80024de:	2908      	cmp	r1, #8
 80024e0:	d00d      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x3e>
 80024e2:	2908      	cmp	r1, #8
 80024e4:	f200 8094 	bhi.w	8002610 <HAL_RCC_GetSysClockFreq+0x150>
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x32>
 80024ec:	2904      	cmp	r1, #4
 80024ee:	d003      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x38>
 80024f0:	e08e      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f2:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCC_GetSysClockFreq+0x164>)
 80024f4:	60bb      	str	r3, [r7, #8]
      break;
 80024f6:	e08e      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_GetSysClockFreq+0x168>)
 80024fa:	60bb      	str	r3, [r7, #8]
      break;
 80024fc:	e08b      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fe:	4948      	ldr	r1, [pc, #288]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002500:	6849      	ldr	r1, [r1, #4]
 8002502:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002506:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002508:	4945      	ldr	r1, [pc, #276]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 800250a:	6849      	ldr	r1, [r1, #4]
 800250c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002510:	2900      	cmp	r1, #0
 8002512:	d024      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4942      	ldr	r1, [pc, #264]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002516:	6849      	ldr	r1, [r1, #4]
 8002518:	0989      	lsrs	r1, r1, #6
 800251a:	4608      	mov	r0, r1
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002524:	f04f 0500 	mov.w	r5, #0
 8002528:	ea00 0204 	and.w	r2, r0, r4
 800252c:	ea01 0305 	and.w	r3, r1, r5
 8002530:	493d      	ldr	r1, [pc, #244]	; (8002628 <HAL_RCC_GetSysClockFreq+0x168>)
 8002532:	fb01 f003 	mul.w	r0, r1, r3
 8002536:	2100      	movs	r1, #0
 8002538:	fb01 f102 	mul.w	r1, r1, r2
 800253c:	1844      	adds	r4, r0, r1
 800253e:	493a      	ldr	r1, [pc, #232]	; (8002628 <HAL_RCC_GetSysClockFreq+0x168>)
 8002540:	fba2 0101 	umull	r0, r1, r2, r1
 8002544:	1863      	adds	r3, r4, r1
 8002546:	4619      	mov	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	461a      	mov	r2, r3
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f7fd fec6 	bl	80002e0 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e04a      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	461a      	mov	r2, r3
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	ea02 0400 	and.w	r4, r2, r0
 8002576:	ea03 0501 	and.w	r5, r3, r1
 800257a:	4620      	mov	r0, r4
 800257c:	4629      	mov	r1, r5
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	014b      	lsls	r3, r1, #5
 8002588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800258c:	0142      	lsls	r2, r0, #5
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	1b00      	subs	r0, r0, r4
 8002594:	eb61 0105 	sbc.w	r1, r1, r5
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	018b      	lsls	r3, r1, #6
 80025a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025a6:	0182      	lsls	r2, r0, #6
 80025a8:	1a12      	subs	r2, r2, r0
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	f04f 0000 	mov.w	r0, #0
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	00d9      	lsls	r1, r3, #3
 80025b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025bc:	00d0      	lsls	r0, r2, #3
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	1912      	adds	r2, r2, r4
 80025c4:	eb45 0303 	adc.w	r3, r5, r3
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	0299      	lsls	r1, r3, #10
 80025d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025d6:	0290      	lsls	r0, r2, #10
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	f7fd fe7a 	bl	80002e0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	60bb      	str	r3, [r7, #8]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_RCC_GetSysClockFreq+0x164>)
 8002612:	60bb      	str	r3, [r7, #8]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	68bb      	ldr	r3, [r7, #8]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	017d7840 	.word	0x017d7840

0800262c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08004c0c 	.word	0x08004c0c

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffdc 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08004c0c 	.word	0x08004c0c

08002694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b69      	ldr	r3, [pc, #420]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a68      	ldr	r2, [pc, #416]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026c6:	6093      	str	r3, [r2, #8]
 80026c8:	4b66      	ldr	r3, [pc, #408]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	4964      	ldr	r1, [pc, #400]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	4959      	ldr	r1, [pc, #356]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800270c:	d101      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d017      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800272a:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002730:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	494a      	ldr	r1, [pc, #296]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 808b 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a39      	ldr	r2, [pc, #228]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a34      	ldr	r2, [pc, #208]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fd50 	bl	8001240 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fe fd4c 	bl	8001240 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e38f      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027b6:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d035      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d02e      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002800:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d114      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fd14 	bl	8001240 <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fd10 	bl	8001240 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e351      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ee      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800284a:	d111      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800285a:	400b      	ands	r3, r1
 800285c:	4901      	ldr	r1, [pc, #4]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
 8002862:	e00b      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	0ffffcff 	.word	0x0ffffcff
 8002870:	4bb3      	ldr	r3, [pc, #716]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4ab2      	ldr	r2, [pc, #712]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002876:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800287a:	6093      	str	r3, [r2, #8]
 800287c:	4bb0      	ldr	r3, [pc, #704]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800287e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	49ad      	ldr	r1, [pc, #692]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800288a:	4313      	orrs	r3, r2
 800288c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800289a:	4ba9      	ldr	r3, [pc, #676]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a0:	4aa7      	ldr	r2, [pc, #668]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028aa:	4ba5      	ldr	r3, [pc, #660]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	49a2      	ldr	r1, [pc, #648]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028c8:	4b9d      	ldr	r3, [pc, #628]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d6:	499a      	ldr	r1, [pc, #616]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ea:	4b95      	ldr	r3, [pc, #596]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f8:	4991      	ldr	r1, [pc, #580]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800290c:	4b8c      	ldr	r3, [pc, #560]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291a:	4989      	ldr	r1, [pc, #548]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800292e:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4980      	ldr	r1, [pc, #512]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002950:	4b7b      	ldr	r3, [pc, #492]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4978      	ldr	r1, [pc, #480]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f023 020c 	bic.w	r2, r3, #12
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	496f      	ldr	r1, [pc, #444]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4967      	ldr	r1, [pc, #412]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b6:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	495e      	ldr	r1, [pc, #376]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	4956      	ldr	r1, [pc, #344]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029fa:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	4945      	ldr	r1, [pc, #276]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a3e:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4c:	493c      	ldr	r1, [pc, #240]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a60:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a6e:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d011      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a90:	492b      	ldr	r1, [pc, #172]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	491b      	ldr	r1, [pc, #108]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af4:	4912      	ldr	r1, [pc, #72]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	4909      	ldr	r1, [pc, #36]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	e002      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	4986      	ldr	r1, [pc, #536]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b58:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	497d      	ldr	r1, [pc, #500]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d006      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80d6 	beq.w	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b84:	4b76      	ldr	r3, [pc, #472]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a75      	ldr	r2, [pc, #468]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fe fb56 	bl	8001240 <HAL_GetTick>
 8002b94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b98:	f7fe fb52 	bl	8001240 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e195      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d021      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11d      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bd8:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bde:	0e1b      	lsrs	r3, r3, #24
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	019a      	lsls	r2, r3, #6
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	4958      	ldr	r1, [pc, #352]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02e      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c30:	d129      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c40:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c46:	0f1b      	lsrs	r3, r3, #28
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	019a      	lsls	r2, r3, #6
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	431a      	orrs	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	071b      	lsls	r3, r3, #28
 8002c66:	493e      	ldr	r1, [pc, #248]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c74:	f023 021f 	bic.w	r2, r3, #31
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	4938      	ldr	r1, [pc, #224]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01d      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c92:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	0e1b      	lsrs	r3, r3, #24
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	0f1b      	lsrs	r3, r3, #28
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	019a      	lsls	r2, r3, #6
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	4926      	ldr	r1, [pc, #152]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d011      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	019a      	lsls	r2, r3, #6
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	071b      	lsls	r3, r3, #28
 8002cf6:	491a      	ldr	r1, [pc, #104]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fa99 	bl	8001240 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d12:	f7fe fa95 	bl	8001240 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0d8      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 80ce 	bne.w	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fe fa7c 	bl	8001240 <HAL_GetTick>
 8002d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d4c:	f7fe fa78 	bl	8001240 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d904      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0bb      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d64:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d70:	d0ec      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12a      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002da8:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	0f1b      	lsrs	r3, r3, #28
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	019a      	lsls	r2, r3, #6
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	4944      	ldr	r1, [pc, #272]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ddc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	493d      	ldr	r1, [pc, #244]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d022      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e04:	d11d      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	0e1b      	lsrs	r3, r3, #24
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	0f1b      	lsrs	r3, r3, #28
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	019a      	lsls	r2, r3, #6
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	4929      	ldr	r1, [pc, #164]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	0e1b      	lsrs	r3, r3, #24
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	0c1b      	lsrs	r3, r3, #16
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	019a      	lsls	r2, r3, #6
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	4917      	ldr	r1, [pc, #92]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4911      	ldr	r1, [pc, #68]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe f9c8 	bl	8001240 <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eb4:	f7fe f9c4 	bl	8001240 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e007      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed2:	d1ef      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e040      	b.n	8002f78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd ffcc 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f990 	bl	8003248 <UART_SetConfig>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e022      	b.n	8002f78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fbe6 	bl	800370c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fc6d 	bl	8003850 <UART_CheckIdleState>
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	f040 8081 	bne.w	800309c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_UART_Transmit+0x26>
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e079      	b.n	800309e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_UART_Transmit+0x38>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e072      	b.n	800309e <HAL_UART_Transmit+0x11e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2221      	movs	r2, #33	; 0x21
 8002fcc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fce:	f7fe f937 	bl	8001240 <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d108      	bne.n	8003000 <HAL_UART_Transmit+0x80>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e003      	b.n	8003008 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003010:	e02c      	b.n	800306c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc60 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e038      	b.n	800309e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e007      	b.n	800305a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1cc      	bne.n	8003012 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2200      	movs	r2, #0
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fc2d 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e005      	b.n	800309e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e000      	b.n	800309e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b08a      	sub	sp, #40	; 0x28
 80030aa:	af02      	add	r7, sp, #8
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80be 	bne.w	800323c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_UART_Receive+0x26>
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b6      	b.n	800323e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_UART_Receive+0x38>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0af      	b.n	800323e <HAL_UART_Receive+0x198>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2222      	movs	r2, #34	; 0x22
 80030f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030fa:	f7fe f8a1 	bl	8001240 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003118:	d10e      	bne.n	8003138 <HAL_UART_Receive+0x92>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_UART_Receive+0x88>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800312c:	e02d      	b.n	800318a <HAL_UART_Receive+0xe4>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003136:	e028      	b.n	800318a <HAL_UART_Receive+0xe4>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_UART_Receive+0xb6>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_UART_Receive+0xac>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003150:	e01b      	b.n	800318a <HAL_UART_Receive+0xe4>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	227f      	movs	r2, #127	; 0x7f
 8003156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800315a:	e016      	b.n	800318a <HAL_UART_Receive+0xe4>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003164:	d10d      	bne.n	8003182 <HAL_UART_Receive+0xdc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <HAL_UART_Receive+0xd2>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	227f      	movs	r2, #127	; 0x7f
 8003172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003176:	e008      	b.n	800318a <HAL_UART_Receive+0xe4>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	223f      	movs	r2, #63	; 0x3f
 800317c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003180:	e003      	b.n	800318a <HAL_UART_Receive+0xe4>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003190:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319a:	d108      	bne.n	80031ae <HAL_UART_Receive+0x108>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	e003      	b.n	80031b6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031be:	e032      	b.n	8003226 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	2120      	movs	r1, #32
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fb89 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e031      	b.n	800323e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10c      	bne.n	80031fa <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	8a7b      	ldrh	r3, [r7, #18]
 80031ea:	4013      	ands	r3, r2
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	3302      	adds	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e00c      	b.n	8003214 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	b2da      	uxtb	r2, r3
 8003202:	8a7b      	ldrh	r3, [r7, #18]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4013      	ands	r3, r2
 8003208:	b2da      	uxtb	r2, r3
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1c6      	bne.n	80031c0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4ba7      	ldr	r3, [pc, #668]	; (8003510 <UART_SetConfig+0x2c8>)
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	430b      	orrs	r3, r1
 800327e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a95      	ldr	r2, [pc, #596]	; (8003514 <UART_SetConfig+0x2cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d120      	bne.n	8003306 <UART_SetConfig+0xbe>
 80032c4:	4b94      	ldr	r3, [pc, #592]	; (8003518 <UART_SetConfig+0x2d0>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d816      	bhi.n	8003300 <UART_SetConfig+0xb8>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <UART_SetConfig+0x90>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032f5 	.word	0x080032f5
 80032e0:	080032ef 	.word	0x080032ef
 80032e4:	080032fb 	.word	0x080032fb
 80032e8:	2301      	movs	r3, #1
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e14f      	b.n	800358e <UART_SetConfig+0x346>
 80032ee:	2302      	movs	r3, #2
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e14c      	b.n	800358e <UART_SetConfig+0x346>
 80032f4:	2304      	movs	r3, #4
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e149      	b.n	800358e <UART_SetConfig+0x346>
 80032fa:	2308      	movs	r3, #8
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e146      	b.n	800358e <UART_SetConfig+0x346>
 8003300:	2310      	movs	r3, #16
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e143      	b.n	800358e <UART_SetConfig+0x346>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a84      	ldr	r2, [pc, #528]	; (800351c <UART_SetConfig+0x2d4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d132      	bne.n	8003376 <UART_SetConfig+0x12e>
 8003310:	4b81      	ldr	r3, [pc, #516]	; (8003518 <UART_SetConfig+0x2d0>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d828      	bhi.n	8003370 <UART_SetConfig+0x128>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <UART_SetConfig+0xdc>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003359 	.word	0x08003359
 8003328:	08003371 	.word	0x08003371
 800332c:	08003371 	.word	0x08003371
 8003330:	08003371 	.word	0x08003371
 8003334:	08003365 	.word	0x08003365
 8003338:	08003371 	.word	0x08003371
 800333c:	08003371 	.word	0x08003371
 8003340:	08003371 	.word	0x08003371
 8003344:	0800335f 	.word	0x0800335f
 8003348:	08003371 	.word	0x08003371
 800334c:	08003371 	.word	0x08003371
 8003350:	08003371 	.word	0x08003371
 8003354:	0800336b 	.word	0x0800336b
 8003358:	2300      	movs	r3, #0
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e117      	b.n	800358e <UART_SetConfig+0x346>
 800335e:	2302      	movs	r3, #2
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e114      	b.n	800358e <UART_SetConfig+0x346>
 8003364:	2304      	movs	r3, #4
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e111      	b.n	800358e <UART_SetConfig+0x346>
 800336a:	2308      	movs	r3, #8
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e10e      	b.n	800358e <UART_SetConfig+0x346>
 8003370:	2310      	movs	r3, #16
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e10b      	b.n	800358e <UART_SetConfig+0x346>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <UART_SetConfig+0x2d8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d120      	bne.n	80033c2 <UART_SetConfig+0x17a>
 8003380:	4b65      	ldr	r3, [pc, #404]	; (8003518 <UART_SetConfig+0x2d0>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800338a:	2b30      	cmp	r3, #48	; 0x30
 800338c:	d013      	beq.n	80033b6 <UART_SetConfig+0x16e>
 800338e:	2b30      	cmp	r3, #48	; 0x30
 8003390:	d814      	bhi.n	80033bc <UART_SetConfig+0x174>
 8003392:	2b20      	cmp	r3, #32
 8003394:	d009      	beq.n	80033aa <UART_SetConfig+0x162>
 8003396:	2b20      	cmp	r3, #32
 8003398:	d810      	bhi.n	80033bc <UART_SetConfig+0x174>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <UART_SetConfig+0x15c>
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d006      	beq.n	80033b0 <UART_SetConfig+0x168>
 80033a2:	e00b      	b.n	80033bc <UART_SetConfig+0x174>
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e0f1      	b.n	800358e <UART_SetConfig+0x346>
 80033aa:	2302      	movs	r3, #2
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e0ee      	b.n	800358e <UART_SetConfig+0x346>
 80033b0:	2304      	movs	r3, #4
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0eb      	b.n	800358e <UART_SetConfig+0x346>
 80033b6:	2308      	movs	r3, #8
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0e8      	b.n	800358e <UART_SetConfig+0x346>
 80033bc:	2310      	movs	r3, #16
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0e5      	b.n	800358e <UART_SetConfig+0x346>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a57      	ldr	r2, [pc, #348]	; (8003524 <UART_SetConfig+0x2dc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d120      	bne.n	800340e <UART_SetConfig+0x1c6>
 80033cc:	4b52      	ldr	r3, [pc, #328]	; (8003518 <UART_SetConfig+0x2d0>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033d6:	2bc0      	cmp	r3, #192	; 0xc0
 80033d8:	d013      	beq.n	8003402 <UART_SetConfig+0x1ba>
 80033da:	2bc0      	cmp	r3, #192	; 0xc0
 80033dc:	d814      	bhi.n	8003408 <UART_SetConfig+0x1c0>
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d009      	beq.n	80033f6 <UART_SetConfig+0x1ae>
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d810      	bhi.n	8003408 <UART_SetConfig+0x1c0>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <UART_SetConfig+0x1a8>
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d006      	beq.n	80033fc <UART_SetConfig+0x1b4>
 80033ee:	e00b      	b.n	8003408 <UART_SetConfig+0x1c0>
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e0cb      	b.n	800358e <UART_SetConfig+0x346>
 80033f6:	2302      	movs	r3, #2
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e0c8      	b.n	800358e <UART_SetConfig+0x346>
 80033fc:	2304      	movs	r3, #4
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e0c5      	b.n	800358e <UART_SetConfig+0x346>
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e0c2      	b.n	800358e <UART_SetConfig+0x346>
 8003408:	2310      	movs	r3, #16
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0bf      	b.n	800358e <UART_SetConfig+0x346>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a45      	ldr	r2, [pc, #276]	; (8003528 <UART_SetConfig+0x2e0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d125      	bne.n	8003464 <UART_SetConfig+0x21c>
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <UART_SetConfig+0x2d0>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003426:	d017      	beq.n	8003458 <UART_SetConfig+0x210>
 8003428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800342c:	d817      	bhi.n	800345e <UART_SetConfig+0x216>
 800342e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003432:	d00b      	beq.n	800344c <UART_SetConfig+0x204>
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d811      	bhi.n	800345e <UART_SetConfig+0x216>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <UART_SetConfig+0x1fe>
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d006      	beq.n	8003452 <UART_SetConfig+0x20a>
 8003444:	e00b      	b.n	800345e <UART_SetConfig+0x216>
 8003446:	2300      	movs	r3, #0
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e0a0      	b.n	800358e <UART_SetConfig+0x346>
 800344c:	2302      	movs	r3, #2
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e09d      	b.n	800358e <UART_SetConfig+0x346>
 8003452:	2304      	movs	r3, #4
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e09a      	b.n	800358e <UART_SetConfig+0x346>
 8003458:	2308      	movs	r3, #8
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e097      	b.n	800358e <UART_SetConfig+0x346>
 800345e:	2310      	movs	r3, #16
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e094      	b.n	800358e <UART_SetConfig+0x346>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <UART_SetConfig+0x2e4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d125      	bne.n	80034ba <UART_SetConfig+0x272>
 800346e:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <UART_SetConfig+0x2d0>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800347c:	d017      	beq.n	80034ae <UART_SetConfig+0x266>
 800347e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003482:	d817      	bhi.n	80034b4 <UART_SetConfig+0x26c>
 8003484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003488:	d00b      	beq.n	80034a2 <UART_SetConfig+0x25a>
 800348a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800348e:	d811      	bhi.n	80034b4 <UART_SetConfig+0x26c>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <UART_SetConfig+0x254>
 8003494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003498:	d006      	beq.n	80034a8 <UART_SetConfig+0x260>
 800349a:	e00b      	b.n	80034b4 <UART_SetConfig+0x26c>
 800349c:	2301      	movs	r3, #1
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e075      	b.n	800358e <UART_SetConfig+0x346>
 80034a2:	2302      	movs	r3, #2
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e072      	b.n	800358e <UART_SetConfig+0x346>
 80034a8:	2304      	movs	r3, #4
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e06f      	b.n	800358e <UART_SetConfig+0x346>
 80034ae:	2308      	movs	r3, #8
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e06c      	b.n	800358e <UART_SetConfig+0x346>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e069      	b.n	800358e <UART_SetConfig+0x346>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <UART_SetConfig+0x2e8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d137      	bne.n	8003534 <UART_SetConfig+0x2ec>
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <UART_SetConfig+0x2d0>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034d2:	d017      	beq.n	8003504 <UART_SetConfig+0x2bc>
 80034d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034d8:	d817      	bhi.n	800350a <UART_SetConfig+0x2c2>
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	d00b      	beq.n	80034f8 <UART_SetConfig+0x2b0>
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e4:	d811      	bhi.n	800350a <UART_SetConfig+0x2c2>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <UART_SetConfig+0x2aa>
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ee:	d006      	beq.n	80034fe <UART_SetConfig+0x2b6>
 80034f0:	e00b      	b.n	800350a <UART_SetConfig+0x2c2>
 80034f2:	2300      	movs	r3, #0
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e04a      	b.n	800358e <UART_SetConfig+0x346>
 80034f8:	2302      	movs	r3, #2
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e047      	b.n	800358e <UART_SetConfig+0x346>
 80034fe:	2304      	movs	r3, #4
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e044      	b.n	800358e <UART_SetConfig+0x346>
 8003504:	2308      	movs	r3, #8
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e041      	b.n	800358e <UART_SetConfig+0x346>
 800350a:	2310      	movs	r3, #16
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e03e      	b.n	800358e <UART_SetConfig+0x346>
 8003510:	efff69f3 	.word	0xefff69f3
 8003514:	40011000 	.word	0x40011000
 8003518:	40023800 	.word	0x40023800
 800351c:	40004400 	.word	0x40004400
 8003520:	40004800 	.word	0x40004800
 8003524:	40004c00 	.word	0x40004c00
 8003528:	40005000 	.word	0x40005000
 800352c:	40011400 	.word	0x40011400
 8003530:	40007800 	.word	0x40007800
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a71      	ldr	r2, [pc, #452]	; (8003700 <UART_SetConfig+0x4b8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d125      	bne.n	800358a <UART_SetConfig+0x342>
 800353e:	4b71      	ldr	r3, [pc, #452]	; (8003704 <UART_SetConfig+0x4bc>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003548:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800354c:	d017      	beq.n	800357e <UART_SetConfig+0x336>
 800354e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003552:	d817      	bhi.n	8003584 <UART_SetConfig+0x33c>
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d00b      	beq.n	8003572 <UART_SetConfig+0x32a>
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d811      	bhi.n	8003584 <UART_SetConfig+0x33c>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <UART_SetConfig+0x324>
 8003564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003568:	d006      	beq.n	8003578 <UART_SetConfig+0x330>
 800356a:	e00b      	b.n	8003584 <UART_SetConfig+0x33c>
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e00d      	b.n	800358e <UART_SetConfig+0x346>
 8003572:	2302      	movs	r3, #2
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e00a      	b.n	800358e <UART_SetConfig+0x346>
 8003578:	2304      	movs	r3, #4
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e007      	b.n	800358e <UART_SetConfig+0x346>
 800357e:	2308      	movs	r3, #8
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e004      	b.n	800358e <UART_SetConfig+0x346>
 8003584:	2310      	movs	r3, #16
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e001      	b.n	800358e <UART_SetConfig+0x346>
 800358a:	2310      	movs	r3, #16
 800358c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003596:	d15b      	bne.n	8003650 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003598:	7ffb      	ldrb	r3, [r7, #31]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d827      	bhi.n	80035ee <UART_SetConfig+0x3a6>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <UART_SetConfig+0x35c>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	080035d1 	.word	0x080035d1
 80035ac:	080035d9 	.word	0x080035d9
 80035b0:	080035ef 	.word	0x080035ef
 80035b4:	080035df 	.word	0x080035df
 80035b8:	080035ef 	.word	0x080035ef
 80035bc:	080035ef 	.word	0x080035ef
 80035c0:	080035ef 	.word	0x080035ef
 80035c4:	080035e7 	.word	0x080035e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7ff f83c 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 80035cc:	61b8      	str	r0, [r7, #24]
        break;
 80035ce:	e013      	b.n	80035f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d0:	f7ff f84c 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 80035d4:	61b8      	str	r0, [r7, #24]
        break;
 80035d6:	e00f      	b.n	80035f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d8:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <UART_SetConfig+0x4c0>)
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e00c      	b.n	80035f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035de:	f7fe ff6f 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 80035e2:	61b8      	str	r0, [r7, #24]
        break;
 80035e4:	e008      	b.n	80035f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e004      	b.n	80035f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	77bb      	strb	r3, [r7, #30]
        break;
 80035f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d074      	beq.n	80036e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	005a      	lsls	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	b29b      	uxth	r3, r3
 8003614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d916      	bls.n	800364a <UART_SetConfig+0x402>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d212      	bcs.n	800364a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f023 030f 	bic.w	r3, r3, #15
 800362c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	b29b      	uxth	r3, r3
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b29a      	uxth	r2, r3
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	4313      	orrs	r3, r2
 800363e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	89fa      	ldrh	r2, [r7, #14]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	e04e      	b.n	80036e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77bb      	strb	r3, [r7, #30]
 800364e:	e04b      	b.n	80036e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003650:	7ffb      	ldrb	r3, [r7, #31]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d827      	bhi.n	80036a6 <UART_SetConfig+0x45e>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0x414>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	08003681 	.word	0x08003681
 8003660:	08003689 	.word	0x08003689
 8003664:	08003691 	.word	0x08003691
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003697 	.word	0x08003697
 8003670:	080036a7 	.word	0x080036a7
 8003674:	080036a7 	.word	0x080036a7
 8003678:	080036a7 	.word	0x080036a7
 800367c:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe ffe0 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8003684:	61b8      	str	r0, [r7, #24]
        break;
 8003686:	e013      	b.n	80036b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7fe fff0 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 800368c:	61b8      	str	r0, [r7, #24]
        break;
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <UART_SetConfig+0x4c0>)
 8003692:	61bb      	str	r3, [r7, #24]
        break;
 8003694:	e00c      	b.n	80036b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe ff13 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800369a:	61b8      	str	r0, [r7, #24]
        break;
 800369c:	e008      	b.n	80036b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	77bb      	strb	r3, [r7, #30]
        break;
 80036ae:	bf00      	nop
    }

    if (pclk != 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085a      	lsrs	r2, r3, #1
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d908      	bls.n	80036e4 <UART_SetConfig+0x49c>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d204      	bcs.n	80036e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e001      	b.n	80036e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40007c00 	.word	0x40007c00
 8003704:	40023800 	.word	0x40023800
 8003708:	00f42400 	.word	0x00f42400

0800370c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01a      	beq.n	8003822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380a:	d10a      	bne.n	8003822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af02      	add	r7, sp, #8
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003860:	f7fd fcee 	bl	8001240 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d10e      	bne.n	8003892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f82d 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e023      	b.n	80038da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d10e      	bne.n	80038be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f817 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00d      	b.n	80038da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	e05e      	b.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d05a      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fd fca0 	bl	8001240 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <UART_WaitOnFlagUntilTimeout+0x30>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11b      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003920:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e043      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02c      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003966:	d124      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003980:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e00f      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d091      	beq.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <__errno>:
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <__errno+0x8>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	4d0d      	ldr	r5, [pc, #52]	; (8003a20 <__libc_init_array+0x38>)
 80039ec:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	2600      	movs	r6, #0
 80039f4:	42a6      	cmp	r6, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	4d0b      	ldr	r5, [pc, #44]	; (8003a28 <__libc_init_array+0x40>)
 80039fa:	4c0c      	ldr	r4, [pc, #48]	; (8003a2c <__libc_init_array+0x44>)
 80039fc:	f000 ffec 	bl	80049d8 <_init>
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	2600      	movs	r6, #0
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a10:	4798      	blx	r3
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1a:	4798      	blx	r3
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08004cb4 	.word	0x08004cb4
 8003a24:	08004cb4 	.word	0x08004cb4
 8003a28:	08004cb4 	.word	0x08004cb4
 8003a2c:	08004cb8 	.word	0x08004cb8

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <iprintf>:
 8003a40:	b40f      	push	{r0, r1, r2, r3}
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <iprintf+0x2c>)
 8003a44:	b513      	push	{r0, r1, r4, lr}
 8003a46:	681c      	ldr	r4, [r3, #0]
 8003a48:	b124      	cbz	r4, 8003a54 <iprintf+0x14>
 8003a4a:	69a3      	ldr	r3, [r4, #24]
 8003a4c:	b913      	cbnz	r3, 8003a54 <iprintf+0x14>
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f000 fa5e 	bl	8003f10 <__sinit>
 8003a54:	ab05      	add	r3, sp, #20
 8003a56:	9a04      	ldr	r2, [sp, #16]
 8003a58:	68a1      	ldr	r1, [r4, #8]
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f000 fc2f 	bl	80042c0 <_vfiprintf_r>
 8003a62:	b002      	add	sp, #8
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a68:	b004      	add	sp, #16
 8003a6a:	4770      	bx	lr
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <_puts_r>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	460e      	mov	r6, r1
 8003a74:	4605      	mov	r5, r0
 8003a76:	b118      	cbz	r0, 8003a80 <_puts_r+0x10>
 8003a78:	6983      	ldr	r3, [r0, #24]
 8003a7a:	b90b      	cbnz	r3, 8003a80 <_puts_r+0x10>
 8003a7c:	f000 fa48 	bl	8003f10 <__sinit>
 8003a80:	69ab      	ldr	r3, [r5, #24]
 8003a82:	68ac      	ldr	r4, [r5, #8]
 8003a84:	b913      	cbnz	r3, 8003a8c <_puts_r+0x1c>
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 fa42 	bl	8003f10 <__sinit>
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <_puts_r+0xd0>)
 8003a8e:	429c      	cmp	r4, r3
 8003a90:	d120      	bne.n	8003ad4 <_puts_r+0x64>
 8003a92:	686c      	ldr	r4, [r5, #4]
 8003a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a96:	07db      	lsls	r3, r3, #31
 8003a98:	d405      	bmi.n	8003aa6 <_puts_r+0x36>
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	0598      	lsls	r0, r3, #22
 8003a9e:	d402      	bmi.n	8003aa6 <_puts_r+0x36>
 8003aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aa2:	f000 fad3 	bl	800404c <__retarget_lock_acquire_recursive>
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	0719      	lsls	r1, r3, #28
 8003aaa:	d51d      	bpl.n	8003ae8 <_puts_r+0x78>
 8003aac:	6923      	ldr	r3, [r4, #16]
 8003aae:	b1db      	cbz	r3, 8003ae8 <_puts_r+0x78>
 8003ab0:	3e01      	subs	r6, #1
 8003ab2:	68a3      	ldr	r3, [r4, #8]
 8003ab4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60a3      	str	r3, [r4, #8]
 8003abc:	bb39      	cbnz	r1, 8003b0e <_puts_r+0x9e>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da38      	bge.n	8003b34 <_puts_r+0xc4>
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	210a      	movs	r1, #10
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 f848 	bl	8003b5c <__swbuf_r>
 8003acc:	3001      	adds	r0, #1
 8003ace:	d011      	beq.n	8003af4 <_puts_r+0x84>
 8003ad0:	250a      	movs	r5, #10
 8003ad2:	e011      	b.n	8003af8 <_puts_r+0x88>
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <_puts_r+0xd4>)
 8003ad6:	429c      	cmp	r4, r3
 8003ad8:	d101      	bne.n	8003ade <_puts_r+0x6e>
 8003ada:	68ac      	ldr	r4, [r5, #8]
 8003adc:	e7da      	b.n	8003a94 <_puts_r+0x24>
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <_puts_r+0xd8>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	bf08      	it	eq
 8003ae4:	68ec      	ldreq	r4, [r5, #12]
 8003ae6:	e7d5      	b.n	8003a94 <_puts_r+0x24>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 f888 	bl	8003c00 <__swsetup_r>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d0dd      	beq.n	8003ab0 <_puts_r+0x40>
 8003af4:	f04f 35ff 	mov.w	r5, #4294967295
 8003af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003afa:	07da      	lsls	r2, r3, #31
 8003afc:	d405      	bmi.n	8003b0a <_puts_r+0x9a>
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	059b      	lsls	r3, r3, #22
 8003b02:	d402      	bmi.n	8003b0a <_puts_r+0x9a>
 8003b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b06:	f000 faa2 	bl	800404e <__retarget_lock_release_recursive>
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da04      	bge.n	8003b1c <_puts_r+0xac>
 8003b12:	69a2      	ldr	r2, [r4, #24]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dc06      	bgt.n	8003b26 <_puts_r+0xb6>
 8003b18:	290a      	cmp	r1, #10
 8003b1a:	d004      	beq.n	8003b26 <_puts_r+0xb6>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	6022      	str	r2, [r4, #0]
 8003b22:	7019      	strb	r1, [r3, #0]
 8003b24:	e7c5      	b.n	8003ab2 <_puts_r+0x42>
 8003b26:	4622      	mov	r2, r4
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f000 f817 	bl	8003b5c <__swbuf_r>
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d1bf      	bne.n	8003ab2 <_puts_r+0x42>
 8003b32:	e7df      	b.n	8003af4 <_puts_r+0x84>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	250a      	movs	r5, #10
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	701d      	strb	r5, [r3, #0]
 8003b3e:	e7db      	b.n	8003af8 <_puts_r+0x88>
 8003b40:	08004c38 	.word	0x08004c38
 8003b44:	08004c58 	.word	0x08004c58
 8003b48:	08004c18 	.word	0x08004c18

08003b4c <puts>:
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <puts+0xc>)
 8003b4e:	4601      	mov	r1, r0
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	f7ff bf8d 	b.w	8003a70 <_puts_r>
 8003b56:	bf00      	nop
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <__swbuf_r>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	460e      	mov	r6, r1
 8003b60:	4614      	mov	r4, r2
 8003b62:	4605      	mov	r5, r0
 8003b64:	b118      	cbz	r0, 8003b6e <__swbuf_r+0x12>
 8003b66:	6983      	ldr	r3, [r0, #24]
 8003b68:	b90b      	cbnz	r3, 8003b6e <__swbuf_r+0x12>
 8003b6a:	f000 f9d1 	bl	8003f10 <__sinit>
 8003b6e:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <__swbuf_r+0x98>)
 8003b70:	429c      	cmp	r4, r3
 8003b72:	d12b      	bne.n	8003bcc <__swbuf_r+0x70>
 8003b74:	686c      	ldr	r4, [r5, #4]
 8003b76:	69a3      	ldr	r3, [r4, #24]
 8003b78:	60a3      	str	r3, [r4, #8]
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	071a      	lsls	r2, r3, #28
 8003b7e:	d52f      	bpl.n	8003be0 <__swbuf_r+0x84>
 8003b80:	6923      	ldr	r3, [r4, #16]
 8003b82:	b36b      	cbz	r3, 8003be0 <__swbuf_r+0x84>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	1ac0      	subs	r0, r0, r3
 8003b8a:	6963      	ldr	r3, [r4, #20]
 8003b8c:	b2f6      	uxtb	r6, r6
 8003b8e:	4283      	cmp	r3, r0
 8003b90:	4637      	mov	r7, r6
 8003b92:	dc04      	bgt.n	8003b9e <__swbuf_r+0x42>
 8003b94:	4621      	mov	r1, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 f926 	bl	8003de8 <_fflush_r>
 8003b9c:	bb30      	cbnz	r0, 8003bec <__swbuf_r+0x90>
 8003b9e:	68a3      	ldr	r3, [r4, #8]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	60a3      	str	r3, [r4, #8]
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	6022      	str	r2, [r4, #0]
 8003baa:	701e      	strb	r6, [r3, #0]
 8003bac:	6963      	ldr	r3, [r4, #20]
 8003bae:	3001      	adds	r0, #1
 8003bb0:	4283      	cmp	r3, r0
 8003bb2:	d004      	beq.n	8003bbe <__swbuf_r+0x62>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	07db      	lsls	r3, r3, #31
 8003bb8:	d506      	bpl.n	8003bc8 <__swbuf_r+0x6c>
 8003bba:	2e0a      	cmp	r6, #10
 8003bbc:	d104      	bne.n	8003bc8 <__swbuf_r+0x6c>
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f000 f911 	bl	8003de8 <_fflush_r>
 8003bc6:	b988      	cbnz	r0, 8003bec <__swbuf_r+0x90>
 8003bc8:	4638      	mov	r0, r7
 8003bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <__swbuf_r+0x9c>)
 8003bce:	429c      	cmp	r4, r3
 8003bd0:	d101      	bne.n	8003bd6 <__swbuf_r+0x7a>
 8003bd2:	68ac      	ldr	r4, [r5, #8]
 8003bd4:	e7cf      	b.n	8003b76 <__swbuf_r+0x1a>
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <__swbuf_r+0xa0>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	bf08      	it	eq
 8003bdc:	68ec      	ldreq	r4, [r5, #12]
 8003bde:	e7ca      	b.n	8003b76 <__swbuf_r+0x1a>
 8003be0:	4621      	mov	r1, r4
 8003be2:	4628      	mov	r0, r5
 8003be4:	f000 f80c 	bl	8003c00 <__swsetup_r>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d0cb      	beq.n	8003b84 <__swbuf_r+0x28>
 8003bec:	f04f 37ff 	mov.w	r7, #4294967295
 8003bf0:	e7ea      	b.n	8003bc8 <__swbuf_r+0x6c>
 8003bf2:	bf00      	nop
 8003bf4:	08004c38 	.word	0x08004c38
 8003bf8:	08004c58 	.word	0x08004c58
 8003bfc:	08004c18 	.word	0x08004c18

08003c00 <__swsetup_r>:
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <__swsetup_r+0xcc>)
 8003c02:	b570      	push	{r4, r5, r6, lr}
 8003c04:	681d      	ldr	r5, [r3, #0]
 8003c06:	4606      	mov	r6, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	b125      	cbz	r5, 8003c16 <__swsetup_r+0x16>
 8003c0c:	69ab      	ldr	r3, [r5, #24]
 8003c0e:	b913      	cbnz	r3, 8003c16 <__swsetup_r+0x16>
 8003c10:	4628      	mov	r0, r5
 8003c12:	f000 f97d 	bl	8003f10 <__sinit>
 8003c16:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <__swsetup_r+0xd0>)
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	d10f      	bne.n	8003c3c <__swsetup_r+0x3c>
 8003c1c:	686c      	ldr	r4, [r5, #4]
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c24:	0719      	lsls	r1, r3, #28
 8003c26:	d42c      	bmi.n	8003c82 <__swsetup_r+0x82>
 8003c28:	06dd      	lsls	r5, r3, #27
 8003c2a:	d411      	bmi.n	8003c50 <__swsetup_r+0x50>
 8003c2c:	2309      	movs	r3, #9
 8003c2e:	6033      	str	r3, [r6, #0]
 8003c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3a:	e03e      	b.n	8003cba <__swsetup_r+0xba>
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <__swsetup_r+0xd4>)
 8003c3e:	429c      	cmp	r4, r3
 8003c40:	d101      	bne.n	8003c46 <__swsetup_r+0x46>
 8003c42:	68ac      	ldr	r4, [r5, #8]
 8003c44:	e7eb      	b.n	8003c1e <__swsetup_r+0x1e>
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <__swsetup_r+0xd8>)
 8003c48:	429c      	cmp	r4, r3
 8003c4a:	bf08      	it	eq
 8003c4c:	68ec      	ldreq	r4, [r5, #12]
 8003c4e:	e7e6      	b.n	8003c1e <__swsetup_r+0x1e>
 8003c50:	0758      	lsls	r0, r3, #29
 8003c52:	d512      	bpl.n	8003c7a <__swsetup_r+0x7a>
 8003c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c56:	b141      	cbz	r1, 8003c6a <__swsetup_r+0x6a>
 8003c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c5c:	4299      	cmp	r1, r3
 8003c5e:	d002      	beq.n	8003c66 <__swsetup_r+0x66>
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 fa59 	bl	8004118 <_free_r>
 8003c66:	2300      	movs	r3, #0
 8003c68:	6363      	str	r3, [r4, #52]	; 0x34
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	6923      	ldr	r3, [r4, #16]
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	6923      	ldr	r3, [r4, #16]
 8003c84:	b94b      	cbnz	r3, 8003c9a <__swsetup_r+0x9a>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d003      	beq.n	8003c9a <__swsetup_r+0x9a>
 8003c92:	4621      	mov	r1, r4
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f9ff 	bl	8004098 <__smakebuf_r>
 8003c9a:	89a0      	ldrh	r0, [r4, #12]
 8003c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ca0:	f010 0301 	ands.w	r3, r0, #1
 8003ca4:	d00a      	beq.n	8003cbc <__swsetup_r+0xbc>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60a3      	str	r3, [r4, #8]
 8003caa:	6963      	ldr	r3, [r4, #20]
 8003cac:	425b      	negs	r3, r3
 8003cae:	61a3      	str	r3, [r4, #24]
 8003cb0:	6923      	ldr	r3, [r4, #16]
 8003cb2:	b943      	cbnz	r3, 8003cc6 <__swsetup_r+0xc6>
 8003cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003cb8:	d1ba      	bne.n	8003c30 <__swsetup_r+0x30>
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	0781      	lsls	r1, r0, #30
 8003cbe:	bf58      	it	pl
 8003cc0:	6963      	ldrpl	r3, [r4, #20]
 8003cc2:	60a3      	str	r3, [r4, #8]
 8003cc4:	e7f4      	b.n	8003cb0 <__swsetup_r+0xb0>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e7f7      	b.n	8003cba <__swsetup_r+0xba>
 8003cca:	bf00      	nop
 8003ccc:	2000000c 	.word	0x2000000c
 8003cd0:	08004c38 	.word	0x08004c38
 8003cd4:	08004c58 	.word	0x08004c58
 8003cd8:	08004c18 	.word	0x08004c18

08003cdc <__sflush_r>:
 8003cdc:	898a      	ldrh	r2, [r1, #12]
 8003cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	0710      	lsls	r0, r2, #28
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	d458      	bmi.n	8003d9c <__sflush_r+0xc0>
 8003cea:	684b      	ldr	r3, [r1, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dc05      	bgt.n	8003cfc <__sflush_r+0x20>
 8003cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	dc02      	bgt.n	8003cfc <__sflush_r+0x20>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	d0f9      	beq.n	8003cf6 <__sflush_r+0x1a>
 8003d02:	2300      	movs	r3, #0
 8003d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d08:	682f      	ldr	r7, [r5, #0]
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	d032      	beq.n	8003d74 <__sflush_r+0x98>
 8003d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	075a      	lsls	r2, r3, #29
 8003d14:	d505      	bpl.n	8003d22 <__sflush_r+0x46>
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	1ac0      	subs	r0, r0, r3
 8003d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d1c:	b10b      	cbz	r3, 8003d22 <__sflush_r+0x46>
 8003d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d20:	1ac0      	subs	r0, r0, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	4602      	mov	r2, r0
 8003d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d28:	6a21      	ldr	r1, [r4, #32]
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b0      	blx	r6
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	d106      	bne.n	8003d42 <__sflush_r+0x66>
 8003d34:	6829      	ldr	r1, [r5, #0]
 8003d36:	291d      	cmp	r1, #29
 8003d38:	d82c      	bhi.n	8003d94 <__sflush_r+0xb8>
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <__sflush_r+0x108>)
 8003d3c:	40ca      	lsrs	r2, r1
 8003d3e:	07d6      	lsls	r6, r2, #31
 8003d40:	d528      	bpl.n	8003d94 <__sflush_r+0xb8>
 8003d42:	2200      	movs	r2, #0
 8003d44:	6062      	str	r2, [r4, #4]
 8003d46:	04d9      	lsls	r1, r3, #19
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	d504      	bpl.n	8003d58 <__sflush_r+0x7c>
 8003d4e:	1c42      	adds	r2, r0, #1
 8003d50:	d101      	bne.n	8003d56 <__sflush_r+0x7a>
 8003d52:	682b      	ldr	r3, [r5, #0]
 8003d54:	b903      	cbnz	r3, 8003d58 <__sflush_r+0x7c>
 8003d56:	6560      	str	r0, [r4, #84]	; 0x54
 8003d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5a:	602f      	str	r7, [r5, #0]
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d0ca      	beq.n	8003cf6 <__sflush_r+0x1a>
 8003d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d64:	4299      	cmp	r1, r3
 8003d66:	d002      	beq.n	8003d6e <__sflush_r+0x92>
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 f9d5 	bl	8004118 <_free_r>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	6360      	str	r0, [r4, #52]	; 0x34
 8003d72:	e7c1      	b.n	8003cf8 <__sflush_r+0x1c>
 8003d74:	6a21      	ldr	r1, [r4, #32]
 8003d76:	2301      	movs	r3, #1
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b0      	blx	r6
 8003d7c:	1c41      	adds	r1, r0, #1
 8003d7e:	d1c7      	bne.n	8003d10 <__sflush_r+0x34>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0c4      	beq.n	8003d10 <__sflush_r+0x34>
 8003d86:	2b1d      	cmp	r3, #29
 8003d88:	d001      	beq.n	8003d8e <__sflush_r+0xb2>
 8003d8a:	2b16      	cmp	r3, #22
 8003d8c:	d101      	bne.n	8003d92 <__sflush_r+0xb6>
 8003d8e:	602f      	str	r7, [r5, #0]
 8003d90:	e7b1      	b.n	8003cf6 <__sflush_r+0x1a>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	e7ad      	b.n	8003cf8 <__sflush_r+0x1c>
 8003d9c:	690f      	ldr	r7, [r1, #16]
 8003d9e:	2f00      	cmp	r7, #0
 8003da0:	d0a9      	beq.n	8003cf6 <__sflush_r+0x1a>
 8003da2:	0793      	lsls	r3, r2, #30
 8003da4:	680e      	ldr	r6, [r1, #0]
 8003da6:	bf08      	it	eq
 8003da8:	694b      	ldreq	r3, [r1, #20]
 8003daa:	600f      	str	r7, [r1, #0]
 8003dac:	bf18      	it	ne
 8003dae:	2300      	movne	r3, #0
 8003db0:	eba6 0807 	sub.w	r8, r6, r7
 8003db4:	608b      	str	r3, [r1, #8]
 8003db6:	f1b8 0f00 	cmp.w	r8, #0
 8003dba:	dd9c      	ble.n	8003cf6 <__sflush_r+0x1a>
 8003dbc:	6a21      	ldr	r1, [r4, #32]
 8003dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	463a      	mov	r2, r7
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b0      	blx	r6
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	dc06      	bgt.n	8003dda <__sflush_r+0xfe>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd2:	81a3      	strh	r3, [r4, #12]
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	e78e      	b.n	8003cf8 <__sflush_r+0x1c>
 8003dda:	4407      	add	r7, r0
 8003ddc:	eba8 0800 	sub.w	r8, r8, r0
 8003de0:	e7e9      	b.n	8003db6 <__sflush_r+0xda>
 8003de2:	bf00      	nop
 8003de4:	20400001 	.word	0x20400001

08003de8 <_fflush_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	4605      	mov	r5, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	b913      	cbnz	r3, 8003df8 <_fflush_r+0x10>
 8003df2:	2500      	movs	r5, #0
 8003df4:	4628      	mov	r0, r5
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	b118      	cbz	r0, 8003e02 <_fflush_r+0x1a>
 8003dfa:	6983      	ldr	r3, [r0, #24]
 8003dfc:	b90b      	cbnz	r3, 8003e02 <_fflush_r+0x1a>
 8003dfe:	f000 f887 	bl	8003f10 <__sinit>
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <_fflush_r+0x6c>)
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d11b      	bne.n	8003e40 <_fflush_r+0x58>
 8003e08:	686c      	ldr	r4, [r5, #4]
 8003e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ef      	beq.n	8003df2 <_fflush_r+0xa>
 8003e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e14:	07d0      	lsls	r0, r2, #31
 8003e16:	d404      	bmi.n	8003e22 <_fflush_r+0x3a>
 8003e18:	0599      	lsls	r1, r3, #22
 8003e1a:	d402      	bmi.n	8003e22 <_fflush_r+0x3a>
 8003e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1e:	f000 f915 	bl	800404c <__retarget_lock_acquire_recursive>
 8003e22:	4628      	mov	r0, r5
 8003e24:	4621      	mov	r1, r4
 8003e26:	f7ff ff59 	bl	8003cdc <__sflush_r>
 8003e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2c:	07da      	lsls	r2, r3, #31
 8003e2e:	4605      	mov	r5, r0
 8003e30:	d4e0      	bmi.n	8003df4 <_fflush_r+0xc>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	059b      	lsls	r3, r3, #22
 8003e36:	d4dd      	bmi.n	8003df4 <_fflush_r+0xc>
 8003e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3a:	f000 f908 	bl	800404e <__retarget_lock_release_recursive>
 8003e3e:	e7d9      	b.n	8003df4 <_fflush_r+0xc>
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <_fflush_r+0x70>)
 8003e42:	429c      	cmp	r4, r3
 8003e44:	d101      	bne.n	8003e4a <_fflush_r+0x62>
 8003e46:	68ac      	ldr	r4, [r5, #8]
 8003e48:	e7df      	b.n	8003e0a <_fflush_r+0x22>
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <_fflush_r+0x74>)
 8003e4c:	429c      	cmp	r4, r3
 8003e4e:	bf08      	it	eq
 8003e50:	68ec      	ldreq	r4, [r5, #12]
 8003e52:	e7da      	b.n	8003e0a <_fflush_r+0x22>
 8003e54:	08004c38 	.word	0x08004c38
 8003e58:	08004c58 	.word	0x08004c58
 8003e5c:	08004c18 	.word	0x08004c18

08003e60 <std>:
 8003e60:	2300      	movs	r3, #0
 8003e62:	b510      	push	{r4, lr}
 8003e64:	4604      	mov	r4, r0
 8003e66:	e9c0 3300 	strd	r3, r3, [r0]
 8003e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e6e:	6083      	str	r3, [r0, #8]
 8003e70:	8181      	strh	r1, [r0, #12]
 8003e72:	6643      	str	r3, [r0, #100]	; 0x64
 8003e74:	81c2      	strh	r2, [r0, #14]
 8003e76:	6183      	str	r3, [r0, #24]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	305c      	adds	r0, #92	; 0x5c
 8003e7e:	f7ff fdd7 	bl	8003a30 <memset>
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <std+0x38>)
 8003e84:	6263      	str	r3, [r4, #36]	; 0x24
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <std+0x3c>)
 8003e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <std+0x40>)
 8003e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <std+0x44>)
 8003e90:	6224      	str	r4, [r4, #32]
 8003e92:	6323      	str	r3, [r4, #48]	; 0x30
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	bf00      	nop
 8003e98:	08004869 	.word	0x08004869
 8003e9c:	0800488b 	.word	0x0800488b
 8003ea0:	080048c3 	.word	0x080048c3
 8003ea4:	080048e7 	.word	0x080048e7

08003ea8 <_cleanup_r>:
 8003ea8:	4901      	ldr	r1, [pc, #4]	; (8003eb0 <_cleanup_r+0x8>)
 8003eaa:	f000 b8af 	b.w	800400c <_fwalk_reent>
 8003eae:	bf00      	nop
 8003eb0:	08003de9 	.word	0x08003de9

08003eb4 <__sfmoreglue>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	1e4a      	subs	r2, r1, #1
 8003eb8:	2568      	movs	r5, #104	; 0x68
 8003eba:	4355      	muls	r5, r2
 8003ebc:	460e      	mov	r6, r1
 8003ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ec2:	f000 f979 	bl	80041b8 <_malloc_r>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	b140      	cbz	r0, 8003edc <__sfmoreglue+0x28>
 8003eca:	2100      	movs	r1, #0
 8003ecc:	e9c0 1600 	strd	r1, r6, [r0]
 8003ed0:	300c      	adds	r0, #12
 8003ed2:	60a0      	str	r0, [r4, #8]
 8003ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ed8:	f7ff fdaa 	bl	8003a30 <memset>
 8003edc:	4620      	mov	r0, r4
 8003ede:	bd70      	pop	{r4, r5, r6, pc}

08003ee0 <__sfp_lock_acquire>:
 8003ee0:	4801      	ldr	r0, [pc, #4]	; (8003ee8 <__sfp_lock_acquire+0x8>)
 8003ee2:	f000 b8b3 	b.w	800404c <__retarget_lock_acquire_recursive>
 8003ee6:	bf00      	nop
 8003ee8:	200005e0 	.word	0x200005e0

08003eec <__sfp_lock_release>:
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <__sfp_lock_release+0x8>)
 8003eee:	f000 b8ae 	b.w	800404e <__retarget_lock_release_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	200005e0 	.word	0x200005e0

08003ef8 <__sinit_lock_acquire>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <__sinit_lock_acquire+0x8>)
 8003efa:	f000 b8a7 	b.w	800404c <__retarget_lock_acquire_recursive>
 8003efe:	bf00      	nop
 8003f00:	200005db 	.word	0x200005db

08003f04 <__sinit_lock_release>:
 8003f04:	4801      	ldr	r0, [pc, #4]	; (8003f0c <__sinit_lock_release+0x8>)
 8003f06:	f000 b8a2 	b.w	800404e <__retarget_lock_release_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	200005db 	.word	0x200005db

08003f10 <__sinit>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	f7ff fff0 	bl	8003ef8 <__sinit_lock_acquire>
 8003f18:	69a3      	ldr	r3, [r4, #24]
 8003f1a:	b11b      	cbz	r3, 8003f24 <__sinit+0x14>
 8003f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f20:	f7ff bff0 	b.w	8003f04 <__sinit_lock_release>
 8003f24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f28:	6523      	str	r3, [r4, #80]	; 0x50
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <__sinit+0x68>)
 8003f2c:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <__sinit+0x6c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f32:	42a3      	cmp	r3, r4
 8003f34:	bf04      	itt	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	61a3      	streq	r3, [r4, #24]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 f820 	bl	8003f80 <__sfp>
 8003f40:	6060      	str	r0, [r4, #4]
 8003f42:	4620      	mov	r0, r4
 8003f44:	f000 f81c 	bl	8003f80 <__sfp>
 8003f48:	60a0      	str	r0, [r4, #8]
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 f818 	bl	8003f80 <__sfp>
 8003f50:	2200      	movs	r2, #0
 8003f52:	60e0      	str	r0, [r4, #12]
 8003f54:	2104      	movs	r1, #4
 8003f56:	6860      	ldr	r0, [r4, #4]
 8003f58:	f7ff ff82 	bl	8003e60 <std>
 8003f5c:	68a0      	ldr	r0, [r4, #8]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2109      	movs	r1, #9
 8003f62:	f7ff ff7d 	bl	8003e60 <std>
 8003f66:	68e0      	ldr	r0, [r4, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	2112      	movs	r1, #18
 8003f6c:	f7ff ff78 	bl	8003e60 <std>
 8003f70:	2301      	movs	r3, #1
 8003f72:	61a3      	str	r3, [r4, #24]
 8003f74:	e7d2      	b.n	8003f1c <__sinit+0xc>
 8003f76:	bf00      	nop
 8003f78:	08004c14 	.word	0x08004c14
 8003f7c:	08003ea9 	.word	0x08003ea9

08003f80 <__sfp>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	4607      	mov	r7, r0
 8003f84:	f7ff ffac 	bl	8003ee0 <__sfp_lock_acquire>
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <__sfp+0x84>)
 8003f8a:	681e      	ldr	r6, [r3, #0]
 8003f8c:	69b3      	ldr	r3, [r6, #24]
 8003f8e:	b913      	cbnz	r3, 8003f96 <__sfp+0x16>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffbd 	bl	8003f10 <__sinit>
 8003f96:	3648      	adds	r6, #72	; 0x48
 8003f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	d503      	bpl.n	8003fa8 <__sfp+0x28>
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	b30b      	cbz	r3, 8003fe8 <__sfp+0x68>
 8003fa4:	6836      	ldr	r6, [r6, #0]
 8003fa6:	e7f7      	b.n	8003f98 <__sfp+0x18>
 8003fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fac:	b9d5      	cbnz	r5, 8003fe4 <__sfp+0x64>
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <__sfp+0x88>)
 8003fb0:	60e3      	str	r3, [r4, #12]
 8003fb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fb6:	6665      	str	r5, [r4, #100]	; 0x64
 8003fb8:	f000 f847 	bl	800404a <__retarget_lock_init_recursive>
 8003fbc:	f7ff ff96 	bl	8003eec <__sfp_lock_release>
 8003fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fc8:	6025      	str	r5, [r4, #0]
 8003fca:	61a5      	str	r5, [r4, #24]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fd4:	f7ff fd2c 	bl	8003a30 <memset>
 8003fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe4:	3468      	adds	r4, #104	; 0x68
 8003fe6:	e7d9      	b.n	8003f9c <__sfp+0x1c>
 8003fe8:	2104      	movs	r1, #4
 8003fea:	4638      	mov	r0, r7
 8003fec:	f7ff ff62 	bl	8003eb4 <__sfmoreglue>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	6030      	str	r0, [r6, #0]
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d1d5      	bne.n	8003fa4 <__sfp+0x24>
 8003ff8:	f7ff ff78 	bl	8003eec <__sfp_lock_release>
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	e7ee      	b.n	8003fe0 <__sfp+0x60>
 8004002:	bf00      	nop
 8004004:	08004c14 	.word	0x08004c14
 8004008:	ffff0001 	.word	0xffff0001

0800400c <_fwalk_reent>:
 800400c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004010:	4606      	mov	r6, r0
 8004012:	4688      	mov	r8, r1
 8004014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004018:	2700      	movs	r7, #0
 800401a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800401e:	f1b9 0901 	subs.w	r9, r9, #1
 8004022:	d505      	bpl.n	8004030 <_fwalk_reent+0x24>
 8004024:	6824      	ldr	r4, [r4, #0]
 8004026:	2c00      	cmp	r4, #0
 8004028:	d1f7      	bne.n	800401a <_fwalk_reent+0xe>
 800402a:	4638      	mov	r0, r7
 800402c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004030:	89ab      	ldrh	r3, [r5, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d907      	bls.n	8004046 <_fwalk_reent+0x3a>
 8004036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800403a:	3301      	adds	r3, #1
 800403c:	d003      	beq.n	8004046 <_fwalk_reent+0x3a>
 800403e:	4629      	mov	r1, r5
 8004040:	4630      	mov	r0, r6
 8004042:	47c0      	blx	r8
 8004044:	4307      	orrs	r7, r0
 8004046:	3568      	adds	r5, #104	; 0x68
 8004048:	e7e9      	b.n	800401e <_fwalk_reent+0x12>

0800404a <__retarget_lock_init_recursive>:
 800404a:	4770      	bx	lr

0800404c <__retarget_lock_acquire_recursive>:
 800404c:	4770      	bx	lr

0800404e <__retarget_lock_release_recursive>:
 800404e:	4770      	bx	lr

08004050 <__swhatbuf_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	460e      	mov	r6, r1
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	2900      	cmp	r1, #0
 800405a:	b096      	sub	sp, #88	; 0x58
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	da07      	bge.n	8004072 <__swhatbuf_r+0x22>
 8004062:	2300      	movs	r3, #0
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	89b3      	ldrh	r3, [r6, #12]
 8004068:	061a      	lsls	r2, r3, #24
 800406a:	d410      	bmi.n	800408e <__swhatbuf_r+0x3e>
 800406c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004070:	e00e      	b.n	8004090 <__swhatbuf_r+0x40>
 8004072:	466a      	mov	r2, sp
 8004074:	f000 fc5e 	bl	8004934 <_fstat_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	dbf2      	blt.n	8004062 <__swhatbuf_r+0x12>
 800407c:	9a01      	ldr	r2, [sp, #4]
 800407e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004082:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004086:	425a      	negs	r2, r3
 8004088:	415a      	adcs	r2, r3
 800408a:	602a      	str	r2, [r5, #0]
 800408c:	e7ee      	b.n	800406c <__swhatbuf_r+0x1c>
 800408e:	2340      	movs	r3, #64	; 0x40
 8004090:	2000      	movs	r0, #0
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	b016      	add	sp, #88	; 0x58
 8004096:	bd70      	pop	{r4, r5, r6, pc}

08004098 <__smakebuf_r>:
 8004098:	898b      	ldrh	r3, [r1, #12]
 800409a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800409c:	079d      	lsls	r5, r3, #30
 800409e:	4606      	mov	r6, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	d507      	bpl.n	80040b4 <__smakebuf_r+0x1c>
 80040a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	2301      	movs	r3, #1
 80040ae:	6163      	str	r3, [r4, #20]
 80040b0:	b002      	add	sp, #8
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	ab01      	add	r3, sp, #4
 80040b6:	466a      	mov	r2, sp
 80040b8:	f7ff ffca 	bl	8004050 <__swhatbuf_r>
 80040bc:	9900      	ldr	r1, [sp, #0]
 80040be:	4605      	mov	r5, r0
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 f879 	bl	80041b8 <_malloc_r>
 80040c6:	b948      	cbnz	r0, 80040dc <__smakebuf_r+0x44>
 80040c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040cc:	059a      	lsls	r2, r3, #22
 80040ce:	d4ef      	bmi.n	80040b0 <__smakebuf_r+0x18>
 80040d0:	f023 0303 	bic.w	r3, r3, #3
 80040d4:	f043 0302 	orr.w	r3, r3, #2
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	e7e3      	b.n	80040a4 <__smakebuf_r+0xc>
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <__smakebuf_r+0x7c>)
 80040de:	62b3      	str	r3, [r6, #40]	; 0x28
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	6020      	str	r0, [r4, #0]
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	9b00      	ldr	r3, [sp, #0]
 80040ec:	6163      	str	r3, [r4, #20]
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	6120      	str	r0, [r4, #16]
 80040f2:	b15b      	cbz	r3, 800410c <__smakebuf_r+0x74>
 80040f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f8:	4630      	mov	r0, r6
 80040fa:	f000 fc2d 	bl	8004958 <_isatty_r>
 80040fe:	b128      	cbz	r0, 800410c <__smakebuf_r+0x74>
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	89a0      	ldrh	r0, [r4, #12]
 800410e:	4305      	orrs	r5, r0
 8004110:	81a5      	strh	r5, [r4, #12]
 8004112:	e7cd      	b.n	80040b0 <__smakebuf_r+0x18>
 8004114:	08003ea9 	.word	0x08003ea9

08004118 <_free_r>:
 8004118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800411a:	2900      	cmp	r1, #0
 800411c:	d048      	beq.n	80041b0 <_free_r+0x98>
 800411e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004122:	9001      	str	r0, [sp, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f1a1 0404 	sub.w	r4, r1, #4
 800412a:	bfb8      	it	lt
 800412c:	18e4      	addlt	r4, r4, r3
 800412e:	f000 fc35 	bl	800499c <__malloc_lock>
 8004132:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <_free_r+0x9c>)
 8004134:	9801      	ldr	r0, [sp, #4]
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	4615      	mov	r5, r2
 800413a:	b933      	cbnz	r3, 800414a <_free_r+0x32>
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6014      	str	r4, [r2, #0]
 8004140:	b003      	add	sp, #12
 8004142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004146:	f000 bc2f 	b.w	80049a8 <__malloc_unlock>
 800414a:	42a3      	cmp	r3, r4
 800414c:	d90b      	bls.n	8004166 <_free_r+0x4e>
 800414e:	6821      	ldr	r1, [r4, #0]
 8004150:	1862      	adds	r2, r4, r1
 8004152:	4293      	cmp	r3, r2
 8004154:	bf04      	itt	eq
 8004156:	681a      	ldreq	r2, [r3, #0]
 8004158:	685b      	ldreq	r3, [r3, #4]
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	bf04      	itt	eq
 800415e:	1852      	addeq	r2, r2, r1
 8004160:	6022      	streq	r2, [r4, #0]
 8004162:	602c      	str	r4, [r5, #0]
 8004164:	e7ec      	b.n	8004140 <_free_r+0x28>
 8004166:	461a      	mov	r2, r3
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b10b      	cbz	r3, 8004170 <_free_r+0x58>
 800416c:	42a3      	cmp	r3, r4
 800416e:	d9fa      	bls.n	8004166 <_free_r+0x4e>
 8004170:	6811      	ldr	r1, [r2, #0]
 8004172:	1855      	adds	r5, r2, r1
 8004174:	42a5      	cmp	r5, r4
 8004176:	d10b      	bne.n	8004190 <_free_r+0x78>
 8004178:	6824      	ldr	r4, [r4, #0]
 800417a:	4421      	add	r1, r4
 800417c:	1854      	adds	r4, r2, r1
 800417e:	42a3      	cmp	r3, r4
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	d1dd      	bne.n	8004140 <_free_r+0x28>
 8004184:	681c      	ldr	r4, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	6053      	str	r3, [r2, #4]
 800418a:	4421      	add	r1, r4
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	e7d7      	b.n	8004140 <_free_r+0x28>
 8004190:	d902      	bls.n	8004198 <_free_r+0x80>
 8004192:	230c      	movs	r3, #12
 8004194:	6003      	str	r3, [r0, #0]
 8004196:	e7d3      	b.n	8004140 <_free_r+0x28>
 8004198:	6825      	ldr	r5, [r4, #0]
 800419a:	1961      	adds	r1, r4, r5
 800419c:	428b      	cmp	r3, r1
 800419e:	bf04      	itt	eq
 80041a0:	6819      	ldreq	r1, [r3, #0]
 80041a2:	685b      	ldreq	r3, [r3, #4]
 80041a4:	6063      	str	r3, [r4, #4]
 80041a6:	bf04      	itt	eq
 80041a8:	1949      	addeq	r1, r1, r5
 80041aa:	6021      	streq	r1, [r4, #0]
 80041ac:	6054      	str	r4, [r2, #4]
 80041ae:	e7c7      	b.n	8004140 <_free_r+0x28>
 80041b0:	b003      	add	sp, #12
 80041b2:	bd30      	pop	{r4, r5, pc}
 80041b4:	200004a8 	.word	0x200004a8

080041b8 <_malloc_r>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	1ccd      	adds	r5, r1, #3
 80041bc:	f025 0503 	bic.w	r5, r5, #3
 80041c0:	3508      	adds	r5, #8
 80041c2:	2d0c      	cmp	r5, #12
 80041c4:	bf38      	it	cc
 80041c6:	250c      	movcc	r5, #12
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	4606      	mov	r6, r0
 80041cc:	db01      	blt.n	80041d2 <_malloc_r+0x1a>
 80041ce:	42a9      	cmp	r1, r5
 80041d0:	d903      	bls.n	80041da <_malloc_r+0x22>
 80041d2:	230c      	movs	r3, #12
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	2000      	movs	r0, #0
 80041d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041da:	f000 fbdf 	bl	800499c <__malloc_lock>
 80041de:	4921      	ldr	r1, [pc, #132]	; (8004264 <_malloc_r+0xac>)
 80041e0:	680a      	ldr	r2, [r1, #0]
 80041e2:	4614      	mov	r4, r2
 80041e4:	b99c      	cbnz	r4, 800420e <_malloc_r+0x56>
 80041e6:	4f20      	ldr	r7, [pc, #128]	; (8004268 <_malloc_r+0xb0>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b923      	cbnz	r3, 80041f6 <_malloc_r+0x3e>
 80041ec:	4621      	mov	r1, r4
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 fb2a 	bl	8004848 <_sbrk_r>
 80041f4:	6038      	str	r0, [r7, #0]
 80041f6:	4629      	mov	r1, r5
 80041f8:	4630      	mov	r0, r6
 80041fa:	f000 fb25 	bl	8004848 <_sbrk_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d123      	bne.n	800424a <_malloc_r+0x92>
 8004202:	230c      	movs	r3, #12
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	4630      	mov	r0, r6
 8004208:	f000 fbce 	bl	80049a8 <__malloc_unlock>
 800420c:	e7e3      	b.n	80041d6 <_malloc_r+0x1e>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	1b5b      	subs	r3, r3, r5
 8004212:	d417      	bmi.n	8004244 <_malloc_r+0x8c>
 8004214:	2b0b      	cmp	r3, #11
 8004216:	d903      	bls.n	8004220 <_malloc_r+0x68>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	441c      	add	r4, r3
 800421c:	6025      	str	r5, [r4, #0]
 800421e:	e004      	b.n	800422a <_malloc_r+0x72>
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	42a2      	cmp	r2, r4
 8004224:	bf0c      	ite	eq
 8004226:	600b      	streq	r3, [r1, #0]
 8004228:	6053      	strne	r3, [r2, #4]
 800422a:	4630      	mov	r0, r6
 800422c:	f000 fbbc 	bl	80049a8 <__malloc_unlock>
 8004230:	f104 000b 	add.w	r0, r4, #11
 8004234:	1d23      	adds	r3, r4, #4
 8004236:	f020 0007 	bic.w	r0, r0, #7
 800423a:	1ac2      	subs	r2, r0, r3
 800423c:	d0cc      	beq.n	80041d8 <_malloc_r+0x20>
 800423e:	1a1b      	subs	r3, r3, r0
 8004240:	50a3      	str	r3, [r4, r2]
 8004242:	e7c9      	b.n	80041d8 <_malloc_r+0x20>
 8004244:	4622      	mov	r2, r4
 8004246:	6864      	ldr	r4, [r4, #4]
 8004248:	e7cc      	b.n	80041e4 <_malloc_r+0x2c>
 800424a:	1cc4      	adds	r4, r0, #3
 800424c:	f024 0403 	bic.w	r4, r4, #3
 8004250:	42a0      	cmp	r0, r4
 8004252:	d0e3      	beq.n	800421c <_malloc_r+0x64>
 8004254:	1a21      	subs	r1, r4, r0
 8004256:	4630      	mov	r0, r6
 8004258:	f000 faf6 	bl	8004848 <_sbrk_r>
 800425c:	3001      	adds	r0, #1
 800425e:	d1dd      	bne.n	800421c <_malloc_r+0x64>
 8004260:	e7cf      	b.n	8004202 <_malloc_r+0x4a>
 8004262:	bf00      	nop
 8004264:	200004a8 	.word	0x200004a8
 8004268:	200004ac 	.word	0x200004ac

0800426c <__sfputc_r>:
 800426c:	6893      	ldr	r3, [r2, #8]
 800426e:	3b01      	subs	r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	b410      	push	{r4}
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	da08      	bge.n	800428a <__sfputc_r+0x1e>
 8004278:	6994      	ldr	r4, [r2, #24]
 800427a:	42a3      	cmp	r3, r4
 800427c:	db01      	blt.n	8004282 <__sfputc_r+0x16>
 800427e:	290a      	cmp	r1, #10
 8004280:	d103      	bne.n	800428a <__sfputc_r+0x1e>
 8004282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004286:	f7ff bc69 	b.w	8003b5c <__swbuf_r>
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	1c58      	adds	r0, r3, #1
 800428e:	6010      	str	r0, [r2, #0]
 8004290:	7019      	strb	r1, [r3, #0]
 8004292:	4608      	mov	r0, r1
 8004294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004298:	4770      	bx	lr

0800429a <__sfputs_r>:
 800429a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429c:	4606      	mov	r6, r0
 800429e:	460f      	mov	r7, r1
 80042a0:	4614      	mov	r4, r2
 80042a2:	18d5      	adds	r5, r2, r3
 80042a4:	42ac      	cmp	r4, r5
 80042a6:	d101      	bne.n	80042ac <__sfputs_r+0x12>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e007      	b.n	80042bc <__sfputs_r+0x22>
 80042ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b0:	463a      	mov	r2, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7ff ffda 	bl	800426c <__sfputc_r>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d1f3      	bne.n	80042a4 <__sfputs_r+0xa>
 80042bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042c0 <_vfiprintf_r>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	460d      	mov	r5, r1
 80042c6:	b09d      	sub	sp, #116	; 0x74
 80042c8:	4614      	mov	r4, r2
 80042ca:	4698      	mov	r8, r3
 80042cc:	4606      	mov	r6, r0
 80042ce:	b118      	cbz	r0, 80042d8 <_vfiprintf_r+0x18>
 80042d0:	6983      	ldr	r3, [r0, #24]
 80042d2:	b90b      	cbnz	r3, 80042d8 <_vfiprintf_r+0x18>
 80042d4:	f7ff fe1c 	bl	8003f10 <__sinit>
 80042d8:	4b89      	ldr	r3, [pc, #548]	; (8004500 <_vfiprintf_r+0x240>)
 80042da:	429d      	cmp	r5, r3
 80042dc:	d11b      	bne.n	8004316 <_vfiprintf_r+0x56>
 80042de:	6875      	ldr	r5, [r6, #4]
 80042e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042e2:	07d9      	lsls	r1, r3, #31
 80042e4:	d405      	bmi.n	80042f2 <_vfiprintf_r+0x32>
 80042e6:	89ab      	ldrh	r3, [r5, #12]
 80042e8:	059a      	lsls	r2, r3, #22
 80042ea:	d402      	bmi.n	80042f2 <_vfiprintf_r+0x32>
 80042ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ee:	f7ff fead 	bl	800404c <__retarget_lock_acquire_recursive>
 80042f2:	89ab      	ldrh	r3, [r5, #12]
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	d501      	bpl.n	80042fc <_vfiprintf_r+0x3c>
 80042f8:	692b      	ldr	r3, [r5, #16]
 80042fa:	b9eb      	cbnz	r3, 8004338 <_vfiprintf_r+0x78>
 80042fc:	4629      	mov	r1, r5
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff fc7e 	bl	8003c00 <__swsetup_r>
 8004304:	b1c0      	cbz	r0, 8004338 <_vfiprintf_r+0x78>
 8004306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004308:	07dc      	lsls	r4, r3, #31
 800430a:	d50e      	bpl.n	800432a <_vfiprintf_r+0x6a>
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	b01d      	add	sp, #116	; 0x74
 8004312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004316:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <_vfiprintf_r+0x244>)
 8004318:	429d      	cmp	r5, r3
 800431a:	d101      	bne.n	8004320 <_vfiprintf_r+0x60>
 800431c:	68b5      	ldr	r5, [r6, #8]
 800431e:	e7df      	b.n	80042e0 <_vfiprintf_r+0x20>
 8004320:	4b79      	ldr	r3, [pc, #484]	; (8004508 <_vfiprintf_r+0x248>)
 8004322:	429d      	cmp	r5, r3
 8004324:	bf08      	it	eq
 8004326:	68f5      	ldreq	r5, [r6, #12]
 8004328:	e7da      	b.n	80042e0 <_vfiprintf_r+0x20>
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	0598      	lsls	r0, r3, #22
 800432e:	d4ed      	bmi.n	800430c <_vfiprintf_r+0x4c>
 8004330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004332:	f7ff fe8c 	bl	800404e <__retarget_lock_release_recursive>
 8004336:	e7e9      	b.n	800430c <_vfiprintf_r+0x4c>
 8004338:	2300      	movs	r3, #0
 800433a:	9309      	str	r3, [sp, #36]	; 0x24
 800433c:	2320      	movs	r3, #32
 800433e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004342:	f8cd 800c 	str.w	r8, [sp, #12]
 8004346:	2330      	movs	r3, #48	; 0x30
 8004348:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800450c <_vfiprintf_r+0x24c>
 800434c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004350:	f04f 0901 	mov.w	r9, #1
 8004354:	4623      	mov	r3, r4
 8004356:	469a      	mov	sl, r3
 8004358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800435c:	b10a      	cbz	r2, 8004362 <_vfiprintf_r+0xa2>
 800435e:	2a25      	cmp	r2, #37	; 0x25
 8004360:	d1f9      	bne.n	8004356 <_vfiprintf_r+0x96>
 8004362:	ebba 0b04 	subs.w	fp, sl, r4
 8004366:	d00b      	beq.n	8004380 <_vfiprintf_r+0xc0>
 8004368:	465b      	mov	r3, fp
 800436a:	4622      	mov	r2, r4
 800436c:	4629      	mov	r1, r5
 800436e:	4630      	mov	r0, r6
 8004370:	f7ff ff93 	bl	800429a <__sfputs_r>
 8004374:	3001      	adds	r0, #1
 8004376:	f000 80aa 	beq.w	80044ce <_vfiprintf_r+0x20e>
 800437a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800437c:	445a      	add	r2, fp
 800437e:	9209      	str	r2, [sp, #36]	; 0x24
 8004380:	f89a 3000 	ldrb.w	r3, [sl]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a2 	beq.w	80044ce <_vfiprintf_r+0x20e>
 800438a:	2300      	movs	r3, #0
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004394:	f10a 0a01 	add.w	sl, sl, #1
 8004398:	9304      	str	r3, [sp, #16]
 800439a:	9307      	str	r3, [sp, #28]
 800439c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043a0:	931a      	str	r3, [sp, #104]	; 0x68
 80043a2:	4654      	mov	r4, sl
 80043a4:	2205      	movs	r2, #5
 80043a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043aa:	4858      	ldr	r0, [pc, #352]	; (800450c <_vfiprintf_r+0x24c>)
 80043ac:	f7fb ff48 	bl	8000240 <memchr>
 80043b0:	9a04      	ldr	r2, [sp, #16]
 80043b2:	b9d8      	cbnz	r0, 80043ec <_vfiprintf_r+0x12c>
 80043b4:	06d1      	lsls	r1, r2, #27
 80043b6:	bf44      	itt	mi
 80043b8:	2320      	movmi	r3, #32
 80043ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043be:	0713      	lsls	r3, r2, #28
 80043c0:	bf44      	itt	mi
 80043c2:	232b      	movmi	r3, #43	; 0x2b
 80043c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c8:	f89a 3000 	ldrb.w	r3, [sl]
 80043cc:	2b2a      	cmp	r3, #42	; 0x2a
 80043ce:	d015      	beq.n	80043fc <_vfiprintf_r+0x13c>
 80043d0:	9a07      	ldr	r2, [sp, #28]
 80043d2:	4654      	mov	r4, sl
 80043d4:	2000      	movs	r0, #0
 80043d6:	f04f 0c0a 	mov.w	ip, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043e0:	3b30      	subs	r3, #48	; 0x30
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	d94e      	bls.n	8004484 <_vfiprintf_r+0x1c4>
 80043e6:	b1b0      	cbz	r0, 8004416 <_vfiprintf_r+0x156>
 80043e8:	9207      	str	r2, [sp, #28]
 80043ea:	e014      	b.n	8004416 <_vfiprintf_r+0x156>
 80043ec:	eba0 0308 	sub.w	r3, r0, r8
 80043f0:	fa09 f303 	lsl.w	r3, r9, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	9304      	str	r3, [sp, #16]
 80043f8:	46a2      	mov	sl, r4
 80043fa:	e7d2      	b.n	80043a2 <_vfiprintf_r+0xe2>
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	1d19      	adds	r1, r3, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	9103      	str	r1, [sp, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	bfbb      	ittet	lt
 8004408:	425b      	neglt	r3, r3
 800440a:	f042 0202 	orrlt.w	r2, r2, #2
 800440e:	9307      	strge	r3, [sp, #28]
 8004410:	9307      	strlt	r3, [sp, #28]
 8004412:	bfb8      	it	lt
 8004414:	9204      	strlt	r2, [sp, #16]
 8004416:	7823      	ldrb	r3, [r4, #0]
 8004418:	2b2e      	cmp	r3, #46	; 0x2e
 800441a:	d10c      	bne.n	8004436 <_vfiprintf_r+0x176>
 800441c:	7863      	ldrb	r3, [r4, #1]
 800441e:	2b2a      	cmp	r3, #42	; 0x2a
 8004420:	d135      	bne.n	800448e <_vfiprintf_r+0x1ce>
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	1d1a      	adds	r2, r3, #4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	9203      	str	r2, [sp, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	bfb8      	it	lt
 800442e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004432:	3402      	adds	r4, #2
 8004434:	9305      	str	r3, [sp, #20]
 8004436:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800451c <_vfiprintf_r+0x25c>
 800443a:	7821      	ldrb	r1, [r4, #0]
 800443c:	2203      	movs	r2, #3
 800443e:	4650      	mov	r0, sl
 8004440:	f7fb fefe 	bl	8000240 <memchr>
 8004444:	b140      	cbz	r0, 8004458 <_vfiprintf_r+0x198>
 8004446:	2340      	movs	r3, #64	; 0x40
 8004448:	eba0 000a 	sub.w	r0, r0, sl
 800444c:	fa03 f000 	lsl.w	r0, r3, r0
 8004450:	9b04      	ldr	r3, [sp, #16]
 8004452:	4303      	orrs	r3, r0
 8004454:	3401      	adds	r4, #1
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445c:	482c      	ldr	r0, [pc, #176]	; (8004510 <_vfiprintf_r+0x250>)
 800445e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004462:	2206      	movs	r2, #6
 8004464:	f7fb feec 	bl	8000240 <memchr>
 8004468:	2800      	cmp	r0, #0
 800446a:	d03f      	beq.n	80044ec <_vfiprintf_r+0x22c>
 800446c:	4b29      	ldr	r3, [pc, #164]	; (8004514 <_vfiprintf_r+0x254>)
 800446e:	bb1b      	cbnz	r3, 80044b8 <_vfiprintf_r+0x1f8>
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	3307      	adds	r3, #7
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	3308      	adds	r3, #8
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447e:	443b      	add	r3, r7
 8004480:	9309      	str	r3, [sp, #36]	; 0x24
 8004482:	e767      	b.n	8004354 <_vfiprintf_r+0x94>
 8004484:	fb0c 3202 	mla	r2, ip, r2, r3
 8004488:	460c      	mov	r4, r1
 800448a:	2001      	movs	r0, #1
 800448c:	e7a5      	b.n	80043da <_vfiprintf_r+0x11a>
 800448e:	2300      	movs	r3, #0
 8004490:	3401      	adds	r4, #1
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	4619      	mov	r1, r3
 8004496:	f04f 0c0a 	mov.w	ip, #10
 800449a:	4620      	mov	r0, r4
 800449c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a0:	3a30      	subs	r2, #48	; 0x30
 80044a2:	2a09      	cmp	r2, #9
 80044a4:	d903      	bls.n	80044ae <_vfiprintf_r+0x1ee>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0c5      	beq.n	8004436 <_vfiprintf_r+0x176>
 80044aa:	9105      	str	r1, [sp, #20]
 80044ac:	e7c3      	b.n	8004436 <_vfiprintf_r+0x176>
 80044ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b2:	4604      	mov	r4, r0
 80044b4:	2301      	movs	r3, #1
 80044b6:	e7f0      	b.n	800449a <_vfiprintf_r+0x1da>
 80044b8:	ab03      	add	r3, sp, #12
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	462a      	mov	r2, r5
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <_vfiprintf_r+0x258>)
 80044c0:	a904      	add	r1, sp, #16
 80044c2:	4630      	mov	r0, r6
 80044c4:	f3af 8000 	nop.w
 80044c8:	4607      	mov	r7, r0
 80044ca:	1c78      	adds	r0, r7, #1
 80044cc:	d1d6      	bne.n	800447c <_vfiprintf_r+0x1bc>
 80044ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d0:	07d9      	lsls	r1, r3, #31
 80044d2:	d405      	bmi.n	80044e0 <_vfiprintf_r+0x220>
 80044d4:	89ab      	ldrh	r3, [r5, #12]
 80044d6:	059a      	lsls	r2, r3, #22
 80044d8:	d402      	bmi.n	80044e0 <_vfiprintf_r+0x220>
 80044da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044dc:	f7ff fdb7 	bl	800404e <__retarget_lock_release_recursive>
 80044e0:	89ab      	ldrh	r3, [r5, #12]
 80044e2:	065b      	lsls	r3, r3, #25
 80044e4:	f53f af12 	bmi.w	800430c <_vfiprintf_r+0x4c>
 80044e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ea:	e711      	b.n	8004310 <_vfiprintf_r+0x50>
 80044ec:	ab03      	add	r3, sp, #12
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	462a      	mov	r2, r5
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <_vfiprintf_r+0x258>)
 80044f4:	a904      	add	r1, sp, #16
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f880 	bl	80045fc <_printf_i>
 80044fc:	e7e4      	b.n	80044c8 <_vfiprintf_r+0x208>
 80044fe:	bf00      	nop
 8004500:	08004c38 	.word	0x08004c38
 8004504:	08004c58 	.word	0x08004c58
 8004508:	08004c18 	.word	0x08004c18
 800450c:	08004c78 	.word	0x08004c78
 8004510:	08004c82 	.word	0x08004c82
 8004514:	00000000 	.word	0x00000000
 8004518:	0800429b 	.word	0x0800429b
 800451c:	08004c7e 	.word	0x08004c7e

08004520 <_printf_common>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	4616      	mov	r6, r2
 8004526:	4699      	mov	r9, r3
 8004528:	688a      	ldr	r2, [r1, #8]
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004530:	4293      	cmp	r3, r2
 8004532:	bfb8      	it	lt
 8004534:	4613      	movlt	r3, r2
 8004536:	6033      	str	r3, [r6, #0]
 8004538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800453c:	4607      	mov	r7, r0
 800453e:	460c      	mov	r4, r1
 8004540:	b10a      	cbz	r2, 8004546 <_printf_common+0x26>
 8004542:	3301      	adds	r3, #1
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	0699      	lsls	r1, r3, #26
 800454a:	bf42      	ittt	mi
 800454c:	6833      	ldrmi	r3, [r6, #0]
 800454e:	3302      	addmi	r3, #2
 8004550:	6033      	strmi	r3, [r6, #0]
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	f015 0506 	ands.w	r5, r5, #6
 8004558:	d106      	bne.n	8004568 <_printf_common+0x48>
 800455a:	f104 0a19 	add.w	sl, r4, #25
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	6832      	ldr	r2, [r6, #0]
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	42ab      	cmp	r3, r5
 8004566:	dc26      	bgt.n	80045b6 <_printf_common+0x96>
 8004568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800456c:	1e13      	subs	r3, r2, #0
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	bf18      	it	ne
 8004572:	2301      	movne	r3, #1
 8004574:	0692      	lsls	r2, r2, #26
 8004576:	d42b      	bmi.n	80045d0 <_printf_common+0xb0>
 8004578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800457c:	4649      	mov	r1, r9
 800457e:	4638      	mov	r0, r7
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d01e      	beq.n	80045c4 <_printf_common+0xa4>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	68e5      	ldr	r5, [r4, #12]
 800458a:	6832      	ldr	r2, [r6, #0]
 800458c:	f003 0306 	and.w	r3, r3, #6
 8004590:	2b04      	cmp	r3, #4
 8004592:	bf08      	it	eq
 8004594:	1aad      	subeq	r5, r5, r2
 8004596:	68a3      	ldr	r3, [r4, #8]
 8004598:	6922      	ldr	r2, [r4, #16]
 800459a:	bf0c      	ite	eq
 800459c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a0:	2500      	movne	r5, #0
 80045a2:	4293      	cmp	r3, r2
 80045a4:	bfc4      	itt	gt
 80045a6:	1a9b      	subgt	r3, r3, r2
 80045a8:	18ed      	addgt	r5, r5, r3
 80045aa:	2600      	movs	r6, #0
 80045ac:	341a      	adds	r4, #26
 80045ae:	42b5      	cmp	r5, r6
 80045b0:	d11a      	bne.n	80045e8 <_printf_common+0xc8>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e008      	b.n	80045c8 <_printf_common+0xa8>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	4649      	mov	r1, r9
 80045bc:	4638      	mov	r0, r7
 80045be:	47c0      	blx	r8
 80045c0:	3001      	adds	r0, #1
 80045c2:	d103      	bne.n	80045cc <_printf_common+0xac>
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7c6      	b.n	800455e <_printf_common+0x3e>
 80045d0:	18e1      	adds	r1, r4, r3
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	2030      	movs	r0, #48	; 0x30
 80045d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045da:	4422      	add	r2, r4
 80045dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e4:	3302      	adds	r3, #2
 80045e6:	e7c7      	b.n	8004578 <_printf_common+0x58>
 80045e8:	2301      	movs	r3, #1
 80045ea:	4622      	mov	r2, r4
 80045ec:	4649      	mov	r1, r9
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c0      	blx	r8
 80045f2:	3001      	adds	r0, #1
 80045f4:	d0e6      	beq.n	80045c4 <_printf_common+0xa4>
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7d9      	b.n	80045ae <_printf_common+0x8e>
	...

080045fc <_printf_i>:
 80045fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	460c      	mov	r4, r1
 8004602:	4691      	mov	r9, r2
 8004604:	7e27      	ldrb	r7, [r4, #24]
 8004606:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004608:	2f78      	cmp	r7, #120	; 0x78
 800460a:	4680      	mov	r8, r0
 800460c:	469a      	mov	sl, r3
 800460e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004612:	d807      	bhi.n	8004624 <_printf_i+0x28>
 8004614:	2f62      	cmp	r7, #98	; 0x62
 8004616:	d80a      	bhi.n	800462e <_printf_i+0x32>
 8004618:	2f00      	cmp	r7, #0
 800461a:	f000 80d8 	beq.w	80047ce <_printf_i+0x1d2>
 800461e:	2f58      	cmp	r7, #88	; 0x58
 8004620:	f000 80a3 	beq.w	800476a <_printf_i+0x16e>
 8004624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800462c:	e03a      	b.n	80046a4 <_printf_i+0xa8>
 800462e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004632:	2b15      	cmp	r3, #21
 8004634:	d8f6      	bhi.n	8004624 <_printf_i+0x28>
 8004636:	a001      	add	r0, pc, #4	; (adr r0, 800463c <_printf_i+0x40>)
 8004638:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800463c:	08004695 	.word	0x08004695
 8004640:	080046a9 	.word	0x080046a9
 8004644:	08004625 	.word	0x08004625
 8004648:	08004625 	.word	0x08004625
 800464c:	08004625 	.word	0x08004625
 8004650:	08004625 	.word	0x08004625
 8004654:	080046a9 	.word	0x080046a9
 8004658:	08004625 	.word	0x08004625
 800465c:	08004625 	.word	0x08004625
 8004660:	08004625 	.word	0x08004625
 8004664:	08004625 	.word	0x08004625
 8004668:	080047b5 	.word	0x080047b5
 800466c:	080046d9 	.word	0x080046d9
 8004670:	08004797 	.word	0x08004797
 8004674:	08004625 	.word	0x08004625
 8004678:	08004625 	.word	0x08004625
 800467c:	080047d7 	.word	0x080047d7
 8004680:	08004625 	.word	0x08004625
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004625 	.word	0x08004625
 800468c:	08004625 	.word	0x08004625
 8004690:	0800479f 	.word	0x0800479f
 8004694:	680b      	ldr	r3, [r1, #0]
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	600a      	str	r2, [r1, #0]
 800469c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0a3      	b.n	80047f0 <_printf_i+0x1f4>
 80046a8:	6825      	ldr	r5, [r4, #0]
 80046aa:	6808      	ldr	r0, [r1, #0]
 80046ac:	062e      	lsls	r6, r5, #24
 80046ae:	f100 0304 	add.w	r3, r0, #4
 80046b2:	d50a      	bpl.n	80046ca <_printf_i+0xce>
 80046b4:	6805      	ldr	r5, [r0, #0]
 80046b6:	600b      	str	r3, [r1, #0]
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	da03      	bge.n	80046c4 <_printf_i+0xc8>
 80046bc:	232d      	movs	r3, #45	; 0x2d
 80046be:	426d      	negs	r5, r5
 80046c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c4:	485e      	ldr	r0, [pc, #376]	; (8004840 <_printf_i+0x244>)
 80046c6:	230a      	movs	r3, #10
 80046c8:	e019      	b.n	80046fe <_printf_i+0x102>
 80046ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046ce:	6805      	ldr	r5, [r0, #0]
 80046d0:	600b      	str	r3, [r1, #0]
 80046d2:	bf18      	it	ne
 80046d4:	b22d      	sxthne	r5, r5
 80046d6:	e7ef      	b.n	80046b8 <_printf_i+0xbc>
 80046d8:	680b      	ldr	r3, [r1, #0]
 80046da:	6825      	ldr	r5, [r4, #0]
 80046dc:	1d18      	adds	r0, r3, #4
 80046de:	6008      	str	r0, [r1, #0]
 80046e0:	0628      	lsls	r0, r5, #24
 80046e2:	d501      	bpl.n	80046e8 <_printf_i+0xec>
 80046e4:	681d      	ldr	r5, [r3, #0]
 80046e6:	e002      	b.n	80046ee <_printf_i+0xf2>
 80046e8:	0669      	lsls	r1, r5, #25
 80046ea:	d5fb      	bpl.n	80046e4 <_printf_i+0xe8>
 80046ec:	881d      	ldrh	r5, [r3, #0]
 80046ee:	4854      	ldr	r0, [pc, #336]	; (8004840 <_printf_i+0x244>)
 80046f0:	2f6f      	cmp	r7, #111	; 0x6f
 80046f2:	bf0c      	ite	eq
 80046f4:	2308      	moveq	r3, #8
 80046f6:	230a      	movne	r3, #10
 80046f8:	2100      	movs	r1, #0
 80046fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046fe:	6866      	ldr	r6, [r4, #4]
 8004700:	60a6      	str	r6, [r4, #8]
 8004702:	2e00      	cmp	r6, #0
 8004704:	bfa2      	ittt	ge
 8004706:	6821      	ldrge	r1, [r4, #0]
 8004708:	f021 0104 	bicge.w	r1, r1, #4
 800470c:	6021      	strge	r1, [r4, #0]
 800470e:	b90d      	cbnz	r5, 8004714 <_printf_i+0x118>
 8004710:	2e00      	cmp	r6, #0
 8004712:	d04d      	beq.n	80047b0 <_printf_i+0x1b4>
 8004714:	4616      	mov	r6, r2
 8004716:	fbb5 f1f3 	udiv	r1, r5, r3
 800471a:	fb03 5711 	mls	r7, r3, r1, r5
 800471e:	5dc7      	ldrb	r7, [r0, r7]
 8004720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004724:	462f      	mov	r7, r5
 8004726:	42bb      	cmp	r3, r7
 8004728:	460d      	mov	r5, r1
 800472a:	d9f4      	bls.n	8004716 <_printf_i+0x11a>
 800472c:	2b08      	cmp	r3, #8
 800472e:	d10b      	bne.n	8004748 <_printf_i+0x14c>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	07df      	lsls	r7, r3, #31
 8004734:	d508      	bpl.n	8004748 <_printf_i+0x14c>
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	6861      	ldr	r1, [r4, #4]
 800473a:	4299      	cmp	r1, r3
 800473c:	bfde      	ittt	le
 800473e:	2330      	movle	r3, #48	; 0x30
 8004740:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004744:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004748:	1b92      	subs	r2, r2, r6
 800474a:	6122      	str	r2, [r4, #16]
 800474c:	f8cd a000 	str.w	sl, [sp]
 8004750:	464b      	mov	r3, r9
 8004752:	aa03      	add	r2, sp, #12
 8004754:	4621      	mov	r1, r4
 8004756:	4640      	mov	r0, r8
 8004758:	f7ff fee2 	bl	8004520 <_printf_common>
 800475c:	3001      	adds	r0, #1
 800475e:	d14c      	bne.n	80047fa <_printf_i+0x1fe>
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	b004      	add	sp, #16
 8004766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476a:	4835      	ldr	r0, [pc, #212]	; (8004840 <_printf_i+0x244>)
 800476c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	680e      	ldr	r6, [r1, #0]
 8004774:	061f      	lsls	r7, r3, #24
 8004776:	f856 5b04 	ldr.w	r5, [r6], #4
 800477a:	600e      	str	r6, [r1, #0]
 800477c:	d514      	bpl.n	80047a8 <_printf_i+0x1ac>
 800477e:	07d9      	lsls	r1, r3, #31
 8004780:	bf44      	itt	mi
 8004782:	f043 0320 	orrmi.w	r3, r3, #32
 8004786:	6023      	strmi	r3, [r4, #0]
 8004788:	b91d      	cbnz	r5, 8004792 <_printf_i+0x196>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f023 0320 	bic.w	r3, r3, #32
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	2310      	movs	r3, #16
 8004794:	e7b0      	b.n	80046f8 <_printf_i+0xfc>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	f043 0320 	orr.w	r3, r3, #32
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	2378      	movs	r3, #120	; 0x78
 80047a0:	4828      	ldr	r0, [pc, #160]	; (8004844 <_printf_i+0x248>)
 80047a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047a6:	e7e3      	b.n	8004770 <_printf_i+0x174>
 80047a8:	065e      	lsls	r6, r3, #25
 80047aa:	bf48      	it	mi
 80047ac:	b2ad      	uxthmi	r5, r5
 80047ae:	e7e6      	b.n	800477e <_printf_i+0x182>
 80047b0:	4616      	mov	r6, r2
 80047b2:	e7bb      	b.n	800472c <_printf_i+0x130>
 80047b4:	680b      	ldr	r3, [r1, #0]
 80047b6:	6826      	ldr	r6, [r4, #0]
 80047b8:	6960      	ldr	r0, [r4, #20]
 80047ba:	1d1d      	adds	r5, r3, #4
 80047bc:	600d      	str	r5, [r1, #0]
 80047be:	0635      	lsls	r5, r6, #24
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	d501      	bpl.n	80047c8 <_printf_i+0x1cc>
 80047c4:	6018      	str	r0, [r3, #0]
 80047c6:	e002      	b.n	80047ce <_printf_i+0x1d2>
 80047c8:	0671      	lsls	r1, r6, #25
 80047ca:	d5fb      	bpl.n	80047c4 <_printf_i+0x1c8>
 80047cc:	8018      	strh	r0, [r3, #0]
 80047ce:	2300      	movs	r3, #0
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	4616      	mov	r6, r2
 80047d4:	e7ba      	b.n	800474c <_printf_i+0x150>
 80047d6:	680b      	ldr	r3, [r1, #0]
 80047d8:	1d1a      	adds	r2, r3, #4
 80047da:	600a      	str	r2, [r1, #0]
 80047dc:	681e      	ldr	r6, [r3, #0]
 80047de:	6862      	ldr	r2, [r4, #4]
 80047e0:	2100      	movs	r1, #0
 80047e2:	4630      	mov	r0, r6
 80047e4:	f7fb fd2c 	bl	8000240 <memchr>
 80047e8:	b108      	cbz	r0, 80047ee <_printf_i+0x1f2>
 80047ea:	1b80      	subs	r0, r0, r6
 80047ec:	6060      	str	r0, [r4, #4]
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	2300      	movs	r3, #0
 80047f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f8:	e7a8      	b.n	800474c <_printf_i+0x150>
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	4632      	mov	r2, r6
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	47d0      	blx	sl
 8004804:	3001      	adds	r0, #1
 8004806:	d0ab      	beq.n	8004760 <_printf_i+0x164>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	079b      	lsls	r3, r3, #30
 800480c:	d413      	bmi.n	8004836 <_printf_i+0x23a>
 800480e:	68e0      	ldr	r0, [r4, #12]
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	4298      	cmp	r0, r3
 8004814:	bfb8      	it	lt
 8004816:	4618      	movlt	r0, r3
 8004818:	e7a4      	b.n	8004764 <_printf_i+0x168>
 800481a:	2301      	movs	r3, #1
 800481c:	4632      	mov	r2, r6
 800481e:	4649      	mov	r1, r9
 8004820:	4640      	mov	r0, r8
 8004822:	47d0      	blx	sl
 8004824:	3001      	adds	r0, #1
 8004826:	d09b      	beq.n	8004760 <_printf_i+0x164>
 8004828:	3501      	adds	r5, #1
 800482a:	68e3      	ldr	r3, [r4, #12]
 800482c:	9903      	ldr	r1, [sp, #12]
 800482e:	1a5b      	subs	r3, r3, r1
 8004830:	42ab      	cmp	r3, r5
 8004832:	dcf2      	bgt.n	800481a <_printf_i+0x21e>
 8004834:	e7eb      	b.n	800480e <_printf_i+0x212>
 8004836:	2500      	movs	r5, #0
 8004838:	f104 0619 	add.w	r6, r4, #25
 800483c:	e7f5      	b.n	800482a <_printf_i+0x22e>
 800483e:	bf00      	nop
 8004840:	08004c89 	.word	0x08004c89
 8004844:	08004c9a 	.word	0x08004c9a

08004848 <_sbrk_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d06      	ldr	r5, [pc, #24]	; (8004864 <_sbrk_r+0x1c>)
 800484c:	2300      	movs	r3, #0
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	f7fc fc32 	bl	80010bc <_sbrk>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_sbrk_r+0x1a>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_sbrk_r+0x1a>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200005e4 	.word	0x200005e4

08004868 <__sread>:
 8004868:	b510      	push	{r4, lr}
 800486a:	460c      	mov	r4, r1
 800486c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004870:	f000 f8a0 	bl	80049b4 <_read_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	bfab      	itete	ge
 8004878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800487a:	89a3      	ldrhlt	r3, [r4, #12]
 800487c:	181b      	addge	r3, r3, r0
 800487e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004882:	bfac      	ite	ge
 8004884:	6563      	strge	r3, [r4, #84]	; 0x54
 8004886:	81a3      	strhlt	r3, [r4, #12]
 8004888:	bd10      	pop	{r4, pc}

0800488a <__swrite>:
 800488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488e:	461f      	mov	r7, r3
 8004890:	898b      	ldrh	r3, [r1, #12]
 8004892:	05db      	lsls	r3, r3, #23
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	4616      	mov	r6, r2
 800489a:	d505      	bpl.n	80048a8 <__swrite+0x1e>
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2302      	movs	r3, #2
 80048a2:	2200      	movs	r2, #0
 80048a4:	f000 f868 	bl	8004978 <_lseek_r>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	4632      	mov	r2, r6
 80048b6:	463b      	mov	r3, r7
 80048b8:	4628      	mov	r0, r5
 80048ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	f000 b817 	b.w	80048f0 <_write_r>

080048c2 <__sseek>:
 80048c2:	b510      	push	{r4, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ca:	f000 f855 	bl	8004978 <_lseek_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	bf15      	itete	ne
 80048d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048de:	81a3      	strheq	r3, [r4, #12]
 80048e0:	bf18      	it	ne
 80048e2:	81a3      	strhne	r3, [r4, #12]
 80048e4:	bd10      	pop	{r4, pc}

080048e6 <__sclose>:
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 b813 	b.w	8004914 <_close_r>
	...

080048f0 <_write_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d07      	ldr	r5, [pc, #28]	; (8004910 <_write_r+0x20>)
 80048f4:	4604      	mov	r4, r0
 80048f6:	4608      	mov	r0, r1
 80048f8:	4611      	mov	r1, r2
 80048fa:	2200      	movs	r2, #0
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fc fb8b 	bl	800101a <_write>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_write_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_write_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200005e4 	.word	0x200005e4

08004914 <_close_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d06      	ldr	r5, [pc, #24]	; (8004930 <_close_r+0x1c>)
 8004918:	2300      	movs	r3, #0
 800491a:	4604      	mov	r4, r0
 800491c:	4608      	mov	r0, r1
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	f7fc fb97 	bl	8001052 <_close>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_close_r+0x1a>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_close_r+0x1a>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	200005e4 	.word	0x200005e4

08004934 <_fstat_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d07      	ldr	r5, [pc, #28]	; (8004954 <_fstat_r+0x20>)
 8004938:	2300      	movs	r3, #0
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	f7fc fb92 	bl	800106a <_fstat>
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	d102      	bne.n	8004950 <_fstat_r+0x1c>
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	b103      	cbz	r3, 8004950 <_fstat_r+0x1c>
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	bd38      	pop	{r3, r4, r5, pc}
 8004952:	bf00      	nop
 8004954:	200005e4 	.word	0x200005e4

08004958 <_isatty_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d06      	ldr	r5, [pc, #24]	; (8004974 <_isatty_r+0x1c>)
 800495c:	2300      	movs	r3, #0
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	f7fc fb91 	bl	800108a <_isatty>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_isatty_r+0x1a>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_isatty_r+0x1a>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	200005e4 	.word	0x200005e4

08004978 <_lseek_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4d07      	ldr	r5, [pc, #28]	; (8004998 <_lseek_r+0x20>)
 800497c:	4604      	mov	r4, r0
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	2200      	movs	r2, #0
 8004984:	602a      	str	r2, [r5, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	f7fc fb8a 	bl	80010a0 <_lseek>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_lseek_r+0x1e>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_lseek_r+0x1e>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	200005e4 	.word	0x200005e4

0800499c <__malloc_lock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_lock+0x8>)
 800499e:	f7ff bb55 	b.w	800404c <__retarget_lock_acquire_recursive>
 80049a2:	bf00      	nop
 80049a4:	200005dc 	.word	0x200005dc

080049a8 <__malloc_unlock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__malloc_unlock+0x8>)
 80049aa:	f7ff bb50 	b.w	800404e <__retarget_lock_release_recursive>
 80049ae:	bf00      	nop
 80049b0:	200005dc 	.word	0x200005dc

080049b4 <_read_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	; (80049d4 <_read_r+0x20>)
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fc fb0c 	bl	8000fe0 <_read>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_read_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_read_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	200005e4 	.word	0x200005e4

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
