
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d24  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa0c  0800aa0c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa0c  0800aa0c  0001aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa14  0800aa14  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800aa1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb0  2000008c  0800aaa8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d3c  0800aaa8  00020d3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afec  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003903  00000000  00000000  0003b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0003e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b025  00000000  00000000  000407e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161f9  00000000  00000000  0006b805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a57  00000000  00000000  000819fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  001794a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009f0c 	.word	0x08009f0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	08009f0c 	.word	0x08009f0c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <etx_ota_download_and_flash+0x90>)
 80005e4:	f008 fd4c 	bl	8009080 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <etx_ota_download_and_flash+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <etx_ota_download_and_flash+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
  slot_num_to_write    = 0xFFu;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <etx_ota_download_and_flash+0xa4>)
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000606:	f240 4209 	movw	r2, #1033	; 0x409
 800060a:	2100      	movs	r1, #0
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 800060e:	f008 fca9 	bl	8008f64 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 8000612:	f240 4109 	movw	r1, #1033	; 0x409
 8000616:	481a      	ldr	r0, [pc, #104]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 8000618:	f000 fa0c 	bl	8000a34 <etx_receive_chunk>
 800061c:	4603      	mov	r3, r0
 800061e:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <etx_ota_download_and_flash+0x5e>
    {
      ret = etx_process_data( Rx_Buffer, len );
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 800062c:	f000 f82c 	bl	8000688 <etx_process_data>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e001      	b.n	800063a <etx_ota_download_and_flash+0x62>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 8000636:	2301      	movs	r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <etx_ota_download_and_flash+0x76>
    {
      printf("Sending NACK\r\n");
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <etx_ota_download_and_flash+0xac>)
 8000642:	f008 fd1d 	bl	8009080 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fad8 	bl	8000bfc <etx_ota_send_resp>
      break;
 800064c:	e006      	b.n	800065c <etx_ota_download_and_flash+0x84>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fad4 	bl	8000bfc <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1d4      	bne.n	8000606 <etx_ota_download_and_flash+0x2e>

  return ret;
 800065c:	79fb      	ldrb	r3, [r7, #7]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08009f24 	.word	0x08009f24
 800066c:	200004b4 	.word	0x200004b4
 8000670:	200004bc 	.word	0x200004bc
 8000674:	200004b8 	.word	0x200004b8
 8000678:	200004b1 	.word	0x200004b1
 800067c:	200004c0 	.word	0x200004c0
 8000680:	200000a8 	.word	0x200000a8
 8000684:	08009f44 	.word	0x08009f44

08000688 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b09b      	sub	sp, #108	; 0x6c
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000694:	2301      	movs	r3, #1
 8000696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f000 8190 	beq.w	80009c2 <etx_process_data+0x33a>
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 818c 	beq.w	80009c2 <etx_process_data+0x33a>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	65bb      	str	r3, [r7, #88]	; 0x58
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d104      	bne.n	80006c0 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 80006b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	f000 81a8 	beq.w	8000a10 <etx_process_data+0x388>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 80006c0:	4bc1      	ldr	r3, [pc, #772]	; (80009c8 <etx_process_data+0x340>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	f200 8178 	bhi.w	80009ba <etx_process_data+0x332>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <etx_process_data+0x48>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006f3 	.word	0x080006f3
 80006d8:	0800071f 	.word	0x0800071f
 80006dc:	0800076d 	.word	0x0800076d
 80006e0:	08000851 	.word	0x08000851
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006e4:	48b9      	ldr	r0, [pc, #740]	; (80009cc <etx_process_data+0x344>)
 80006e6:	f008 fccb 	bl	8009080 <puts>
        ret = ETX_OTA_EX_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      }
      break;
 80006f0:	e199      	b.n	8000a26 <etx_process_data+0x39e>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f040 818a 	bne.w	8000a14 <etx_process_data+0x38c>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 8000700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 8185 	bne.w	8000a14 <etx_process_data+0x38c>
          {
            printf("Received OTA START Command\r\n");
 800070a:	48b1      	ldr	r0, [pc, #708]	; (80009d0 <etx_process_data+0x348>)
 800070c:	f008 fcb8 	bl	8009080 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000710:	4bad      	ldr	r3, [pc, #692]	; (80009c8 <etx_process_data+0x340>)
 8000712:	2202      	movs	r2, #2
 8000714:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800071c:	e17a      	b.n	8000a14 <etx_process_data+0x38c>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 8000722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	2b02      	cmp	r3, #2
 8000728:	f040 8176 	bne.w	8000a18 <etx_process_data+0x390>
        {
          ota_fw_total_size = header->meta_data.package_size;
 800072c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4aa8      	ldr	r2, [pc, #672]	; (80009d4 <etx_process_data+0x34c>)
 8000732:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 8000734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4aa7      	ldr	r2, [pc, #668]	; (80009d8 <etx_process_data+0x350>)
 800073a:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 800073c:	4ba5      	ldr	r3, [pc, #660]	; (80009d4 <etx_process_data+0x34c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	48a6      	ldr	r0, [pc, #664]	; (80009dc <etx_process_data+0x354>)
 8000744:	f008 fc16 	bl	8008f74 <iprintf>

          //get the slot number
          slot_num_to_write = get_available_slot_number();
 8000748:	f000 fb20 	bl	8000d8c <get_available_slot_number>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <etx_process_data+0x358>)
 8000752:	701a      	strb	r2, [r3, #0]
          if( slot_num_to_write != 0xFF )
 8000754:	4ba2      	ldr	r3, [pc, #648]	; (80009e0 <etx_process_data+0x358>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2bff      	cmp	r3, #255	; 0xff
 800075a:	f000 815d 	beq.w	8000a18 <etx_process_data+0x390>
          {
            ota_state = ETX_OTA_STATE_DATA;
 800075e:	4b9a      	ldr	r3, [pc, #616]	; (80009c8 <etx_process_data+0x340>)
 8000760:	2203      	movs	r2, #3
 8000762:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800076a:	e155      	b.n	8000a18 <etx_process_data+0x390>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
        uint16_t          data_len = data->data_len;
 8000770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000772:	789a      	ldrb	r2, [r3, #2]
 8000774:	78db      	ldrb	r3, [r3, #3]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	4313      	orrs	r3, r2
 800077a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 800077e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	2b01      	cmp	r3, #1
 8000784:	f040 814a 	bne.w	8000a1c <etx_process_data+0x394>
        {
          bool is_first_block = false;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          if( ota_fw_received_size == 0 )
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <etx_process_data+0x35c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d133      	bne.n	80007fe <etx_process_data+0x176>
          {
            //This is the first block
            is_first_block = true;
 8000796:	2301      	movs	r3, #1
 8000798:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

            /* Read the configuration */
            ETX_GNRL_CFG_ cfg;
            memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 800079c:	4b92      	ldr	r3, [pc, #584]	; (80009e8 <etx_process_data+0x360>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	461c      	mov	r4, r3
 80007a2:	f107 060c 	add.w	r6, r7, #12
 80007a6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80007aa:	4635      	mov	r5, r6
 80007ac:	4623      	mov	r3, r4
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	6859      	ldr	r1, [r3, #4]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b8:	3410      	adds	r4, #16
 80007ba:	3610      	adds	r6, #16
 80007bc:	4564      	cmp	r4, ip
 80007be:	d1f4      	bne.n	80007aa <etx_process_data+0x122>
 80007c0:	4632      	mov	r2, r6
 80007c2:	4623      	mov	r3, r4
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	8013      	strh	r3, [r2, #0]

            /* Before writing the data, reset the available slot */
            cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 1u;
 80007c8:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <etx_process_data+0x358>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007dc:	4413      	add	r3, r2
 80007de:	3b58      	subs	r3, #88	; 0x58
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]

            /* write back the updated config */
            ret = write_cfg_to_flash( &cfg );
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fec1 	bl	8001570 <write_cfg_to_flash>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if( ret != ETX_OTA_EX_OK )
 80007f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f040 8111 	bne.w	8000a20 <etx_process_data+0x398>
              break;
            }
          }

          /* write the chunk to the Flash (Slot location) */
          ex = write_data_to_slot( slot_num_to_write, buf+4, data_len, is_first_block );
 80007fe:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <etx_process_data+0x358>)
 8000800:	7818      	ldrb	r0, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	1d19      	adds	r1, r3, #4
 8000806:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800080a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800080e:	f000 fa25 	bl	8000c5c <write_data_to_slot>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

          if( ex == HAL_OK )
 8000818:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800081c:	2b00      	cmp	r3, #0
 800081e:	f040 80fd 	bne.w	8000a1c <etx_process_data+0x394>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000822:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <etx_process_data+0x35c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	0a99      	lsrs	r1, r3, #10
 8000828:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <etx_process_data+0x34c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	0a9b      	lsrs	r3, r3, #10
 800082e:	461a      	mov	r2, r3
 8000830:	486e      	ldr	r0, [pc, #440]	; (80009ec <etx_process_data+0x364>)
 8000832:	f008 fb9f 	bl	8008f74 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <etx_process_data+0x35c>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <etx_process_data+0x34c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d302      	bcc.n	8000848 <etx_process_data+0x1c0>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000842:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <etx_process_data+0x340>)
 8000844:	2204      	movs	r2, #4
 8000846:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800084e:	e0e5      	b.n	8000a1c <etx_process_data+0x394>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	657b      	str	r3, [r7, #84]	; 0x54

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b00      	cmp	r3, #0
 800085a:	f040 80e3 	bne.w	8000a24 <etx_process_data+0x39c>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 800085e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	f040 80de 	bne.w	8000a24 <etx_process_data+0x39c>
          {
            printf("Received OTA END Command\r\n");
 8000868:	4861      	ldr	r0, [pc, #388]	; (80009f0 <etx_process_data+0x368>)
 800086a:	f008 fc09 	bl	8009080 <puts>

            printf("Validating the received Binary...\r\n");
 800086e:	4861      	ldr	r0, [pc, #388]	; (80009f4 <etx_process_data+0x36c>)
 8000870:	f008 fc06 	bl	8009080 <puts>

            uint32_t slot_addr;
            if( slot_num_to_write == 0u )
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <etx_process_data+0x358>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <etx_process_data+0x1fa>
            {
              slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 800087c:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <etx_process_data+0x370>)
 800087e:	663b      	str	r3, [r7, #96]	; 0x60
 8000880:	e001      	b.n	8000886 <etx_process_data+0x1fe>
            }
            else
            {
              slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <etx_process_data+0x374>)
 8000884:	663b      	str	r3, [r7, #96]	; 0x60
            }

            //Calculate and verify the CRC
            uint32_t cal_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)slot_addr, ota_fw_total_size);
 8000886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000888:	4a52      	ldr	r2, [pc, #328]	; (80009d4 <etx_process_data+0x34c>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	485c      	ldr	r0, [pc, #368]	; (8000a00 <etx_process_data+0x378>)
 8000890:	f001 fd42 	bl	8002318 <HAL_CRC_Calculate>
 8000894:	6538      	str	r0, [r7, #80]	; 0x50
            if( cal_crc != ota_fw_crc )
 8000896:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <etx_process_data+0x350>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800089c:	429a      	cmp	r2, r3
 800089e:	d003      	beq.n	80008a8 <etx_process_data+0x220>
            {
              printf("ERROR: FW CRC Mismatch\r\n");
 80008a0:	4858      	ldr	r0, [pc, #352]	; (8000a04 <etx_process_data+0x37c>)
 80008a2:	f008 fbed 	bl	8009080 <puts>
 80008a6:	e0be      	b.n	8000a26 <etx_process_data+0x39e>
              break;
            }
            printf("Done!!!\r\n");
 80008a8:	4857      	ldr	r0, [pc, #348]	; (8000a08 <etx_process_data+0x380>)
 80008aa:	f008 fbe9 	bl	8009080 <puts>

            /* Read the configuration */
            ETX_GNRL_CFG_ cfg;
            memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 80008ae:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <etx_process_data+0x360>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461c      	mov	r4, r3
 80008b4:	f107 060c 	add.w	r6, r7, #12
 80008b8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80008bc:	4635      	mov	r5, r6
 80008be:	4623      	mov	r3, r4
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	6859      	ldr	r1, [r3, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ca:	3410      	adds	r4, #16
 80008cc:	3610      	adds	r6, #16
 80008ce:	4564      	cmp	r4, ip
 80008d0:	d1f4      	bne.n	80008bc <etx_process_data+0x234>
 80008d2:	4632      	mov	r2, r6
 80008d4:	4623      	mov	r3, r4
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	8013      	strh	r3, [r2, #0]

            //update the slot
            cfg.slot_table[slot_num_to_write].fw_crc                 = cal_crc;
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <etx_process_data+0x358>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008ee:	4413      	add	r3, r2
 80008f0:	3b5c      	subs	r3, #92	; 0x5c
 80008f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008f4:	f8c3 200b 	str.w	r2, [r3, #11]
            cfg.slot_table[slot_num_to_write].fw_size                = ota_fw_total_size;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <etx_process_data+0x358>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <etx_process_data+0x34c>)
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000910:	4413      	add	r3, r2
 8000912:	3b5c      	subs	r3, #92	; 0x5c
 8000914:	f8c3 1007 	str.w	r1, [r3, #7]
            cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 0u;
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <etx_process_data+0x358>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800092c:	4413      	add	r3, r2
 800092e:	3b58      	subs	r3, #88	; 0x58
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
            cfg.slot_table[slot_num_to_write].should_we_run_this_fw  = 1u;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <etx_process_data+0x358>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000948:	4413      	add	r3, r2
 800094a:	3b56      	subs	r3, #86	; 0x56
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]

            //reset other slots
            for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000950:	2300      	movs	r3, #0
 8000952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000956:	e017      	b.n	8000988 <etx_process_data+0x300>
            {
              if( slot_num_to_write != i )
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <etx_process_data+0x358>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000960:	429a      	cmp	r2, r3
 8000962:	d00c      	beq.n	800097e <etx_process_data+0x2f6>
              {
                //update the slot as inactive
                cfg.slot_table[i].should_we_run_this_fw = 0u;
 8000964:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000976:	4413      	add	r3, r2
 8000978:	3b56      	subs	r3, #86	; 0x56
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800097e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000982:	3301      	adds	r3, #1
 8000984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800098c:	2b01      	cmp	r3, #1
 800098e:	d9e3      	bls.n	8000958 <etx_process_data+0x2d0>
              }
            }

            //update the reboot reason
            cfg.reboot_cause = ETX_NORMAL_BOOT;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <etx_process_data+0x384>)
 8000992:	60fb      	str	r3, [r7, #12]

            /* write back the updated config */
            ret = write_cfg_to_flash( &cfg );
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fde9 	bl	8001570 <write_cfg_to_flash>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if( ret == ETX_OTA_EX_OK )
 80009a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d13b      	bne.n	8000a24 <etx_process_data+0x39c>
            {
              ota_state = ETX_OTA_STATE_IDLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <etx_process_data+0x340>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
              ret = ETX_OTA_EX_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
          }
        }
      }
      break;
 80009b8:	e034      	b.n	8000a24 <etx_process_data+0x39c>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      }
      break;
 80009c0:	e031      	b.n	8000a26 <etx_process_data+0x39e>
    };
 80009c2:	bf00      	nop
 80009c4:	e02f      	b.n	8000a26 <etx_process_data+0x39e>
 80009c6:	bf00      	nop
 80009c8:	200004b1 	.word	0x200004b1
 80009cc:	08009f54 	.word	0x08009f54
 80009d0:	08009f6c 	.word	0x08009f6c
 80009d4:	200004b4 	.word	0x200004b4
 80009d8:	200004b8 	.word	0x200004b8
 80009dc:	08009f88 	.word	0x08009f88
 80009e0:	200004c0 	.word	0x200004c0
 80009e4:	200004bc 	.word	0x200004bc
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08009fb0 	.word	0x08009fb0
 80009f0:	08009fbc 	.word	0x08009fbc
 80009f4:	08009fd8 	.word	0x08009fd8
 80009f8:	080c0000 	.word	0x080c0000
 80009fc:	08140000 	.word	0x08140000
 8000a00:	2000078c 	.word	0x2000078c
 8000a04:	08009ffc 	.word	0x08009ffc
 8000a08:	0800a014 	.word	0x0800a014
 8000a0c:	beeffeed 	.word	0xbeeffeed
        break;
 8000a10:	bf00      	nop
 8000a12:	e008      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a14:	bf00      	nop
 8000a16:	e006      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a18:	bf00      	nop
 8000a1a:	e004      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <etx_process_data+0x39e>
              break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a24:	bf00      	nop
  }while( false );

  return ret;
 8000a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	376c      	adds	r7, #108	; 0x6c
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a32:	bf00      	nop

08000a34 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index        = 0u;
 8000a40:	2300      	movs	r3, #0
 8000a42:	83bb      	strh	r3, [r7, #28]
  uint16_t data_len;
  uint32_t cal_data_crc = 0u;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  uint32_t rec_data_crc = 0u;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000a4c:	8bbb      	ldrh	r3, [r7, #28]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	18d1      	adds	r1, r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2201      	movs	r2, #1
 8000a58:	4864      	ldr	r0, [pc, #400]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000a5a:	f004 f83c 	bl	8004ad6 <HAL_UART_Receive>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000a62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 809e 	bne.w	8000ba8 <etx_receive_chunk+0x174>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 8000a6c:	8bbb      	ldrh	r3, [r7, #28]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	83ba      	strh	r2, [r7, #28]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2baa      	cmp	r3, #170	; 0xaa
 8000a7c:	d002      	beq.n	8000a84 <etx_receive_chunk+0x50>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	83fb      	strh	r3, [r7, #30]
      break;
 8000a82:	e09c      	b.n	8000bbe <etx_receive_chunk+0x18a>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000a84:	8bbb      	ldrh	r3, [r7, #28]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	83ba      	strh	r2, [r7, #28]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1899      	adds	r1, r3, r2
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2201      	movs	r2, #1
 8000a96:	4855      	ldr	r0, [pc, #340]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000a98:	f004 f81d 	bl	8004ad6 <HAL_UART_Receive>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000aa0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f040 8081 	bne.w	8000bac <etx_receive_chunk+0x178>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000aaa:	8bbb      	ldrh	r3, [r7, #28]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	18d1      	adds	r1, r2, r3
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	484d      	ldr	r0, [pc, #308]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000ab8:	f004 f80d 	bl	8004ad6 <HAL_UART_Receive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000ac0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d173      	bne.n	8000bb0 <etx_receive_chunk+0x17c>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000ac8:	8bbb      	ldrh	r3, [r7, #28]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	81fb      	strh	r3, [r7, #14]
    index += 2u;
 8000ad2:	8bbb      	ldrh	r3, [r7, #28]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	83bb      	strh	r3, [r7, #28]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000ad8:	2300      	movs	r3, #0
 8000ada:	837b      	strh	r3, [r7, #26]
 8000adc:	e014      	b.n	8000b08 <etx_receive_chunk+0xd4>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000ade:	8bbb      	ldrh	r3, [r7, #28]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	83ba      	strh	r2, [r7, #28]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1899      	adds	r1, r3, r2
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	2201      	movs	r2, #1
 8000af0:	483e      	ldr	r0, [pc, #248]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000af2:	f003 fff0 	bl	8004ad6 <HAL_UART_Receive>
 8000af6:	4603      	mov	r3, r0
 8000af8:	83fb      	strh	r3, [r7, #30]
      if( ret != HAL_OK )
 8000afa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <etx_receive_chunk+0xde>
    for( uint16_t i = 0u; i < data_len; i++ )
 8000b02:	8b7b      	ldrh	r3, [r7, #26]
 8000b04:	3301      	adds	r3, #1
 8000b06:	837b      	strh	r3, [r7, #26]
 8000b08:	8b7a      	ldrh	r2, [r7, #26]
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3e6      	bcc.n	8000ade <etx_receive_chunk+0xaa>
 8000b10:	e000      	b.n	8000b14 <etx_receive_chunk+0xe0>
      {
        break;
 8000b12:	bf00      	nop
      }
    }

    if( ret != HAL_OK )
 8000b14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14b      	bne.n	8000bb4 <etx_receive_chunk+0x180>
    {
      break;
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 8000b1c:	8bbb      	ldrh	r3, [r7, #28]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	18d1      	adds	r1, r2, r3
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	2204      	movs	r2, #4
 8000b28:	4830      	ldr	r0, [pc, #192]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000b2a:	f003 ffd4 	bl	8004ad6 <HAL_UART_Receive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000b32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d13e      	bne.n	8000bb8 <etx_receive_chunk+0x184>
    {
      break;
    }
    rec_data_crc = *(uint32_t *)&buf[index];
 8000b3a:	8bbb      	ldrh	r3, [r7, #28]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
    index += 4u;
 8000b44:	8bbb      	ldrh	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	83bb      	strh	r3, [r7, #28]

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000b4a:	8bbb      	ldrh	r3, [r7, #28]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	18d1      	adds	r1, r2, r3
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2201      	movs	r2, #1
 8000b56:	4825      	ldr	r0, [pc, #148]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000b58:	f003 ffbd 	bl	8004ad6 <HAL_UART_Receive>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000b60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d129      	bne.n	8000bbc <etx_receive_chunk+0x188>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 8000b68:	8bbb      	ldrh	r3, [r7, #28]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	83ba      	strh	r2, [r7, #28]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2bbb      	cmp	r3, #187	; 0xbb
 8000b78:	d002      	beq.n	8000b80 <etx_receive_chunk+0x14c>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	83fb      	strh	r3, [r7, #30]
      break;
 8000b7e:	e01e      	b.n	8000bbe <etx_receive_chunk+0x18a>
    }

    //Calculate the received data's CRC
    cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&buf[4], data_len);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3304      	adds	r3, #4
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <etx_receive_chunk+0x1bc>)
 8000b8a:	f001 fbc5 	bl	8002318 <HAL_CRC_Calculate>
 8000b8e:	6178      	str	r0, [r7, #20]

    //Verify the CRC
    if( cal_data_crc != rec_data_crc )
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d012      	beq.n	8000bbe <etx_receive_chunk+0x18a>
    {
      printf("Chunk's CRC mismatch [Cal CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	6979      	ldr	r1, [r7, #20]
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <etx_receive_chunk+0x1c0>)
 8000b9e:	f008 f9e9 	bl	8008f74 <iprintf>
                                                   cal_data_crc, rec_data_crc );
      ret = ETX_OTA_EX_ERR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	83fb      	strh	r3, [r7, #30]
      break;
 8000ba6:	e00a      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000ba8:	bf00      	nop
 8000baa:	e008      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bac:	bf00      	nop
 8000bae:	e006      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb0:	bf00      	nop
 8000bb2:	e004      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bbc:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000bbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <etx_receive_chunk+0x196>
  {
    //clear the index if error
    index = 0u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	83bb      	strh	r3, [r7, #28]
  }

  if( max_len < index )
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	8bbb      	ldrh	r3, [r7, #28]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d207      	bcs.n	8000be2 <etx_receive_chunk+0x1ae>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	8bba      	ldrh	r2, [r7, #28]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <etx_receive_chunk+0x1c4>)
 8000bda:	f008 f9cb 	bl	8008f74 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	83bb      	strh	r3, [r7, #28]
  }

  return index;
 8000be2:	8bbb      	ldrh	r3, [r7, #28]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000814 	.word	0x20000814
 8000bf0:	2000078c 	.word	0x2000078c
 8000bf4:	0800a020 	.word	0x0800a020
 8000bf8:	0800a060 	.word	0x0800a060

08000bfc <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	811a      	strh	r2, [r3, #8]
 8000c12:	23aa      	movs	r3, #170	; 0xaa
 8000c14:	733b      	strb	r3, [r7, #12]
 8000c16:	2303      	movs	r3, #3
 8000c18:	737b      	strb	r3, [r7, #13]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	81fb      	strh	r3, [r7, #14]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	743b      	strb	r3, [r7, #16]
 8000c22:	23bb      	movs	r3, #187	; 0xbb
 8000c24:	757b      	strb	r3, [r7, #21]
    .data_len    = 1u,
    .status      = type,
    .eof         = ETX_OTA_EOF
  };

  rsp.crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&rsp.status, 1);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <etx_ota_send_resp+0x58>)
 8000c32:	f001 fb71 	bl	8002318 <HAL_CRC_Calculate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f8c7 3011 	str.w	r3, [r7, #17]

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	220a      	movs	r2, #10
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <etx_ota_send_resp+0x5c>)
 8000c48:	f003 feb2 	bl	80049b0 <HAL_UART_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000078c 	.word	0x2000078c
 8000c58:	20000814 	.word	0x20000814

08000c5c <write_data_to_slot>:
  */
static HAL_StatusTypeDef write_data_to_slot( uint8_t slot_num,
                                             uint8_t *data,
                                             uint16_t data_len,
                                             bool is_first_block )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6039      	str	r1, [r7, #0]
 8000c64:	4611      	mov	r1, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	80bb      	strh	r3, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;

  do
  {

    if( slot_num >= ETX_NO_OF_SLOTS )
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d903      	bls.n	8000c82 <write_data_to_slot+0x26>
    {
      ret = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8000c80:	e072      	b.n	8000d68 <write_data_to_slot+0x10c>
    }

    ret = HAL_FLASH_Unlock();
 8000c82:	f001 fd3f 	bl	8002704 <HAL_FLASH_Unlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d166      	bne.n	8000d62 <write_data_to_slot+0x106>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d025      	beq.n	8000ce6 <write_data_to_slot+0x8a>
    {
      printf("Erasing the Slot %d Flash memory...\r\n", slot_num);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4835      	ldr	r0, [pc, #212]	; (8000d74 <write_data_to_slot+0x118>)
 8000ca0:	f008 f968 	bl	8008f74 <iprintf>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
      if( slot_num == 0 )
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <write_data_to_slot+0x58>
      {
        EraseInitStruct.Sector        = FLASH_SECTOR_7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	e001      	b.n	8000cb8 <write_data_to_slot+0x5c>
      }
      else
      {
        EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8000cb4:	2309      	movs	r3, #9
 8000cb6:	61bb      	str	r3, [r7, #24]
      }
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fe7c 	bl	80029c8 <HAL_FLASHEx_Erase>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if( ret != HAL_OK )
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <write_data_to_slot+0x8a>
      {
        printf("Flash Erase Error\r\n");
 8000cde:	4826      	ldr	r0, [pc, #152]	; (8000d78 <write_data_to_slot+0x11c>)
 8000ce0:	f008 f9ce 	bl	8009080 <puts>
 8000ce4:	e040      	b.n	8000d68 <write_data_to_slot+0x10c>
        break;
      }
    }

    uint32_t flash_addr;
    if( slot_num == 0 )
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <write_data_to_slot+0x96>
    {
      flash_addr = ETX_APP_SLOT0_FLASH_ADDR;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <write_data_to_slot+0x120>)
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	e001      	b.n	8000cf6 <write_data_to_slot+0x9a>
    }
    else
    {
      flash_addr = ETX_APP_SLOT1_FLASH_ADDR;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <write_data_to_slot+0x124>)
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    for(int i = 0; i < data_len; i++ )
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	e021      	b.n	8000d40 <write_data_to_slot+0xe4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <write_data_to_slot+0x128>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	18d1      	adds	r1, r2, r3
                               (flash_addr + ota_fw_received_size),
                               data[i]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f001 fc9a 	bl	800264c <HAL_FLASH_Program>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret == HAL_OK )
 8000d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <write_data_to_slot+0xd6>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <write_data_to_slot+0x128>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <write_data_to_slot+0x128>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e003      	b.n	8000d3a <write_data_to_slot+0xde>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <write_data_to_slot+0x12c>)
 8000d34:	f008 f9a4 	bl	8009080 <puts>
        break;
 8000d38:	e006      	b.n	8000d48 <write_data_to_slot+0xec>
    for(int i = 0; i < data_len; i++ )
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbd9      	blt.n	8000cfc <write_data_to_slot+0xa0>
      }
    }

    if( ret != HAL_OK )
 8000d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10a      	bne.n	8000d66 <write_data_to_slot+0x10a>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000d50:	f001 fcfa 	bl	8002748 <HAL_FLASH_Lock>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8000d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	e002      	b.n	8000d68 <write_data_to_slot+0x10c>
      break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <write_data_to_slot+0x10c>
      break;
 8000d66:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	0800a0a4 	.word	0x0800a0a4
 8000d78:	0800a0cc 	.word	0x0800a0cc
 8000d7c:	080c0000 	.word	0x080c0000
 8000d80:	08140000 	.word	0x08140000
 8000d84:	200004bc 	.word	0x200004bc
 8000d88:	0800a0e0 	.word	0x0800a0e0

08000d8c <get_available_slot_number>:
  * @brief Return the available slot number
  * @param none
  * @retval slot number
  */
static uint8_t get_available_slot_number( void )
{
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b08f      	sub	sp, #60	; 0x3c
 8000d90:	af00      	add	r7, sp, #0
  uint8_t   slot_number = 0xFF;
 8000d92:	23ff      	movs	r3, #255	; 0xff
 8000d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Read the configuration */
  ETX_GNRL_CFG_ cfg;
  memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <get_available_slot_number+0xac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	461c      	mov	r4, r3
 8000d9e:	1d3e      	adds	r6, r7, #4
 8000da0:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000da4:	4635      	mov	r5, r6
 8000da6:	4623      	mov	r3, r4
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	3410      	adds	r4, #16
 8000db4:	3610      	adds	r6, #16
 8000db6:	4564      	cmp	r4, ip
 8000db8:	d1f4      	bne.n	8000da4 <get_available_slot_number+0x18>
 8000dba:	4632      	mov	r2, r6
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	8013      	strh	r3, [r2, #0]
   * If it is valid and not active, then use that slot.
   * If it is not valid, then use that slot.
   *
   */

   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000dc8:	e02b      	b.n	8000e22 <get_available_slot_number+0x96>
   {
     if( ( cfg.slot_table[i].is_this_slot_not_valid != 0u ) || ( cfg.slot_table[i].is_this_slot_active == 0u ) )
 8000dca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b30      	subs	r3, #48	; 0x30
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <get_available_slot_number+0x76>
 8000de6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b2f      	subs	r3, #47	; 0x2f
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10a      	bne.n	8000e18 <get_available_slot_number+0x8c>
     {
       slot_number = i;
 8000e02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
       printf("Slot %d is available for OTA update\r\n", slot_number);
 8000e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <get_available_slot_number+0xb0>)
 8000e12:	f008 f8af 	bl	8008f74 <iprintf>
       break;
 8000e16:	e008      	b.n	8000e2a <get_available_slot_number+0x9e>
   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000e18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000e22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d9cf      	bls.n	8000dca <get_available_slot_number+0x3e>
     }
   }

   return slot_number;
 8000e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	373c      	adds	r7, #60	; 0x3c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	0800a0f4 	.word	0x0800a0f4

08000e40 <write_data_to_flash_app>:
  * @param data data to be written
  * @param data_len data length
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data, uint32_t data_len )
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000e4a:	f001 fc5b 	bl	8002704 <HAL_FLASH_Unlock>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d158      	bne.n	8000f0e <write_data_to_flash_app+0xce>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f001 fc82 	bl	8002768 <FLASH_WaitForLastOperation>

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <write_data_to_flash_app+0xe4>)
 8000e66:	2273      	movs	r2, #115	; 0x73
 8000e68:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    printf("Erasing the App Flash memory...\r\n");
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <write_data_to_flash_app+0xe8>)
 8000e6c:	f008 f908 	bl	8009080 <puts>
    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000e74:	2305      	movs	r3, #5
 8000e76:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000e80:	f107 0208 	add.w	r2, r7, #8
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fd9c 	bl	80029c8 <HAL_FLASHEx_Erase>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <write_data_to_flash_app+0x66>
    {
      printf("Flash erase Error\r\n");
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <write_data_to_flash_app+0xec>)
 8000ea0:	f008 f8ee 	bl	8009080 <puts>
      break;
 8000ea4:	e038      	b.n	8000f18 <write_data_to_flash_app+0xd8>
    }

    for( uint32_t i = 0; i < data_len; i++ )
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	e01a      	b.n	8000ee2 <write_data_to_flash_app+0xa2>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	4920      	ldr	r1, [pc, #128]	; (8000f30 <write_data_to_flash_app+0xf0>)
 8000eb0:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + i),
                               data[i]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f001 fbc3 	bl	800264c <HAL_FLASH_Program>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret != HAL_OK )
 8000ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <write_data_to_flash_app+0x9c>
      {
        printf("App Flash Write Error\r\n");
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <write_data_to_flash_app+0xf4>)
 8000ed6:	f008 f8d3 	bl	8009080 <puts>
        break;
 8000eda:	e006      	b.n	8000eea <write_data_to_flash_app+0xaa>
    for( uint32_t i = 0; i < data_len; i++ )
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
 8000ee2:	6a3a      	ldr	r2, [r7, #32]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3e0      	bcc.n	8000eac <write_data_to_flash_app+0x6c>
      }
    }

    if( ret != HAL_OK )
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <write_data_to_flash_app+0xd2>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000ef2:	f001 fc29 	bl	8002748 <HAL_FLASH_Lock>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <write_data_to_flash_app+0xd6>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f001 fc2e 	bl	8002768 <FLASH_WaitForLastOperation>
 8000f0c:	e004      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f0e:	bf00      	nop
 8000f10:	e002      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f16:	bf00      	nop

  }while( false );

  return ret;
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023c00 	.word	0x40023c00
 8000f28:	0800a11c 	.word	0x0800a11c
 8000f2c:	0800a140 	.word	0x0800a140
 8000f30:	08040000 	.word	0x08040000
 8000f34:	0800a154 	.word	0x0800a154

08000f38 <load_new_app>:
  * @brief Load the new app to the app's actual flash memory.
  * @param none
  * @retval none
  */
void load_new_app( void )
{
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b093      	sub	sp, #76	; 0x4c
 8000f3c:	af00      	add	r7, sp, #0
  bool              is_update_available = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t           slot_num;
  HAL_StatusTypeDef ret;

  /* Read the configuration */
  ETX_GNRL_CFG_ cfg;
  memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8000f44:	4b85      	ldr	r3, [pc, #532]	; (800115c <load_new_app+0x224>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461c      	mov	r4, r3
 8000f4a:	1d3e      	adds	r6, r7, #4
 8000f4c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000f50:	4635      	mov	r5, r6
 8000f52:	4623      	mov	r3, r4
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	3410      	adds	r4, #16
 8000f60:	3610      	adds	r6, #16
 8000f62:	4564      	cmp	r4, ip
 8000f64:	d1f4      	bne.n	8000f50 <load_new_app+0x18>
 8000f66:	4632      	mov	r2, r6
 8000f68:	4623      	mov	r3, r4
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	8013      	strh	r3, [r2, #0]

  /*
   * Check the slot whether it has a new application.
   */

   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000f74:	e03a      	b.n	8000fec <load_new_app+0xb4>
   {
     if( cfg.slot_table[i].should_we_run_this_fw == 1u )
 8000f76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b3e      	subs	r3, #62	; 0x3e
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d127      	bne.n	8000fe2 <load_new_app+0xaa>
     {
       printf("New Application is available in the slot %d!!!\r\n", i);
 8000f92:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000f96:	4619      	mov	r1, r3
 8000f98:	4871      	ldr	r0, [pc, #452]	; (8001160 <load_new_app+0x228>)
 8000f9a:	f007 ffeb 	bl	8008f74 <iprintf>
       is_update_available               = true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
       slot_num                          = i;
 8000fa4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000fa8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

       //update the slot
       cfg.slot_table[i].is_this_slot_active    = 1u;
 8000fac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b3f      	subs	r3, #63	; 0x3f
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
       cfg.slot_table[i].should_we_run_this_fw  = 0u;
 8000fc6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b3e      	subs	r3, #62	; 0x3e
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]

       break;
 8000fe0:	e008      	b.n	8000ff4 <load_new_app+0xbc>
   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000fe2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000fec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d9c0      	bls.n	8000f76 <load_new_app+0x3e>
     }
   }

   if( is_update_available )
 8000ff4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d053      	beq.n	80010a4 <load_new_app+0x16c>
   {
     //make other slots inactive
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001002:	e017      	b.n	8001034 <load_new_app+0xfc>
     {
       if( slot_num != i )
 8001004:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001008:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800100c:	429a      	cmp	r2, r3
 800100e:	d00c      	beq.n	800102a <load_new_app+0xf2>
       {
         //update the slot as inactive
         cfg.slot_table[i].is_this_slot_active = 0u;
 8001010:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001022:	4413      	add	r3, r2
 8001024:	3b3f      	subs	r3, #63	; 0x3f
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800102a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800102e:	3301      	adds	r3, #1
 8001030:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001034:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001038:	2b01      	cmp	r3, #1
 800103a:	d9e3      	bls.n	8001004 <load_new_app+0xcc>
       }
     }

     uint32_t slot_addr;
     if( slot_num == 0u )
 800103c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <load_new_app+0x112>
     {
       slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <load_new_app+0x22c>)
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
 8001048:	e001      	b.n	800104e <load_new_app+0x116>
     }
     else
     {
       slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 800104a:	4b47      	ldr	r3, [pc, #284]	; (8001168 <load_new_app+0x230>)
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
     }

     //Load the new app or firmware to app's flash address
     ret = write_data_to_flash_app( (uint8_t*)slot_addr, cfg.slot_table[slot_num].fw_size );
 800104e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001050:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001062:	4413      	add	r3, r2
 8001064:	3b44      	subs	r3, #68	; 0x44
 8001066:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fee8 	bl	8000e40 <write_data_to_flash_app>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
     if( ret != HAL_OK )
 8001076:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <load_new_app+0x14e>
     {
       printf("App Flash write Error\r\n");
 800107e:	483b      	ldr	r0, [pc, #236]	; (800116c <load_new_app+0x234>)
 8001080:	f007 fffe 	bl	8009080 <puts>
 8001084:	e02e      	b.n	80010e4 <load_new_app+0x1ac>
     }
     else
     {
       /* write back the updated config */
       ret = write_cfg_to_flash( &cfg );
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fa71 	bl	8001570 <write_cfg_to_flash>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
       if( ret != HAL_OK )
 8001094:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001098:	2b00      	cmp	r3, #0
 800109a:	d023      	beq.n	80010e4 <load_new_app+0x1ac>
       {
         printf("Config Flash write Error\r\n");
 800109c:	4834      	ldr	r0, [pc, #208]	; (8001170 <load_new_app+0x238>)
 800109e:	f007 ffef 	bl	8009080 <puts>
 80010a2:	e01f      	b.n	80010e4 <load_new_app+0x1ac>
     }
   }
   else
   {
     //Find the active slot in case the update is not available
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010aa:	e017      	b.n	80010dc <load_new_app+0x1a4>
     {
       if( cfg.slot_table[i].is_this_slot_active == 1u )
 80010ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010be:	4413      	add	r3, r2
 80010c0:	3b3f      	subs	r3, #63	; 0x3f
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d104      	bne.n	80010d2 <load_new_app+0x19a>
       {
         slot_num = i;
 80010c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
         break;
 80010d0:	e008      	b.n	80010e4 <load_new_app+0x1ac>
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 80010d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d9e3      	bls.n	80010ac <load_new_app+0x174>
       }
     }
   }

   //Verify the application is corrupted or not
   printf("Verifying the Application...");
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <load_new_app+0x23c>)
 80010e6:	f007 ff45 	bl	8008f74 <iprintf>

   FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	f001 fb3b 	bl	8002768 <FLASH_WaitForLastOperation>
   //Verify the application
   uint32_t cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)ETX_APP_FLASH_ADDR, cfg.slot_table[slot_num].fw_size );
 80010f2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001104:	4413      	add	r3, r2
 8001106:	3b44      	subs	r3, #68	; 0x44
 8001108:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800110c:	461a      	mov	r2, r3
 800110e:	491a      	ldr	r1, [pc, #104]	; (8001178 <load_new_app+0x240>)
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <load_new_app+0x244>)
 8001112:	f001 f901 	bl	8002318 <HAL_CRC_Calculate>
 8001116:	63b8      	str	r0, [r7, #56]	; 0x38
   FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f001 fb24 	bl	8002768 <FLASH_WaitForLastOperation>

   //Verify the CRC
   if( cal_data_crc != cfg.slot_table[slot_num].fw_crc )
 8001120:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001132:	4413      	add	r3, r2
 8001134:	3b44      	subs	r3, #68	; 0x44
 8001136:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800113a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800113c:	429a      	cmp	r2, r3
 800113e:	d006      	beq.n	800114e <load_new_app+0x216>
   {
     printf("ERROR!!!\r\n");
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <load_new_app+0x248>)
 8001142:	f007 ff9d 	bl	8009080 <puts>
     printf("Invalid Application. HALT!!!\r\n");
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <load_new_app+0x24c>)
 8001148:	f007 ff9a 	bl	8009080 <puts>
     while(1);
 800114c:	e7fe      	b.n	800114c <load_new_app+0x214>
   }
   printf("Done!!!\r\n");
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <load_new_app+0x250>)
 8001150:	f007 ff96 	bl	8009080 <puts>
}
 8001154:	bf00      	nop
 8001156:	374c      	adds	r7, #76	; 0x4c
 8001158:	46bd      	mov	sp, r7
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	0800a16c 	.word	0x0800a16c
 8001164:	080c0000 	.word	0x080c0000
 8001168:	08140000 	.word	0x08140000
 800116c:	0800a1a0 	.word	0x0800a1a0
 8001170:	0800a1b8 	.word	0x0800a1b8
 8001174:	0800a1d4 	.word	0x0800a1d4
 8001178:	08040000 	.word	0x08040000
 800117c:	2000078c 	.word	0x2000078c
 8001180:	0800a1f4 	.word	0x0800a1f4
 8001184:	0800a200 	.word	0x0800a200
 8001188:	0800a014 	.word	0x0800a014

0800118c <check_update_frimware_SD_card>:
  * @brief Check the SD for Firmware update
  * @param none
  * @retval ETX_SD_EX_
  */
ETX_SD_EX_ check_update_frimware_SD_card( void )
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	f6ad 0dc4 	subw	sp, sp, #2244	; 0x8c4
 8001192:	af00      	add	r7, sp, #0
  ETX_SD_EX_  ret = ETX_SD_EX_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
  FRESULT     fres;                 //Result after operations

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800119a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800119e:	2201      	movs	r2, #1
 80011a0:	49cf      	ldr	r1, [pc, #828]	; (80014e0 <check_update_frimware_SD_card+0x354>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 f8fc 	bl	80083a0 <f_mount>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
    if (fres != FR_OK)
 80011ae:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <check_update_frimware_SD_card+0x3e>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 80011b6:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011ba:	4619      	mov	r1, r3
 80011bc:	48c9      	ldr	r0, [pc, #804]	; (80014e4 <check_update_frimware_SD_card+0x358>)
 80011be:	f007 fed9 	bl	8008f74 <iprintf>
      ret = ETX_SD_EX_NO_SD;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      break;
 80011c8:	e1bc      	b.n	8001544 <check_update_frimware_SD_card+0x3b8>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 80011ca:	48c7      	ldr	r0, [pc, #796]	; (80014e8 <check_update_frimware_SD_card+0x35c>)
 80011cc:	f007 ff58 	bl	8009080 <puts>

    fres = f_open(&fil, ETX_SD_CARD_FW_PATH, FA_WRITE | FA_READ | FA_OPEN_EXISTING);
 80011d0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80011d4:	2203      	movs	r2, #3
 80011d6:	49c5      	ldr	r1, [pc, #788]	; (80014ec <check_update_frimware_SD_card+0x360>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f007 f927 	bl	800842c <f_open>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
    if(fres != FR_OK)
 80011e4:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d009      	beq.n	8001200 <check_update_frimware_SD_card+0x74>
    {
      printf("No Firmware found in SD Card : (%i)\r\n", fres);
 80011ec:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 80011f0:	4619      	mov	r1, r3
 80011f2:	48bf      	ldr	r0, [pc, #764]	; (80014f0 <check_update_frimware_SD_card+0x364>)
 80011f4:	f007 febe 	bl	8008f74 <iprintf>
      ret = ETX_SD_EX_ERR;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      break;
 80011fe:	e1a1      	b.n	8001544 <check_update_frimware_SD_card+0x3b8>
    }

    UINT bytesRead;
    BYTE readBuf[ETX_OTA_DATA_MAX_SIZE];
    UINT fw_size = f_size(&fil);
 8001200:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
    UINT size;

    printf("Firmware found in SD Card. \r\nFW Size = %d Bytes\r\n", fw_size);
 800120a:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800120e:	48b9      	ldr	r0, [pc, #740]	; (80014f4 <check_update_frimware_SD_card+0x368>)
 8001210:	f007 feb0 	bl	8008f74 <iprintf>

    //get the slot number
    slot_num_to_write = get_available_slot_number();
 8001214:	f7ff fdba 	bl	8000d8c <get_available_slot_number>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4bb6      	ldr	r3, [pc, #728]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 800121e:	701a      	strb	r2, [r3, #0]
    if( slot_num_to_write == 0xFF )
 8001220:	4bb5      	ldr	r3, [pc, #724]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2bff      	cmp	r3, #255	; 0xff
 8001226:	d10e      	bne.n	8001246 <check_update_frimware_SD_card+0xba>
    {
      printf("f_getfree error (%i)\r\n", fres);
 8001228:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 800122c:	4619      	mov	r1, r3
 800122e:	48b3      	ldr	r0, [pc, #716]	; (80014fc <check_update_frimware_SD_card+0x370>)
 8001230:	f007 fea0 	bl	8008f74 <iprintf>
      ret = ETX_SD_EX_FU_ERR;
 8001234:	2302      	movs	r3, #2
 8001236:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      f_close(&fil);
 800123a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800123e:	4618      	mov	r0, r3
 8001240:	f007 fc6f 	bl	8008b22 <f_close>
      break;
 8001244:	e17e      	b.n	8001544 <check_update_frimware_SD_card+0x3b8>
    }

    bool is_first_block = true;
 8001246:	2301      	movs	r3, #1
 8001248:	f887 38b7 	strb.w	r3, [r7, #2231]	; 0x8b7

    /* Read the configuration */
    ETX_GNRL_CFG_ cfg;
    memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 800124c:	4bac      	ldr	r3, [pc, #688]	; (8001500 <check_update_frimware_SD_card+0x374>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	463b      	mov	r3, r7
 8001252:	4614      	mov	r4, r2
 8001254:	461e      	mov	r6, r3
 8001256:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800125a:	4635      	mov	r5, r6
 800125c:	4623      	mov	r3, r4
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001268:	3410      	adds	r4, #16
 800126a:	3610      	adds	r6, #16
 800126c:	4564      	cmp	r4, ip
 800126e:	d1f4      	bne.n	800125a <check_update_frimware_SD_card+0xce>
 8001270:	4632      	mov	r2, r6
 8001272:	4623      	mov	r3, r4
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	8013      	strh	r3, [r2, #0]

    /* Before writing the data, reset the available slot */
    cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 1u;
 8001278:	4b9f      	ldr	r3, [pc, #636]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4639      	mov	r1, r7
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]

    /* write back the updated config */
    HAL_StatusTypeDef ex = write_cfg_to_flash( &cfg );
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f96b 	bl	8001570 <write_cfg_to_flash>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 38a3 	strb.w	r3, [r7, #2211]	; 0x8a3
    if( ex != HAL_OK )
 80012a0:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <check_update_frimware_SD_card+0x12e>
    {
      ret = ETX_SD_EX_FU_ERR;
 80012a8:	2302      	movs	r3, #2
 80012aa:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      f_close(&fil);
 80012ae:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc35 	bl	8008b22 <f_close>
      break;
 80012b8:	e144      	b.n	8001544 <check_update_frimware_SD_card+0x3b8>
    }

    ota_fw_received_size = 0;
 80012ba:	4b92      	ldr	r3, [pc, #584]	; (8001504 <check_update_frimware_SD_card+0x378>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

    for(uint32_t i = 0; i < fw_size; )
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 38b0 	str.w	r3, [r7, #2224]	; 0x8b0
 80012c6:	e063      	b.n	8001390 <check_update_frimware_SD_card+0x204>
    {
      if( (fw_size - i) >= ETX_OTA_DATA_MAX_SIZE )
 80012c8:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80012cc:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d6:	d304      	bcc.n	80012e2 <check_update_frimware_SD_card+0x156>
      {
        size = ETX_OTA_DATA_MAX_SIZE;
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	f8c7 38b8 	str.w	r3, [r7, #2232]	; 0x8b8
 80012e0:	e006      	b.n	80012f0 <check_update_frimware_SD_card+0x164>
      }
      else
      {
        size = fw_size - i;
 80012e2:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80012e6:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f8c7 38b8 	str.w	r3, [r7, #2232]	; 0x8b8
      }

      //clear the buffer
      memset(readBuf, 0, ETX_OTA_DATA_MAX_SIZE);
 80012f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fe32 	bl	8008f64 <memset>

      fres = f_read(&fil, readBuf, size, &bytesRead);
 8001300:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001304:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001308:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800130c:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 8001310:	f007 fa4a 	bl	80087a8 <f_read>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
      if( ( fres != FR_OK) || (size != bytesRead ) )
 800131a:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <check_update_frimware_SD_card+0x1a4>
 8001322:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 800132c:	429a      	cmp	r2, r3
 800132e:	d009      	beq.n	8001344 <check_update_frimware_SD_card+0x1b8>
      {
        printf("FW Read Error : (%i)\r\n", fres);
 8001330:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 8001334:	4619      	mov	r1, r3
 8001336:	4874      	ldr	r0, [pc, #464]	; (8001508 <check_update_frimware_SD_card+0x37c>)
 8001338:	f007 fe1c 	bl	8008f74 <iprintf>
        ret = ETX_SD_EX_FU_ERR;
 800133c:	2302      	movs	r3, #2
 800133e:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
        break;
 8001342:	e02b      	b.n	800139c <check_update_frimware_SD_card+0x210>
      }

      /* write the chunk to the Flash (Slot location) */
      ex = write_data_to_slot( slot_num_to_write, readBuf, size, is_first_block );
 8001344:	4b6c      	ldr	r3, [pc, #432]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 8001346:	7818      	ldrb	r0, [r3, #0]
 8001348:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 800134c:	b29a      	uxth	r2, r3
 800134e:	f897 38b7 	ldrb.w	r3, [r7, #2231]	; 0x8b7
 8001352:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001356:	f7ff fc81 	bl	8000c5c <write_data_to_slot>
 800135a:	4603      	mov	r3, r0
 800135c:	f887 38a3 	strb.w	r3, [r7, #2211]	; 0x8a3
      if( ex != HAL_OK )
 8001360:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <check_update_frimware_SD_card+0x1f0>
      {
        printf("Flash Erite Error : (%d)\r\n", ex);
 8001368:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 800136c:	4619      	mov	r1, r3
 800136e:	4867      	ldr	r0, [pc, #412]	; (800150c <check_update_frimware_SD_card+0x380>)
 8001370:	f007 fe00 	bl	8008f74 <iprintf>
        ret = ETX_SD_EX_FU_ERR;
 8001374:	2302      	movs	r3, #2
 8001376:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
        break;
 800137a:	e00f      	b.n	800139c <check_update_frimware_SD_card+0x210>
      }

      is_first_block = false;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 38b7 	strb.w	r3, [r7, #2231]	; 0x8b7
      i += size;
 8001382:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 8001386:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 800138a:	4413      	add	r3, r2
 800138c:	f8c7 38b0 	str.w	r3, [r7, #2224]	; 0x8b0
    for(uint32_t i = 0; i < fw_size; )
 8001390:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 8001394:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8001398:	429a      	cmp	r2, r3
 800139a:	d395      	bcc.n	80012c8 <check_update_frimware_SD_card+0x13c>
    }

    if( ret != ETX_SD_EX_OK )
 800139c:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <check_update_frimware_SD_card+0x224>
    {
      f_close(&fil);
 80013a4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80013a8:	4618      	mov	r0, r3
 80013aa:	f007 fbba 	bl	8008b22 <f_close>
      break;
 80013ae:	e0c9      	b.n	8001544 <check_update_frimware_SD_card+0x3b8>
    }

    uint32_t slot_addr;
    if( slot_num_to_write == 0u )
 80013b0:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d103      	bne.n	80013c0 <check_update_frimware_SD_card+0x234>
    {
      slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 80013b8:	4b55      	ldr	r3, [pc, #340]	; (8001510 <check_update_frimware_SD_card+0x384>)
 80013ba:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 80013be:	e002      	b.n	80013c6 <check_update_frimware_SD_card+0x23a>
    }
    else
    {
      slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 80013c0:	4b54      	ldr	r3, [pc, #336]	; (8001514 <check_update_frimware_SD_card+0x388>)
 80013c2:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    }

    //Calculate the CRC
    uint32_t cal_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)slot_addr, fw_size);
 80013c6:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 80013ca:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4851      	ldr	r0, [pc, #324]	; (8001518 <check_update_frimware_SD_card+0x38c>)
 80013d2:	f000 ffa1 	bl	8002318 <HAL_CRC_Calculate>
 80013d6:	f8c7 089c 	str.w	r0, [r7, #2204]	; 0x89c

    /* Read the configuration */
    memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <check_update_frimware_SD_card+0x374>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	463b      	mov	r3, r7
 80013e0:	4614      	mov	r4, r2
 80013e2:	461e      	mov	r6, r3
 80013e4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013e8:	4635      	mov	r5, r6
 80013ea:	4623      	mov	r3, r4
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f6:	3410      	adds	r4, #16
 80013f8:	3610      	adds	r6, #16
 80013fa:	4564      	cmp	r4, ip
 80013fc:	d1f4      	bne.n	80013e8 <check_update_frimware_SD_card+0x25c>
 80013fe:	4632      	mov	r2, r6
 8001400:	4623      	mov	r3, r4
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	8013      	strh	r3, [r2, #0]

    //update the slot
    cfg.slot_table[slot_num_to_write].fw_crc                 = cal_crc;
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4639      	mov	r1, r7
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	440b      	add	r3, r1
 800141a:	f8d7 289c 	ldr.w	r2, [r7, #2204]	; 0x89c
 800141e:	f8c3 200b 	str.w	r2, [r3, #11]
    cfg.slot_table[slot_num_to_write].fw_size                = fw_size;
 8001422:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4639      	mov	r1, r7
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	440b      	add	r3, r1
 8001436:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 800143a:	f8c3 2007 	str.w	r2, [r3, #7]
    cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 0u;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4639      	mov	r1, r7
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	440b      	add	r3, r1
 8001452:	3304      	adds	r3, #4
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    cfg.slot_table[slot_num_to_write].should_we_run_this_fw  = 1u;
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4639      	mov	r1, r7
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	440b      	add	r3, r1
 800146c:	3306      	adds	r3, #6
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]

    //reset other slots
    for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8001472:	2300      	movs	r3, #0
 8001474:	f887 38ab 	strb.w	r3, [r7, #2219]	; 0x8ab
 8001478:	e016      	b.n	80014a8 <check_update_frimware_SD_card+0x31c>
    {
      if( slot_num_to_write != i )
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <check_update_frimware_SD_card+0x36c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f897 28ab 	ldrb.w	r2, [r7, #2219]	; 0x8ab
 8001482:	429a      	cmp	r2, r3
 8001484:	d00b      	beq.n	800149e <check_update_frimware_SD_card+0x312>
      {
        //update the slot as inactive
        cfg.slot_table[i].should_we_run_this_fw = 0u;
 8001486:	f897 28ab 	ldrb.w	r2, [r7, #2219]	; 0x8ab
 800148a:	4639      	mov	r1, r7
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	440b      	add	r3, r1
 8001498:	3306      	adds	r3, #6
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800149e:	f897 38ab 	ldrb.w	r3, [r7, #2219]	; 0x8ab
 80014a2:	3301      	adds	r3, #1
 80014a4:	f887 38ab 	strb.w	r3, [r7, #2219]	; 0x8ab
 80014a8:	f897 38ab 	ldrb.w	r3, [r7, #2219]	; 0x8ab
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d9e4      	bls.n	800147a <check_update_frimware_SD_card+0x2ee>
      }
    }

    //update the reboot reason
    cfg.reboot_cause = ETX_NORMAL_BOOT;
 80014b0:	463b      	mov	r3, r7
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <check_update_frimware_SD_card+0x390>)
 80014b4:	601a      	str	r2, [r3, #0]

    /* write back the updated config */
    ex = write_cfg_to_flash( &cfg );
 80014b6:	463b      	mov	r3, r7
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f859 	bl	8001570 <write_cfg_to_flash>
 80014be:	4603      	mov	r3, r0
 80014c0:	f887 38a3 	strb.w	r3, [r7, #2211]	; 0x8a3
    if( ex != HAL_OK )
 80014c4:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d029      	beq.n	8001520 <check_update_frimware_SD_card+0x394>
    {
      printf("Flash Erite Error : (%d)\r\n", ex);
 80014cc:	f897 38a3 	ldrb.w	r3, [r7, #2211]	; 0x8a3
 80014d0:	4619      	mov	r1, r3
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <check_update_frimware_SD_card+0x380>)
 80014d4:	f007 fd4e 	bl	8008f74 <iprintf>
      ret = ETX_SD_EX_FU_ERR;
 80014d8:	2302      	movs	r3, #2
 80014da:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
      break;
 80014de:	e031      	b.n	8001544 <check_update_frimware_SD_card+0x3b8>
 80014e0:	0800a220 	.word	0x0800a220
 80014e4:	0800a224 	.word	0x0800a224
 80014e8:	0800a240 	.word	0x0800a240
 80014ec:	0800a264 	.word	0x0800a264
 80014f0:	0800a274 	.word	0x0800a274
 80014f4:	0800a29c 	.word	0x0800a29c
 80014f8:	200004c0 	.word	0x200004c0
 80014fc:	0800a2d0 	.word	0x0800a2d0
 8001500:	20000000 	.word	0x20000000
 8001504:	200004bc 	.word	0x200004bc
 8001508:	0800a2e8 	.word	0x0800a2e8
 800150c:	0800a300 	.word	0x0800a300
 8001510:	080c0000 	.word	0x080c0000
 8001514:	08140000 	.word	0x08140000
 8001518:	2000078c 	.word	0x2000078c
 800151c:	beeffeed 	.word	0xbeeffeed
    }

    //close your file
    f_close(&fil);
 8001520:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001524:	4618      	mov	r0, r3
 8001526:	f007 fafc 	bl	8008b22 <f_close>

    //Once you flash the file, please delete it.
    fres = f_unlink(ETX_SD_CARD_FW_PATH);
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <check_update_frimware_SD_card+0x3d8>)
 800152c:	f007 fb23 	bl	8008b76 <f_unlink>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 38aa 	strb.w	r3, [r7, #2218]	; 0x8aa
    if (fres != FR_OK)
 8001536:	f897 38aa 	ldrb.w	r3, [r7, #2218]	; 0x8aa
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <check_update_frimware_SD_card+0x3b8>
    {
      printf("Cannot able to delete the FW file\n");
 800153e:	480a      	ldr	r0, [pc, #40]	; (8001568 <check_update_frimware_SD_card+0x3dc>)
 8001540:	f007 fd9e 	bl	8009080 <puts>
    }

  } while( false );

  if( ret != ETX_SD_EX_NO_SD )
 8001544:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 8001548:	2b01      	cmp	r3, #1
 800154a:	d004      	beq.n	8001556 <check_update_frimware_SD_card+0x3ca>
  {
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 800154c:	2200      	movs	r2, #0
 800154e:	4907      	ldr	r1, [pc, #28]	; (800156c <check_update_frimware_SD_card+0x3e0>)
 8001550:	2000      	movs	r0, #0
 8001552:	f006 ff25 	bl	80083a0 <f_mount>
  }

  return ret;
 8001556:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
}
 800155a:	4618      	mov	r0, r3
 800155c:	f607 07c4 	addw	r7, r7, #2244	; 0x8c4
 8001560:	46bd      	mov	sp, r7
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0800a264 	.word	0x0800a264
 8001568:	0800a31c 	.word	0x0800a31c
 800156c:	0800a220 	.word	0x0800a220

08001570 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( ETX_GNRL_CFG_ *cfg )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;

  do
  {
    if( cfg == NULL )
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <write_cfg_to_flash+0x16>
    {
      ret = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8001584:	e05f      	b.n	8001646 <write_cfg_to_flash+0xd6>
    }

    ret = HAL_FLASH_Unlock();
 8001586:	f001 f8bd 	bl	8002704 <HAL_FLASH_Unlock>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8001590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001594:	2b00      	cmp	r3, #0
 8001596:	d151      	bne.n	800163c <write_cfg_to_flash+0xcc>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f001 f8e4 	bl	8002768 <FLASH_WaitForLastOperation>

    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector        = FLASH_SECTOR_4;
 80015a4:	2304      	movs	r3, #4
 80015a6:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors     = 1;                    //erase only sector 4
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <write_cfg_to_flash+0xe4>)
 80015b2:	2273      	movs	r2, #115	; 0x73
 80015b4:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fa01 	bl	80029c8 <HAL_FLASHEx_Erase>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 80015cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d135      	bne.n	8001640 <write_cfg_to_flash+0xd0>
    {
      break;
    }

    //write the configuration
    uint8_t *data = (uint8_t *) cfg;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
 80015dc:	e01a      	b.n	8001614 <write_cfg_to_flash+0xa4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	491d      	ldr	r1, [pc, #116]	; (8001658 <write_cfg_to_flash+0xe8>)
 80015e2:	4419      	add	r1, r3
                               ETX_CONFIG_FLASH_ADDR + i,
                               data[i]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f001 f82a 	bl	800264c <HAL_FLASH_Program>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret != HAL_OK )
 80015fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <write_cfg_to_flash+0x9e>
      {
        printf("Slot table Flash Write Error\r\n");
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <write_cfg_to_flash+0xec>)
 8001608:	f007 fd3a 	bl	8009080 <puts>
        break;
 800160c:	e005      	b.n	800161a <write_cfg_to_flash+0xaa>
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	3301      	adds	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	2b31      	cmp	r3, #49	; 0x31
 8001618:	d9e1      	bls.n	80015de <write_cfg_to_flash+0x6e>
      }
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800161a:	f04f 30ff 	mov.w	r0, #4294967295
 800161e:	f001 f8a3 	bl	8002768 <FLASH_WaitForLastOperation>

    if( ret != HAL_OK )
 8001622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <write_cfg_to_flash+0xd4>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 800162a:	f001 f88d 	bl	8002748 <HAL_FLASH_Lock>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001638:	2b00      	cmp	r3, #0
 800163a:	e004      	b.n	8001646 <write_cfg_to_flash+0xd6>
      break;
 800163c:	bf00      	nop
 800163e:	e002      	b.n	8001646 <write_cfg_to_flash+0xd6>
      break;
 8001640:	bf00      	nop
 8001642:	e000      	b.n	8001646 <write_cfg_to_flash+0xd6>
      break;
 8001644:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8001646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00
 8001658:	08020000 	.word	0x08020000
 800165c:	0800a340 	.word	0x0800a340

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 fc96 	bl	8001f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f8a5 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166e:	f000 f9df 	bl	8001a30 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001672:	f000 f9ad 	bl	80019d0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001676:	f000 f97b 	bl	8001970 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800167a:	f000 f919 	bl	80018b0 <MX_CRC_Init>
  MX_SPI1_Init();
 800167e:	f000 f939 	bl	80018f4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001682:	f003 fec3 	bl	800540c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  //Check for firmware in SD Card
  if( check_update_frimware_SD_card() == ETX_SD_EX_FU_ERR )
 8001686:	f7ff fd81 	bl	800118c <check_update_frimware_SD_card>
 800168a:	4603      	mov	r3, r0
 800168c:	2b02      	cmp	r3, #2
 800168e:	d103      	bne.n	8001698 <main+0x38>
  {
    /* Fw update error. Don't process. */
    printf("SD Card Fw Update : ERROR!!! HALT!!!\r\n");
 8001690:	4839      	ldr	r0, [pc, #228]	; (8001778 <main+0x118>)
 8001692:	f007 fcf5 	bl	8009080 <puts>
    while( 1 );
 8001696:	e7fe      	b.n	8001696 <main+0x36>
  }

  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 8001698:	2201      	movs	r2, #1
 800169a:	2101      	movs	r1, #1
 800169c:	4837      	ldr	r0, [pc, #220]	; (800177c <main+0x11c>)
 800169e:	f001 fc55 	bl	8002f4c <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 80016a2:	2300      	movs	r3, #0
 80016a4:	2204      	movs	r2, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4835      	ldr	r0, [pc, #212]	; (8001780 <main+0x120>)
 80016aa:	f007 fc63 	bl	8008f74 <iprintf>
  //HAL_Delay(2000);   //2sec delay for nothing


  //Read the reboot cause and act accordingly
  printf("Reading the reboot reason...\r\n");
 80016ae:	4835      	ldr	r0, [pc, #212]	; (8001784 <main+0x124>)
 80016b0:	f007 fce6 	bl	8009080 <puts>

  ETX_GNRL_CFG_ *cfg          = (ETX_GNRL_CFG_*) (ETX_CONFIG_FLASH_ADDR);
 80016b4:	4b34      	ldr	r3, [pc, #208]	; (8001788 <main+0x128>)
 80016b6:	613b      	str	r3, [r7, #16]
  bool          goto_ota_mode = false;
 80016b8:	2300      	movs	r3, #0
 80016ba:	75fb      	strb	r3, [r7, #23]

  switch( cfg->reboot_cause )
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d010      	beq.n	80016e8 <main+0x88>
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <main+0x12c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d016      	beq.n	80016fa <main+0x9a>
 80016cc:	4a2f      	ldr	r2, [pc, #188]	; (800178c <main+0x12c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d815      	bhi.n	80016fe <main+0x9e>
 80016d2:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <main+0x130>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d003      	beq.n	80016e0 <main+0x80>
 80016d8:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <main+0x134>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d004      	beq.n	80016e8 <main+0x88>
      //TODO: Implement
      break;
    }
  default:
    /* should not get here */
    break;
 80016de:	e00e      	b.n	80016fe <main+0x9e>
      printf("Normal Boot\r\n");
 80016e0:	482d      	ldr	r0, [pc, #180]	; (8001798 <main+0x138>)
 80016e2:	f007 fccd 	bl	8009080 <puts>
      break;
 80016e6:	e00b      	b.n	8001700 <main+0xa0>
      printf("First time boot / OTA Request...\r\n");
 80016e8:	482c      	ldr	r0, [pc, #176]	; (800179c <main+0x13c>)
 80016ea:	f007 fcc9 	bl	8009080 <puts>
      printf("Going to OTA mode...\r\n");
 80016ee:	482c      	ldr	r0, [pc, #176]	; (80017a0 <main+0x140>)
 80016f0:	f007 fcc6 	bl	8009080 <puts>
      goto_ota_mode = true;
 80016f4:	2301      	movs	r3, #1
 80016f6:	75fb      	strb	r3, [r7, #23]
      break;
 80016f8:	e002      	b.n	8001700 <main+0xa0>
      break;
 80016fa:	bf00      	nop
 80016fc:	e000      	b.n	8001700 <main+0xa0>
    break;
 80016fe:	bf00      	nop
  };

  /* Check the GPIO for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8001700:	f000 fc9a 	bl	8002038 <HAL_GetTick>
 8001704:	4603      	mov	r3, r0
 8001706:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800170a:	60fb      	str	r3, [r7, #12]

  printf("Press the User Button PC13 to trigger OTA update...\r\n");
 800170c:	4825      	ldr	r0, [pc, #148]	; (80017a4 <main+0x144>)
 800170e:	f007 fcb7 	bl	8009080 <puts>
  do
  {
    OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8001712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001716:	4824      	ldr	r0, [pc, #144]	; (80017a8 <main+0x148>)
 8001718:	f001 fc00 	bl	8002f1c <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	72fb      	strb	r3, [r7, #11]
    uint32_t current_tick = HAL_GetTick();
 8001720:	f000 fc8a 	bl	8002038 <HAL_GetTick>
 8001724:	6078      	str	r0, [r7, #4]

    /* Check the button is pressed or not for 3seconds */
    if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <main+0xe0>
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d805      	bhi.n	8001740 <main+0xe0>
    {
      /* Either timeout or Button is pressed */
      break;
    }
  }while( !goto_ota_mode );
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	f083 0301 	eor.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e8      	bne.n	8001712 <main+0xb2>

  /*Start the Firmware or Application update */
  if( ( OTA_Pin_state == GPIO_PIN_SET ) || ( goto_ota_mode ) )
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d002      	beq.n	800174c <main+0xec>
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <main+0x10e>
  {
    printf("Starting Firmware Download!!!\r\n");
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <main+0x14c>)
 800174e:	f007 fc97 	bl	8009080 <puts>
    /* OTA Request. Receive the data from the UART4 and flash */
    if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8001752:	f7fe ff41 	bl	80005d8 <etx_ota_download_and_flash>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <main+0x104>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 800175c:	4814      	ldr	r0, [pc, #80]	; (80017b0 <main+0x150>)
 800175e:	f007 fc8f 	bl	8009080 <puts>
      while( 1 );
 8001762:	e7fe      	b.n	8001762 <main+0x102>
    }
    else
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
 8001764:	4813      	ldr	r0, [pc, #76]	; (80017b4 <main+0x154>)
 8001766:	f007 fc8b 	bl	8009080 <puts>
      HAL_NVIC_SystemReset();
 800176a:	f000 fd60 	bl	800222e <HAL_NVIC_SystemReset>
    }
  }

  //Load the updated app, if it is available
  load_new_app();
 800176e:	f7ff fbe3 	bl	8000f38 <load_new_app>

  // Jump to application
  goto_application();
 8001772:	f000 f9eb 	bl	8001b4c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001776:	e7fe      	b.n	8001776 <main+0x116>
 8001778:	0800a360 	.word	0x0800a360
 800177c:	40020400 	.word	0x40020400
 8001780:	0800a388 	.word	0x0800a388
 8001784:	0800a3a8 	.word	0x0800a3a8
 8001788:	08020000 	.word	0x08020000
 800178c:	facefade 	.word	0xfacefade
 8001790:	beeffeed 	.word	0xbeeffeed
 8001794:	deadbeef 	.word	0xdeadbeef
 8001798:	0800a3c8 	.word	0x0800a3c8
 800179c:	0800a3d8 	.word	0x0800a3d8
 80017a0:	0800a3fc 	.word	0x0800a3fc
 80017a4:	0800a414 	.word	0x0800a414
 80017a8:	40020800 	.word	0x40020800
 80017ac:	0800a44c 	.word	0x0800a44c
 80017b0:	0800a46c 	.word	0x0800a46c
 80017b4:	0800a48c 	.word	0x0800a48c

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0b8      	sub	sp, #224	; 0xe0
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017c2:	2234      	movs	r2, #52	; 0x34
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 fbcc 	bl	8008f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2290      	movs	r2, #144	; 0x90
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f007 fbbd 	bl	8008f64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <SystemClock_Config+0xf0>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <SystemClock_Config+0xf0>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <SystemClock_Config+0xf0>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <SystemClock_Config+0xf4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800180a:	4a28      	ldr	r2, [pc, #160]	; (80018ac <SystemClock_Config+0xf4>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <SystemClock_Config+0xf4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001824:	2301      	movs	r3, #1
 8001826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182a:	2310      	movs	r3, #16
 800182c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fba0 	bl	8002f80 <HAL_RCC_OscConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001846:	f000 f99b 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184a:	230f      	movs	r3, #15
 800184c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001868:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f001 fe34 	bl	80034dc <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800187a:	f000 f981 	bl	8001b80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800187e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001882:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fff9 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800189c:	f000 f970 	bl	8001b80 <Error_Handler>
  }
}
 80018a0:	bf00      	nop
 80018a2:	37e0      	adds	r7, #224	; 0xe0
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000

080018b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_CRC_Init+0x3c>)
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <MX_CRC_Init+0x40>)
 80018b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_CRC_Init+0x3c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_CRC_Init+0x3c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_CRC_Init+0x3c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_CRC_Init+0x3c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_CRC_Init+0x3c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_CRC_Init+0x3c>)
 80018da:	f000 fcb9 	bl	8002250 <HAL_CRC_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80018e4:	f000 f94c 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000078c 	.word	0x2000078c
 80018f0:	40023000 	.word	0x40023000

080018f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_SPI1_Init+0x74>)
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <MX_SPI1_Init+0x78>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_SPI1_Init+0x74>)
 8001900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_SPI1_Init+0x74>)
 800190e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_SPI1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_SPI1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_SPI1_Init+0x74>)
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_SPI1_Init+0x74>)
 800192a:	2230      	movs	r2, #48	; 0x30
 800192c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_SPI1_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_SPI1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_SPI1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_SPI1_Init+0x74>)
 8001942:	2207      	movs	r2, #7
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_SPI1_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_SPI1_Init+0x74>)
 800194e:	2208      	movs	r2, #8
 8001950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_SPI1_Init+0x74>)
 8001954:	f002 fbc0 	bl	80040d8 <HAL_SPI_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800195e:	f000 f90f 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200007b0 	.word	0x200007b0
 800196c:	40013000 	.word	0x40013000

08001970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <MX_USART2_UART_Init+0x5c>)
 8001978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 800197c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019b4:	f002 ffae 	bl	8004914 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019be:	f000 f8df 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000814 	.word	0x20000814
 80019cc:	40004400 	.word	0x40004400

080019d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <MX_USART3_UART_Init+0x5c>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_USART3_UART_Init+0x58>)
 8001a14:	f002 ff7e 	bl	8004914 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f000 f8af 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000708 	.word	0x20000708
 8001a2c:	40004800 	.word	0x40004800

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_GPIO_Init+0xe8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	481c      	ldr	r0, [pc, #112]	; (8001b1c <MX_GPIO_Init+0xec>)
 8001aac:	f001 fa4e 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab6:	481a      	ldr	r0, [pc, #104]	; (8001b20 <MX_GPIO_Init+0xf0>)
 8001ab8:	f001 fa48 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4814      	ldr	r0, [pc, #80]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001ad2:	f001 f877 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <MX_GPIO_Init+0xec>)
 8001aee:	f001 f869 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_GPIO_Init+0xf0>)
 8001b0c:	f001 f85a 	bl	8002bc4 <HAL_GPIO_Init>

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40020800 	.word	0x40020800

08001b28 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b30:	1d39      	adds	r1, r7, #4
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	2201      	movs	r2, #1
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <__io_putchar+0x20>)
 8001b3a:	f002 ff39 	bl	80049b0 <HAL_UART_Transmit>

  return ch;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000708 	.word	0x20000708

08001b4c <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8001b52:	4808      	ldr	r0, [pc, #32]	; (8001b74 <goto_application+0x28>)
 8001b54:	f007 fa94 	bl	8009080 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (ETX_APP_FLASH_ADDR + 4U)));
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <goto_application+0x2c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) ETX_APP_FLASH_ADDR);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2101      	movs	r1, #1
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <goto_application+0x30>)
 8001b64:	f001 f9f2 	bl	8002f4c <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4798      	blx	r3
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	0800a4b8 	.word	0x0800a4b8
 8001b78:	08040004 	.word	0x08040004
 8001b7c:	40020400 	.word	0x40020400

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x44>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_CRC_MspInit+0x38>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10b      	bne.n	8001bfe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_CRC_MspInit+0x3c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_CRC_MspInit+0x3c>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_CRC_MspInit+0x3c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023000 	.word	0x40023000
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_SPI_MspInit+0x7c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d127      	bne.n	8001c86 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_SPI_MspInit+0x80>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_SPI_MspInit+0x80>)
 8001c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_SPI_MspInit+0x80>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_SPI_MspInit+0x80>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_SPI_MspInit+0x80>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_SPI_MspInit+0x80>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c66:	23e0      	movs	r3, #224	; 0xe0
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c76:	2305      	movs	r3, #5
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_SPI_MspInit+0x84>)
 8001c82:	f000 ff9f 	bl	8002bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40013000 	.word	0x40013000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_UART_MspInit+0xd8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d128      	bne.n	8001d10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cee:	2360      	movs	r3, #96	; 0x60
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	481c      	ldr	r0, [pc, #112]	; (8001d7c <HAL_UART_MspInit+0xe0>)
 8001d0a:	f000 ff5b 	bl	8002bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d0e:	e02d      	b.n	8001d6c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_UART_MspInit+0xe4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d128      	bne.n	8001d6c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_UART_MspInit+0xdc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_UART_MspInit+0xe0>)
 8001d68:	f000 ff2c 	bl	8002bc4 <HAL_GPIO_Init>
}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40004800 	.word	0x40004800

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <NMI_Handler+0x4>

08001d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f000 f91e 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00a      	b.n	8001e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dea:	f3af 8000 	nop.w
 8001dee:	4601      	mov	r1, r0
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	60ba      	str	r2, [r7, #8]
 8001df6:	b2ca      	uxtb	r2, r1
 8001df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbf0      	blt.n	8001dea <_read+0x12>
	}

return len;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e009      	b.n	8001e38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	60ba      	str	r2, [r7, #8]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe7b 	bl	8001b28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbf1      	blt.n	8001e24 <_write+0x12>
	}
	return len;
 8001e40:	687b      	ldr	r3, [r7, #4]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_close>:

int _close(int file)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
	return -1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e72:	605a      	str	r2, [r3, #4]
	return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_isatty>:

int _isatty(int file)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	return 1;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f007 f814 	bl	8008f10 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20080000 	.word	0x20080000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	200004c4 	.word	0x200004c4
 8001f1c:	20000d40 	.word	0x20000d40

08001f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <SystemInit+0x20>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <SystemInit+0x20>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f60:	4c0b      	ldr	r4, [pc, #44]	; (8001f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f6e:	f7ff ffd7 	bl	8001f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f72:	f006 ffd3 	bl	8008f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f76:	f7ff fb73 	bl	8001660 <main>
  bx  lr    
 8001f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001f88:	0800aa1c 	.word	0x0800aa1c
  ldr r2, =_sbss
 8001f8c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001f90:	20000d3c 	.word	0x20000d3c

08001f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC_IRQHandler>

08001f96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f000 f920 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f000 f805 	bl	8001fb0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fa6:	f7ff fdf1 	bl	8001b8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f931 	bl	8002236 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 f903 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000004 	.word	0x20000004
 8002008:	2000000c 	.word	0x2000000c
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000898 	.word	0x20000898

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000898 	.word	0x20000898

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <__NVIC_SetPriorityGrouping+0x40>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	4313      	orrs	r3, r2
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x40>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	05fa0000 	.word	0x05fa0000

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	; (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	; (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002174:	f3bf 8f4f 	dsb	sy
}
 8002178:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <__NVIC_SystemReset+0x24>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002182:	4904      	ldr	r1, [pc, #16]	; (8002194 <__NVIC_SystemReset+0x24>)
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <__NVIC_SystemReset+0x28>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800218a:	f3bf 8f4f 	dsb	sy
}
 800218e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <__NVIC_SystemReset+0x20>
 8002194:	e000ed00 	.word	0xe000ed00
 8002198:	05fa0004 	.word	0x05fa0004

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff78 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff46 	bl	8002098 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff78 	bl	8002108 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff47 	bl	80020b4 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002232:	f7ff ff9d 	bl	8002170 <__NVIC_SystemReset>

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffac 	bl	800219c <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e054      	b.n	800230c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7f5b      	ldrb	r3, [r3, #29]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fcae 	bl	8001bd4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_CRC_Init+0xc4>)
 800228c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0218 	bic.w	r2, r2, #24
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	e00c      	b.n	80022ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	461a      	mov	r2, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f948 	bl	8002540 <HAL_CRCEx_Polynomial_Set>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e028      	b.n	800230c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	795b      	ldrb	r3, [r3, #5]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f04f 32ff 	mov.w	r2, #4294967295
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	e004      	b.n	80022d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6912      	ldr	r2, [r2, #16]
 80022d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	04c11db7 	.word	0x04c11db7

08002318 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2202      	movs	r2, #2
 800232c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d006      	beq.n	8002354 <HAL_CRC_Calculate+0x3c>
 8002346:	2b03      	cmp	r3, #3
 8002348:	d829      	bhi.n	800239e <HAL_CRC_Calculate+0x86>
 800234a:	2b01      	cmp	r3, #1
 800234c:	d019      	beq.n	8002382 <HAL_CRC_Calculate+0x6a>
 800234e:	2b02      	cmp	r3, #2
 8002350:	d01e      	beq.n	8002390 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002352:	e024      	b.n	800239e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e00a      	b.n	8002370 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	441a      	add	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d3f0      	bcc.n	800235a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e00e      	b.n	80023a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f812 	bl	80023b0 <CRC_Handle_8>
 800238c:	6138      	str	r0, [r7, #16]
      break;
 800238e:	e007      	b.n	80023a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f899 	bl	80024cc <CRC_Handle_16>
 800239a:	6138      	str	r0, [r7, #16]
      break;
 800239c:	e000      	b.n	80023a0 <HAL_CRC_Calculate+0x88>
      break;
 800239e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80023a6:	693b      	ldr	r3, [r7, #16]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e023      	b.n	800240a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	3301      	adds	r3, #1
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	440b      	add	r3, r1
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80023dc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	440b      	add	r3, r1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80023ec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3303      	adds	r3, #3
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	440b      	add	r3, r1
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002400:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3d6      	bcc.n	80023c2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d04d      	beq.n	80024ba <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4413      	add	r3, r2
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d116      	bne.n	8002470 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	b21a      	sxth	r2, r3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	3301      	adds	r3, #1
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	440b      	add	r3, r1
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	8b7a      	ldrh	r2, [r7, #26]
 800246e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d11f      	bne.n	80024ba <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b21a      	sxth	r2, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	3301      	adds	r3, #1
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	440b      	add	r3, r1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b21b      	sxth	r3, r3
 8002496:	4313      	orrs	r3, r2
 8002498:	b21b      	sxth	r3, r3
 800249a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	8b7a      	ldrh	r2, [r7, #26]
 80024a6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4413      	add	r3, r2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3724      	adds	r7, #36	; 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e013      	b.n	8002506 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	440b      	add	r3, r1
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3e6      	bcc.n	80024de <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002550:	231f      	movs	r3, #31
 8002552:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002554:	bf00      	nop
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	613a      	str	r2, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_CRCEx_Polynomial_Set+0x34>
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_CRCEx_Polynomial_Set+0x16>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b18      	cmp	r3, #24
 8002578:	d846      	bhi.n	8002608 <HAL_CRCEx_Polynomial_Set+0xc8>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_CRCEx_Polynomial_Set+0x40>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	0800260f 	.word	0x0800260f
 8002584:	08002609 	.word	0x08002609
 8002588:	08002609 	.word	0x08002609
 800258c:	08002609 	.word	0x08002609
 8002590:	08002609 	.word	0x08002609
 8002594:	08002609 	.word	0x08002609
 8002598:	08002609 	.word	0x08002609
 800259c:	08002609 	.word	0x08002609
 80025a0:	080025fd 	.word	0x080025fd
 80025a4:	08002609 	.word	0x08002609
 80025a8:	08002609 	.word	0x08002609
 80025ac:	08002609 	.word	0x08002609
 80025b0:	08002609 	.word	0x08002609
 80025b4:	08002609 	.word	0x08002609
 80025b8:	08002609 	.word	0x08002609
 80025bc:	08002609 	.word	0x08002609
 80025c0:	080025f1 	.word	0x080025f1
 80025c4:	08002609 	.word	0x08002609
 80025c8:	08002609 	.word	0x08002609
 80025cc:	08002609 	.word	0x08002609
 80025d0:	08002609 	.word	0x08002609
 80025d4:	08002609 	.word	0x08002609
 80025d8:	08002609 	.word	0x08002609
 80025dc:	08002609 	.word	0x08002609
 80025e0:	080025e5 	.word	0x080025e5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d913      	bls.n	8002612 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80025ee:	e010      	b.n	8002612 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b07      	cmp	r3, #7
 80025f4:	d90f      	bls.n	8002616 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80025fa:	e00c      	b.n	8002616 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	d90b      	bls.n	800261a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002606:	e008      	b.n	800261a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
      break;
 800260c:	e006      	b.n	800261c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800260e:	bf00      	nop
 8002610:	e004      	b.n	800261c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002612:	bf00      	nop
 8002614:	e002      	b.n	800261c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800261a:	bf00      	nop
  }
  if (status == HAL_OK)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 0118 	bic.w	r1, r3, #24
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_FLASH_Program+0xb0>)
 8002660:	7d1b      	ldrb	r3, [r3, #20]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_FLASH_Program+0x1e>
 8002666:	2302      	movs	r3, #2
 8002668:	e043      	b.n	80026f2 <HAL_FLASH_Program+0xa6>
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_FLASH_Program+0xb0>)
 800266c:	2201      	movs	r2, #1
 800266e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002674:	f000 f878 	bl	8002768 <FLASH_WaitForLastOperation>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d133      	bne.n	80026ea <HAL_FLASH_Program+0x9e>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d823      	bhi.n	80026d0 <HAL_FLASH_Program+0x84>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_FLASH_Program+0x44>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026ad 	.word	0x080026ad
 8002698:	080026b9 	.word	0x080026b9
 800269c:	080026c5 	.word	0x080026c5
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80026a0:	783b      	ldrb	r3, [r7, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	f000 f921 	bl	80028ec <FLASH_Program_Byte>
        break;
 80026aa:	e012      	b.n	80026d2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80026ac:	883b      	ldrh	r3, [r7, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	68b8      	ldr	r0, [r7, #8]
 80026b2:	f000 f8f5 	bl	80028a0 <FLASH_Program_HalfWord>
        break;
 80026b6:	e00c      	b.n	80026d2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	68b8      	ldr	r0, [r7, #8]
 80026be:	f000 f8c9 	bl	8002854 <FLASH_Program_Word>
        break;
 80026c2:	e006      	b.n	80026d2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80026c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026c8:	68b8      	ldr	r0, [r7, #8]
 80026ca:	f000 f88d 	bl	80027e8 <FLASH_Program_DoubleWord>
        break;
 80026ce:	e000      	b.n	80026d2 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80026d0:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026d6:	f000 f847 	bl	8002768 <FLASH_WaitForLastOperation>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_FLASH_Program+0xb4>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_FLASH_Program+0xb4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_FLASH_Program+0xb0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	751a      	strb	r2, [r3, #20]

  return status;
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000089c 	.word	0x2000089c
 8002700:	40023c00 	.word	0x40023c00

08002704 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_FLASH_Unlock+0x38>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	da0b      	bge.n	800272e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_FLASH_Unlock+0x38>)
 8002718:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_FLASH_Unlock+0x3c>)
 800271a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_FLASH_Unlock+0x38>)
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_FLASH_Unlock+0x40>)
 8002720:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_FLASH_Unlock+0x38>)
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	da01      	bge.n	800272e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800272e:	79fb      	ldrb	r3, [r7, #7]
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40023c00 	.word	0x40023c00
 8002740:	45670123 	.word	0x45670123
 8002744:	cdef89ab 	.word	0xcdef89ab

08002748 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_FLASH_Lock+0x1c>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_FLASH_Lock+0x1c>)
 8002752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002756:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40023c00 	.word	0x40023c00

08002768 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <FLASH_WaitForLastOperation+0x78>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800277a:	f7ff fc5d 	bl	8002038 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002780:	e010      	b.n	80027a4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d00c      	beq.n	80027a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <FLASH_WaitForLastOperation+0x38>
 8002790:	f7ff fc52 	bl	8002038 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d201      	bcs.n	80027a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e019      	b.n	80027d8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <FLASH_WaitForLastOperation+0x7c>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e8      	bne.n	8002782 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <FLASH_WaitForLastOperation+0x7c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027bc:	f000 f8ba 	bl	8002934 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e009      	b.n	80027d8 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <FLASH_WaitForLastOperation+0x7c>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <FLASH_WaitForLastOperation+0x7c>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
  
}  
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	2000089c 	.word	0x2000089c
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <FLASH_Program_DoubleWord+0x68>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4a15      	ldr	r2, [pc, #84]	; (8002850 <FLASH_Program_DoubleWord+0x68>)
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <FLASH_Program_DoubleWord+0x68>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	4a12      	ldr	r2, [pc, #72]	; (8002850 <FLASH_Program_DoubleWord+0x68>)
 8002806:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800280a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <FLASH_Program_DoubleWord+0x68>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <FLASH_Program_DoubleWord+0x68>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800281e:	f3bf 8f6f 	isb	sy
}
 8002822:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	000a      	movs	r2, r1
 8002832:	2300      	movs	r3, #0
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	3104      	adds	r1, #4
 8002838:	4613      	mov	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800283c:	f3bf 8f4f 	dsb	sy
}
 8002840:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40023c00 	.word	0x40023c00

08002854 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <FLASH_Program_Word+0x48>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <FLASH_Program_Word+0x48>)
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <FLASH_Program_Word+0x48>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <FLASH_Program_Word+0x48>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002874:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <FLASH_Program_Word+0x48>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <FLASH_Program_Word+0x48>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002888:	f3bf 8f4f 	dsb	sy
}
 800288c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00

080028a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <FLASH_Program_HalfWord+0x48>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <FLASH_Program_HalfWord+0x48>)
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <FLASH_Program_HalfWord+0x48>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <FLASH_Program_HalfWord+0x48>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <FLASH_Program_HalfWord+0x48>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <FLASH_Program_HalfWord+0x48>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80028d6:	f3bf 8f4f 	dsb	sy
}
 80028da:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40023c00 	.word	0x40023c00

080028ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <FLASH_Program_Byte+0x44>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <FLASH_Program_Byte+0x44>)
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <FLASH_Program_Byte+0x44>)
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <FLASH_Program_Byte+0x44>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <FLASH_Program_Byte+0x44>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <FLASH_Program_Byte+0x44>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800291e:	f3bf 8f4f 	dsb	sy
}
 8002922:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40023c00 	.word	0x40023c00

08002934 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <FLASH_SetErrorCode+0x8c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 800294e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <FLASH_SetErrorCode+0x8c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 8002966:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <FLASH_SetErrorCode+0x8c>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f043 0308 	orr.w	r3, r3, #8
 800297c:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 800297e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <FLASH_SetErrorCode+0x8c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 8002996:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <FLASH_SetErrorCode+0x8c>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <FLASH_SetErrorCode+0x90>)
 80029ae:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <FLASH_SetErrorCode+0x8c>)
 80029b2:	22f2      	movs	r2, #242	; 0xf2
 80029b4:	60da      	str	r2, [r3, #12]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40023c00 	.word	0x40023c00
 80029c4:	2000089c 	.word	0x2000089c

080029c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_FLASHEx_Erase+0xd4>)
 80029dc:	7d1b      	ldrb	r3, [r3, #20]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_FLASHEx_Erase+0x1e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e056      	b.n	8002a94 <HAL_FLASHEx_Erase+0xcc>
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_FLASHEx_Erase+0xd4>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f0:	f7ff feba 	bl	8002768 <FLASH_WaitForLastOperation>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d146      	bne.n	8002a8c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d115      	bne.n	8002a3a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 f844 	bl	8002aa8 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a24:	f7ff fea0 	bl	8002768 <FLASH_WaitForLastOperation>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_FLASHEx_Erase+0xd8>)
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	491b      	ldr	r1, [pc, #108]	; (8002aa0 <HAL_FLASHEx_Erase+0xd8>)
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_FLASHEx_Erase+0xdc>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	610b      	str	r3, [r1, #16]
 8002a38:	e028      	b.n	8002a8c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	e01c      	b.n	8002a7c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	f000 f868 	bl	8002b20 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a54:	f7ff fe88 	bl	8002768 <FLASH_WaitForLastOperation>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_FLASHEx_Erase+0xd8>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_FLASHEx_Erase+0xd8>)
 8002a62:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002a66:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	601a      	str	r2, [r3, #0]
          break;
 8002a74:	e00a      	b.n	8002a8c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4413      	add	r3, r2
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3da      	bcc.n	8002a42 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_FLASHEx_Erase+0xd4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	751a      	strb	r2, [r3, #20]

  return status;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000089c 	.word	0x2000089c
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	ffff7ffb 	.word	0xffff7ffb

08002aa8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <FLASH_MassErase+0x74>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <FLASH_MassErase+0x74>)
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d107      	bne.n	8002ad6 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <FLASH_MassErase+0x74>)
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	4914      	ldr	r1, [pc, #80]	; (8002b1c <FLASH_MassErase+0x74>)
 8002acc:	f248 0304 	movw	r3, #32772	; 0x8004
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	610b      	str	r3, [r1, #16]
 8002ad4:	e00f      	b.n	8002af6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d106      	bne.n	8002aea <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <FLASH_MassErase+0x74>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <FLASH_MassErase+0x74>)
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	6113      	str	r3, [r2, #16]
 8002ae8:	e005      	b.n	8002af6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <FLASH_MassErase+0x74>)
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <FLASH_MassErase+0x74>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <FLASH_MassErase+0x74>)
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4313      	orrs	r3, r2
 8002b00:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <FLASH_MassErase+0x74>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b06:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b08:	f3bf 8f4f 	dsb	sy
}
 8002b0c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e010      	b.n	8002b5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d103      	bne.n	8002b4a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e009      	b.n	8002b5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d103      	bne.n	8002b58 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e002      	b.n	8002b5e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002b58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b5c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b0b      	cmp	r3, #11
 8002b62:	d902      	bls.n	8002b6a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	4911      	ldr	r1, [pc, #68]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <FLASH_Erase_Sector+0xa0>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bac:	f3bf 8f4f 	dsb	sy
}
 8002bb0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e175      	b.n	8002ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8164 	bne.w	8002eca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d00b      	beq.n	8002c22 <HAL_GPIO_Init+0x5e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d007      	beq.n	8002c22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c16:	2b11      	cmp	r3, #17
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b12      	cmp	r3, #18
 8002c20:	d130      	bne.n	8002c84 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0201 	and.w	r2, r3, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x100>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b12      	cmp	r3, #18
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80be 	beq.w	8002eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_GPIO_Init+0x324>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_GPIO_Init+0x324>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_GPIO_Init+0x324>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d66:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_GPIO_Init+0x328>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_GPIO_Init+0x32c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d037      	beq.n	8002e02 <HAL_GPIO_Init+0x23e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_GPIO_Init+0x330>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d031      	beq.n	8002dfe <HAL_GPIO_Init+0x23a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a56      	ldr	r2, [pc, #344]	; (8002ef8 <HAL_GPIO_Init+0x334>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02b      	beq.n	8002dfa <HAL_GPIO_Init+0x236>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a55      	ldr	r2, [pc, #340]	; (8002efc <HAL_GPIO_Init+0x338>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d025      	beq.n	8002df6 <HAL_GPIO_Init+0x232>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a54      	ldr	r2, [pc, #336]	; (8002f00 <HAL_GPIO_Init+0x33c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01f      	beq.n	8002df2 <HAL_GPIO_Init+0x22e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a53      	ldr	r2, [pc, #332]	; (8002f04 <HAL_GPIO_Init+0x340>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d019      	beq.n	8002dee <HAL_GPIO_Init+0x22a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_GPIO_Init+0x344>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_GPIO_Init+0x226>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_GPIO_Init+0x348>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00d      	beq.n	8002de6 <HAL_GPIO_Init+0x222>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a50      	ldr	r2, [pc, #320]	; (8002f10 <HAL_GPIO_Init+0x34c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <HAL_GPIO_Init+0x21e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	; (8002f14 <HAL_GPIO_Init+0x350>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_GPIO_Init+0x21a>
 8002dda:	2309      	movs	r3, #9
 8002ddc:	e012      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dde:	230a      	movs	r3, #10
 8002de0:	e010      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002de2:	2308      	movs	r3, #8
 8002de4:	e00e      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002de6:	2307      	movs	r3, #7
 8002de8:	e00c      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dea:	2306      	movs	r3, #6
 8002dec:	e00a      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dee:	2305      	movs	r3, #5
 8002df0:	e008      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002df2:	2304      	movs	r3, #4
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e004      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002e02:	2300      	movs	r3, #0
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f002 0203 	and.w	r2, r2, #3
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e14:	4935      	ldr	r1, [pc, #212]	; (8002eec <HAL_GPIO_Init+0x328>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e46:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_GPIO_Init+0x354>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f ae86 	bls.w	8002be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40021400 	.word	0x40021400
 8002f08:	40021800 	.word	0x40021800
 8002f0c:	40021c00 	.word	0x40021c00
 8002f10:	40022000 	.word	0x40022000
 8002f14:	40022400 	.word	0x40022400
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e001      	b.n	8002f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f68:	e003      	b.n	8002f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e29b      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa4:	4b96      	ldr	r3, [pc, #600]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d00c      	beq.n	8002fca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb0:	4b93      	ldr	r3, [pc, #588]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d112      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x62>
 8002fbc:	4b90      	ldr	r3, [pc, #576]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	4b8d      	ldr	r3, [pc, #564]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d06c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x130>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d168      	bne.n	80030b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e275      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7a>
 8002fec:	4b84      	ldr	r3, [pc, #528]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a83      	ldr	r2, [pc, #524]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e02e      	b.n	8003058 <HAL_RCC_OscConfig+0xd8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x9c>
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7b      	ldr	r2, [pc, #492]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xd8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0xc0>
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a75      	ldr	r2, [pc, #468]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a72      	ldr	r2, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xd8>
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6e      	ldr	r2, [pc, #440]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6b      	ldr	r2, [pc, #428]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe ffea 	bl	8002038 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe ffe6 	bl	8002038 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e229      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xe8>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe ffd6 	bl	8002038 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe ffd2 	bl	8002038 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e215      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x110>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d069      	beq.n	8003192 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030be:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ca:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d11c      	bne.n	8003110 <HAL_RCC_OscConfig+0x190>
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x17a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1e9      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	493d      	ldr	r1, [pc, #244]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	e040      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d023      	beq.n	8003160 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a38      	ldr	r2, [pc, #224]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe ff88 	bl	8002038 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312c:	f7fe ff84 	bl	8002038 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e1c7      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b30      	ldr	r3, [pc, #192]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4929      	ldr	r1, [pc, #164]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
 800315e:	e018      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe ff64 	bl	8002038 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe ff60 	bl	8002038 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e1a3      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d038      	beq.n	8003210 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d019      	beq.n	80031da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe ff41 	bl	8002038 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe ff3d 	bl	8002038 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e180      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x23a>
 80031d8:	e01a      	b.n	8003210 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_RCC_OscConfig+0x280>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe ff27 	bl	8002038 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ee:	f7fe ff23 	bl	8002038 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d903      	bls.n	8003204 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e166      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
 8003200:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003204:	4b92      	ldr	r3, [pc, #584]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ee      	bne.n	80031ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80a4 	beq.w	8003366 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b8c      	ldr	r3, [pc, #560]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10d      	bne.n	8003246 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	4b89      	ldr	r3, [pc, #548]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a88      	ldr	r2, [pc, #544]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b86      	ldr	r3, [pc, #536]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003246:	4b83      	ldr	r3, [pc, #524]	; (8003454 <HAL_RCC_OscConfig+0x4d4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d118      	bne.n	8003284 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003252:	4b80      	ldr	r3, [pc, #512]	; (8003454 <HAL_RCC_OscConfig+0x4d4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7f      	ldr	r2, [pc, #508]	; (8003454 <HAL_RCC_OscConfig+0x4d4>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325e:	f7fe feeb 	bl	8002038 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003266:	f7fe fee7 	bl	8002038 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b64      	cmp	r3, #100	; 0x64
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e12a      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003278:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x4d4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x31a>
 800328c:	4b70      	ldr	r3, [pc, #448]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a6f      	ldr	r2, [pc, #444]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	e02d      	b.n	80032f6 <HAL_RCC_OscConfig+0x376>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x33c>
 80032a2:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a6a      	ldr	r2, [pc, #424]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	4b68      	ldr	r3, [pc, #416]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a67      	ldr	r2, [pc, #412]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	e01c      	b.n	80032f6 <HAL_RCC_OscConfig+0x376>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d10c      	bne.n	80032de <HAL_RCC_OscConfig+0x35e>
 80032c4:	4b62      	ldr	r3, [pc, #392]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a61      	ldr	r2, [pc, #388]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	4b5f      	ldr	r3, [pc, #380]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a5e      	ldr	r2, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	e00b      	b.n	80032f6 <HAL_RCC_OscConfig+0x376>
 80032de:	4b5c      	ldr	r3, [pc, #368]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	4a5b      	ldr	r2, [pc, #364]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ea:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a58      	ldr	r2, [pc, #352]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d015      	beq.n	800332a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fe fe9b 	bl	8002038 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe fe97 	bl	8002038 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0d8      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ee      	beq.n	8003306 <HAL_RCC_OscConfig+0x386>
 8003328:	e014      	b.n	8003354 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe fe85 	bl	8002038 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003330:	e00a      	b.n	8003348 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fe fe81 	bl	8002038 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0c2      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ee      	bne.n	8003332 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d105      	bne.n	8003366 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a3c      	ldr	r2, [pc, #240]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80ae 	beq.w	80034cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003370:	4b37      	ldr	r3, [pc, #220]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d06d      	beq.n	8003458 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d14b      	bne.n	800341c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	4b32      	ldr	r3, [pc, #200]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a31      	ldr	r2, [pc, #196]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fe52 	bl	8002038 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fe4e 	bl	8002038 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e091      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	3b01      	subs	r3, #1
 80033d0:	041b      	lsls	r3, r3, #16
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	491b      	ldr	r1, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fe20 	bl	8002038 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fe1c 	bl	8002038 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e05f      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x47c>
 800341a:	e057      	b.n	80034cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fe06 	bl	8002038 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fe02 	bl	8002038 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e045      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x4b0>
 800344e:	e03d      	b.n	80034cc <HAL_RCC_OscConfig+0x54c>
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003458:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_RCC_OscConfig+0x558>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d030      	beq.n	80034c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d129      	bne.n	80034c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d122      	bne.n	80034c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800348e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003490:	4293      	cmp	r3, r2
 8003492:	d119      	bne.n	80034c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d10f      	bne.n	80034c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d0      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	4965      	ldr	r1, [pc, #404]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b8      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800353c:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800355a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	494d      	ldr	r1, [pc, #308]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d040      	beq.n	8003600 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d115      	bne.n	80035be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e073      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06b      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4936      	ldr	r1, [pc, #216]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fe fd32 	bl	8002038 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fe fd2e 	bl	8002038 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e053      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d210      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 020f 	bic.w	r2, r3, #15
 8003616:	4922      	ldr	r1, [pc, #136]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e032      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4916      	ldr	r1, [pc, #88]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490e      	ldr	r1, [pc, #56]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366e:	f000 f821 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	490a      	ldr	r1, [pc, #40]	; (80036a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1d0>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1d4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fc8e 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00
 80036a4:	40023800 	.word	0x40023800
 80036a8:	0800a51c 	.word	0x0800a51c
 80036ac:	20000004 	.word	0x20000004
 80036b0:	20000008 	.word	0x20000008

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b5b0      	push	{r4, r5, r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036ba:	2100      	movs	r1, #0
 80036bc:	6079      	str	r1, [r7, #4]
 80036be:	2100      	movs	r1, #0
 80036c0:	60f9      	str	r1, [r7, #12]
 80036c2:	2100      	movs	r1, #0
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036c6:	2100      	movs	r1, #0
 80036c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ca:	4952      	ldr	r1, [pc, #328]	; (8003814 <HAL_RCC_GetSysClockFreq+0x160>)
 80036cc:	6889      	ldr	r1, [r1, #8]
 80036ce:	f001 010c 	and.w	r1, r1, #12
 80036d2:	2908      	cmp	r1, #8
 80036d4:	d00d      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80036d6:	2908      	cmp	r1, #8
 80036d8:	f200 8094 	bhi.w	8003804 <HAL_RCC_GetSysClockFreq+0x150>
 80036dc:	2900      	cmp	r1, #0
 80036de:	d002      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x32>
 80036e0:	2904      	cmp	r1, #4
 80036e2:	d003      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x38>
 80036e4:	e08e      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e6:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCC_GetSysClockFreq+0x164>)
 80036e8:	60bb      	str	r3, [r7, #8]
      break;
 80036ea:	e08e      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ec:	4b4b      	ldr	r3, [pc, #300]	; (800381c <HAL_RCC_GetSysClockFreq+0x168>)
 80036ee:	60bb      	str	r3, [r7, #8]
      break;
 80036f0:	e08b      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f2:	4948      	ldr	r1, [pc, #288]	; (8003814 <HAL_RCC_GetSysClockFreq+0x160>)
 80036f4:	6849      	ldr	r1, [r1, #4]
 80036f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036fa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036fc:	4945      	ldr	r1, [pc, #276]	; (8003814 <HAL_RCC_GetSysClockFreq+0x160>)
 80036fe:	6849      	ldr	r1, [r1, #4]
 8003700:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003704:	2900      	cmp	r1, #0
 8003706:	d024      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003708:	4942      	ldr	r1, [pc, #264]	; (8003814 <HAL_RCC_GetSysClockFreq+0x160>)
 800370a:	6849      	ldr	r1, [r1, #4]
 800370c:	0989      	lsrs	r1, r1, #6
 800370e:	4608      	mov	r0, r1
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003718:	f04f 0500 	mov.w	r5, #0
 800371c:	ea00 0204 	and.w	r2, r0, r4
 8003720:	ea01 0305 	and.w	r3, r1, r5
 8003724:	493d      	ldr	r1, [pc, #244]	; (800381c <HAL_RCC_GetSysClockFreq+0x168>)
 8003726:	fb01 f003 	mul.w	r0, r1, r3
 800372a:	2100      	movs	r1, #0
 800372c:	fb01 f102 	mul.w	r1, r1, r2
 8003730:	1844      	adds	r4, r0, r1
 8003732:	493a      	ldr	r1, [pc, #232]	; (800381c <HAL_RCC_GetSysClockFreq+0x168>)
 8003734:	fba2 0101 	umull	r0, r1, r2, r1
 8003738:	1863      	adds	r3, r4, r1
 800373a:	4619      	mov	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	f7fc fdcc 	bl	80002e0 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e04a      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_RCC_GetSysClockFreq+0x160>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	461a      	mov	r2, r3
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	ea02 0400 	and.w	r4, r2, r0
 800376a:	ea03 0501 	and.w	r5, r3, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	014b      	lsls	r3, r1, #5
 800377c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003780:	0142      	lsls	r2, r0, #5
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	1b00      	subs	r0, r0, r4
 8003788:	eb61 0105 	sbc.w	r1, r1, r5
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	018b      	lsls	r3, r1, #6
 8003796:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800379a:	0182      	lsls	r2, r0, #6
 800379c:	1a12      	subs	r2, r2, r0
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	00d9      	lsls	r1, r3, #3
 80037ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b0:	00d0      	lsls	r0, r2, #3
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	1912      	adds	r2, r2, r4
 80037b8:	eb45 0303 	adc.w	r3, r5, r3
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0299      	lsls	r1, r3, #10
 80037c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037ca:	0290      	lsls	r0, r2, #10
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f7fc fd80 	bl	80002e0 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_GetSysClockFreq+0x160>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	3301      	adds	r3, #1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	60bb      	str	r3, [r7, #8]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <HAL_RCC_GetSysClockFreq+0x164>)
 8003806:	60bb      	str	r3, [r7, #8]
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	68bb      	ldr	r3, [r7, #8]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bdb0      	pop	{r4, r5, r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	00f42400 	.word	0x00f42400
 800381c:	017d7840 	.word	0x017d7840

08003820 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800383c:	f7ff fff0 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0a9b      	lsrs	r3, r3, #10
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	0800a52c 	.word	0x0800a52c

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003864:	f7ff ffdc 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0b5b      	lsrs	r3, r3, #13
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4903      	ldr	r1, [pc, #12]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800
 8003884:	0800a52c 	.word	0x0800a52c

08003888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038b0:	4b69      	ldr	r3, [pc, #420]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a68      	ldr	r2, [pc, #416]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038ba:	6093      	str	r3, [r2, #8]
 80038bc:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	4964      	ldr	r1, [pc, #400]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d017      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e2:	4b5d      	ldr	r3, [pc, #372]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	4959      	ldr	r1, [pc, #356]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003900:	d101      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003902:	2301      	movs	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800391e:	4b4e      	ldr	r3, [pc, #312]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	494a      	ldr	r1, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393c:	d101      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 808b 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b3a      	ldr	r3, [pc, #232]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003984:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a34      	ldr	r2, [pc, #208]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003990:	f7fe fb52 	bl	8002038 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003998:	f7fe fb4e 	bl	8002038 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e38f      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d035      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d02e      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ea:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d114      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fb16 	bl	8002038 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fe fb12 	bl	8002038 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e351      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ee      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3e:	d111      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	4901      	ldr	r1, [pc, #4]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	0ffffcff 	.word	0x0ffffcff
 8003a64:	4bb3      	ldr	r3, [pc, #716]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4ab2      	ldr	r2, [pc, #712]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a6e:	6093      	str	r3, [r2, #8]
 8003a70:	4bb0      	ldr	r3, [pc, #704]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	49ad      	ldr	r1, [pc, #692]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a8e:	4ba9      	ldr	r3, [pc, #676]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a94:	4aa7      	ldr	r2, [pc, #668]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a9e:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	49a2      	ldr	r1, [pc, #648]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abc:	4b9d      	ldr	r3, [pc, #628]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aca:	499a      	ldr	r1, [pc, #616]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ade:	4b95      	ldr	r3, [pc, #596]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aec:	4991      	ldr	r1, [pc, #580]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b00:	4b8c      	ldr	r3, [pc, #560]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0e:	4989      	ldr	r1, [pc, #548]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b22:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4980      	ldr	r1, [pc, #512]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b44:	4b7b      	ldr	r3, [pc, #492]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4978      	ldr	r1, [pc, #480]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b66:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f023 020c 	bic.w	r2, r3, #12
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	496f      	ldr	r1, [pc, #444]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b88:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	4967      	ldr	r1, [pc, #412]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003baa:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	495e      	ldr	r1, [pc, #376]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	4956      	ldr	r1, [pc, #344]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bee:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	494d      	ldr	r1, [pc, #308]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c10:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	4945      	ldr	r1, [pc, #276]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c32:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	493c      	ldr	r1, [pc, #240]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c62:	4934      	ldr	r1, [pc, #208]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c84:	492b      	ldr	r1, [pc, #172]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c94:	d101      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc4:	491b      	ldr	r1, [pc, #108]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cd8:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce8:	4912      	ldr	r1, [pc, #72]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0c:	4909      	ldr	r1, [pc, #36]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00f      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	e002      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	4986      	ldr	r1, [pc, #536]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00b      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d4c:	4b81      	ldr	r3, [pc, #516]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5c:	497d      	ldr	r1, [pc, #500]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d006      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80d6 	beq.w	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d78:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a75      	ldr	r2, [pc, #468]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fe f958 	bl	8002038 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d8c:	f7fe f954 	bl	8002038 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e195      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d021      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dcc:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	0e1b      	lsrs	r3, r3, #24
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	019a      	lsls	r2, r3, #6
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	4958      	ldr	r1, [pc, #352]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02e      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e24:	d129      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e26:	4b4b      	ldr	r3, [pc, #300]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e34:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3a:	0f1b      	lsrs	r3, r3, #28
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	019a      	lsls	r2, r3, #6
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	071b      	lsls	r3, r3, #28
 8003e5a:	493e      	ldr	r1, [pc, #248]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e62:	4b3c      	ldr	r3, [pc, #240]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	f023 021f 	bic.w	r2, r3, #31
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	3b01      	subs	r3, #1
 8003e72:	4938      	ldr	r1, [pc, #224]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01d      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e86:	4b33      	ldr	r3, [pc, #204]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	0f1b      	lsrs	r3, r3, #28
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	019a      	lsls	r2, r3, #6
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	071b      	lsls	r3, r3, #28
 8003eba:	4926      	ldr	r1, [pc, #152]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	019a      	lsls	r2, r3, #6
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	491a      	ldr	r1, [pc, #104]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efe:	f7fe f89b 	bl	8002038 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f06:	f7fe f897 	bl	8002038 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0d8      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	f040 80ce 	bne.w	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fe f87e 	bl	8002038 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f3e:	e00b      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f40:	f7fe f87a 	bl	8002038 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d904      	bls.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0bb      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f58:	4b5e      	ldr	r3, [pc, #376]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f64:	d0ec      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02e      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f8e:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f9c:	4b4d      	ldr	r3, [pc, #308]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	019a      	lsls	r2, r3, #6
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	4944      	ldr	r1, [pc, #272]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fca:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	493d      	ldr	r1, [pc, #244]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d022      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff8:	d11d      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	0e1b      	lsrs	r3, r3, #24
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004008:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	0f1b      	lsrs	r3, r3, #28
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	019a      	lsls	r2, r3, #6
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	4929      	ldr	r1, [pc, #164]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004042:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004048:	0e1b      	lsrs	r3, r3, #24
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	019a      	lsls	r2, r3, #6
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	431a      	orrs	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	4917      	ldr	r1, [pc, #92]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	4911      	ldr	r1, [pc, #68]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd ffca 	bl	8002038 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040a8:	f7fd ffc6 	bl	8002038 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e007      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c6:	d1ef      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800

080040d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e09d      	b.n	8004226 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d009      	beq.n	8004110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
 8004102:	e005      	b.n	8004110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd fd72 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004146:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004150:	d902      	bls.n	8004158 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e002      	b.n	800415e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004166:	d007      	beq.n	8004178 <HAL_SPI_Init+0xa0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	ea42 0103 	orr.w	r1, r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	f003 0204 	and.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041f4:	ea42 0103 	orr.w	r1, r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08a      	sub	sp, #40	; 0x28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800423c:	2301      	movs	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x26>
 8004250:	2302      	movs	r3, #2
 8004252:	e1fb      	b.n	800464c <HAL_SPI_TransmitReceive+0x41e>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800425c:	f7fd feec 	bl	8002038 <HAL_GetTick>
 8004260:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004268:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004270:	887b      	ldrh	r3, [r7, #2]
 8004272:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004278:	7efb      	ldrb	r3, [r7, #27]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00e      	beq.n	800429c <HAL_SPI_TransmitReceive+0x6e>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004284:	d106      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x66>
 800428e:	7efb      	ldrb	r3, [r7, #27]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d003      	beq.n	800429c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004294:	2302      	movs	r3, #2
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800429a:	e1cd      	b.n	8004638 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x80>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x80>
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042b4:	e1c0      	b.n	8004638 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2205      	movs	r2, #5
 80042c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	887a      	ldrh	r2, [r7, #2]
 80042da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	887a      	ldrh	r2, [r7, #2]
 80042e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	887a      	ldrh	r2, [r7, #2]
 80042f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800430c:	d802      	bhi.n	8004314 <HAL_SPI_TransmitReceive+0xe6>
 800430e:	8a3b      	ldrh	r3, [r7, #16]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d908      	bls.n	8004326 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	e007      	b.n	8004336 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d007      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800435c:	d97c      	bls.n	8004458 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_TransmitReceive+0x13e>
 8004366:	8a7b      	ldrh	r3, [r7, #18]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d169      	bne.n	8004440 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004390:	e056      	b.n	8004440 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11b      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x1aa>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x1aa>
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d113      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	1c9a      	adds	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d11c      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x1f2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	b292      	uxth	r2, r2
 80043fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004420:	f7fd fe0a 	bl	8002038 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	429a      	cmp	r2, r3
 800442e:	d807      	bhi.n	8004440 <HAL_SPI_TransmitReceive+0x212>
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d003      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800443e:	e0fb      	b.n	8004638 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1a3      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x164>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d19d      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x164>
 8004456:	e0df      	b.n	8004618 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x23a>
 8004460:	8a7b      	ldrh	r3, [r7, #18]
 8004462:	2b01      	cmp	r3, #1
 8004464:	f040 80cb 	bne.w	80045fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d912      	bls.n	8004498 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	881a      	ldrh	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b02      	subs	r3, #2
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004496:	e0b2      	b.n	80045fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044be:	e09e      	b.n	80045fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d134      	bne.n	8004538 <HAL_SPI_TransmitReceive+0x30a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02f      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x30a>
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d12c      	bne.n	8004538 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d912      	bls.n	800450e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b02      	subs	r3, #2
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800450c:	e012      	b.n	8004534 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d148      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x3aa>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d042      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d923      	bls.n	80045a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	b292      	uxth	r2, r2
 800456a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	1c9a      	adds	r2, r3, #2
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b02      	subs	r3, #2
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d81f      	bhi.n	80045d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	e016      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f103 020c 	add.w	r2, r3, #12
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045d4:	2301      	movs	r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045d8:	f7fd fd2e 	bl	8002038 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d803      	bhi.n	80045f0 <HAL_SPI_TransmitReceive+0x3c2>
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d102      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x3c8>
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045fc:	e01c      	b.n	8004638 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f af5b 	bne.w	80044c0 <HAL_SPI_TransmitReceive+0x292>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f af54 	bne.w	80044c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f933 	bl	8004888 <SPI_EndRxTxTransaction>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
 8004634:	e000      	b.n	8004638 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800464c:	4618      	mov	r0, r3
 800464e:	3728      	adds	r7, #40	; 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004664:	f7fd fce8 	bl	8002038 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	4413      	add	r3, r2
 8004672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004674:	f7fd fce0 	bl	8002038 <HAL_GetTick>
 8004678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800467a:	4b39      	ldr	r3, [pc, #228]	; (8004760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	015b      	lsls	r3, r3, #5
 8004680:	0d1b      	lsrs	r3, r3, #20
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800468a:	e054      	b.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d050      	beq.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004694:	f7fd fcd0 	bl	8002038 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d902      	bls.n	80046aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d13d      	bne.n	8004726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c2:	d111      	bne.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046cc:	d004      	beq.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d107      	bne.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f0:	d10f      	bne.n	8004712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e017      	b.n	8004756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3b01      	subs	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	429a      	cmp	r2, r3
 8004752:	d19b      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000004 	.word	0x20000004

08004764 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004772:	f7fd fc61 	bl	8002038 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4413      	add	r3, r2
 8004780:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004782:	f7fd fc59 	bl	8002038 <HAL_GetTick>
 8004786:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004788:	4b3e      	ldr	r3, [pc, #248]	; (8004884 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00da      	lsls	r2, r3, #3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	0d1b      	lsrs	r3, r3, #20
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80047a0:	e062      	b.n	8004868 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047a8:	d109      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0x5a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80047bc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d050      	beq.n	8004868 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c6:	f7fd fc37 	bl	8002038 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d902      	bls.n	80047dc <SPI_WaitFifoStateUntilTimeout+0x78>
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d13d      	bne.n	8004858 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f4:	d111      	bne.n	800481a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fe:	d004      	beq.n	800480a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d107      	bne.n	800481a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	d10f      	bne.n	8004844 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004842:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e010      	b.n	800487a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3b01      	subs	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d194      	bne.n	80047a2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000004 	.word	0x20000004

08004888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ff5f 	bl	8004764 <SPI_WaitFifoStateUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e027      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fec4 	bl	8004654 <SPI_WaitFlagStateUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e014      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff ff38 	bl	8004764 <SPI_WaitFifoStateUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e000      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e040      	b.n	80049a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd f9b0 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f990 	bl	8004c78 <UART_SetConfig>
 8004958:	4603      	mov	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fbe6 	bl	800513c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fc6d 	bl	8005280 <UART_CheckIdleState>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	f040 8081 	bne.w	8004acc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_UART_Transmit+0x26>
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e079      	b.n	8004ace <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_UART_Transmit+0x38>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e072      	b.n	8004ace <HAL_UART_Transmit+0x11e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2221      	movs	r2, #33	; 0x21
 80049fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fe:	f7fd fb1b 	bl	8002038 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1c:	d108      	bne.n	8004a30 <HAL_UART_Transmit+0x80>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e003      	b.n	8004a38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a40:	e02c      	b.n	8004a9c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fc60 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e038      	b.n	8004ace <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	3302      	adds	r3, #2
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	e007      	b.n	8004a8a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	781a      	ldrb	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3301      	adds	r3, #1
 8004a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1cc      	bne.n	8004a42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2140      	movs	r1, #64	; 0x40
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fc2d 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e005      	b.n	8004ace <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b08a      	sub	sp, #40	; 0x28
 8004ada:	af02      	add	r7, sp, #8
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	f040 80be 	bne.w	8004c6c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_UART_Receive+0x26>
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0b6      	b.n	8004c6e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Receive+0x38>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e0af      	b.n	8004c6e <HAL_UART_Receive+0x198>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2222      	movs	r2, #34	; 0x22
 8004b22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2a:	f7fd fa85 	bl	8002038 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	d10e      	bne.n	8004b68 <HAL_UART_Receive+0x92>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_UART_Receive+0x88>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b5c:	e02d      	b.n	8004bba <HAL_UART_Receive+0xe4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	22ff      	movs	r2, #255	; 0xff
 8004b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b66:	e028      	b.n	8004bba <HAL_UART_Receive+0xe4>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <HAL_UART_Receive+0xb6>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <HAL_UART_Receive+0xac>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b80:	e01b      	b.n	8004bba <HAL_UART_Receive+0xe4>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	227f      	movs	r2, #127	; 0x7f
 8004b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b8a:	e016      	b.n	8004bba <HAL_UART_Receive+0xe4>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b94:	d10d      	bne.n	8004bb2 <HAL_UART_Receive+0xdc>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <HAL_UART_Receive+0xd2>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	227f      	movs	r2, #127	; 0x7f
 8004ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ba6:	e008      	b.n	8004bba <HAL_UART_Receive+0xe4>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb0:	e003      	b.n	8004bba <HAL_UART_Receive+0xe4>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bc0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	d108      	bne.n	8004bde <HAL_UART_Receive+0x108>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	e003      	b.n	8004be6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004bee:	e032      	b.n	8004c56 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fb89 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e031      	b.n	8004c6e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10c      	bne.n	8004c2a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	8a7b      	ldrh	r3, [r7, #18]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	3302      	adds	r3, #2
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	e00c      	b.n	8004c44 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	8a7b      	ldrh	r3, [r7, #18]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4013      	ands	r3, r2
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3301      	adds	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1c6      	bne.n	8004bf0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4ba7      	ldr	r3, [pc, #668]	; (8004f40 <UART_SetConfig+0x2c8>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6979      	ldr	r1, [r7, #20]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a95      	ldr	r2, [pc, #596]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d120      	bne.n	8004d36 <UART_SetConfig+0xbe>
 8004cf4:	4b94      	ldr	r3, [pc, #592]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d816      	bhi.n	8004d30 <UART_SetConfig+0xb8>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x90>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d1f 	.word	0x08004d1f
 8004d14:	08004d2b 	.word	0x08004d2b
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e14f      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e14c      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d24:	2304      	movs	r3, #4
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e149      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e146      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d30:	2310      	movs	r3, #16
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e143      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a84      	ldr	r2, [pc, #528]	; (8004f4c <UART_SetConfig+0x2d4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d132      	bne.n	8004da6 <UART_SetConfig+0x12e>
 8004d40:	4b81      	ldr	r3, [pc, #516]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d828      	bhi.n	8004da0 <UART_SetConfig+0x128>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0xdc>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004da1 	.word	0x08004da1
 8004d60:	08004da1 	.word	0x08004da1
 8004d64:	08004d95 	.word	0x08004d95
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	08004d8f 	.word	0x08004d8f
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da1 	.word	0x08004da1
 8004d84:	08004d9b 	.word	0x08004d9b
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e117      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e114      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d94:	2304      	movs	r3, #4
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e111      	b.n	8004fbe <UART_SetConfig+0x346>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e10e      	b.n	8004fbe <UART_SetConfig+0x346>
 8004da0:	2310      	movs	r3, #16
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e10b      	b.n	8004fbe <UART_SetConfig+0x346>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a69      	ldr	r2, [pc, #420]	; (8004f50 <UART_SetConfig+0x2d8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d120      	bne.n	8004df2 <UART_SetConfig+0x17a>
 8004db0:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dba:	2b30      	cmp	r3, #48	; 0x30
 8004dbc:	d013      	beq.n	8004de6 <UART_SetConfig+0x16e>
 8004dbe:	2b30      	cmp	r3, #48	; 0x30
 8004dc0:	d814      	bhi.n	8004dec <UART_SetConfig+0x174>
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d009      	beq.n	8004dda <UART_SetConfig+0x162>
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d810      	bhi.n	8004dec <UART_SetConfig+0x174>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <UART_SetConfig+0x15c>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d006      	beq.n	8004de0 <UART_SetConfig+0x168>
 8004dd2:	e00b      	b.n	8004dec <UART_SetConfig+0x174>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e0f1      	b.n	8004fbe <UART_SetConfig+0x346>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e0ee      	b.n	8004fbe <UART_SetConfig+0x346>
 8004de0:	2304      	movs	r3, #4
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e0eb      	b.n	8004fbe <UART_SetConfig+0x346>
 8004de6:	2308      	movs	r3, #8
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e0e8      	b.n	8004fbe <UART_SetConfig+0x346>
 8004dec:	2310      	movs	r3, #16
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e0e5      	b.n	8004fbe <UART_SetConfig+0x346>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <UART_SetConfig+0x2dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d120      	bne.n	8004e3e <UART_SetConfig+0x1c6>
 8004dfc:	4b52      	ldr	r3, [pc, #328]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e06:	2bc0      	cmp	r3, #192	; 0xc0
 8004e08:	d013      	beq.n	8004e32 <UART_SetConfig+0x1ba>
 8004e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e0c:	d814      	bhi.n	8004e38 <UART_SetConfig+0x1c0>
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d009      	beq.n	8004e26 <UART_SetConfig+0x1ae>
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d810      	bhi.n	8004e38 <UART_SetConfig+0x1c0>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <UART_SetConfig+0x1a8>
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d006      	beq.n	8004e2c <UART_SetConfig+0x1b4>
 8004e1e:	e00b      	b.n	8004e38 <UART_SetConfig+0x1c0>
 8004e20:	2300      	movs	r3, #0
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e0cb      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e26:	2302      	movs	r3, #2
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e0c8      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e0c5      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e32:	2308      	movs	r3, #8
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e0c2      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e0bf      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a45      	ldr	r2, [pc, #276]	; (8004f58 <UART_SetConfig+0x2e0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d125      	bne.n	8004e94 <UART_SetConfig+0x21c>
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e56:	d017      	beq.n	8004e88 <UART_SetConfig+0x210>
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d817      	bhi.n	8004e8e <UART_SetConfig+0x216>
 8004e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e62:	d00b      	beq.n	8004e7c <UART_SetConfig+0x204>
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d811      	bhi.n	8004e8e <UART_SetConfig+0x216>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <UART_SetConfig+0x1fe>
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d006      	beq.n	8004e82 <UART_SetConfig+0x20a>
 8004e74:	e00b      	b.n	8004e8e <UART_SetConfig+0x216>
 8004e76:	2300      	movs	r3, #0
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e0a0      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e09d      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e82:	2304      	movs	r3, #4
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e09a      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e097      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e8e:	2310      	movs	r3, #16
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e094      	b.n	8004fbe <UART_SetConfig+0x346>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a30      	ldr	r2, [pc, #192]	; (8004f5c <UART_SetConfig+0x2e4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d125      	bne.n	8004eea <UART_SetConfig+0x272>
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eac:	d017      	beq.n	8004ede <UART_SetConfig+0x266>
 8004eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb2:	d817      	bhi.n	8004ee4 <UART_SetConfig+0x26c>
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d00b      	beq.n	8004ed2 <UART_SetConfig+0x25a>
 8004eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebe:	d811      	bhi.n	8004ee4 <UART_SetConfig+0x26c>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <UART_SetConfig+0x254>
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec8:	d006      	beq.n	8004ed8 <UART_SetConfig+0x260>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x26c>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e075      	b.n	8004fbe <UART_SetConfig+0x346>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e072      	b.n	8004fbe <UART_SetConfig+0x346>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e06f      	b.n	8004fbe <UART_SetConfig+0x346>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e06c      	b.n	8004fbe <UART_SetConfig+0x346>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e069      	b.n	8004fbe <UART_SetConfig+0x346>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <UART_SetConfig+0x2e8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d137      	bne.n	8004f64 <UART_SetConfig+0x2ec>
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f02:	d017      	beq.n	8004f34 <UART_SetConfig+0x2bc>
 8004f04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f08:	d817      	bhi.n	8004f3a <UART_SetConfig+0x2c2>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	d00b      	beq.n	8004f28 <UART_SetConfig+0x2b0>
 8004f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f14:	d811      	bhi.n	8004f3a <UART_SetConfig+0x2c2>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <UART_SetConfig+0x2aa>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d006      	beq.n	8004f2e <UART_SetConfig+0x2b6>
 8004f20:	e00b      	b.n	8004f3a <UART_SetConfig+0x2c2>
 8004f22:	2300      	movs	r3, #0
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e04a      	b.n	8004fbe <UART_SetConfig+0x346>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e047      	b.n	8004fbe <UART_SetConfig+0x346>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e044      	b.n	8004fbe <UART_SetConfig+0x346>
 8004f34:	2308      	movs	r3, #8
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e041      	b.n	8004fbe <UART_SetConfig+0x346>
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e03e      	b.n	8004fbe <UART_SetConfig+0x346>
 8004f40:	efff69f3 	.word	0xefff69f3
 8004f44:	40011000 	.word	0x40011000
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40004400 	.word	0x40004400
 8004f50:	40004800 	.word	0x40004800
 8004f54:	40004c00 	.word	0x40004c00
 8004f58:	40005000 	.word	0x40005000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	40007800 	.word	0x40007800
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a71      	ldr	r2, [pc, #452]	; (8005130 <UART_SetConfig+0x4b8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d125      	bne.n	8004fba <UART_SetConfig+0x342>
 8004f6e:	4b71      	ldr	r3, [pc, #452]	; (8005134 <UART_SetConfig+0x4bc>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f7c:	d017      	beq.n	8004fae <UART_SetConfig+0x336>
 8004f7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f82:	d817      	bhi.n	8004fb4 <UART_SetConfig+0x33c>
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	d00b      	beq.n	8004fa2 <UART_SetConfig+0x32a>
 8004f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8e:	d811      	bhi.n	8004fb4 <UART_SetConfig+0x33c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <UART_SetConfig+0x324>
 8004f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f98:	d006      	beq.n	8004fa8 <UART_SetConfig+0x330>
 8004f9a:	e00b      	b.n	8004fb4 <UART_SetConfig+0x33c>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x346>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e00a      	b.n	8004fbe <UART_SetConfig+0x346>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e007      	b.n	8004fbe <UART_SetConfig+0x346>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e004      	b.n	8004fbe <UART_SetConfig+0x346>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e001      	b.n	8004fbe <UART_SetConfig+0x346>
 8004fba:	2310      	movs	r3, #16
 8004fbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc6:	d15b      	bne.n	8005080 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004fc8:	7ffb      	ldrb	r3, [r7, #31]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d827      	bhi.n	800501e <UART_SetConfig+0x3a6>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0x35c>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	0800501f 	.word	0x0800501f
 8004fe4:	0800500f 	.word	0x0800500f
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	0800501f 	.word	0x0800501f
 8004ff0:	0800501f 	.word	0x0800501f
 8004ff4:	08005017 	.word	0x08005017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7fe fc1e 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8004ffc:	61b8      	str	r0, [r7, #24]
        break;
 8004ffe:	e013      	b.n	8005028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005000:	f7fe fc2e 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8005004:	61b8      	str	r0, [r7, #24]
        break;
 8005006:	e00f      	b.n	8005028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005008:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <UART_SetConfig+0x4c0>)
 800500a:	61bb      	str	r3, [r7, #24]
        break;
 800500c:	e00c      	b.n	8005028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7fe fb51 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8005012:	61b8      	str	r0, [r7, #24]
        break;
 8005014:	e008      	b.n	8005028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e004      	b.n	8005028 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	77bb      	strb	r3, [r7, #30]
        break;
 8005026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d074      	beq.n	8005118 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	005a      	lsls	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	b29b      	uxth	r3, r3
 8005044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b0f      	cmp	r3, #15
 800504a:	d916      	bls.n	800507a <UART_SetConfig+0x402>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005052:	d212      	bcs.n	800507a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f023 030f 	bic.w	r3, r3, #15
 800505c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	b29a      	uxth	r2, r3
 800506a:	89fb      	ldrh	r3, [r7, #14]
 800506c:	4313      	orrs	r3, r2
 800506e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	89fa      	ldrh	r2, [r7, #14]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e04e      	b.n	8005118 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	77bb      	strb	r3, [r7, #30]
 800507e:	e04b      	b.n	8005118 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005080:	7ffb      	ldrb	r3, [r7, #31]
 8005082:	2b08      	cmp	r3, #8
 8005084:	d827      	bhi.n	80050d6 <UART_SetConfig+0x45e>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0x414>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050c7 	.word	0x080050c7
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050d7 	.word	0x080050d7
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b0:	f7fe fbc2 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 80050b4:	61b8      	str	r0, [r7, #24]
        break;
 80050b6:	e013      	b.n	80050e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7fe fbd2 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 80050bc:	61b8      	str	r0, [r7, #24]
        break;
 80050be:	e00f      	b.n	80050e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <UART_SetConfig+0x4c0>)
 80050c2:	61bb      	str	r3, [r7, #24]
        break;
 80050c4:	e00c      	b.n	80050e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fe faf5 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80050ca:	61b8      	str	r0, [r7, #24]
        break;
 80050cc:	e008      	b.n	80050e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d2:	61bb      	str	r3, [r7, #24]
        break;
 80050d4:	e004      	b.n	80050e0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77bb      	strb	r3, [r7, #30]
        break;
 80050de:	bf00      	nop
    }

    if (pclk != 0U)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	085a      	lsrs	r2, r3, #1
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	441a      	add	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b0f      	cmp	r3, #15
 8005100:	d908      	bls.n	8005114 <UART_SetConfig+0x49c>
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d204      	bcs.n	8005114 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e001      	b.n	8005118 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005124:	7fbb      	ldrb	r3, [r7, #30]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40007c00 	.word	0x40007c00
 8005134:	40023800 	.word	0x40023800
 8005138:	00f42400 	.word	0x00f42400

0800513c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d10a      	bne.n	8005252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005290:	f7fc fed2 	bl	8002038 <HAL_GetTick>
 8005294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d10e      	bne.n	80052c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f82d 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e023      	b.n	800530a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d10e      	bne.n	80052ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f817 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e00d      	b.n	800530a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005322:	e05e      	b.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d05a      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532c:	f7fc fe84 	bl	8002038 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	429a      	cmp	r2, r3
 800533a:	d302      	bcc.n	8005342 <UART_WaitOnFlagUntilTimeout+0x30>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11b      	bne.n	800537a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005350:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e043      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02c      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005396:	d124      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e00f      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d091      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005410:	4904      	ldr	r1, [pc, #16]	; (8005424 <MX_FATFS_Init+0x18>)
 8005412:	4805      	ldr	r0, [pc, #20]	; (8005428 <MX_FATFS_Init+0x1c>)
 8005414:	f003 fca6 	bl	8008d64 <FATFS_LinkDriver>
 8005418:	4603      	mov	r3, r0
 800541a:	461a      	mov	r2, r3
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <MX_FATFS_Init+0x20>)
 800541e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200008b8 	.word	0x200008b8
 8005428:	20000010 	.word	0x20000010
 800542c:	200008bc 	.word	0x200008bc

08005430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005436:	4618      	mov	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return USER_SPI_initialize(pdrv);
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f9dd 	bl	800580c <USER_SPI_initialize>
 8005452:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fabb 	bl	80059e4 <USER_SPI_status>
 800546e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 8005488:	7bf8      	ldrb	r0, [r7, #15]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	f000 fabe 	bl	8005a10 <USER_SPI_read>
 8005494:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count);
 80054ae:	7bf8      	ldrb	r0, [r7, #15]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	f000 fb11 	bl	8005adc <USER_SPI_write>
 80054ba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	603a      	str	r2, [r7, #0]
 80054ce:	71fb      	strb	r3, [r7, #7]
 80054d0:	460b      	mov	r3, r1
 80054d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 80054d4:	79b9      	ldrb	r1, [r7, #6]
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fb7a 	bl	8005bd4 <USER_SPI_ioctl>
 80054e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <SPI_Timer_On>:
BYTE CardType;      /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80054f4:	f7fc fda0 	bl	8002038 <HAL_GetTick>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <SPI_Timer_On+0x20>)
 80054fc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <SPI_Timer_On+0x24>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000d24 	.word	0x20000d24
 8005510:	20000d28 	.word	0x20000d28

08005514 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005518:	f7fc fd8e 	bl	8002038 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <SPI_Timer_Status+0x24>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	1ad2      	subs	r2, r2, r3
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <SPI_Timer_Status+0x28>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	bf34      	ite	cc
 800552c:	2301      	movcc	r3, #1
 800552e:	2300      	movcs	r3, #0
 8005530:	b2db      	uxtb	r3, r3
}
 8005532:	4618      	mov	r0, r3
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000d24 	.word	0x20000d24
 800553c:	20000d28 	.word	0x20000d28

08005540 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
  BYTE dat  /* Data to send */
)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af02      	add	r7, sp, #8
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
  BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800554a:	f107 020f 	add.w	r2, r7, #15
 800554e:	1df9      	adds	r1, r7, #7
 8005550:	2332      	movs	r3, #50	; 0x32
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2301      	movs	r3, #1
 8005556:	4804      	ldr	r0, [pc, #16]	; (8005568 <xchg_spi+0x28>)
 8005558:	f7fe fe69 	bl	800422e <HAL_SPI_TransmitReceive>
    return rxDat;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200007b0 	.word	0x200007b0

0800556c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
  BYTE *buff,   /* Pointer to data buffer */
  UINT btr    /* Number of bytes to receive (even number) */
)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  for(UINT i=0; i<btr; i++) {
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e00a      	b.n	8005592 <rcvr_spi_multi+0x26>
    *(buff+i) = xchg_spi(0xFF);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	18d4      	adds	r4, r2, r3
 8005582:	20ff      	movs	r0, #255	; 0xff
 8005584:	f7ff ffdc 	bl	8005540 <xchg_spi>
 8005588:	4603      	mov	r3, r0
 800558a:	7023      	strb	r3, [r4, #0]
  for(UINT i=0; i<btr; i++) {
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d3f0      	bcc.n	800557c <rcvr_spi_multi+0x10>
  }
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd90      	pop	{r4, r7, pc}

080055a4 <xmit_spi_multi>:
static
void xmit_spi_multi (
  const BYTE *buff, /* Pointer to the data */
  UINT btx      /* Number of bytes to send (even number) */
)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  for(UINT i=0; i<btx; i++) {
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e009      	b.n	80055c8 <xmit_spi_multi+0x24>
    xchg_spi(*(buff+i));
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ffbf 	bl	8005540 <xchg_spi>
  for(UINT i=0; i<btx; i++) {
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3301      	adds	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3f1      	bcc.n	80055b4 <xmit_spi_multi+0x10>
  }
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <wait_ready>:

static
int wait_ready (  /* 1:Ready, 0:Timeout */
  UINT wt     /* Timeout [ms] */
)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  //wait_ready needs its own timer, unfortunately, so it can't use the
  //spi_timer functions
  uint32_t waitSpiTimerTickStart;
  uint32_t waitSpiTimerTickDelay;

  waitSpiTimerTickStart = HAL_GetTick();
 80055e2:	f7fc fd29 	bl	8002038 <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]
  waitSpiTimerTickDelay = (uint32_t)wt;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	613b      	str	r3, [r7, #16]
  do {
    d = xchg_spi(0xFF);
 80055ec:	20ff      	movs	r0, #255	; 0xff
 80055ee:	f7ff ffa7 	bl	8005540 <xchg_spi>
 80055f2:	4603      	mov	r3, r0
 80055f4:	73fb      	strb	r3, [r7, #15]
    /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
  } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2bff      	cmp	r3, #255	; 0xff
 80055fa:	d007      	beq.n	800560c <wait_ready+0x32>
 80055fc:	f7fc fd1c 	bl	8002038 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	429a      	cmp	r2, r3
 800560a:	d8ef      	bhi.n	80055ec <wait_ready+0x12>

  return (d == 0xFF) ? 1 : 0;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  CS_HIGH();    /* Set CS# high */
 8005624:	2201      	movs	r2, #1
 8005626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800562a:	4804      	ldr	r0, [pc, #16]	; (800563c <despiselect+0x1c>)
 800562c:	f7fd fc8e 	bl	8002f4c <HAL_GPIO_WritePin>
  xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005630:	20ff      	movs	r0, #255	; 0xff
 8005632:	f7ff ff85 	bl	8005540 <xchg_spi>

}
 8005636:	bf00      	nop
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40020c00 	.word	0x40020c00

08005640 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)  /* 1:OK, 0:Timeout */
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  CS_LOW();   /* Set CS# low */
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800564a:	480a      	ldr	r0, [pc, #40]	; (8005674 <spiselect+0x34>)
 800564c:	f7fd fc7e 	bl	8002f4c <HAL_GPIO_WritePin>
  xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8005650:	20ff      	movs	r0, #255	; 0xff
 8005652:	f7ff ff75 	bl	8005540 <xchg_spi>
  if (wait_ready(500)) return 1;  /* Wait for card ready */
 8005656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800565a:	f7ff ffbe 	bl	80055da <wait_ready>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <spiselect+0x28>
 8005664:	2301      	movs	r3, #1
 8005666:	e002      	b.n	800566e <spiselect+0x2e>

  despiselect();
 8005668:	f7ff ffda 	bl	8005620 <despiselect>
  return 0; /* Timeout */
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40020c00 	.word	0x40020c00

08005678 <rcvr_datablock>:
static
int rcvr_datablock (  /* 1:OK, 0:Error */
  BYTE *buff,     /* Data buffer */
  UINT btr      /* Data block length (byte) */
)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  BYTE token;


  SPI_Timer_On(200);
 8005682:	20c8      	movs	r0, #200	; 0xc8
 8005684:	f7ff ff32 	bl	80054ec <SPI_Timer_On>
  do {              /* Wait for DataStart token in timeout of 200ms */
    token = xchg_spi(0xFF);
 8005688:	20ff      	movs	r0, #255	; 0xff
 800568a:	f7ff ff59 	bl	8005540 <xchg_spi>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
    /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
  } while ((token == 0xFF) && SPI_Timer_Status());
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2bff      	cmp	r3, #255	; 0xff
 8005696:	d104      	bne.n	80056a2 <rcvr_datablock+0x2a>
 8005698:	f7ff ff3c 	bl	8005514 <SPI_Timer_Status>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f2      	bne.n	8005688 <rcvr_datablock+0x10>
  if(token != 0xFE) return 0;   /* Function fails if invalid DataStart token or timeout */
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2bfe      	cmp	r3, #254	; 0xfe
 80056a6:	d001      	beq.n	80056ac <rcvr_datablock+0x34>
 80056a8:	2300      	movs	r3, #0
 80056aa:	e00a      	b.n	80056c2 <rcvr_datablock+0x4a>

  rcvr_spi_multi(buff, btr);    /* Store trailing data to the buffer */
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ff5c 	bl	800556c <rcvr_spi_multi>
  xchg_spi(0xFF); xchg_spi(0xFF);     /* Discard CRC */
 80056b4:	20ff      	movs	r0, #255	; 0xff
 80056b6:	f7ff ff43 	bl	8005540 <xchg_spi>
 80056ba:	20ff      	movs	r0, #255	; 0xff
 80056bc:	f7ff ff40 	bl	8005540 <xchg_spi>

  return 1;           /* Function succeeded */
 80056c0:	2301      	movs	r3, #1
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <xmit_datablock>:
static
int xmit_datablock (  /* 1:OK, 0:Failed */
  const BYTE *buff, /* Ponter to 512 byte data to be sent */
  BYTE token      /* Token */
)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]
  BYTE resp;


  if (!wait_ready(500)) return 0;   /* Wait for card ready */
 80056d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056da:	f7ff ff7e 	bl	80055da <wait_ready>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <xmit_datablock+0x1e>
 80056e4:	2300      	movs	r3, #0
 80056e6:	e01e      	b.n	8005726 <xmit_datablock+0x5c>

  xchg_spi(token);          /* Send token */
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ff28 	bl	8005540 <xchg_spi>
  if (token != 0xFD) {        /* Send data if token is other than StopTran */
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	2bfd      	cmp	r3, #253	; 0xfd
 80056f4:	d016      	beq.n	8005724 <xmit_datablock+0x5a>
    xmit_spi_multi(buff, 512);    /* Data */
 80056f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ff52 	bl	80055a4 <xmit_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 8005700:	20ff      	movs	r0, #255	; 0xff
 8005702:	f7ff ff1d 	bl	8005540 <xchg_spi>
 8005706:	20ff      	movs	r0, #255	; 0xff
 8005708:	f7ff ff1a 	bl	8005540 <xchg_spi>

    resp = xchg_spi(0xFF);        /* Receive data resp */
 800570c:	20ff      	movs	r0, #255	; 0xff
 800570e:	f7ff ff17 	bl	8005540 <xchg_spi>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
    if ((resp & 0x1F) != 0x05) return 0;  /* Function fails if the data packet was not accepted */
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2b05      	cmp	r3, #5
 800571e:	d001      	beq.n	8005724 <xmit_datablock+0x5a>
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <xmit_datablock+0x5c>
  }
  return 1;
 8005724:	2301      	movs	r3, #1
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <send_cmd>:
static
BYTE send_cmd (   /* Return value: R1 resp (bit7==1:Failed to send) */
  BYTE cmd,   /* Command index */
  DWORD arg   /* Argument */
)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	4603      	mov	r3, r0
 8005736:	6039      	str	r1, [r7, #0]
 8005738:	71fb      	strb	r3, [r7, #7]
  BYTE n, res;


  if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da0e      	bge.n	8005760 <send_cmd+0x32>
    cmd &= 0x7F;
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005748:	71fb      	strb	r3, [r7, #7]
    res = send_cmd(CMD55, 0);
 800574a:	2100      	movs	r1, #0
 800574c:	2037      	movs	r0, #55	; 0x37
 800574e:	f7ff ffee 	bl	800572e <send_cmd>
 8005752:	4603      	mov	r3, r0
 8005754:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d901      	bls.n	8005760 <send_cmd+0x32>
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	e051      	b.n	8005804 <send_cmd+0xd6>
  }

  /* Select the card and wait for ready except to stop multiple block read */
  if (cmd != CMD12) {
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d008      	beq.n	8005778 <send_cmd+0x4a>
    despiselect();
 8005766:	f7ff ff5b 	bl	8005620 <despiselect>
    if (!spiselect()) return 0xFF;
 800576a:	f7ff ff69 	bl	8005640 <spiselect>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <send_cmd+0x4a>
 8005774:	23ff      	movs	r3, #255	; 0xff
 8005776:	e045      	b.n	8005804 <send_cmd+0xd6>
  }

  /* Send command packet */
  xchg_spi(0x40 | cmd);       /* Start + command index */
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577e:	b2db      	uxtb	r3, r3
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fedd 	bl	8005540 <xchg_spi>
  xchg_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	0e1b      	lsrs	r3, r3, #24
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fed7 	bl	8005540 <xchg_spi>
  xchg_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	b2db      	uxtb	r3, r3
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fed1 	bl	8005540 <xchg_spi>
  xchg_spi((BYTE)(arg >> 8));     /* Argument[15..8] */
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fecb 	bl	8005540 <xchg_spi>
  xchg_spi((BYTE)arg);        /* Argument[7..0] */
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fec6 	bl	8005540 <xchg_spi>
  n = 0x01;             /* Dummy CRC + Stop */
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <send_cmd+0x94>
 80057be:	2395      	movs	r3, #149	; 0x95
 80057c0:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d101      	bne.n	80057cc <send_cmd+0x9e>
 80057c8:	2387      	movs	r3, #135	; 0x87
 80057ca:	73fb      	strb	r3, [r7, #15]
  xchg_spi(n);
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff feb6 	bl	8005540 <xchg_spi>

  /* Receive command resp */
  if (cmd == CMD12) xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d102      	bne.n	80057e0 <send_cmd+0xb2>
 80057da:	20ff      	movs	r0, #255	; 0xff
 80057dc:	f7ff feb0 	bl	8005540 <xchg_spi>
  n = 10;               /* Wait for response (10 bytes max) */
 80057e0:	230a      	movs	r3, #10
 80057e2:	73fb      	strb	r3, [r7, #15]
  do {
    res = xchg_spi(0xFF);
 80057e4:	20ff      	movs	r0, #255	; 0xff
 80057e6:	f7ff feab 	bl	8005540 <xchg_spi>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80057ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da05      	bge.n	8005802 <send_cmd+0xd4>
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <send_cmd+0xb6>

  return res;             /* Return received response */
 8005802:	7bbb      	ldrb	r3, [r7, #14]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
  BYTE drv    /* Physical drive number (0) */
)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
  BYTE n, cmd, ty, ocr[4];

  if (drv != 0) return STA_NOINIT;    /* Supports only drive 0 */
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <USER_SPI_initialize+0x14>
 800581c:	2301      	movs	r3, #1
 800581e:	e0d6      	b.n	80059ce <USER_SPI_initialize+0x1c2>
  //assume SPI already init init_spi(); /* Initialize SPI */

  if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 8005820:	4b6d      	ldr	r3, [pc, #436]	; (80059d8 <USER_SPI_initialize+0x1cc>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <USER_SPI_initialize+0x2a>
 800582e:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <USER_SPI_initialize+0x1cc>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	e0cb      	b.n	80059ce <USER_SPI_initialize+0x1c2>

  FCLK_SLOW();
 8005836:	4b69      	ldr	r3, [pc, #420]	; (80059dc <USER_SPI_initialize+0x1d0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005840:	4b66      	ldr	r3, [pc, #408]	; (80059dc <USER_SPI_initialize+0x1d0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005848:	601a      	str	r2, [r3, #0]
  for (n = 10; n; n--) xchg_spi(0xFF);  /* Send 80 dummy clocks */
 800584a:	230a      	movs	r3, #10
 800584c:	73fb      	strb	r3, [r7, #15]
 800584e:	e005      	b.n	800585c <USER_SPI_initialize+0x50>
 8005850:	20ff      	movs	r0, #255	; 0xff
 8005852:	f7ff fe75 	bl	8005540 <xchg_spi>
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	3b01      	subs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f6      	bne.n	8005850 <USER_SPI_initialize+0x44>

  ty = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	737b      	strb	r3, [r7, #13]
  if (send_cmd(CMD0, 0) == 1) {     /* Put the card SPI/Idle state */
 8005866:	2100      	movs	r1, #0
 8005868:	2000      	movs	r0, #0
 800586a:	f7ff ff60 	bl	800572e <send_cmd>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	f040 808b 	bne.w	800598c <USER_SPI_initialize+0x180>
    SPI_Timer_On(1000);         /* Initialization timeout = 1 sec */
 8005876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800587a:	f7ff fe37 	bl	80054ec <SPI_Timer_On>
    if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 800587e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005882:	2008      	movs	r0, #8
 8005884:	f7ff ff53 	bl	800572e <send_cmd>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d151      	bne.n	8005932 <USER_SPI_initialize+0x126>
      for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);  /* Get 32 bit return value of R7 resp */
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e00d      	b.n	80058b0 <USER_SPI_initialize+0xa4>
 8005894:	7bfc      	ldrb	r4, [r7, #15]
 8005896:	20ff      	movs	r0, #255	; 0xff
 8005898:	f7ff fe52 	bl	8005540 <xchg_spi>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	f107 0310 	add.w	r3, r7, #16
 80058a4:	4423      	add	r3, r4
 80058a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	3301      	adds	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d9ee      	bls.n	8005894 <USER_SPI_initialize+0x88>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {       /* Is the card supports vcc of 2.7-3.6V? */
 80058b6:	7abb      	ldrb	r3, [r7, #10]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d167      	bne.n	800598c <USER_SPI_initialize+0x180>
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	2baa      	cmp	r3, #170	; 0xaa
 80058c0:	d164      	bne.n	800598c <USER_SPI_initialize+0x180>
        while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 80058c2:	bf00      	nop
 80058c4:	f7ff fe26 	bl	8005514 <SPI_Timer_Status>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <USER_SPI_initialize+0xd2>
 80058ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058d2:	20a9      	movs	r0, #169	; 0xa9
 80058d4:	f7ff ff2b 	bl	800572e <send_cmd>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f2      	bne.n	80058c4 <USER_SPI_initialize+0xb8>
        if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
 80058de:	f7ff fe19 	bl	8005514 <SPI_Timer_Status>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d051      	beq.n	800598c <USER_SPI_initialize+0x180>
 80058e8:	2100      	movs	r1, #0
 80058ea:	203a      	movs	r0, #58	; 0x3a
 80058ec:	f7ff ff1f 	bl	800572e <send_cmd>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d14a      	bne.n	800598c <USER_SPI_initialize+0x180>
          for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
 80058fa:	e00d      	b.n	8005918 <USER_SPI_initialize+0x10c>
 80058fc:	7bfc      	ldrb	r4, [r7, #15]
 80058fe:	20ff      	movs	r0, #255	; 0xff
 8005900:	f7ff fe1e 	bl	8005540 <xchg_spi>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	f107 0310 	add.w	r3, r7, #16
 800590c:	4423      	add	r3, r4
 800590e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	3301      	adds	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d9ee      	bls.n	80058fc <USER_SPI_initialize+0xf0>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800591e:	7a3b      	ldrb	r3, [r7, #8]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USER_SPI_initialize+0x120>
 8005928:	230c      	movs	r3, #12
 800592a:	e000      	b.n	800592e <USER_SPI_initialize+0x122>
 800592c:	2304      	movs	r3, #4
 800592e:	737b      	strb	r3, [r7, #13]
 8005930:	e02c      	b.n	800598c <USER_SPI_initialize+0x180>
        }
      }
    } else {  /* Not SDv2 card */
      if (send_cmd(ACMD41, 0) <= 1)   { /* SDv1 or MMC? */
 8005932:	2100      	movs	r1, #0
 8005934:	20a9      	movs	r0, #169	; 0xa9
 8005936:	f7ff fefa 	bl	800572e <send_cmd>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d804      	bhi.n	800594a <USER_SPI_initialize+0x13e>
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 8005940:	2302      	movs	r3, #2
 8005942:	737b      	strb	r3, [r7, #13]
 8005944:	23a9      	movs	r3, #169	; 0xa9
 8005946:	73bb      	strb	r3, [r7, #14]
 8005948:	e003      	b.n	8005952 <USER_SPI_initialize+0x146>
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 (CMD1(0)) */
 800594a:	2301      	movs	r3, #1
 800594c:	737b      	strb	r3, [r7, #13]
 800594e:	2301      	movs	r3, #1
 8005950:	73bb      	strb	r3, [r7, #14]
      }
      while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;    /* Wait for end of initialization */
 8005952:	bf00      	nop
 8005954:	f7ff fdde 	bl	8005514 <SPI_Timer_Status>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <USER_SPI_initialize+0x162>
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fee3 	bl	800572e <send_cmd>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f2      	bne.n	8005954 <USER_SPI_initialize+0x148>
      if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 800596e:	f7ff fdd1 	bl	8005514 <SPI_Timer_Status>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <USER_SPI_initialize+0x17c>
 8005978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800597c:	2010      	movs	r0, #16
 800597e:	f7ff fed6 	bl	800572e <send_cmd>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <USER_SPI_initialize+0x180>
        ty = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	737b      	strb	r3, [r7, #13]
    }
  }
  CardType = ty;  /* Card type */
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <USER_SPI_initialize+0x1d4>)
 800598e:	7b7b      	ldrb	r3, [r7, #13]
 8005990:	7013      	strb	r3, [r2, #0]
  despiselect();
 8005992:	f7ff fe45 	bl	8005620 <despiselect>

  if (ty) {     /* OK */
 8005996:	7b7b      	ldrb	r3, [r7, #13]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <USER_SPI_initialize+0x1b6>
    FCLK_FAST();      /* Set fast clock */
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <USER_SPI_initialize+0x1d0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <USER_SPI_initialize+0x1d0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0210 	orr.w	r2, r2, #16
 80059ae:	601a      	str	r2, [r3, #0]
    Stat &= ~STA_NOINIT;  /* Clear STA_NOINIT flag */
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <USER_SPI_initialize+0x1cc>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <USER_SPI_initialize+0x1cc>)
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e002      	b.n	80059c8 <USER_SPI_initialize+0x1bc>
  } else {      /* Failed */
    Stat = STA_NOINIT;
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <USER_SPI_initialize+0x1cc>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <USER_SPI_initialize+0x1cc>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b2db      	uxtb	r3, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd90      	pop	{r4, r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000024 	.word	0x20000024
 80059dc:	200007b0 	.word	0x200007b0
 80059e0:	200004c8 	.word	0x200004c8

080059e4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
  BYTE drv    /* Physical drive number (0) */
)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;   /* Supports only drive 0 */
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <USER_SPI_status+0x14>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e002      	b.n	80059fe <USER_SPI_status+0x1a>

  return Stat;  /* Return disk status */
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <USER_SPI_status+0x28>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2db      	uxtb	r3, r3
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000024 	.word	0x20000024

08005a10 <USER_SPI_read>:
  BYTE drv,   /* Physical drive number (0) */
  BYTE *buff,   /* Pointer to the data buffer to store read data */
  DWORD sector, /* Start sector number (LBA) */
  UINT count    /* Number of sectors to read (1..128) */
)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
  if (drv || !count) return RES_PARERR;   /* Check parameter */
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <USER_SPI_read+0x1c>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <USER_SPI_read+0x20>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	e04d      	b.n	8005acc <USER_SPI_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
 8005a30:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <USER_SPI_read+0xc4>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <USER_SPI_read+0x32>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e044      	b.n	8005acc <USER_SPI_read+0xbc>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 8005a42:	4b25      	ldr	r3, [pc, #148]	; (8005ad8 <USER_SPI_read+0xc8>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <USER_SPI_read+0x44>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	025b      	lsls	r3, r3, #9
 8005a52:	607b      	str	r3, [r7, #4]

  if (count == 1) { /* Single sector read */
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d111      	bne.n	8005a7e <USER_SPI_read+0x6e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	2011      	movs	r0, #17
 8005a5e:	f7ff fe66 	bl	800572e <send_cmd>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d129      	bne.n	8005abc <USER_SPI_read+0xac>
      && rcvr_datablock(buff, 512)) {
 8005a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a6c:	68b8      	ldr	r0, [r7, #8]
 8005a6e:	f7ff fe03 	bl	8005678 <rcvr_datablock>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d021      	beq.n	8005abc <USER_SPI_read+0xac>
      count = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	e01e      	b.n	8005abc <USER_SPI_read+0xac>
    }
  }
  else {        /* Multiple sector read */
    if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	2012      	movs	r0, #18
 8005a82:	f7ff fe54 	bl	800572e <send_cmd>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d117      	bne.n	8005abc <USER_SPI_read+0xac>
      do {
        if (!rcvr_datablock(buff, 512)) break;
 8005a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a90:	68b8      	ldr	r0, [r7, #8]
 8005a92:	f7ff fdf1 	bl	8005678 <rcvr_datablock>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <USER_SPI_read+0xa2>
        buff += 512;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005aa2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ed      	bne.n	8005a8c <USER_SPI_read+0x7c>
 8005ab0:	e000      	b.n	8005ab4 <USER_SPI_read+0xa4>
        if (!rcvr_datablock(buff, 512)) break;
 8005ab2:	bf00      	nop
      send_cmd(CMD12, 0);       /* STOP_TRANSMISSION */
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	200c      	movs	r0, #12
 8005ab8:	f7ff fe39 	bl	800572e <send_cmd>
    }
  }
  despiselect();
 8005abc:	f7ff fdb0 	bl	8005620 <despiselect>

  return count ? RES_ERROR : RES_OK;  /* Return result */
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bf14      	ite	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	2300      	moveq	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000024 	.word	0x20000024
 8005ad8:	200004c8 	.word	0x200004c8

08005adc <USER_SPI_write>:
  BYTE drv,     /* Physical drive number (0) */
  const BYTE *buff, /* Ponter to the data to write */
  DWORD sector,   /* Start sector number (LBA) */
  UINT count      /* Number of sectors to write (1..128) */
)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
  if (drv || !count) return RES_PARERR;   /* Check parameter */
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <USER_SPI_write+0x1c>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <USER_SPI_write+0x20>
 8005af8:	2304      	movs	r3, #4
 8005afa:	e063      	b.n	8005bc4 <USER_SPI_write+0xe8>
  if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check drive status */
 8005afc:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <USER_SPI_write+0xf0>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <USER_SPI_write+0x32>
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e05a      	b.n	8005bc4 <USER_SPI_write+0xe8>
  if (Stat & STA_PROTECT) return RES_WRPRT; /* Check write protect */
 8005b0e:	4b2f      	ldr	r3, [pc, #188]	; (8005bcc <USER_SPI_write+0xf0>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <USER_SPI_write+0x44>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e051      	b.n	8005bc4 <USER_SPI_write+0xe8>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <USER_SPI_write+0xf4>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <USER_SPI_write+0x56>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	025b      	lsls	r3, r3, #9
 8005b30:	607b      	str	r3, [r7, #4]

  if (count == 1) { /* Single sector write */
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d110      	bne.n	8005b5a <USER_SPI_write+0x7e>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	2018      	movs	r0, #24
 8005b3c:	f7ff fdf7 	bl	800572e <send_cmd>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d136      	bne.n	8005bb4 <USER_SPI_write+0xd8>
      && xmit_datablock(buff, 0xFE)) {
 8005b46:	21fe      	movs	r1, #254	; 0xfe
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f7ff fdbe 	bl	80056ca <xmit_datablock>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02f      	beq.n	8005bb4 <USER_SPI_write+0xd8>
      count = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	e02c      	b.n	8005bb4 <USER_SPI_write+0xd8>
    }
  }
  else {        /* Multiple sector write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <USER_SPI_write+0xf4>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 0306 	and.w	r3, r3, #6
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <USER_SPI_write+0x92>
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	2097      	movs	r0, #151	; 0x97
 8005b6a:	f7ff fde0 	bl	800572e <send_cmd>
    if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	2019      	movs	r0, #25
 8005b72:	f7ff fddc 	bl	800572e <send_cmd>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11b      	bne.n	8005bb4 <USER_SPI_write+0xd8>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
 8005b7c:	21fc      	movs	r1, #252	; 0xfc
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	f7ff fda3 	bl	80056ca <xmit_datablock>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <USER_SPI_write+0xc4>
        buff += 512;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005b90:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1ee      	bne.n	8005b7c <USER_SPI_write+0xa0>
 8005b9e:	e000      	b.n	8005ba2 <USER_SPI_write+0xc6>
        if (!xmit_datablock(buff, 0xFC)) break;
 8005ba0:	bf00      	nop
      if (!xmit_datablock(0, 0xFD)) count = 1;  /* STOP_TRAN token */
 8005ba2:	21fd      	movs	r1, #253	; 0xfd
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f7ff fd90 	bl	80056ca <xmit_datablock>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <USER_SPI_write+0xd8>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	603b      	str	r3, [r7, #0]
    }
  }
  despiselect();
 8005bb4:	f7ff fd34 	bl	8005620 <despiselect>

  return count ? RES_ERROR : RES_OK;  /* Return result */
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000024 	.word	0x20000024
 8005bd0:	200004c8 	.word	0x200004c8

08005bd4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
  BYTE drv,   /* Physical drive number (0) */
  BYTE cmd,   /* Control command code */
  void *buff    /* Pointer to the conrtol data */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	603a      	str	r2, [r7, #0]
 8005bde:	71fb      	strb	r3, [r7, #7]
 8005be0:	460b      	mov	r3, r1
 8005be2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16];
  DWORD *dp, st, ed, csize;


  if (drv) return RES_PARERR;         /* Check parameter */
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <USER_SPI_ioctl+0x1a>
 8005bea:	2304      	movs	r3, #4
 8005bec:	e15a      	b.n	8005ea4 <USER_SPI_ioctl+0x2d0>
  if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
 8005bee:	4baf      	ldr	r3, [pc, #700]	; (8005eac <USER_SPI_ioctl+0x2d8>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <USER_SPI_ioctl+0x2c>
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e151      	b.n	8005ea4 <USER_SPI_ioctl+0x2d0>

  res = RES_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  switch (cmd) {
 8005c06:	79bb      	ldrb	r3, [r7, #6]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	f200 8136 	bhi.w	8005e7a <USER_SPI_ioctl+0x2a6>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <USER_SPI_ioctl+0x40>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c29 	.word	0x08005c29
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005e7b 	.word	0x08005e7b
 8005c20:	08005ce9 	.word	0x08005ce9
 8005c24:	08005ddf 	.word	0x08005ddf
  case CTRL_SYNC :    /* Wait for end of internal write process of the drive */
    if (spiselect()) res = RES_OK;
 8005c28:	f7ff fd0a 	bl	8005640 <spiselect>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8127 	beq.w	8005e82 <USER_SPI_ioctl+0x2ae>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c3a:	e122      	b.n	8005e82 <USER_SPI_ioctl+0x2ae>

  case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
    if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	2009      	movs	r0, #9
 8005c40:	f7ff fd75 	bl	800572e <send_cmd>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 811d 	bne.w	8005e86 <USER_SPI_ioctl+0x2b2>
 8005c4c:	f107 030c 	add.w	r3, r7, #12
 8005c50:	2110      	movs	r1, #16
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fd10 	bl	8005678 <rcvr_datablock>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8113 	beq.w	8005e86 <USER_SPI_ioctl+0x2b2>
      if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8005c60:	7b3b      	ldrb	r3, [r7, #12]
 8005c62:	099b      	lsrs	r3, r3, #6
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d111      	bne.n	8005c8e <USER_SPI_ioctl+0xba>
        csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005c6a:	7d7b      	ldrb	r3, [r7, #21]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	7d3b      	ldrb	r3, [r7, #20]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	4413      	add	r3, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005c7e:	4413      	add	r3, r2
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
        *(DWORD*)buff = csize << 10;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	029a      	lsls	r2, r3, #10
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e028      	b.n	8005ce0 <USER_SPI_ioctl+0x10c>
      } else {          /* SDC ver 1.XX or MMC ver 3 */
        n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005c8e:	7c7b      	ldrb	r3, [r7, #17]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	7dbb      	ldrb	r3, [r7, #22]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	7d7b      	ldrb	r3, [r7, #21]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0306 	and.w	r3, r3, #6
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005cb6:	7d3b      	ldrb	r3, [r7, #20]
 8005cb8:	099b      	lsrs	r3, r3, #6
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	7cbb      	ldrb	r3, [r7, #18]
 8005cc6:	029b      	lsls	r3, r3, #10
 8005cc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ccc:	4413      	add	r3, r2
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
        *(DWORD*)buff = csize << (n - 9);
 8005cd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005cd6:	3b09      	subs	r3, #9
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	601a      	str	r2, [r3, #0]
      }
      res = RES_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    break;
 8005ce6:	e0ce      	b.n	8005e86 <USER_SPI_ioctl+0x2b2>

  case GET_BLOCK_SIZE : /* Get erase block size in unit of sector (DWORD) */
    if (CardType & CT_SD2) {  /* SDC ver 2.00 */
 8005ce8:	4b71      	ldr	r3, [pc, #452]	; (8005eb0 <USER_SPI_ioctl+0x2dc>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d031      	beq.n	8005d58 <USER_SPI_ioctl+0x184>
      if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	208d      	movs	r0, #141	; 0x8d
 8005cf8:	f7ff fd19 	bl	800572e <send_cmd>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 80c3 	bne.w	8005e8a <USER_SPI_ioctl+0x2b6>
        xchg_spi(0xFF);
 8005d04:	20ff      	movs	r0, #255	; 0xff
 8005d06:	f7ff fc1b 	bl	8005540 <xchg_spi>
        if (rcvr_datablock(csd, 16)) {        /* Read partial block */
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	2110      	movs	r1, #16
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fcb1 	bl	8005678 <rcvr_datablock>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80b6 	beq.w	8005e8a <USER_SPI_ioctl+0x2b6>
          for (n = 64 - 16; n; n--) xchg_spi(0xFF); /* Purge trailing data */
 8005d1e:	2330      	movs	r3, #48	; 0x30
 8005d20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005d24:	e007      	b.n	8005d36 <USER_SPI_ioctl+0x162>
 8005d26:	20ff      	movs	r0, #255	; 0xff
 8005d28:	f7ff fc0a 	bl	8005540 <xchg_spi>
 8005d2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d30:	3b01      	subs	r3, #1
 8005d32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005d36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f3      	bne.n	8005d26 <USER_SPI_ioctl+0x152>
          *(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005d3e:	7dbb      	ldrb	r3, [r7, #22]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	2310      	movs	r3, #16
 8005d48:	fa03 f202 	lsl.w	r2, r3, r2
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
          res = RES_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
        }
        res = RES_OK;
      }
    }
    break;
 8005d56:	e098      	b.n	8005e8a <USER_SPI_ioctl+0x2b6>
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 8005d58:	2100      	movs	r1, #0
 8005d5a:	2009      	movs	r0, #9
 8005d5c:	f7ff fce7 	bl	800572e <send_cmd>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 8091 	bne.w	8005e8a <USER_SPI_ioctl+0x2b6>
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	2110      	movs	r1, #16
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fc82 	bl	8005678 <rcvr_datablock>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8087 	beq.w	8005e8a <USER_SPI_ioctl+0x2b6>
        if (CardType & CT_SD1) {  /* SDC ver 1.XX */
 8005d7c:	4b4c      	ldr	r3, [pc, #304]	; (8005eb0 <USER_SPI_ioctl+0x2dc>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d012      	beq.n	8005dae <USER_SPI_ioctl+0x1da>
          *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005d90:	7dfa      	ldrb	r2, [r7, #23]
 8005d92:	09d2      	lsrs	r2, r2, #7
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	4413      	add	r3, r2
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	7e7b      	ldrb	r3, [r7, #25]
 8005d9c:	099b      	lsrs	r3, r3, #6
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e013      	b.n	8005dd6 <USER_SPI_ioctl+0x202>
          *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005dae:	7dbb      	ldrb	r3, [r7, #22]
 8005db0:	109b      	asrs	r3, r3, #2
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	3301      	adds	r3, #1
 8005dba:	7dfa      	ldrb	r2, [r7, #23]
 8005dbc:	00d2      	lsls	r2, r2, #3
 8005dbe:	f002 0218 	and.w	r2, r2, #24
 8005dc2:	7df9      	ldrb	r1, [r7, #23]
 8005dc4:	0949      	lsrs	r1, r1, #5
 8005dc6:	b2c9      	uxtb	r1, r1
 8005dc8:	440a      	add	r2, r1
 8005dca:	3201      	adds	r2, #1
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	601a      	str	r2, [r3, #0]
        res = RES_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ddc:	e055      	b.n	8005e8a <USER_SPI_ioctl+0x2b6>

  case CTRL_TRIM :  /* Erase a block of sectors (used when _USE_ERASE == 1) */
    if (!(CardType & CT_SDC)) break;        /* Check if the card is SDC */
 8005dde:	4b34      	ldr	r3, [pc, #208]	; (8005eb0 <USER_SPI_ioctl+0x2dc>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d051      	beq.n	8005e8e <USER_SPI_ioctl+0x2ba>
    if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
 8005dea:	f107 020c 	add.w	r2, r7, #12
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	210b      	movs	r1, #11
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff feee 	bl	8005bd4 <USER_SPI_ioctl>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d149      	bne.n	8005e92 <USER_SPI_ioctl+0x2be>
    if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 8005dfe:	7b3b      	ldrb	r3, [r7, #12]
 8005e00:	099b      	lsrs	r3, r3, #6
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <USER_SPI_ioctl+0x23e>
 8005e08:	7dbb      	ldrb	r3, [r7, #22]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d041      	beq.n	8005e96 <USER_SPI_ioctl+0x2c2>
    dp = buff; st = dp[0]; ed = dp[1];        /* Load sector block */
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
    if (!(CardType & CT_BLOCK)) {
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <USER_SPI_ioctl+0x2dc>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d105      	bne.n	8005e3a <USER_SPI_ioctl+0x266>
      st *= 512; ed *= 512;
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	025b      	lsls	r3, r3, #9
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	025b      	lsls	r3, r3, #9
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8005e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3c:	2020      	movs	r0, #32
 8005e3e:	f7ff fc76 	bl	800572e <send_cmd>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d128      	bne.n	8005e9a <USER_SPI_ioctl+0x2c6>
 8005e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e4a:	2021      	movs	r0, #33	; 0x21
 8005e4c:	f7ff fc6f 	bl	800572e <send_cmd>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d121      	bne.n	8005e9a <USER_SPI_ioctl+0x2c6>
 8005e56:	2100      	movs	r1, #0
 8005e58:	2026      	movs	r0, #38	; 0x26
 8005e5a:	f7ff fc68 	bl	800572e <send_cmd>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11a      	bne.n	8005e9a <USER_SPI_ioctl+0x2c6>
 8005e64:	f247 5030 	movw	r0, #30000	; 0x7530
 8005e68:	f7ff fbb7 	bl	80055da <wait_ready>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d013      	beq.n	8005e9a <USER_SPI_ioctl+0x2c6>
      res = RES_OK; /* FatFs does not check result of this command */
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    break;
 8005e78:	e00f      	b.n	8005e9a <USER_SPI_ioctl+0x2c6>

  default:
    res = RES_PARERR;
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e80:	e00c      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    break;
 8005e82:	bf00      	nop
 8005e84:	e00a      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    break;
 8005e86:	bf00      	nop
 8005e88:	e008      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    break;
 8005e8a:	bf00      	nop
 8005e8c:	e006      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    if (!(CardType & CT_SDC)) break;        /* Check if the card is SDC */
 8005e8e:	bf00      	nop
 8005e90:	e004      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <USER_SPI_ioctl+0x2c8>
    break;
 8005e9a:	bf00      	nop
  }

  despiselect();
 8005e9c:	f7ff fbc0 	bl	8005620 <despiselect>

  return res;
 8005ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3730      	adds	r7, #48	; 0x30
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000024 	.word	0x20000024
 8005eb0:	200004c8 	.word	0x200004c8

08005eb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <disk_status+0x30>)
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	79fa      	ldrb	r2, [r7, #7]
 8005ecc:	4905      	ldr	r1, [pc, #20]	; (8005ee4 <disk_status+0x30>)
 8005ece:	440a      	add	r2, r1
 8005ed0:	7a12      	ldrb	r2, [r2, #8]
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4798      	blx	r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	200006f4 	.word	0x200006f4

08005ee8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	4a0d      	ldr	r2, [pc, #52]	; (8005f30 <disk_initialize+0x48>)
 8005efa:	5cd3      	ldrb	r3, [r2, r3]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d111      	bne.n	8005f24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <disk_initialize+0x48>)
 8005f04:	2101      	movs	r1, #1
 8005f06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <disk_initialize+0x48>)
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	79fa      	ldrb	r2, [r7, #7]
 8005f16:	4906      	ldr	r1, [pc, #24]	; (8005f30 <disk_initialize+0x48>)
 8005f18:	440a      	add	r2, r1
 8005f1a:	7a12      	ldrb	r2, [r2, #8]
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200006f4 	.word	0x200006f4

08005f34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <disk_read+0x3c>)
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	689c      	ldr	r4, [r3, #8]
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <disk_read+0x3c>)
 8005f54:	4413      	add	r3, r2
 8005f56:	7a18      	ldrb	r0, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	47a0      	blx	r4
 8005f60:	4603      	mov	r3, r0
 8005f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd90      	pop	{r4, r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200006f4 	.word	0x200006f4

08005f74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <disk_write+0x3c>)
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	68dc      	ldr	r4, [r3, #12]
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <disk_write+0x3c>)
 8005f94:	4413      	add	r3, r2
 8005f96:	7a18      	ldrb	r0, [r3, #8]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	47a0      	blx	r4
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd90      	pop	{r4, r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200006f4 	.word	0x200006f4

08005fb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	603a      	str	r2, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	4a09      	ldr	r2, [pc, #36]	; (8005fec <disk_ioctl+0x38>)
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	4906      	ldr	r1, [pc, #24]	; (8005fec <disk_ioctl+0x38>)
 8005fd4:	440a      	add	r2, r1
 8005fd6:	7a10      	ldrb	r0, [r2, #8]
 8005fd8:	79b9      	ldrb	r1, [r7, #6]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200006f4 	.word	0x200006f4

08005ff0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	b21a      	sxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b21b      	sxth	r3, r3
 800600c:	4313      	orrs	r3, r2
 800600e:	b21b      	sxth	r3, r3
 8006010:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006012:	89fb      	ldrh	r3, [r7, #14]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3303      	adds	r3, #3
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	3202      	adds	r2, #2
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	3201      	adds	r2, #1
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
	return rv;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	887a      	ldrh	r2, [r7, #2]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	887a      	ldrh	r2, [r7, #2]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	607a      	str	r2, [r7, #4]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	1c53      	adds	r3, r2, #1
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	6179      	str	r1, [r7, #20]
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3b01      	subs	r3, #1
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f1      	bne.n	800610e <mem_cpy+0x1a>
	}
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006136:	b480      	push	{r7}
 8006138:	b087      	sub	sp, #28
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	617a      	str	r2, [r7, #20]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3b01      	subs	r3, #1
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f3      	bne.n	8006146 <mem_set+0x10>
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	61fa      	str	r2, [r7, #28]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	61ba      	str	r2, [r7, #24]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	1acb      	subs	r3, r1, r3
 8006198:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	607b      	str	r3, [r7, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <mem_cmp+0x40>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0eb      	beq.n	8006184 <mem_cmp+0x18>

	return r;
 80061ac:	697b      	ldr	r3, [r7, #20]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3724      	adds	r7, #36	; 0x24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061c4:	e002      	b.n	80061cc <chk_chr+0x12>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3301      	adds	r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <chk_chr+0x26>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	4293      	cmp	r3, r2
 80061de:	d1f2      	bne.n	80061c6 <chk_chr+0xc>
	return *str;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	781b      	ldrb	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e029      	b.n	8006258 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <chk_lock+0xb4>)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	4413      	add	r3, r2
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01d      	beq.n	800624e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006212:	4a24      	ldr	r2, [pc, #144]	; (80062a4 <chk_lock+0xb4>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d116      	bne.n	8006252 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006224:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <chk_lock+0xb4>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	3304      	adds	r3, #4
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006234:	429a      	cmp	r2, r3
 8006236:	d10c      	bne.n	8006252 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006238:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <chk_lock+0xb4>)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	4413      	add	r3, r2
 8006240:	3308      	adds	r3, #8
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006248:	429a      	cmp	r2, r3
 800624a:	d102      	bne.n	8006252 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800624c:	e007      	b.n	800625e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800624e:	2301      	movs	r3, #1
 8006250:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d9d2      	bls.n	8006204 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d109      	bne.n	8006278 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <chk_lock+0x80>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d101      	bne.n	8006274 <chk_lock+0x84>
 8006270:	2300      	movs	r3, #0
 8006272:	e010      	b.n	8006296 <chk_lock+0xa6>
 8006274:	2312      	movs	r3, #18
 8006276:	e00e      	b.n	8006296 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <chk_lock+0xa0>
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <chk_lock+0xb4>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	4413      	add	r3, r2
 8006286:	330c      	adds	r3, #12
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	d101      	bne.n	8006294 <chk_lock+0xa4>
 8006290:	2310      	movs	r3, #16
 8006292:	e000      	b.n	8006296 <chk_lock+0xa6>
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	200004d4 	.word	0x200004d4

080062a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e002      	b.n	80062ba <enq_lock+0x12>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d806      	bhi.n	80062ce <enq_lock+0x26>
 80062c0:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <enq_lock+0x40>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	4413      	add	r3, r2
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f2      	bne.n	80062b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	200004d4 	.word	0x200004d4

080062ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e01f      	b.n	800633c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80062fc:	4a41      	ldr	r2, [pc, #260]	; (8006404 <inc_lock+0x118>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	4413      	add	r3, r2
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d113      	bne.n	8006336 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800630e:	4a3d      	ldr	r2, [pc, #244]	; (8006404 <inc_lock+0x118>)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	4413      	add	r3, r2
 8006316:	3304      	adds	r3, #4
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800631e:	429a      	cmp	r2, r3
 8006320:	d109      	bne.n	8006336 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006322:	4a38      	ldr	r2, [pc, #224]	; (8006404 <inc_lock+0x118>)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	4413      	add	r3, r2
 800632a:	3308      	adds	r3, #8
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006332:	429a      	cmp	r2, r3
 8006334:	d006      	beq.n	8006344 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d9dc      	bls.n	80062fc <inc_lock+0x10>
 8006342:	e000      	b.n	8006346 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006344:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d132      	bne.n	80063b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e002      	b.n	8006358 <inc_lock+0x6c>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d806      	bhi.n	800636c <inc_lock+0x80>
 800635e:	4a29      	ldr	r2, [pc, #164]	; (8006404 <inc_lock+0x118>)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	4413      	add	r3, r2
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f2      	bne.n	8006352 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d101      	bne.n	8006376 <inc_lock+0x8a>
 8006372:	2300      	movs	r3, #0
 8006374:	e040      	b.n	80063f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4922      	ldr	r1, [pc, #136]	; (8006404 <inc_lock+0x118>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	440b      	add	r3, r1
 8006382:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	491e      	ldr	r1, [pc, #120]	; (8006404 <inc_lock+0x118>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	440b      	add	r3, r1
 8006390:	3304      	adds	r3, #4
 8006392:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	491a      	ldr	r1, [pc, #104]	; (8006404 <inc_lock+0x118>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	440b      	add	r3, r1
 80063a0:	3308      	adds	r3, #8
 80063a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80063a4:	4a17      	ldr	r2, [pc, #92]	; (8006404 <inc_lock+0x118>)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	4413      	add	r3, r2
 80063ac:	330c      	adds	r3, #12
 80063ae:	2200      	movs	r2, #0
 80063b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <inc_lock+0xe0>
 80063b8:	4a12      	ldr	r2, [pc, #72]	; (8006404 <inc_lock+0x118>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	4413      	add	r3, r2
 80063c0:	330c      	adds	r3, #12
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <inc_lock+0xe0>
 80063c8:	2300      	movs	r3, #0
 80063ca:	e015      	b.n	80063f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <inc_lock+0xf8>
 80063d2:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <inc_lock+0x118>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4413      	add	r3, r2
 80063da:	330c      	adds	r3, #12
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	e001      	b.n	80063e8 <inc_lock+0xfc>
 80063e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063e8:	4906      	ldr	r1, [pc, #24]	; (8006404 <inc_lock+0x118>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	440b      	add	r3, r1
 80063f0:	330c      	adds	r3, #12
 80063f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	200004d4 	.word	0x200004d4

08006408 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3b01      	subs	r3, #1
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d825      	bhi.n	8006468 <dec_lock+0x60>
		n = Files[i].ctr;
 800641c:	4a17      	ldr	r2, [pc, #92]	; (800647c <dec_lock+0x74>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	4413      	add	r3, r2
 8006424:	330c      	adds	r3, #12
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006430:	d101      	bne.n	8006436 <dec_lock+0x2e>
 8006432:	2300      	movs	r3, #0
 8006434:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006436:	89fb      	ldrh	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <dec_lock+0x3a>
 800643c:	89fb      	ldrh	r3, [r7, #14]
 800643e:	3b01      	subs	r3, #1
 8006440:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006442:	4a0e      	ldr	r2, [pc, #56]	; (800647c <dec_lock+0x74>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	4413      	add	r3, r2
 800644a:	330c      	adds	r3, #12
 800644c:	89fa      	ldrh	r2, [r7, #14]
 800644e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006450:	89fb      	ldrh	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d105      	bne.n	8006462 <dec_lock+0x5a>
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <dec_lock+0x74>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	4413      	add	r3, r2
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	737b      	strb	r3, [r7, #13]
 8006466:	e001      	b.n	800646c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006468:	2302      	movs	r3, #2
 800646a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800646c:	7b7b      	ldrb	r3, [r7, #13]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	200004d4 	.word	0x200004d4

08006480 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e010      	b.n	80064b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800648e:	4a0d      	ldr	r2, [pc, #52]	; (80064c4 <clear_lock+0x44>)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	4413      	add	r3, r2
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d105      	bne.n	80064aa <clear_lock+0x2a>
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <clear_lock+0x44>)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	4413      	add	r3, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3301      	adds	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d9eb      	bls.n	800648e <clear_lock+0xe>
	}
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	200004d4 	.word	0x200004d4

080064c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d034      	beq.n	8006546 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	7858      	ldrb	r0, [r3, #1]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064ec:	2301      	movs	r3, #1
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	f7ff fd40 	bl	8005f74 <disk_write>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <sync_window+0x38>
			res = FR_DISK_ERR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
 80064fe:	e022      	b.n	8006546 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	1ad2      	subs	r2, r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	429a      	cmp	r2, r3
 8006514:	d217      	bcs.n	8006546 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	789b      	ldrb	r3, [r3, #2]
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	e010      	b.n	8006540 <sync_window+0x78>
					wsect += fs->fsize;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4413      	add	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	7858      	ldrb	r0, [r3, #1]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006532:	2301      	movs	r3, #1
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	f7ff fd1d 	bl	8005f74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3b01      	subs	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d8eb      	bhi.n	800651e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d01b      	beq.n	80065a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ffad 	bl	80064c8 <sync_window>
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d113      	bne.n	80065a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7858      	ldrb	r0, [r3, #1]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006582:	2301      	movs	r3, #1
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	f7ff fcd5 	bl	8005f34 <disk_read>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006590:	f04f 33ff 	mov.w	r3, #4294967295
 8006594:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006596:	2301      	movs	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff87 	bl	80064c8 <sync_window>
 80065ba:	4603      	mov	r3, r0
 80065bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d158      	bne.n	8006676 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d148      	bne.n	800665e <sync_fs+0xb2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	791b      	ldrb	r3, [r3, #4]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d144      	bne.n	800665e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3334      	adds	r3, #52	; 0x34
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fda9 	bl	8006136 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3334      	adds	r3, #52	; 0x34
 80065e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fd38 	bl	8006066 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3334      	adds	r3, #52	; 0x34
 80065fa:	4921      	ldr	r1, [pc, #132]	; (8006680 <sync_fs+0xd4>)
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fd4d 	bl	800609c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3334      	adds	r3, #52	; 0x34
 8006606:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800660a:	491e      	ldr	r1, [pc, #120]	; (8006684 <sync_fs+0xd8>)
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fd45 	bl	800609c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3334      	adds	r3, #52	; 0x34
 8006616:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f7ff fd3b 	bl	800609c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3334      	adds	r3, #52	; 0x34
 800662a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	4619      	mov	r1, r3
 8006634:	4610      	mov	r0, r2
 8006636:	f7ff fd31 	bl	800609c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7858      	ldrb	r0, [r3, #1]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006652:	2301      	movs	r3, #1
 8006654:	f7ff fc8e 	bl	8005f74 <disk_write>
			fs->fsi_flag = 0;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fca4 	bl	8005fb4 <disk_ioctl>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <sync_fs+0xca>
 8006672:	2301      	movs	r3, #1
 8006674:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	41615252 	.word	0x41615252
 8006684:	61417272 	.word	0x61417272

08006688 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	3b02      	subs	r3, #2
 8006696:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	3b02      	subs	r3, #2
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d301      	bcc.n	80066a8 <clust2sect+0x20>
 80066a4:	2300      	movs	r3, #0
 80066a6:	e008      	b.n	80066ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	895b      	ldrh	r3, [r3, #10]
 80066ac:	461a      	mov	r2, r3
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	fb03 f202 	mul.w	r2, r3, r2
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4413      	add	r3, r2
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d904      	bls.n	80066e6 <get_fat+0x20>
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e08f      	b.n	800680c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295
 80066f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d062      	beq.n	80067c0 <get_fat+0xfa>
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	dc7c      	bgt.n	80067f8 <get_fat+0x132>
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d002      	beq.n	8006708 <get_fat+0x42>
 8006702:	2b02      	cmp	r3, #2
 8006704:	d042      	beq.n	800678c <get_fat+0xc6>
 8006706:	e077      	b.n	80067f8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	0a5b      	lsrs	r3, r3, #9
 800671e:	4413      	add	r3, r2
 8006720:	4619      	mov	r1, r3
 8006722:	6938      	ldr	r0, [r7, #16]
 8006724:	f7ff ff14 	bl	8006550 <move_window>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d167      	bne.n	80067fe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	60fa      	str	r2, [r7, #12]
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4413      	add	r3, r2
 800673c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006740:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	0a5b      	lsrs	r3, r3, #9
 800674a:	4413      	add	r3, r2
 800674c:	4619      	mov	r1, r3
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	f7ff fefe 	bl	8006550 <move_window>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d153      	bne.n	8006802 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	461a      	mov	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4313      	orrs	r3, r2
 8006770:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <get_fat+0xbc>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	e002      	b.n	8006788 <get_fat+0xc2>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006788:	617b      	str	r3, [r7, #20]
			break;
 800678a:	e03f      	b.n	800680c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	4413      	add	r3, r2
 8006796:	4619      	mov	r1, r3
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7ff fed9 	bl	8006550 <move_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d130      	bne.n	8006806 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80067b2:	4413      	add	r3, r2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fc1b 	bl	8005ff0 <ld_word>
 80067ba:	4603      	mov	r3, r0
 80067bc:	617b      	str	r3, [r7, #20]
			break;
 80067be:	e025      	b.n	800680c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	09db      	lsrs	r3, r3, #7
 80067c8:	4413      	add	r3, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	6938      	ldr	r0, [r7, #16]
 80067ce:	f7ff febf 	bl	8006550 <move_window>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d118      	bne.n	800680a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80067e6:	4413      	add	r3, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fc19 	bl	8006020 <ld_dword>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067f4:	617b      	str	r3, [r7, #20]
			break;
 80067f6:	e009      	b.n	800680c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e006      	b.n	800680c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067fe:	bf00      	nop
 8006800:	e004      	b.n	800680c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006802:	bf00      	nop
 8006804:	e002      	b.n	800680c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006806:	bf00      	nop
 8006808:	e000      	b.n	800680c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800680a:	bf00      	nop
		}
	}

	return val;
 800680c:	697b      	ldr	r3, [r7, #20]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006816:	b590      	push	{r4, r7, lr}
 8006818:	b089      	sub	sp, #36	; 0x24
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006822:	2302      	movs	r3, #2
 8006824:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b01      	cmp	r3, #1
 800682a:	f240 80d2 	bls.w	80069d2 <put_fat+0x1bc>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	429a      	cmp	r2, r3
 8006836:	f080 80cc 	bcs.w	80069d2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b03      	cmp	r3, #3
 8006840:	f000 8096 	beq.w	8006970 <put_fat+0x15a>
 8006844:	2b03      	cmp	r3, #3
 8006846:	f300 80cd 	bgt.w	80069e4 <put_fat+0x1ce>
 800684a:	2b01      	cmp	r3, #1
 800684c:	d002      	beq.n	8006854 <put_fat+0x3e>
 800684e:	2b02      	cmp	r3, #2
 8006850:	d06e      	beq.n	8006930 <put_fat+0x11a>
 8006852:	e0c7      	b.n	80069e4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	4413      	add	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	0a5b      	lsrs	r3, r3, #9
 800686a:	4413      	add	r3, r2
 800686c:	4619      	mov	r1, r3
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff fe6e 	bl	8006550 <move_window>
 8006874:	4603      	mov	r3, r0
 8006876:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006878:	7ffb      	ldrb	r3, [r7, #31]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f040 80ab 	bne.w	80069d6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	1c59      	adds	r1, r3, #1
 800688a:	61b9      	str	r1, [r7, #24]
 800688c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006890:	4413      	add	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <put_fat+0xa4>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b25b      	sxtb	r3, r3
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	b25a      	sxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	b25b      	sxtb	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b25b      	sxtb	r3, r3
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	e001      	b.n	80068be <put_fat+0xa8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	0a5b      	lsrs	r3, r3, #9
 80068d0:	4413      	add	r3, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff fe3b 	bl	8006550 <move_window>
 80068da:	4603      	mov	r3, r0
 80068dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068de:	7ffb      	ldrb	r3, [r7, #31]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d17a      	bne.n	80069da <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f0:	4413      	add	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <put_fat+0xf0>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e00e      	b.n	8006924 <put_fat+0x10e>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f023 030f 	bic.w	r3, r3, #15
 8006910:	b25a      	sxtb	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	b25b      	sxtb	r3, r3
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	b25b      	sxtb	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b25b      	sxtb	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	70da      	strb	r2, [r3, #3]
			break;
 800692e:	e059      	b.n	80069e4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	4413      	add	r3, r2
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff fe07 	bl	8006550 <move_window>
 8006942:	4603      	mov	r3, r0
 8006944:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d148      	bne.n	80069de <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800695a:	4413      	add	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	b292      	uxth	r2, r2
 8006960:	4611      	mov	r1, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fb7f 	bl	8006066 <st_word>
			fs->wflag = 1;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	70da      	strb	r2, [r3, #3]
			break;
 800696e:	e039      	b.n	80069e4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	09db      	lsrs	r3, r3, #7
 8006978:	4413      	add	r3, r2
 800697a:	4619      	mov	r1, r3
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff fde7 	bl	8006550 <move_window>
 8006982:	4603      	mov	r3, r0
 8006984:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006986:	7ffb      	ldrb	r3, [r7, #31]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d12a      	bne.n	80069e2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069a0:	4413      	add	r3, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fb3c 	bl	8006020 <ld_dword>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069ae:	4323      	orrs	r3, r4
 80069b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069c0:	4413      	add	r3, r2
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fb69 	bl	800609c <st_dword>
			fs->wflag = 1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	70da      	strb	r2, [r3, #3]
			break;
 80069d0:	e008      	b.n	80069e4 <put_fat+0x1ce>
		}
	}
 80069d2:	bf00      	nop
 80069d4:	e006      	b.n	80069e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069d6:	bf00      	nop
 80069d8:	e004      	b.n	80069e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80069e2:	bf00      	nop
	return res;
 80069e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3724      	adds	r7, #36	; 0x24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd90      	pop	{r4, r7, pc}

080069ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d904      	bls.n	8006a14 <remove_chain+0x26>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d301      	bcc.n	8006a18 <remove_chain+0x2a>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e04b      	b.n	8006ab0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	69b8      	ldr	r0, [r7, #24]
 8006a26:	f7ff fef6 	bl	8006816 <put_fat>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a2e:	7ffb      	ldrb	r3, [r7, #31]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <remove_chain+0x4a>
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	e03b      	b.n	8006ab0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff fe43 	bl	80066c6 <get_fat>
 8006a40:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d031      	beq.n	8006aac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <remove_chain+0x64>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e02e      	b.n	8006ab0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d101      	bne.n	8006a5e <remove_chain+0x70>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e028      	b.n	8006ab0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a5e:	2200      	movs	r2, #0
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	69b8      	ldr	r0, [r7, #24]
 8006a64:	f7ff fed7 	bl	8006816 <put_fat>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a6c:	7ffb      	ldrb	r3, [r7, #31]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <remove_chain+0x88>
 8006a72:	7ffb      	ldrb	r3, [r7, #31]
 8006a74:	e01c      	b.n	8006ab0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	695a      	ldr	r2, [r3, #20]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	3b02      	subs	r3, #2
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d20b      	bcs.n	8006a9c <remove_chain+0xae>
			fs->free_clst++;
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d3c6      	bcc.n	8006a38 <remove_chain+0x4a>
 8006aaa:	e000      	b.n	8006aae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006aac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10d      	bne.n	8006aea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <create_chain+0x2c>
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d31b      	bcc.n	8006b1c <create_chain+0x64>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	e018      	b.n	8006b1c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fdea 	bl	80066c6 <get_fat>
 8006af2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d801      	bhi.n	8006afe <create_chain+0x46>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e070      	b.n	8006be0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d101      	bne.n	8006b0a <create_chain+0x52>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	e06a      	b.n	8006be0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d201      	bcs.n	8006b18 <create_chain+0x60>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	e063      	b.n	8006be0 <create_chain+0x128>
		scl = clst;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d307      	bcc.n	8006b40 <create_chain+0x88>
				ncl = 2;
 8006b30:	2302      	movs	r3, #2
 8006b32:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d901      	bls.n	8006b40 <create_chain+0x88>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e04f      	b.n	8006be0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b40:	69f9      	ldr	r1, [r7, #28]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fdbf 	bl	80066c6 <get_fat>
 8006b48:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00e      	beq.n	8006b6e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d003      	beq.n	8006b5e <create_chain+0xa6>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d101      	bne.n	8006b62 <create_chain+0xaa>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	e03e      	b.n	8006be0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d1da      	bne.n	8006b20 <create_chain+0x68>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e038      	b.n	8006be0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b6e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7ff fe4d 	bl	8006816 <put_fat>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <create_chain+0xe2>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6938      	ldr	r0, [r7, #16]
 8006b92:	f7ff fe40 	bl	8006816 <put_fat>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d116      	bne.n	8006bce <create_chain+0x116>
		fs->last_clst = ncl;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	3b02      	subs	r3, #2
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d804      	bhi.n	8006bbe <create_chain+0x106>
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	1e5a      	subs	r2, r3, #1
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	791b      	ldrb	r3, [r3, #4]
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	711a      	strb	r2, [r3, #4]
 8006bcc:	e007      	b.n	8006bde <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d102      	bne.n	8006bda <create_chain+0x122>
 8006bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd8:	e000      	b.n	8006bdc <create_chain+0x124>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006bde:	69fb      	ldr	r3, [r7, #28]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	0a5b      	lsrs	r3, r3, #9
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	8952      	ldrh	r2, [r2, #10]
 8006c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1d1a      	adds	r2, r3, #4
 8006c12:	613a      	str	r2, [r7, #16]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <clmt_clust+0x3a>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e010      	b.n	8006c44 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d307      	bcc.n	8006c3a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3304      	adds	r3, #4
 8006c36:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c38:	e7e9      	b.n	8006c0e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006c3a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	4413      	add	r3, r2
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c66:	d204      	bcs.n	8006c72 <dir_sdi+0x22>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c72:	2302      	movs	r3, #2
 8006c74:	e063      	b.n	8006d3e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <dir_sdi+0x46>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d902      	bls.n	8006c96 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10c      	bne.n	8006cb6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	8912      	ldrh	r2, [r2, #8]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d301      	bcc.n	8006cac <dir_sdi+0x5c>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e048      	b.n	8006d3e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	61da      	str	r2, [r3, #28]
 8006cb4:	e029      	b.n	8006d0a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	895b      	ldrh	r3, [r3, #10]
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cbe:	e019      	b.n	8006cf4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6979      	ldr	r1, [r7, #20]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fcfe 	bl	80066c6 <get_fat>
 8006cca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d101      	bne.n	8006cd8 <dir_sdi+0x88>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e032      	b.n	8006d3e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d904      	bls.n	8006ce8 <dir_sdi+0x98>
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d301      	bcc.n	8006cec <dir_sdi+0x9c>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e028      	b.n	8006d3e <dir_sdi+0xee>
			ofs -= csz;
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d2e1      	bcs.n	8006cc0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	6938      	ldr	r0, [r7, #16]
 8006d00:	f7ff fcc2 	bl	8006688 <clust2sect>
 8006d04:	4602      	mov	r2, r0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <dir_sdi+0xcc>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e010      	b.n	8006d3e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	0a5b      	lsrs	r3, r3, #9
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d36:	441a      	add	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	3320      	adds	r3, #32
 8006d5c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <dir_next+0x28>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d6c:	d301      	bcc.n	8006d72 <dir_next+0x2c>
 8006d6e:	2304      	movs	r3, #4
 8006d70:	e0aa      	b.n	8006ec8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 8098 	bne.w	8006eae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	8912      	ldrh	r2, [r2, #8]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	f0c0 8088 	bcc.w	8006eae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	61da      	str	r2, [r3, #28]
 8006da4:	2304      	movs	r3, #4
 8006da6:	e08f      	b.n	8006ec8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	0a5b      	lsrs	r3, r3, #9
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	8952      	ldrh	r2, [r2, #10]
 8006db0:	3a01      	subs	r2, #1
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d17a      	bne.n	8006eae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7ff fc80 	bl	80066c6 <get_fat>
 8006dc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d801      	bhi.n	8006dd2 <dir_next+0x8c>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e07a      	b.n	8006ec8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d101      	bne.n	8006dde <dir_next+0x98>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e074      	b.n	8006ec8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d358      	bcc.n	8006e9a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	61da      	str	r2, [r3, #28]
 8006df4:	2304      	movs	r3, #4
 8006df6:	e067      	b.n	8006ec8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f7ff fe59 	bl	8006ab8 <create_chain>
 8006e06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <dir_next+0xcc>
 8006e0e:	2307      	movs	r3, #7
 8006e10:	e05a      	b.n	8006ec8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <dir_next+0xd6>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e055      	b.n	8006ec8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d101      	bne.n	8006e28 <dir_next+0xe2>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e04f      	b.n	8006ec8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fb4d 	bl	80064c8 <sync_window>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <dir_next+0xf2>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e047      	b.n	8006ec8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3334      	adds	r3, #52	; 0x34
 8006e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff f977 	bl	8006136 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	6979      	ldr	r1, [r7, #20]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fc1a 	bl	8006688 <clust2sect>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30
 8006e5a:	e012      	b.n	8006e82 <dir_next+0x13c>
						fs->wflag = 1;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff fb30 	bl	80064c8 <sync_window>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <dir_next+0x12c>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e02a      	b.n	8006ec8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	3301      	adds	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	895b      	ldrh	r3, [r3, #10]
 8006e86:	461a      	mov	r2, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d3e6      	bcc.n	8006e5c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad2      	subs	r2, r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fbf0 	bl	8006688 <clust2sect>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	441a      	add	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff feb4 	bl	8006c50 <dir_sdi>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d12b      	bne.n	8006f4a <dir_alloc+0x7a>
		n = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fb27 	bl	8006550 <move_window>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11d      	bne.n	8006f48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2be5      	cmp	r3, #229	; 0xe5
 8006f14:	d004      	beq.n	8006f20 <dir_alloc+0x50>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d107      	bne.n	8006f30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3301      	adds	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d102      	bne.n	8006f34 <dir_alloc+0x64>
 8006f2e:	e00c      	b.n	8006f4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f34:	2101      	movs	r1, #1
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff ff05 	bl	8006d46 <dir_next>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0d7      	beq.n	8006ef6 <dir_alloc+0x26>
 8006f46:	e000      	b.n	8006f4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d101      	bne.n	8006f54 <dir_alloc+0x84>
 8006f50:	2307      	movs	r3, #7
 8006f52:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	331a      	adds	r3, #26
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff f83f 	bl	8005ff0 <ld_word>
 8006f72:	4603      	mov	r3, r0
 8006f74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d109      	bne.n	8006f92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff f834 	bl	8005ff0 <ld_word>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	331a      	adds	r3, #26
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff f857 	bl	8006066 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d109      	bne.n	8006fd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f103 0214 	add.w	r2, r3, #20
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7ff f849 	bl	8006066 <st_word>
	}
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	331a      	adds	r3, #26
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff f800 	bl	8005ff0 <ld_word>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <cmp_lfn+0x1e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e059      	b.n	80070ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007002:	1e5a      	subs	r2, r3, #1
 8007004:	4613      	mov	r3, r2
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007010:	2301      	movs	r3, #1
 8007012:	81fb      	strh	r3, [r7, #14]
 8007014:	2300      	movs	r3, #0
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	e033      	b.n	8007082 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800701a:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <cmp_lfn+0xdc>)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4413      	add	r3, r2
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	4413      	add	r3, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe ffe1 	bl	8005ff0 <ld_word>
 800702e:	4603      	mov	r3, r0
 8007030:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007032:	89fb      	ldrh	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01a      	beq.n	800706e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2bfe      	cmp	r3, #254	; 0xfe
 800703c:	d812      	bhi.n	8007064 <cmp_lfn+0x88>
 800703e:	89bb      	ldrh	r3, [r7, #12]
 8007040:	4618      	mov	r0, r3
 8007042:	f001 fedb 	bl	8008dfc <ff_wtoupper>
 8007046:	4603      	mov	r3, r0
 8007048:	461c      	mov	r4, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	617a      	str	r2, [r7, #20]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f001 fecf 	bl	8008dfc <ff_wtoupper>
 800705e:	4603      	mov	r3, r0
 8007060:	429c      	cmp	r4, r3
 8007062:	d001      	beq.n	8007068 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007064:	2300      	movs	r3, #0
 8007066:	e022      	b.n	80070ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8007068:	89bb      	ldrh	r3, [r7, #12]
 800706a:	81fb      	strh	r3, [r7, #14]
 800706c:	e006      	b.n	800707c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800706e:	89bb      	ldrh	r3, [r7, #12]
 8007070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007074:	4293      	cmp	r3, r2
 8007076:	d001      	beq.n	800707c <cmp_lfn+0xa0>
 8007078:	2300      	movs	r3, #0
 800707a:	e018      	b.n	80070ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	3301      	adds	r3, #1
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d9c8      	bls.n	800701a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <cmp_lfn+0xd0>
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <cmp_lfn+0xd0>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <cmp_lfn+0xd0>
 80070a8:	2300      	movs	r3, #0
 80070aa:	e000      	b.n	80070ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80070ac:	2301      	movs	r3, #1
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	0800a5b4 	.word	0x0800a5b4

080070bc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	331a      	adds	r3, #26
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe ff90 	bl	8005ff0 <ld_word>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <pick_lfn+0x1e>
 80070d6:	2300      	movs	r3, #0
 80070d8:	e04d      	b.n	8007176 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e2:	1e5a      	subs	r2, r3, #1
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80070f0:	2301      	movs	r3, #1
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	e028      	b.n	800714c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80070fa:	4a21      	ldr	r2, [pc, #132]	; (8007180 <pick_lfn+0xc4>)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4413      	add	r3, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe ff71 	bl	8005ff0 <ld_word>
 800710e:	4603      	mov	r3, r0
 8007110:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2bfe      	cmp	r3, #254	; 0xfe
 800711c:	d901      	bls.n	8007122 <pick_lfn+0x66>
 800711e:	2300      	movs	r3, #0
 8007120:	e029      	b.n	8007176 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007122:	89bb      	ldrh	r3, [r7, #12]
 8007124:	81fb      	strh	r3, [r7, #14]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	617a      	str	r2, [r7, #20]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	89fa      	ldrh	r2, [r7, #14]
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e006      	b.n	8007146 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007138:	89bb      	ldrh	r3, [r7, #12]
 800713a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800713e:	4293      	cmp	r3, r2
 8007140:	d001      	beq.n	8007146 <pick_lfn+0x8a>
 8007142:	2300      	movs	r3, #0
 8007144:	e017      	b.n	8007176 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3301      	adds	r3, #1
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b0c      	cmp	r3, #12
 8007150:	d9d3      	bls.n	80070fa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2bfe      	cmp	r3, #254	; 0xfe
 8007162:	d901      	bls.n	8007168 <pick_lfn+0xac>
 8007164:	2300      	movs	r3, #0
 8007166:	e006      	b.n	8007176 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	2200      	movs	r2, #0
 8007172:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007174:	2301      	movs	r3, #1
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	0800a5b4 	.word	0x0800a5b4

08007184 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	460b      	mov	r3, r1
 8007194:	71fb      	strb	r3, [r7, #7]
 8007196:	4613      	mov	r3, r2
 8007198:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	330d      	adds	r3, #13
 800719e:	79ba      	ldrb	r2, [r7, #6]
 80071a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	330b      	adds	r3, #11
 80071a6:	220f      	movs	r2, #15
 80071a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	330c      	adds	r3, #12
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	331a      	adds	r3, #26
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe ff54 	bl	8006066 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	1e5a      	subs	r2, r3, #1
 80071c2:	4613      	mov	r3, r2
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	82fb      	strh	r3, [r7, #22]
 80071d2:	2300      	movs	r3, #0
 80071d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80071d6:	8afb      	ldrh	r3, [r7, #22]
 80071d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <put_lfn+0x6c>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	61fa      	str	r2, [r7, #28]
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <put_lfn+0xcc>)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	8afa      	ldrh	r2, [r7, #22]
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe ff2f 	bl	8006066 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007208:	8afb      	ldrh	r3, [r7, #22]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <put_lfn+0x90>
 800720e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007212:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	3301      	adds	r3, #1
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d9da      	bls.n	80071d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007220:	8afb      	ldrh	r3, [r7, #22]
 8007222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007226:	4293      	cmp	r3, r2
 8007228:	d006      	beq.n	8007238 <put_lfn+0xb4>
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <put_lfn+0xbc>
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	79fa      	ldrb	r2, [r7, #7]
 8007244:	701a      	strb	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	0800a5b4 	.word	0x0800a5b4

08007254 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08c      	sub	sp, #48	; 0x30
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007262:	220b      	movs	r2, #11
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7fe ff44 	bl	80060f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d929      	bls.n	80072c6 <gen_numname+0x72>
		sr = seq;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007276:	e020      	b.n	80072ba <gen_numname+0x66>
			wc = *lfn++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1c9a      	adds	r2, r3, #2
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007282:	2300      	movs	r3, #0
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28
 8007286:	e015      	b.n	80072b4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	005a      	lsls	r2, r3, #1
 800728c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	4413      	add	r3, r2
 8007294:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <gen_numname+0x5a>
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	4b31      	ldr	r3, [pc, #196]	; (8007370 <gen_numname+0x11c>)
 80072aa:	4053      	eors	r3, r2
 80072ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	3301      	adds	r3, #1
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	2b0f      	cmp	r3, #15
 80072b8:	d9e6      	bls.n	8007288 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1da      	bne.n	8007278 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80072c6:	2307      	movs	r3, #7
 80072c8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	3330      	adds	r3, #48	; 0x30
 80072d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80072da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072de:	2b39      	cmp	r3, #57	; 0x39
 80072e0:	d904      	bls.n	80072ec <gen_numname+0x98>
 80072e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072e6:	3307      	adds	r3, #7
 80072e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	1e5a      	subs	r2, r3, #1
 80072f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80072f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80072f6:	4413      	add	r3, r2
 80072f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80072fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	091b      	lsrs	r3, r3, #4
 8007304:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1de      	bne.n	80072ca <gen_numname+0x76>
	ns[i] = '~';
 800730c:	f107 0214 	add.w	r2, r7, #20
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	4413      	add	r3, r2
 8007314:	227e      	movs	r2, #126	; 0x7e
 8007316:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
 800731c:	e002      	b.n	8007324 <gen_numname+0xd0>
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	3301      	adds	r3, #1
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	429a      	cmp	r2, r3
 800732a:	d205      	bcs.n	8007338 <gen_numname+0xe4>
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	4413      	add	r3, r2
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b20      	cmp	r3, #32
 8007336:	d1f2      	bne.n	800731e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	2b07      	cmp	r3, #7
 800733c:	d808      	bhi.n	8007350 <gen_numname+0xfc>
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	62ba      	str	r2, [r7, #40]	; 0x28
 8007344:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007348:	4413      	add	r3, r2
 800734a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800734e:	e000      	b.n	8007352 <gen_numname+0xfe>
 8007350:	2120      	movs	r1, #32
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	627a      	str	r2, [r7, #36]	; 0x24
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	460a      	mov	r2, r1
 800735e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	2b07      	cmp	r3, #7
 8007364:	d9e8      	bls.n	8007338 <gen_numname+0xe4>
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	3730      	adds	r7, #48	; 0x30
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	00011021 	.word	0x00011021

08007374 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007380:	230b      	movs	r3, #11
 8007382:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	0852      	lsrs	r2, r2, #1
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	4313      	orrs	r3, r2
 800738e:	b2da      	uxtb	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	6079      	str	r1, [r7, #4]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4413      	add	r3, r2
 800739a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1ed      	bne.n	8007384 <sum_sfn+0x10>
	return sum;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80073c0:	2304      	movs	r3, #4
 80073c2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80073ca:	23ff      	movs	r3, #255	; 0xff
 80073cc:	757b      	strb	r3, [r7, #21]
 80073ce:	23ff      	movs	r3, #255	; 0xff
 80073d0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80073d2:	e081      	b.n	80074d8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	4619      	mov	r1, r3
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f7ff f8b8 	bl	8006550 <move_window>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d17c      	bne.n	80074e4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80073f2:	7dbb      	ldrb	r3, [r7, #22]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80073f8:	2304      	movs	r3, #4
 80073fa:	75fb      	strb	r3, [r7, #23]
 80073fc:	e077      	b.n	80074ee <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	330b      	adds	r3, #11
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800740a:	73fb      	strb	r3, [r7, #15]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7bfa      	ldrb	r2, [r7, #15]
 8007410:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007412:	7dbb      	ldrb	r3, [r7, #22]
 8007414:	2be5      	cmp	r3, #229	; 0xe5
 8007416:	d00e      	beq.n	8007436 <dir_read+0x80>
 8007418:	7dbb      	ldrb	r3, [r7, #22]
 800741a:	2b2e      	cmp	r3, #46	; 0x2e
 800741c:	d00b      	beq.n	8007436 <dir_read+0x80>
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	f023 0320 	bic.w	r3, r3, #32
 8007424:	2b08      	cmp	r3, #8
 8007426:	bf0c      	ite	eq
 8007428:	2301      	moveq	r3, #1
 800742a:	2300      	movne	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	4293      	cmp	r3, r2
 8007434:	d002      	beq.n	800743c <dir_read+0x86>
				ord = 0xFF;
 8007436:	23ff      	movs	r3, #255	; 0xff
 8007438:	757b      	strb	r3, [r7, #21]
 800743a:	e044      	b.n	80074c6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	d12f      	bne.n	80074a2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007442:	7dbb      	ldrb	r3, [r7, #22]
 8007444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00d      	beq.n	8007468 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	7b5b      	ldrb	r3, [r3, #13]
 8007452:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007454:	7dbb      	ldrb	r3, [r7, #22]
 8007456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745a:	75bb      	strb	r3, [r7, #22]
 800745c:	7dbb      	ldrb	r3, [r7, #22]
 800745e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007468:	7dba      	ldrb	r2, [r7, #22]
 800746a:	7d7b      	ldrb	r3, [r7, #21]
 800746c:	429a      	cmp	r2, r3
 800746e:	d115      	bne.n	800749c <dir_read+0xe6>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	330d      	adds	r3, #13
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	7d3a      	ldrb	r2, [r7, #20]
 800747a:	429a      	cmp	r2, r3
 800747c:	d10e      	bne.n	800749c <dir_read+0xe6>
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7ff fe17 	bl	80070bc <pick_lfn>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <dir_read+0xe6>
 8007494:	7d7b      	ldrb	r3, [r7, #21]
 8007496:	3b01      	subs	r3, #1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	e000      	b.n	800749e <dir_read+0xe8>
 800749c:	23ff      	movs	r3, #255	; 0xff
 800749e:	757b      	strb	r3, [r7, #21]
 80074a0:	e011      	b.n	80074c6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80074a2:	7d7b      	ldrb	r3, [r7, #21]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <dir_read+0x106>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ff61 	bl	8007374 <sum_sfn>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	7d3b      	ldrb	r3, [r7, #20]
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d015      	beq.n	80074e8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80074c4:	e010      	b.n	80074e8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fc3c 	bl	8006d46 <dir_next>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <dir_read+0x136>
	while (dp->sect) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f af79 	bne.w	80073d4 <dir_read+0x1e>
 80074e2:	e004      	b.n	80074ee <dir_read+0x138>
		if (res != FR_OK) break;
 80074e4:	bf00      	nop
 80074e6:	e002      	b.n	80074ee <dir_read+0x138>
					break;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <dir_read+0x138>
		if (res != FR_OK) break;
 80074ec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <dir_read+0x144>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	61da      	str	r2, [r3, #28]
	return res;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007512:	2100      	movs	r1, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fb9b 	bl	8006c50 <dir_sdi>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <dir_find+0x24>
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	e0a9      	b.n	800767c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007528:	23ff      	movs	r3, #255	; 0xff
 800752a:	753b      	strb	r3, [r7, #20]
 800752c:	7d3b      	ldrb	r3, [r7, #20]
 800752e:	757b      	strb	r3, [r7, #21]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f04f 32ff 	mov.w	r2, #4294967295
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	4619      	mov	r1, r3
 800753e:	6938      	ldr	r0, [r7, #16]
 8007540:	f7ff f806 	bl	8006550 <move_window>
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 8090 	bne.w	8007670 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007558:	7dbb      	ldrb	r3, [r7, #22]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <dir_find+0x60>
 800755e:	2304      	movs	r3, #4
 8007560:	75fb      	strb	r3, [r7, #23]
 8007562:	e08a      	b.n	800767a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	330b      	adds	r3, #11
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007570:	73fb      	strb	r3, [r7, #15]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	7bfa      	ldrb	r2, [r7, #15]
 8007576:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007578:	7dbb      	ldrb	r3, [r7, #22]
 800757a:	2be5      	cmp	r3, #229	; 0xe5
 800757c:	d007      	beq.n	800758e <dir_find+0x8a>
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <dir_find+0x98>
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b0f      	cmp	r3, #15
 800758c:	d006      	beq.n	800759c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800758e:	23ff      	movs	r3, #255	; 0xff
 8007590:	757b      	strb	r3, [r7, #21]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
 800759a:	e05e      	b.n	800765a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b0f      	cmp	r3, #15
 80075a0:	d136      	bne.n	8007610 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d154      	bne.n	800765a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075b0:	7dbb      	ldrb	r3, [r7, #22]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	7b5b      	ldrb	r3, [r3, #13]
 80075c0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075c2:	7dbb      	ldrb	r3, [r7, #22]
 80075c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c8:	75bb      	strb	r3, [r7, #22]
 80075ca:	7dbb      	ldrb	r3, [r7, #22]
 80075cc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80075d6:	7dba      	ldrb	r2, [r7, #22]
 80075d8:	7d7b      	ldrb	r3, [r7, #21]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d115      	bne.n	800760a <dir_find+0x106>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	330d      	adds	r3, #13
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	7d3a      	ldrb	r2, [r7, #20]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d10e      	bne.n	800760a <dir_find+0x106>
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7ff fcf0 	bl	8006fdc <cmp_lfn>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <dir_find+0x106>
 8007602:	7d7b      	ldrb	r3, [r7, #21]
 8007604:	3b01      	subs	r3, #1
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e000      	b.n	800760c <dir_find+0x108>
 800760a:	23ff      	movs	r3, #255	; 0xff
 800760c:	757b      	strb	r3, [r7, #21]
 800760e:	e024      	b.n	800765a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007610:	7d7b      	ldrb	r3, [r7, #21]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <dir_find+0x126>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff feaa 	bl	8007374 <sum_sfn>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	7d3b      	ldrb	r3, [r7, #20]
 8007626:	4293      	cmp	r3, r2
 8007628:	d024      	beq.n	8007674 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <dir_find+0x14a>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a18      	ldr	r0, [r3, #32]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3324      	adds	r3, #36	; 0x24
 8007640:	220b      	movs	r2, #11
 8007642:	4619      	mov	r1, r3
 8007644:	f7fe fd92 	bl	800616c <mem_cmp>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d014      	beq.n	8007678 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800764e:	23ff      	movs	r3, #255	; 0xff
 8007650:	757b      	strb	r3, [r7, #21]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800765a:	2100      	movs	r1, #0
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff fb72 	bl	8006d46 <dir_next>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	f43f af65 	beq.w	8007538 <dir_find+0x34>
 800766e:	e004      	b.n	800767a <dir_find+0x176>
		if (res != FR_OK) break;
 8007670:	bf00      	nop
 8007672:	e002      	b.n	800767a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007678:	bf00      	nop

	return res;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08c      	sub	sp, #48	; 0x30
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007698:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <dir_register+0x20>
 80076a0:	2306      	movs	r3, #6
 80076a2:	e0e0      	b.n	8007866 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076a4:	2300      	movs	r3, #0
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
 80076a8:	e002      	b.n	80076b0 <dir_register+0x2c>
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	3301      	adds	r3, #1
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	4413      	add	r3, r2
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1f4      	bne.n	80076aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	220c      	movs	r2, #12
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe fd11 	bl	80060f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d032      	beq.n	8007742 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80076e4:	2301      	movs	r3, #1
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e8:	e016      	b.n	8007718 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	f107 010c 	add.w	r1, r7, #12
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f7ff fdab 	bl	8007254 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff ff00 	bl	8007504 <dir_find>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800770a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	3301      	adds	r3, #1
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b63      	cmp	r3, #99	; 0x63
 800771c:	d9e5      	bls.n	80076ea <dir_register+0x66>
 800771e:	e000      	b.n	8007722 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007720:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	2b64      	cmp	r3, #100	; 0x64
 8007726:	d101      	bne.n	800772c <dir_register+0xa8>
 8007728:	2307      	movs	r3, #7
 800772a:	e09c      	b.n	8007866 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800772c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007730:	2b04      	cmp	r3, #4
 8007732:	d002      	beq.n	800773a <dir_register+0xb6>
 8007734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007738:	e095      	b.n	8007866 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800773a:	7dfa      	ldrb	r2, [r7, #23]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <dir_register+0xd8>
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	330c      	adds	r3, #12
 8007750:	4a47      	ldr	r2, [pc, #284]	; (8007870 <dir_register+0x1ec>)
 8007752:	fba2 2303 	umull	r2, r3, r2, r3
 8007756:	089b      	lsrs	r3, r3, #2
 8007758:	3301      	adds	r3, #1
 800775a:	e000      	b.n	800775e <dir_register+0xda>
 800775c:	2301      	movs	r3, #1
 800775e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007760:	6a39      	ldr	r1, [r7, #32]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fbb4 	bl	8006ed0 <dir_alloc>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800776e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007772:	2b00      	cmp	r3, #0
 8007774:	d148      	bne.n	8007808 <dir_register+0x184>
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	3b01      	subs	r3, #1
 800777a:	623b      	str	r3, [r7, #32]
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d042      	beq.n	8007808 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	015b      	lsls	r3, r3, #5
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fa5e 	bl	8006c50 <dir_sdi>
 8007794:	4603      	mov	r3, r0
 8007796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800779a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d132      	bne.n	8007808 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3324      	adds	r3, #36	; 0x24
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fde4 	bl	8007374 <sum_sfn>
 80077ac:	4603      	mov	r3, r0
 80077ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	4619      	mov	r1, r3
 80077b6:	69f8      	ldr	r0, [r7, #28]
 80077b8:	f7fe feca 	bl	8006550 <move_window>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80077c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11d      	bne.n	8007806 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	68d8      	ldr	r0, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a19      	ldr	r1, [r3, #32]
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	7efb      	ldrb	r3, [r7, #27]
 80077d8:	f7ff fcd4 	bl	8007184 <put_lfn>
				fs->wflag = 1;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2201      	movs	r2, #1
 80077e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80077e2:	2100      	movs	r1, #0
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff faae 	bl	8006d46 <dir_next>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80077f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <dir_register+0x184>
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	623b      	str	r3, [r7, #32]
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1d5      	bne.n	80077b0 <dir_register+0x12c>
 8007804:	e000      	b.n	8007808 <dir_register+0x184>
				if (res != FR_OK) break;
 8007806:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800780c:	2b00      	cmp	r3, #0
 800780e:	d128      	bne.n	8007862 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	4619      	mov	r1, r3
 8007816:	69f8      	ldr	r0, [r7, #28]
 8007818:	f7fe fe9a 	bl	8006550 <move_window>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007826:	2b00      	cmp	r3, #0
 8007828:	d11b      	bne.n	8007862 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	2220      	movs	r2, #32
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fc7f 	bl	8006136 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a18      	ldr	r0, [r3, #32]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3324      	adds	r3, #36	; 0x24
 8007840:	220b      	movs	r2, #11
 8007842:	4619      	mov	r1, r3
 8007844:	f7fe fc56 	bl	80060f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	330c      	adds	r3, #12
 8007854:	f002 0218 	and.w	r2, r2, #24
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	2201      	movs	r2, #1
 8007860:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007866:	4618      	mov	r0, r3
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	4ec4ec4f 	.word	0x4ec4ec4f

08007874 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d007      	beq.n	80078a2 <dir_remove+0x2e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff f9d9 	bl	8006c50 <dir_sdi>
 800789e:	4603      	mov	r3, r0
 80078a0:	e000      	b.n	80078a4 <dir_remove+0x30>
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d128      	bne.n	80078fe <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	4619      	mov	r1, r3
 80078b2:	6938      	ldr	r0, [r7, #16]
 80078b4:	f7fe fe4c 	bl	8006550 <move_window>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d115      	bne.n	80078ee <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	22e5      	movs	r2, #229	; 0xe5
 80078c8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2201      	movs	r2, #1
 80078ce:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d90b      	bls.n	80078f2 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80078da:	2100      	movs	r1, #0
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff fa32 	bl	8006d46 <dir_next>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0df      	beq.n	80078ac <dir_remove+0x38>
 80078ec:	e002      	b.n	80078f4 <dir_remove+0x80>
			if (res != FR_OK) break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80078f2:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d101      	bne.n	80078fe <dir_remove+0x8a>
 80078fa:	2302      	movs	r3, #2
 80078fc:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	61ba      	str	r2, [r7, #24]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007938:	2b1f      	cmp	r3, #31
 800793a:	d940      	bls.n	80079be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800793c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800793e:	2b2f      	cmp	r3, #47	; 0x2f
 8007940:	d006      	beq.n	8007950 <create_name+0x48>
 8007942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007944:	2b5c      	cmp	r3, #92	; 0x5c
 8007946:	d110      	bne.n	800796a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007948:	e002      	b.n	8007950 <create_name+0x48>
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	3301      	adds	r3, #1
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	4413      	add	r3, r2
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b2f      	cmp	r3, #47	; 0x2f
 800795a:	d0f6      	beq.n	800794a <create_name+0x42>
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	4413      	add	r3, r2
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b5c      	cmp	r3, #92	; 0x5c
 8007966:	d0f0      	beq.n	800794a <create_name+0x42>
			break;
 8007968:	e02a      	b.n	80079c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2bfe      	cmp	r3, #254	; 0xfe
 800796e:	d901      	bls.n	8007974 <create_name+0x6c>
 8007970:	2306      	movs	r3, #6
 8007972:	e177      	b.n	8007c64 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007976:	b2db      	uxtb	r3, r3
 8007978:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800797a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797c:	2101      	movs	r1, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f001 fa00 	bl	8008d84 <ff_convert>
 8007984:	4603      	mov	r3, r0
 8007986:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <create_name+0x8a>
 800798e:	2306      	movs	r3, #6
 8007990:	e168      	b.n	8007c64 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007994:	2b7f      	cmp	r3, #127	; 0x7f
 8007996:	d809      	bhi.n	80079ac <create_name+0xa4>
 8007998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800799a:	4619      	mov	r1, r3
 800799c:	48b3      	ldr	r0, [pc, #716]	; (8007c6c <create_name+0x364>)
 800799e:	f7fe fc0c 	bl	80061ba <chk_chr>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <create_name+0xa4>
 80079a8:	2306      	movs	r3, #6
 80079aa:	e15b      	b.n	8007c64 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	617a      	str	r2, [r7, #20]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079bc:	e7b4      	b.n	8007928 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	441a      	add	r2, r3
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079cc:	2b1f      	cmp	r3, #31
 80079ce:	d801      	bhi.n	80079d4 <create_name+0xcc>
 80079d0:	2304      	movs	r3, #4
 80079d2:	e000      	b.n	80079d6 <create_name+0xce>
 80079d4:	2300      	movs	r3, #0
 80079d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079da:	e011      	b.n	8007a00 <create_name+0xf8>
		w = lfn[di - 1];
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80079e2:	4413      	add	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80079ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d002      	beq.n	80079fa <create_name+0xf2>
 80079f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f6:	2b2e      	cmp	r3, #46	; 0x2e
 80079f8:	d106      	bne.n	8007a08 <create_name+0x100>
		di--;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1ea      	bne.n	80079dc <create_name+0xd4>
 8007a06:	e000      	b.n	8007a0a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007a08:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	2200      	movs	r2, #0
 8007a14:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <create_name+0x118>
 8007a1c:	2306      	movs	r3, #6
 8007a1e:	e121      	b.n	8007c64 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	220b      	movs	r2, #11
 8007a26:	2120      	movs	r1, #32
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fb84 	bl	8006136 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e002      	b.n	8007a3a <create_name+0x132>
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d0f5      	beq.n	8007a34 <create_name+0x12c>
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	2b2e      	cmp	r3, #46	; 0x2e
 8007a54:	d0ee      	beq.n	8007a34 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d009      	beq.n	8007a70 <create_name+0x168>
 8007a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a60:	f043 0303 	orr.w	r3, r3, #3
 8007a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a68:	e002      	b.n	8007a70 <create_name+0x168>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <create_name+0x182>
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007a7c:	4413      	add	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	2b2e      	cmp	r3, #46	; 0x2e
 8007a88:	d1ef      	bne.n	8007a6a <create_name+0x162>

	i = b = 0; ni = 8;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a90:	2300      	movs	r3, #0
 8007a92:	623b      	str	r3, [r7, #32]
 8007a94:	2308      	movs	r3, #8
 8007a96:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	61ba      	str	r2, [r7, #24]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8090 	beq.w	8007bd0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d006      	beq.n	8007ac4 <create_name+0x1bc>
 8007ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8007aba:	d10a      	bne.n	8007ad2 <create_name+0x1ca>
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d006      	beq.n	8007ad2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac8:	f043 0303 	orr.w	r3, r3, #3
 8007acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ad0:	e07d      	b.n	8007bce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007ad2:	6a3a      	ldr	r2, [r7, #32]
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d203      	bcs.n	8007ae2 <create_name+0x1da>
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d123      	bne.n	8007b2a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b0b      	cmp	r3, #11
 8007ae6:	d106      	bne.n	8007af6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aec:	f043 0303 	orr.w	r3, r3, #3
 8007af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007af4:	e06f      	b.n	8007bd6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d005      	beq.n	8007b0a <create_name+0x202>
 8007afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b02:	f043 0303 	orr.w	r3, r3, #3
 8007b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d860      	bhi.n	8007bd4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	2308      	movs	r3, #8
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	230b      	movs	r3, #11
 8007b1c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b28:	e051      	b.n	8007bce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007b2e:	d914      	bls.n	8007b5a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b32:	2100      	movs	r1, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 f925 	bl	8008d84 <ff_convert>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <create_name+0x246>
 8007b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b46:	3b80      	subs	r3, #128	; 0x80
 8007b48:	4a49      	ldr	r2, [pc, #292]	; (8007c70 <create_name+0x368>)
 8007b4a:	5cd3      	ldrb	r3, [r2, r3]
 8007b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b52:	f043 0302 	orr.w	r3, r3, #2
 8007b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <create_name+0x268>
 8007b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b62:	4619      	mov	r1, r3
 8007b64:	4843      	ldr	r0, [pc, #268]	; (8007c74 <create_name+0x36c>)
 8007b66:	f7fe fb28 	bl	80061ba <chk_chr>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b70:	235f      	movs	r3, #95	; 0x5f
 8007b72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b78:	f043 0303 	orr.w	r3, r3, #3
 8007b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b80:	e01b      	b.n	8007bba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d909      	bls.n	8007b9c <create_name+0x294>
 8007b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b8a:	2b5a      	cmp	r3, #90	; 0x5a
 8007b8c:	d806      	bhi.n	8007b9c <create_name+0x294>
					b |= 2;
 8007b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b92:	f043 0302 	orr.w	r3, r3, #2
 8007b96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b9a:	e00e      	b.n	8007bba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b9e:	2b60      	cmp	r3, #96	; 0x60
 8007ba0:	d90b      	bls.n	8007bba <create_name+0x2b2>
 8007ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba4:	2b7a      	cmp	r3, #122	; 0x7a
 8007ba6:	d808      	bhi.n	8007bba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bac:	f043 0301 	orr.w	r3, r3, #1
 8007bb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb6:	3b20      	subs	r3, #32
 8007bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	623a      	str	r2, [r7, #32]
 8007bc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bc2:	b2d1      	uxtb	r1, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	460a      	mov	r2, r1
 8007bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007bce:	e763      	b.n	8007a98 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007bd0:	bf00      	nop
 8007bd2:	e000      	b.n	8007bd6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007bd4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bdc:	2be5      	cmp	r3, #229	; 0xe5
 8007bde:	d103      	bne.n	8007be8 <create_name+0x2e0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2205      	movs	r2, #5
 8007be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d104      	bne.n	8007bf8 <create_name+0x2f0>
 8007bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d005      	beq.n	8007c10 <create_name+0x308>
 8007c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d105      	bne.n	8007c1c <create_name+0x314>
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	f043 0302 	orr.w	r3, r3, #2
 8007c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d117      	bne.n	8007c58 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d105      	bne.n	8007c40 <create_name+0x338>
 8007c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c38:	f043 0310 	orr.w	r3, r3, #16
 8007c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c44:	f003 030c 	and.w	r3, r3, #12
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d105      	bne.n	8007c58 <create_name+0x350>
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c50:	f043 0308 	orr.w	r3, r3, #8
 8007c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007c62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3728      	adds	r7, #40	; 0x28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	0800a4d4 	.word	0x0800a4d4
 8007c70:	0800a534 	.word	0x0800a534
 8007c74:	0800a4e0 	.word	0x0800a4e0

08007c78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c8c:	e002      	b.n	8007c94 <follow_path+0x1c>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b2f      	cmp	r3, #47	; 0x2f
 8007c9a:	d0f8      	beq.n	8007c8e <follow_path+0x16>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ca2:	d0f4      	beq.n	8007c8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b1f      	cmp	r3, #31
 8007cb0:	d80a      	bhi.n	8007cc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2280      	movs	r2, #128	; 0x80
 8007cb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fe ffc7 	bl	8006c50 <dir_sdi>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75fb      	strb	r3, [r7, #23]
 8007cc6:	e043      	b.n	8007d50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cc8:	463b      	mov	r3, r7
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff fe1b 	bl	8007908 <create_name>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d134      	bne.n	8007d46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fc11 	bl	8007504 <dir_find>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007cec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d127      	bne.n	8007d4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d122      	bne.n	8007d4a <follow_path+0xd2>
 8007d04:	2305      	movs	r3, #5
 8007d06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d08:	e01f      	b.n	8007d4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11c      	bne.n	8007d4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	799b      	ldrb	r3, [r3, #6]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d20:	2305      	movs	r3, #5
 8007d22:	75fb      	strb	r3, [r7, #23]
 8007d24:	e014      	b.n	8007d50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	4413      	add	r3, r2
 8007d36:	4619      	mov	r1, r3
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff f910 	bl	8006f5e <ld_clust>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d44:	e7c0      	b.n	8007cc8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <follow_path+0xd8>
				break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d4e:	bf00      	nop
			}
		}
	}

	return res;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b087      	sub	sp, #28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d62:	f04f 33ff 	mov.w	r3, #4294967295
 8007d66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d031      	beq.n	8007dd4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e002      	b.n	8007d7e <get_ldnumber+0x24>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b1f      	cmp	r3, #31
 8007d84:	d903      	bls.n	8007d8e <get_ldnumber+0x34>
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b3a      	cmp	r3, #58	; 0x3a
 8007d8c:	d1f4      	bne.n	8007d78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b3a      	cmp	r3, #58	; 0x3a
 8007d94:	d11c      	bne.n	8007dd0 <get_ldnumber+0x76>
			tp = *path;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	60fa      	str	r2, [r7, #12]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	3b30      	subs	r3, #48	; 0x30
 8007da6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b09      	cmp	r3, #9
 8007dac:	d80e      	bhi.n	8007dcc <get_ldnumber+0x72>
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d10a      	bne.n	8007dcc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d107      	bne.n	8007dcc <get_ldnumber+0x72>
					vol = (int)i;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	e002      	b.n	8007dd6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007dd4:	693b      	ldr	r3, [r7, #16]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	70da      	strb	r2, [r3, #3]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fe fba6 	bl	8006550 <move_window>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <check_fs+0x2a>
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	e038      	b.n	8007e80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3334      	adds	r3, #52	; 0x34
 8007e12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe f8ea 	bl	8005ff0 <ld_word>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d001      	beq.n	8007e2c <check_fs+0x48>
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e029      	b.n	8007e80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e32:	2be9      	cmp	r3, #233	; 0xe9
 8007e34:	d009      	beq.n	8007e4a <check_fs+0x66>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e3c:	2beb      	cmp	r3, #235	; 0xeb
 8007e3e:	d11e      	bne.n	8007e7e <check_fs+0x9a>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e46:	2b90      	cmp	r3, #144	; 0x90
 8007e48:	d119      	bne.n	8007e7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3334      	adds	r3, #52	; 0x34
 8007e4e:	3336      	adds	r3, #54	; 0x36
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe f8e5 	bl	8006020 <ld_dword>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <check_fs+0xa4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d101      	bne.n	8007e66 <check_fs+0x82>
 8007e62:	2300      	movs	r3, #0
 8007e64:	e00c      	b.n	8007e80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3334      	adds	r3, #52	; 0x34
 8007e6a:	3352      	adds	r3, #82	; 0x52
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe f8d7 	bl	8006020 <ld_dword>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4a05      	ldr	r2, [pc, #20]	; (8007e8c <check_fs+0xa8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d101      	bne.n	8007e7e <check_fs+0x9a>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e7e:	2302      	movs	r3, #2
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	00544146 	.word	0x00544146
 8007e8c:	33544146 	.word	0x33544146

08007e90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b096      	sub	sp, #88	; 0x58
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff ff58 	bl	8007d5a <get_ldnumber>
 8007eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da01      	bge.n	8007eb6 <find_volume+0x26>
 8007eb2:	230b      	movs	r3, #11
 8007eb4:	e231      	b.n	800831a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007eb6:	4aa8      	ldr	r2, [pc, #672]	; (8008158 <find_volume+0x2c8>)
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ebe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <find_volume+0x3a>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	e227      	b.n	800831a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ece:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01a      	beq.n	8007f16 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fd ffe5 	bl	8005eb4 <disk_status>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <find_volume+0x82>
 8007f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f0e:	230a      	movs	r3, #10
 8007f10:	e203      	b.n	800831a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8007f12:	2300      	movs	r3, #0
 8007f14:	e201      	b.n	800831a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fd ffdd 	bl	8005ee8 <disk_initialize>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f40:	2303      	movs	r3, #3
 8007f42:	e1ea      	b.n	800831a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <find_volume+0xca>
 8007f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f56:	230a      	movs	r3, #10
 8007f58:	e1df      	b.n	800831a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f62:	f7ff ff3f 	bl	8007de4 <check_fs>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d14b      	bne.n	800800c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f74:	2300      	movs	r3, #0
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
 8007f78:	e01f      	b.n	8007fba <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007f88:	4413      	add	r3, r2
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	3304      	adds	r3, #4
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d006      	beq.n	8007fa4 <find_volume+0x114>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	3308      	adds	r3, #8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe f840 	bl	8006020 <ld_dword>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	e000      	b.n	8007fa6 <find_volume+0x116>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007fae:	440b      	add	r3, r1
 8007fb0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d9dc      	bls.n	8007f7a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <find_volume+0x140>
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007fd8:	4413      	add	r3, r2
 8007fda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <find_volume+0x162>
 8007fe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fea:	f7ff fefb 	bl	8007de4 <check_fs>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	e000      	b.n	8007ff4 <find_volume+0x164>
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d905      	bls.n	800800c <find_volume+0x17c>
 8008000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008002:	3301      	adds	r3, #1
 8008004:	643b      	str	r3, [r7, #64]	; 0x40
 8008006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008008:	2b03      	cmp	r3, #3
 800800a:	d9e1      	bls.n	8007fd0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800800c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008010:	2b04      	cmp	r3, #4
 8008012:	d101      	bne.n	8008018 <find_volume+0x188>
 8008014:	2301      	movs	r3, #1
 8008016:	e180      	b.n	800831a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800801c:	2b01      	cmp	r3, #1
 800801e:	d901      	bls.n	8008024 <find_volume+0x194>
 8008020:	230d      	movs	r3, #13
 8008022:	e17a      	b.n	800831a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	3334      	adds	r3, #52	; 0x34
 8008028:	330b      	adds	r3, #11
 800802a:	4618      	mov	r0, r3
 800802c:	f7fd ffe0 	bl	8005ff0 <ld_word>
 8008030:	4603      	mov	r3, r0
 8008032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008036:	d001      	beq.n	800803c <find_volume+0x1ac>
 8008038:	230d      	movs	r3, #13
 800803a:	e16e      	b.n	800831a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	3334      	adds	r3, #52	; 0x34
 8008040:	3316      	adds	r3, #22
 8008042:	4618      	mov	r0, r3
 8008044:	f7fd ffd4 	bl	8005ff0 <ld_word>
 8008048:	4603      	mov	r3, r0
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <find_volume+0x1d0>
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	3334      	adds	r3, #52	; 0x34
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	4618      	mov	r0, r3
 800805a:	f7fd ffe1 	bl	8006020 <ld_dword>
 800805e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008064:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	789b      	ldrb	r3, [r3, #2]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d005      	beq.n	8008084 <find_volume+0x1f4>
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d001      	beq.n	8008084 <find_volume+0x1f4>
 8008080:	230d      	movs	r3, #13
 8008082:	e14a      	b.n	800831a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	789b      	ldrb	r3, [r3, #2]
 8008088:	461a      	mov	r2, r3
 800808a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800808c:	fb02 f303 	mul.w	r3, r2, r3
 8008090:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008098:	b29a      	uxth	r2, r3
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	895b      	ldrh	r3, [r3, #10]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d008      	beq.n	80080b8 <find_volume+0x228>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	895b      	ldrh	r3, [r3, #10]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	895b      	ldrh	r3, [r3, #10]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <find_volume+0x22c>
 80080b8:	230d      	movs	r3, #13
 80080ba:	e12e      	b.n	800831a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	3334      	adds	r3, #52	; 0x34
 80080c0:	3311      	adds	r3, #17
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fd ff94 	bl	8005ff0 <ld_word>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	891b      	ldrh	r3, [r3, #8]
 80080d4:	f003 030f 	and.w	r3, r3, #15
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <find_volume+0x252>
 80080de:	230d      	movs	r3, #13
 80080e0:	e11b      	b.n	800831a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	3334      	adds	r3, #52	; 0x34
 80080e6:	3313      	adds	r3, #19
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fd ff81 	bl	8005ff0 <ld_word>
 80080ee:	4603      	mov	r3, r0
 80080f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80080f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <find_volume+0x276>
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	3334      	adds	r3, #52	; 0x34
 80080fc:	3320      	adds	r3, #32
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fd ff8e 	bl	8006020 <ld_dword>
 8008104:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	3334      	adds	r3, #52	; 0x34
 800810a:	330e      	adds	r3, #14
 800810c:	4618      	mov	r0, r3
 800810e:	f7fd ff6f 	bl	8005ff0 <ld_word>
 8008112:	4603      	mov	r3, r0
 8008114:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <find_volume+0x290>
 800811c:	230d      	movs	r3, #13
 800811e:	e0fc      	b.n	800831a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008124:	4413      	add	r3, r2
 8008126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008128:	8912      	ldrh	r2, [r2, #8]
 800812a:	0912      	lsrs	r2, r2, #4
 800812c:	b292      	uxth	r2, r2
 800812e:	4413      	add	r3, r2
 8008130:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	429a      	cmp	r2, r3
 8008138:	d201      	bcs.n	800813e <find_volume+0x2ae>
 800813a:	230d      	movs	r3, #13
 800813c:	e0ed      	b.n	800831a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800813e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008146:	8952      	ldrh	r2, [r2, #10]
 8008148:	fbb3 f3f2 	udiv	r3, r3, r2
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <find_volume+0x2cc>
 8008154:	230d      	movs	r3, #13
 8008156:	e0e0      	b.n	800831a <find_volume+0x48a>
 8008158:	200004cc 	.word	0x200004cc
		fmt = FS_FAT32;
 800815c:	2303      	movs	r3, #3
 800815e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008168:	4293      	cmp	r3, r2
 800816a:	d802      	bhi.n	8008172 <find_volume+0x2e2>
 800816c:	2302      	movs	r3, #2
 800816e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008178:	4293      	cmp	r3, r2
 800817a:	d802      	bhi.n	8008182 <find_volume+0x2f2>
 800817c:	2301      	movs	r3, #1
 800817e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	1c9a      	adds	r2, r3, #2
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800818e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008194:	441a      	add	r2, r3
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800819a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	441a      	add	r2, r3
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80081a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d11e      	bne.n	80081ea <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	3334      	adds	r3, #52	; 0x34
 80081b0:	332a      	adds	r3, #42	; 0x2a
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fd ff1c 	bl	8005ff0 <ld_word>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <find_volume+0x332>
 80081be:	230d      	movs	r3, #13
 80081c0:	e0ab      	b.n	800831a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	891b      	ldrh	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <find_volume+0x33e>
 80081ca:	230d      	movs	r3, #13
 80081cc:	e0a5      	b.n	800831a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	3334      	adds	r3, #52	; 0x34
 80081d2:	332c      	adds	r3, #44	; 0x2c
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fd ff23 	bl	8006020 <ld_dword>
 80081da:	4602      	mov	r2, r0
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	647b      	str	r3, [r7, #68]	; 0x44
 80081e8:	e01f      	b.n	800822a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	891b      	ldrh	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <find_volume+0x366>
 80081f2:	230d      	movs	r3, #13
 80081f4:	e091      	b.n	800831a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fc:	441a      	add	r2, r3
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008206:	2b02      	cmp	r3, #2
 8008208:	d103      	bne.n	8008212 <find_volume+0x382>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	e00a      	b.n	8008228 <find_volume+0x398>
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	4613      	mov	r3, r2
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	4413      	add	r3, r2
 800821c:	085a      	lsrs	r2, r3, #1
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008228:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	69da      	ldr	r2, [r3, #28]
 800822e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008230:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008234:	0a5b      	lsrs	r3, r3, #9
 8008236:	429a      	cmp	r2, r3
 8008238:	d201      	bcs.n	800823e <find_volume+0x3ae>
 800823a:	230d      	movs	r3, #13
 800823c:	e06d      	b.n	800831a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	f04f 32ff 	mov.w	r2, #4294967295
 8008244:	615a      	str	r2, [r3, #20]
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008258:	2b03      	cmp	r3, #3
 800825a:	d149      	bne.n	80082f0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	3334      	adds	r3, #52	; 0x34
 8008260:	3330      	adds	r3, #48	; 0x30
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd fec4 	bl	8005ff0 <ld_word>
 8008268:	4603      	mov	r3, r0
 800826a:	2b01      	cmp	r3, #1
 800826c:	d140      	bne.n	80082f0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800826e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008270:	3301      	adds	r3, #1
 8008272:	4619      	mov	r1, r3
 8008274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008276:	f7fe f96b 	bl	8006550 <move_window>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d137      	bne.n	80082f0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	2200      	movs	r2, #0
 8008284:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	3334      	adds	r3, #52	; 0x34
 800828a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd feae 	bl	8005ff0 <ld_word>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800829c:	429a      	cmp	r2, r3
 800829e:	d127      	bne.n	80082f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	3334      	adds	r3, #52	; 0x34
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fd febb 	bl	8006020 <ld_dword>
 80082aa:	4603      	mov	r3, r0
 80082ac:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <find_volume+0x494>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d11e      	bne.n	80082f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	3334      	adds	r3, #52	; 0x34
 80082b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fd feb0 	bl	8006020 <ld_dword>
 80082c0:	4603      	mov	r3, r0
 80082c2:	4a19      	ldr	r2, [pc, #100]	; (8008328 <find_volume+0x498>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d113      	bne.n	80082f0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	3334      	adds	r3, #52	; 0x34
 80082cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fd fea5 	bl	8006020 <ld_dword>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	3334      	adds	r3, #52	; 0x34
 80082e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fd fe9b 	bl	8006020 <ld_dword>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80082f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <find_volume+0x49c>)
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	b29a      	uxth	r2, r3
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <find_volume+0x49c>)
 8008302:	801a      	strh	r2, [r3, #0]
 8008304:	4b09      	ldr	r3, [pc, #36]	; (800832c <find_volume+0x49c>)
 8008306:	881a      	ldrh	r2, [r3, #0]
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	4a08      	ldr	r2, [pc, #32]	; (8008330 <find_volume+0x4a0>)
 8008310:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008312:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008314:	f7fe f8b4 	bl	8006480 <clear_lock>
#endif
	return FR_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3758      	adds	r7, #88	; 0x58
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	41615252 	.word	0x41615252
 8008328:	61417272 	.word	0x61417272
 800832c:	200004d0 	.word	0x200004d0
 8008330:	200004f4 	.word	0x200004f4

08008334 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800833e:	2309      	movs	r3, #9
 8008340:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01c      	beq.n	8008382 <validate+0x4e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d018      	beq.n	8008382 <validate+0x4e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d013      	beq.n	8008382 <validate+0x4e>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	889a      	ldrh	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	88db      	ldrh	r3, [r3, #6]
 8008364:	429a      	cmp	r2, r3
 8008366:	d10c      	bne.n	8008382 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd fda0 	bl	8005eb4 <disk_status>
 8008374:	4603      	mov	r3, r0
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <validate+0x4e>
			res = FR_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <validate+0x5a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	e000      	b.n	8008390 <validate+0x5c>
 800838e:	2300      	movs	r3, #0
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	6013      	str	r3, [r2, #0]
	return res;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80083b2:	f107 0310 	add.w	r3, r7, #16
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fccf 	bl	8007d5a <get_ldnumber>
 80083bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da01      	bge.n	80083c8 <f_mount+0x28>
 80083c4:	230b      	movs	r3, #11
 80083c6:	e02b      	b.n	8008420 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083c8:	4a17      	ldr	r2, [pc, #92]	; (8008428 <f_mount+0x88>)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083d8:	69b8      	ldr	r0, [r7, #24]
 80083da:	f7fe f851 	bl	8006480 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	490d      	ldr	r1, [pc, #52]	; (8008428 <f_mount+0x88>)
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <f_mount+0x66>
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d001      	beq.n	800840a <f_mount+0x6a>
 8008406:	2300      	movs	r3, #0
 8008408:	e00a      	b.n	8008420 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800840a:	f107 010c 	add.w	r1, r7, #12
 800840e:	f107 0308 	add.w	r3, r7, #8
 8008412:	2200      	movs	r2, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fd3b 	bl	8007e90 <find_volume>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800841e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	200004cc 	.word	0x200004cc

0800842c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b09a      	sub	sp, #104	; 0x68
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <f_open+0x18>
 8008440:	2309      	movs	r3, #9
 8008442:	e1ad      	b.n	80087a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800844a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800844c:	79fa      	ldrb	r2, [r7, #7]
 800844e:	f107 0114 	add.w	r1, r7, #20
 8008452:	f107 0308 	add.w	r3, r7, #8
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff fd1a 	bl	8007e90 <find_volume>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008462:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 8191 	bne.w	800878e <f_open+0x362>
		dj.obj.fs = fs;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	f107 0318 	add.w	r3, r7, #24
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff fbfd 	bl	8007c78 <follow_path>
 800847e:	4603      	mov	r3, r0
 8008480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008484:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11a      	bne.n	80084c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800848c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008490:	b25b      	sxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	da03      	bge.n	800849e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008496:	2306      	movs	r3, #6
 8008498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800849c:	e011      	b.n	80084c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf14      	ite	ne
 80084a8:	2301      	movne	r3, #1
 80084aa:	2300      	moveq	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	461a      	mov	r2, r3
 80084b0:	f107 0318 	add.w	r3, r7, #24
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd fe9a 	bl	80061f0 <chk_lock>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	f003 031c 	and.w	r3, r3, #28
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d07f      	beq.n	80085cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80084cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d017      	beq.n	8008504 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d10e      	bne.n	80084fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084dc:	f7fd fee4 	bl	80062a8 <enq_lock>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d006      	beq.n	80084f4 <f_open+0xc8>
 80084e6:	f107 0318 	add.w	r3, r7, #24
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff f8ca 	bl	8007684 <dir_register>
 80084f0:	4603      	mov	r3, r0
 80084f2:	e000      	b.n	80084f6 <f_open+0xca>
 80084f4:	2312      	movs	r3, #18
 80084f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	f043 0308 	orr.w	r3, r3, #8
 8008500:	71fb      	strb	r3, [r7, #7]
 8008502:	e010      	b.n	8008526 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008504:	7fbb      	ldrb	r3, [r7, #30]
 8008506:	f003 0311 	and.w	r3, r3, #17
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <f_open+0xea>
					res = FR_DENIED;
 800850e:	2307      	movs	r3, #7
 8008510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008514:	e007      	b.n	8008526 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <f_open+0xfa>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800852a:	2b00      	cmp	r3, #0
 800852c:	d168      	bne.n	8008600 <f_open+0x1d4>
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d063      	beq.n	8008600 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008538:	f7fc ff7a 	bl	8005430 <get_fattime>
 800853c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	330e      	adds	r3, #14
 8008542:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008544:	4618      	mov	r0, r3
 8008546:	f7fd fda9 	bl	800609c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	3316      	adds	r3, #22
 800854e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008550:	4618      	mov	r0, r3
 8008552:	f7fd fda3 	bl	800609c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	330b      	adds	r3, #11
 800855a:	2220      	movs	r2, #32
 800855c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fcfa 	bl	8006f5e <ld_clust>
 800856a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008570:	2200      	movs	r2, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fd12 	bl	8006f9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	331c      	adds	r3, #28
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd fd8c 	bl	800609c <st_dword>
					fs->wflag = 1;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2201      	movs	r2, #1
 8008588:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800858a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800858c:	2b00      	cmp	r3, #0
 800858e:	d037      	beq.n	8008600 <f_open+0x1d4>
						dw = fs->winsect;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008596:	f107 0318 	add.w	r3, r7, #24
 800859a:	2200      	movs	r2, #0
 800859c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fa25 	bl	80069ee <remove_chain>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80085aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d126      	bne.n	8008600 <f_open+0x1d4>
							res = move_window(fs, dw);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd ffca 	bl	8006550 <move_window>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085c6:	3a01      	subs	r2, #1
 80085c8:	611a      	str	r2, [r3, #16]
 80085ca:	e019      	b.n	8008600 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d115      	bne.n	8008600 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085d4:	7fbb      	ldrb	r3, [r7, #30]
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80085de:	2304      	movs	r3, #4
 80085e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80085e4:	e00c      	b.n	8008600 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <f_open+0x1d4>
 80085f0:	7fbb      	ldrb	r3, [r7, #30]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <f_open+0x1d4>
						res = FR_DENIED;
 80085fa:	2307      	movs	r3, #7
 80085fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008604:	2b00      	cmp	r3, #0
 8008606:	d128      	bne.n	800865a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	f003 0308 	and.w	r3, r3, #8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008618:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	f023 0301 	bic.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	bf14      	ite	ne
 8008632:	2301      	movne	r3, #1
 8008634:	2300      	moveq	r3, #0
 8008636:	b2db      	uxtb	r3, r3
 8008638:	461a      	mov	r2, r3
 800863a:	f107 0318 	add.w	r3, r7, #24
 800863e:	4611      	mov	r1, r2
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd fe53 	bl	80062ec <inc_lock>
 8008646:	4602      	mov	r2, r0
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <f_open+0x22e>
 8008654:	2302      	movs	r3, #2
 8008656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800865a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 8095 	bne.w	800878e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fc77 	bl	8006f5e <ld_clust>
 8008670:	4602      	mov	r2, r0
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	331c      	adds	r3, #28
 800867a:	4618      	mov	r0, r3
 800867c:	f7fd fcd0 	bl	8006020 <ld_dword>
 8008680:	4602      	mov	r2, r0
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	88da      	ldrh	r2, [r3, #6]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	79fa      	ldrb	r2, [r7, #7]
 800869e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3330      	adds	r3, #48	; 0x30
 80086b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fd fd3a 	bl	8006136 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d060      	beq.n	800878e <f_open+0x362>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d05c      	beq.n	800878e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	895b      	ldrh	r3, [r3, #10]
 80086e0:	025b      	lsls	r3, r3, #9
 80086e2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086f0:	e016      	b.n	8008720 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fd ffe5 	bl	80066c6 <get_fat>
 80086fc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80086fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008700:	2b01      	cmp	r3, #1
 8008702:	d802      	bhi.n	800870a <f_open+0x2de>
 8008704:	2302      	movs	r3, #2
 8008706:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800870a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d102      	bne.n	8008718 <f_open+0x2ec>
 8008712:	2301      	movs	r3, #1
 8008714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800871a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008720:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008724:	2b00      	cmp	r3, #0
 8008726:	d103      	bne.n	8008730 <f_open+0x304>
 8008728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800872a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800872c:	429a      	cmp	r2, r3
 800872e:	d8e0      	bhi.n	80086f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008734:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800873a:	2b00      	cmp	r3, #0
 800873c:	d127      	bne.n	800878e <f_open+0x362>
 800873e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008744:	2b00      	cmp	r3, #0
 8008746:	d022      	beq.n	800878e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd ff9b 	bl	8006688 <clust2sect>
 8008752:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d103      	bne.n	8008762 <f_open+0x336>
						res = FR_INT_ERR;
 800875a:	2302      	movs	r3, #2
 800875c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008760:	e015      	b.n	800878e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008764:	0a5a      	lsrs	r2, r3, #9
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	441a      	add	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	7858      	ldrb	r0, [r3, #1]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a1a      	ldr	r2, [r3, #32]
 800877c:	2301      	movs	r3, #1
 800877e:	f7fd fbd9 	bl	8005f34 <disk_read>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <f_open+0x362>
 8008788:	2301      	movs	r3, #1
 800878a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800878e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <f_open+0x370>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800879c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3768      	adds	r7, #104	; 0x68
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08e      	sub	sp, #56	; 0x38
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f107 0214 	add.w	r2, r7, #20
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fdb3 	bl	8008334 <validate>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d107      	bne.n	80087ec <f_read+0x44>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	7d5b      	ldrb	r3, [r3, #21]
 80087e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <f_read+0x4a>
 80087ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087f0:	e115      	b.n	8008a1e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7d1b      	ldrb	r3, [r3, #20]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <f_read+0x5a>
 80087fe:	2307      	movs	r3, #7
 8008800:	e10d      	b.n	8008a1e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	429a      	cmp	r2, r3
 8008814:	f240 80fe 	bls.w	8008a14 <f_read+0x26c>
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800881c:	e0fa      	b.n	8008a14 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	2b00      	cmp	r3, #0
 8008828:	f040 80c6 	bne.w	80089b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	0a5b      	lsrs	r3, r3, #9
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	8952      	ldrh	r2, [r2, #10]
 8008836:	3a01      	subs	r2, #1
 8008838:	4013      	ands	r3, r2
 800883a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d12f      	bne.n	80088a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	633b      	str	r3, [r7, #48]	; 0x30
 8008850:	e013      	b.n	800887a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	4619      	mov	r1, r3
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7fe f9c1 	bl	8006be8 <clmt_clust>
 8008866:	6338      	str	r0, [r7, #48]	; 0x30
 8008868:	e007      	b.n	800887a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	4619      	mov	r1, r3
 8008872:	4610      	mov	r0, r2
 8008874:	f7fd ff27 	bl	80066c6 <get_fat>
 8008878:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	2b01      	cmp	r3, #1
 800887e:	d804      	bhi.n	800888a <f_read+0xe2>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	755a      	strb	r2, [r3, #21]
 8008886:	2302      	movs	r3, #2
 8008888:	e0c9      	b.n	8008a1e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d104      	bne.n	800889c <f_read+0xf4>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	755a      	strb	r2, [r3, #21]
 8008898:	2301      	movs	r3, #1
 800889a:	e0c0      	b.n	8008a1e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fd feec 	bl	8006688 <clust2sect>
 80088b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d104      	bne.n	80088c2 <f_read+0x11a>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2202      	movs	r2, #2
 80088bc:	755a      	strb	r2, [r3, #21]
 80088be:	2302      	movs	r3, #2
 80088c0:	e0ad      	b.n	8008a1e <f_read+0x276>
			sect += csect;
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	4413      	add	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	0a5b      	lsrs	r3, r3, #9
 80088ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d039      	beq.n	800894a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	4413      	add	r3, r2
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	8952      	ldrh	r2, [r2, #10]
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d905      	bls.n	80088f0 <f_read+0x148>
					cc = fs->csize - csect;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	895b      	ldrh	r3, [r3, #10]
 80088e8:	461a      	mov	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	7858      	ldrb	r0, [r3, #1]
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088fa:	f7fd fb1b 	bl	8005f34 <disk_read>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <f_read+0x166>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	755a      	strb	r2, [r3, #21]
 800890a:	2301      	movs	r3, #1
 800890c:	e087      	b.n	8008a1e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	7d1b      	ldrb	r3, [r3, #20]
 8008912:	b25b      	sxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	da14      	bge.n	8008942 <f_read+0x19a>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1a      	ldr	r2, [r3, #32]
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008922:	429a      	cmp	r2, r3
 8008924:	d90d      	bls.n	8008942 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	025b      	lsls	r3, r3, #9
 8008930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008932:	18d0      	adds	r0, r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3330      	adds	r3, #48	; 0x30
 8008938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800893c:	4619      	mov	r1, r3
 800893e:	f7fd fbd9 	bl	80060f4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	025b      	lsls	r3, r3, #9
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008948:	e050      	b.n	80089ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	429a      	cmp	r2, r3
 8008952:	d02e      	beq.n	80089b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	7d1b      	ldrb	r3, [r3, #20]
 8008958:	b25b      	sxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	da18      	bge.n	8008990 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	7858      	ldrb	r0, [r3, #1]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1a      	ldr	r2, [r3, #32]
 800896c:	2301      	movs	r3, #1
 800896e:	f7fd fb01 	bl	8005f74 <disk_write>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <f_read+0x1da>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	755a      	strb	r2, [r3, #21]
 800897e:	2301      	movs	r3, #1
 8008980:	e04d      	b.n	8008a1e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	7d1b      	ldrb	r3, [r3, #20]
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	7858      	ldrb	r0, [r3, #1]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800899a:	2301      	movs	r3, #1
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	f7fd fac9 	bl	8005f34 <disk_read>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <f_read+0x20a>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	755a      	strb	r2, [r3, #21]
 80089ae:	2301      	movs	r3, #1
 80089b0:	e035      	b.n	8008a1e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80089c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80089c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d901      	bls.n	80089d2 <f_read+0x22a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e0:	4413      	add	r3, r2
 80089e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e4:	4619      	mov	r1, r3
 80089e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089e8:	f7fd fb84 	bl	80060f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80089ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	4413      	add	r3, r2
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	699a      	ldr	r2, [r3, #24]
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	441a      	add	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	619a      	str	r2, [r3, #24]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	441a      	add	r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f47f af01 	bne.w	800881e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3738      	adds	r7, #56	; 0x38
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b086      	sub	sp, #24
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f107 0208 	add.w	r2, r7, #8
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fc7c 	bl	8008334 <validate>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d168      	bne.n	8008b18 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7d1b      	ldrb	r3, [r3, #20]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d062      	beq.n	8008b18 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7d1b      	ldrb	r3, [r3, #20]
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da15      	bge.n	8008a88 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	7858      	ldrb	r0, [r3, #1]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1a      	ldr	r2, [r3, #32]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f7fd fa82 	bl	8005f74 <disk_write>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <f_sync+0x54>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e04f      	b.n	8008b1a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7d1b      	ldrb	r3, [r3, #20]
 8008a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a88:	f7fc fcd2 	bl	8005430 <get_fattime>
 8008a8c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f7fd fd5a 	bl	8006550 <move_window>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d138      	bne.n	8008b18 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aaa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	330b      	adds	r3, #11
 8008ab0:	781a      	ldrb	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	330b      	adds	r3, #11
 8008ab6:	f042 0220 	orr.w	r2, r2, #32
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68f9      	ldr	r1, [r7, #12]
 8008aca:	f7fe fa67 	bl	8006f9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f103 021c 	add.w	r2, r3, #28
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7fd fade 	bl	800609c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3316      	adds	r3, #22
 8008ae4:	6939      	ldr	r1, [r7, #16]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fd fad8 	bl	800609c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3312      	adds	r3, #18
 8008af0:	2100      	movs	r1, #0
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fd fab7 	bl	8006066 <st_word>
					fs->wflag = 1;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2201      	movs	r2, #1
 8008afc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fd fd53 	bl	80065ac <sync_fs>
 8008b06:	4603      	mov	r3, r0
 8008b08:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	7d1b      	ldrb	r3, [r3, #20]
 8008b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff ff7b 	bl	8008a26 <f_sync>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d118      	bne.n	8008b6c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f107 0208 	add.w	r2, r7, #8
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff fbf6 	bl	8008334 <validate>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10c      	bne.n	8008b6c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fd fc56 	bl	8006408 <dec_lock>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b0a0      	sub	sp, #128	; 0x80
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008b82:	f107 010c 	add.w	r1, r7, #12
 8008b86:	1d3b      	adds	r3, r7, #4
 8008b88:	2202      	movs	r2, #2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff f980 	bl	8007e90 <find_volume>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8008b9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 808e 	bne.w	8008cc0 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f863 	bl	8007c78 <follow_path>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008bb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d108      	bne.n	8008bd2 <f_unlink+0x5c>
 8008bc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fd fb12 	bl	80061f0 <chk_lock>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008bd2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d172      	bne.n	8008cc0 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008bda:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008bde:	b25b      	sxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da03      	bge.n	8008bec <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008be4:	2306      	movs	r3, #6
 8008be6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008bea:	e008      	b.n	8008bfe <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008bec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008bf8:	2307      	movs	r3, #7
 8008bfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 8008bfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d134      	bne.n	8008c70 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe f9a6 	bl	8006f5e <ld_clust>
 8008c12:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008c14:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d027      	beq.n	8008c70 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c26:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008c28:	f107 0310 	add.w	r3, r7, #16
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe f80e 	bl	8006c50 <dir_sdi>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8008c3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d116      	bne.n	8008c70 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008c42:	f107 0310 	add.w	r3, r7, #16
 8008c46:	2100      	movs	r1, #0
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe fbb4 	bl	80073b6 <dir_read>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008c54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <f_unlink+0xec>
 8008c5c:	2307      	movs	r3, #7
 8008c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008c62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d102      	bne.n	8008c70 <f_unlink+0xfa>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8008c70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d123      	bne.n	8008cc0 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008c78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fdf9 	bl	8007874 <dir_remove>
 8008c82:	4603      	mov	r3, r0
 8008c84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008c88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <f_unlink+0x134>
 8008c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fea5 	bl	80069ee <remove_chain>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008caa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <f_unlink+0x14a>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd fc79 	bl	80065ac <sync_fs>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008cc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3780      	adds	r7, #128	; 0x80
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ce2:	4b1f      	ldr	r3, [pc, #124]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008ce4:	7a5b      	ldrb	r3, [r3, #9]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d131      	bne.n	8008d50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cec:	4b1c      	ldr	r3, [pc, #112]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008cee:	7a5b      	ldrb	r3, [r3, #9]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008cfa:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008cfc:	7a5b      	ldrb	r3, [r3, #9]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	4a17      	ldr	r2, [pc, #92]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d0a:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008d0c:	7a5b      	ldrb	r3, [r3, #9]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008d14:	4413      	add	r3, r2
 8008d16:	79fa      	ldrb	r2, [r7, #7]
 8008d18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d1a:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008d1c:	7a5b      	ldrb	r3, [r3, #9]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	b2d1      	uxtb	r1, r2
 8008d24:	4a0e      	ldr	r2, [pc, #56]	; (8008d60 <FATFS_LinkDriverEx+0x94>)
 8008d26:	7251      	strb	r1, [r2, #9]
 8008d28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
 8008d2c:	3330      	adds	r3, #48	; 0x30
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3301      	adds	r3, #1
 8008d38:	223a      	movs	r2, #58	; 0x3a
 8008d3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	3302      	adds	r3, #2
 8008d40:	222f      	movs	r2, #47	; 0x2f
 8008d42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	3303      	adds	r3, #3
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	200006f4 	.word	0x200006f4

08008d64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d6e:	2200      	movs	r2, #0
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff ffaa 	bl	8008ccc <FATFS_LinkDriverEx>
 8008d78:	4603      	mov	r3, r0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	2b7f      	cmp	r3, #127	; 0x7f
 8008d94:	d802      	bhi.n	8008d9c <ff_convert+0x18>
		c = chr;
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	81fb      	strh	r3, [r7, #14]
 8008d9a:	e025      	b.n	8008de8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008da2:	88fb      	ldrh	r3, [r7, #6]
 8008da4:	2bff      	cmp	r3, #255	; 0xff
 8008da6:	d805      	bhi.n	8008db4 <ff_convert+0x30>
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	3b80      	subs	r3, #128	; 0x80
 8008dac:	4a12      	ldr	r2, [pc, #72]	; (8008df8 <ff_convert+0x74>)
 8008dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db2:	e000      	b.n	8008db6 <ff_convert+0x32>
 8008db4:	2300      	movs	r3, #0
 8008db6:	81fb      	strh	r3, [r7, #14]
 8008db8:	e016      	b.n	8008de8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008dba:	2300      	movs	r3, #0
 8008dbc:	81fb      	strh	r3, [r7, #14]
 8008dbe:	e009      	b.n	8008dd4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <ff_convert+0x74>)
 8008dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc8:	88fa      	ldrh	r2, [r7, #6]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d006      	beq.n	8008ddc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008dce:	89fb      	ldrh	r3, [r7, #14]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	81fb      	strh	r3, [r7, #14]
 8008dd4:	89fb      	ldrh	r3, [r7, #14]
 8008dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008dd8:	d9f2      	bls.n	8008dc0 <ff_convert+0x3c>
 8008dda:	e000      	b.n	8008dde <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008ddc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008dde:	89fb      	ldrh	r3, [r7, #14]
 8008de0:	3380      	adds	r3, #128	; 0x80
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008de8:	89fb      	ldrh	r3, [r7, #14]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	0800a5c4 	.word	0x0800a5c4

08008dfc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0c:	d201      	bcs.n	8008e12 <ff_wtoupper+0x16>
 8008e0e:	4b3e      	ldr	r3, [pc, #248]	; (8008f08 <ff_wtoupper+0x10c>)
 8008e10:	e000      	b.n	8008e14 <ff_wtoupper+0x18>
 8008e12:	4b3e      	ldr	r3, [pc, #248]	; (8008f0c <ff_wtoupper+0x110>)
 8008e14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	1c9a      	adds	r2, r3, #2
 8008e1a:	617a      	str	r2, [r7, #20]
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008e20:	8a7b      	ldrh	r3, [r7, #18]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d068      	beq.n	8008ef8 <ff_wtoupper+0xfc>
 8008e26:	88fa      	ldrh	r2, [r7, #6]
 8008e28:	8a7b      	ldrh	r3, [r7, #18]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d364      	bcc.n	8008ef8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	617a      	str	r2, [r7, #20]
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	823b      	strh	r3, [r7, #16]
 8008e38:	8a3b      	ldrh	r3, [r7, #16]
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	81fb      	strh	r3, [r7, #14]
 8008e3e:	8a3b      	ldrh	r3, [r7, #16]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008e44:	88fa      	ldrh	r2, [r7, #6]
 8008e46:	8a79      	ldrh	r1, [r7, #18]
 8008e48:	8a3b      	ldrh	r3, [r7, #16]
 8008e4a:	440b      	add	r3, r1
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	da49      	bge.n	8008ee4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008e50:	89fb      	ldrh	r3, [r7, #14]
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d84f      	bhi.n	8008ef6 <ff_wtoupper+0xfa>
 8008e56:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <ff_wtoupper+0x60>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e93 	.word	0x08008e93
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008eb1 	.word	0x08008eb1
 8008e6c:	08008eb9 	.word	0x08008eb9
 8008e70:	08008ec1 	.word	0x08008ec1
 8008e74:	08008ec9 	.word	0x08008ec9
 8008e78:	08008ed1 	.word	0x08008ed1
 8008e7c:	08008ed9 	.word	0x08008ed9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008e80:	88fa      	ldrh	r2, [r7, #6]
 8008e82:	8a7b      	ldrh	r3, [r7, #18]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	80fb      	strh	r3, [r7, #6]
 8008e90:	e027      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	8a7b      	ldrh	r3, [r7, #18]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	80fb      	strh	r3, [r7, #6]
 8008ea6:	e01c      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	3b10      	subs	r3, #16
 8008eac:	80fb      	strh	r3, [r7, #6]
 8008eae:	e018      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	3b20      	subs	r3, #32
 8008eb4:	80fb      	strh	r3, [r7, #6]
 8008eb6:	e014      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	3b30      	subs	r3, #48	; 0x30
 8008ebc:	80fb      	strh	r3, [r7, #6]
 8008ebe:	e010      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	3b1a      	subs	r3, #26
 8008ec4:	80fb      	strh	r3, [r7, #6]
 8008ec6:	e00c      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	80fb      	strh	r3, [r7, #6]
 8008ece:	e008      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	3b50      	subs	r3, #80	; 0x50
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	e004      	b.n	8008ee2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008ede:	80fb      	strh	r3, [r7, #6]
 8008ee0:	bf00      	nop
			}
			break;
 8008ee2:	e008      	b.n	8008ef6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008ee4:	89fb      	ldrh	r3, [r7, #14]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d195      	bne.n	8008e16 <ff_wtoupper+0x1a>
 8008eea:	8a3b      	ldrh	r3, [r7, #16]
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008ef4:	e78f      	b.n	8008e16 <ff_wtoupper+0x1a>
			break;
 8008ef6:	bf00      	nop
	}

	return chr;
 8008ef8:	88fb      	ldrh	r3, [r7, #6]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	0800a6c4 	.word	0x0800a6c4
 8008f0c:	0800a8b8 	.word	0x0800a8b8

08008f10 <__errno>:
 8008f10:	4b01      	ldr	r3, [pc, #4]	; (8008f18 <__errno+0x8>)
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000028 	.word	0x20000028

08008f1c <__libc_init_array>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4d0d      	ldr	r5, [pc, #52]	; (8008f54 <__libc_init_array+0x38>)
 8008f20:	4c0d      	ldr	r4, [pc, #52]	; (8008f58 <__libc_init_array+0x3c>)
 8008f22:	1b64      	subs	r4, r4, r5
 8008f24:	10a4      	asrs	r4, r4, #2
 8008f26:	2600      	movs	r6, #0
 8008f28:	42a6      	cmp	r6, r4
 8008f2a:	d109      	bne.n	8008f40 <__libc_init_array+0x24>
 8008f2c:	4d0b      	ldr	r5, [pc, #44]	; (8008f5c <__libc_init_array+0x40>)
 8008f2e:	4c0c      	ldr	r4, [pc, #48]	; (8008f60 <__libc_init_array+0x44>)
 8008f30:	f000 ffec 	bl	8009f0c <_init>
 8008f34:	1b64      	subs	r4, r4, r5
 8008f36:	10a4      	asrs	r4, r4, #2
 8008f38:	2600      	movs	r6, #0
 8008f3a:	42a6      	cmp	r6, r4
 8008f3c:	d105      	bne.n	8008f4a <__libc_init_array+0x2e>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f44:	4798      	blx	r3
 8008f46:	3601      	adds	r6, #1
 8008f48:	e7ee      	b.n	8008f28 <__libc_init_array+0xc>
 8008f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4e:	4798      	blx	r3
 8008f50:	3601      	adds	r6, #1
 8008f52:	e7f2      	b.n	8008f3a <__libc_init_array+0x1e>
 8008f54:	0800aa14 	.word	0x0800aa14
 8008f58:	0800aa14 	.word	0x0800aa14
 8008f5c:	0800aa14 	.word	0x0800aa14
 8008f60:	0800aa18 	.word	0x0800aa18

08008f64 <memset>:
 8008f64:	4402      	add	r2, r0
 8008f66:	4603      	mov	r3, r0
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d100      	bne.n	8008f6e <memset+0xa>
 8008f6c:	4770      	bx	lr
 8008f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f72:	e7f9      	b.n	8008f68 <memset+0x4>

08008f74 <iprintf>:
 8008f74:	b40f      	push	{r0, r1, r2, r3}
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <iprintf+0x2c>)
 8008f78:	b513      	push	{r0, r1, r4, lr}
 8008f7a:	681c      	ldr	r4, [r3, #0]
 8008f7c:	b124      	cbz	r4, 8008f88 <iprintf+0x14>
 8008f7e:	69a3      	ldr	r3, [r4, #24]
 8008f80:	b913      	cbnz	r3, 8008f88 <iprintf+0x14>
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fa5e 	bl	8009444 <__sinit>
 8008f88:	ab05      	add	r3, sp, #20
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	68a1      	ldr	r1, [r4, #8]
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fc2f 	bl	80097f4 <_vfiprintf_r>
 8008f96:	b002      	add	sp, #8
 8008f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f9c:	b004      	add	sp, #16
 8008f9e:	4770      	bx	lr
 8008fa0:	20000028 	.word	0x20000028

08008fa4 <_puts_r>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	4605      	mov	r5, r0
 8008faa:	b118      	cbz	r0, 8008fb4 <_puts_r+0x10>
 8008fac:	6983      	ldr	r3, [r0, #24]
 8008fae:	b90b      	cbnz	r3, 8008fb4 <_puts_r+0x10>
 8008fb0:	f000 fa48 	bl	8009444 <__sinit>
 8008fb4:	69ab      	ldr	r3, [r5, #24]
 8008fb6:	68ac      	ldr	r4, [r5, #8]
 8008fb8:	b913      	cbnz	r3, 8008fc0 <_puts_r+0x1c>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 fa42 	bl	8009444 <__sinit>
 8008fc0:	4b2c      	ldr	r3, [pc, #176]	; (8009074 <_puts_r+0xd0>)
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d120      	bne.n	8009008 <_puts_r+0x64>
 8008fc6:	686c      	ldr	r4, [r5, #4]
 8008fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fca:	07db      	lsls	r3, r3, #31
 8008fcc:	d405      	bmi.n	8008fda <_puts_r+0x36>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	0598      	lsls	r0, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_puts_r+0x36>
 8008fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd6:	f000 fad3 	bl	8009580 <__retarget_lock_acquire_recursive>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	0719      	lsls	r1, r3, #28
 8008fde:	d51d      	bpl.n	800901c <_puts_r+0x78>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b1db      	cbz	r3, 800901c <_puts_r+0x78>
 8008fe4:	3e01      	subs	r6, #1
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fec:	3b01      	subs	r3, #1
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	bb39      	cbnz	r1, 8009042 <_puts_r+0x9e>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	da38      	bge.n	8009068 <_puts_r+0xc4>
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	210a      	movs	r1, #10
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f848 	bl	8009090 <__swbuf_r>
 8009000:	3001      	adds	r0, #1
 8009002:	d011      	beq.n	8009028 <_puts_r+0x84>
 8009004:	250a      	movs	r5, #10
 8009006:	e011      	b.n	800902c <_puts_r+0x88>
 8009008:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <_puts_r+0xd4>)
 800900a:	429c      	cmp	r4, r3
 800900c:	d101      	bne.n	8009012 <_puts_r+0x6e>
 800900e:	68ac      	ldr	r4, [r5, #8]
 8009010:	e7da      	b.n	8008fc8 <_puts_r+0x24>
 8009012:	4b1a      	ldr	r3, [pc, #104]	; (800907c <_puts_r+0xd8>)
 8009014:	429c      	cmp	r4, r3
 8009016:	bf08      	it	eq
 8009018:	68ec      	ldreq	r4, [r5, #12]
 800901a:	e7d5      	b.n	8008fc8 <_puts_r+0x24>
 800901c:	4621      	mov	r1, r4
 800901e:	4628      	mov	r0, r5
 8009020:	f000 f888 	bl	8009134 <__swsetup_r>
 8009024:	2800      	cmp	r0, #0
 8009026:	d0dd      	beq.n	8008fe4 <_puts_r+0x40>
 8009028:	f04f 35ff 	mov.w	r5, #4294967295
 800902c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800902e:	07da      	lsls	r2, r3, #31
 8009030:	d405      	bmi.n	800903e <_puts_r+0x9a>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	059b      	lsls	r3, r3, #22
 8009036:	d402      	bmi.n	800903e <_puts_r+0x9a>
 8009038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903a:	f000 faa2 	bl	8009582 <__retarget_lock_release_recursive>
 800903e:	4628      	mov	r0, r5
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	2b00      	cmp	r3, #0
 8009044:	da04      	bge.n	8009050 <_puts_r+0xac>
 8009046:	69a2      	ldr	r2, [r4, #24]
 8009048:	429a      	cmp	r2, r3
 800904a:	dc06      	bgt.n	800905a <_puts_r+0xb6>
 800904c:	290a      	cmp	r1, #10
 800904e:	d004      	beq.n	800905a <_puts_r+0xb6>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	6022      	str	r2, [r4, #0]
 8009056:	7019      	strb	r1, [r3, #0]
 8009058:	e7c5      	b.n	8008fe6 <_puts_r+0x42>
 800905a:	4622      	mov	r2, r4
 800905c:	4628      	mov	r0, r5
 800905e:	f000 f817 	bl	8009090 <__swbuf_r>
 8009062:	3001      	adds	r0, #1
 8009064:	d1bf      	bne.n	8008fe6 <_puts_r+0x42>
 8009066:	e7df      	b.n	8009028 <_puts_r+0x84>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	250a      	movs	r5, #10
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	6022      	str	r2, [r4, #0]
 8009070:	701d      	strb	r5, [r3, #0]
 8009072:	e7db      	b.n	800902c <_puts_r+0x88>
 8009074:	0800a998 	.word	0x0800a998
 8009078:	0800a9b8 	.word	0x0800a9b8
 800907c:	0800a978 	.word	0x0800a978

08009080 <puts>:
 8009080:	4b02      	ldr	r3, [pc, #8]	; (800908c <puts+0xc>)
 8009082:	4601      	mov	r1, r0
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	f7ff bf8d 	b.w	8008fa4 <_puts_r>
 800908a:	bf00      	nop
 800908c:	20000028 	.word	0x20000028

08009090 <__swbuf_r>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	460e      	mov	r6, r1
 8009094:	4614      	mov	r4, r2
 8009096:	4605      	mov	r5, r0
 8009098:	b118      	cbz	r0, 80090a2 <__swbuf_r+0x12>
 800909a:	6983      	ldr	r3, [r0, #24]
 800909c:	b90b      	cbnz	r3, 80090a2 <__swbuf_r+0x12>
 800909e:	f000 f9d1 	bl	8009444 <__sinit>
 80090a2:	4b21      	ldr	r3, [pc, #132]	; (8009128 <__swbuf_r+0x98>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	d12b      	bne.n	8009100 <__swbuf_r+0x70>
 80090a8:	686c      	ldr	r4, [r5, #4]
 80090aa:	69a3      	ldr	r3, [r4, #24]
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	071a      	lsls	r2, r3, #28
 80090b2:	d52f      	bpl.n	8009114 <__swbuf_r+0x84>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	b36b      	cbz	r3, 8009114 <__swbuf_r+0x84>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	6820      	ldr	r0, [r4, #0]
 80090bc:	1ac0      	subs	r0, r0, r3
 80090be:	6963      	ldr	r3, [r4, #20]
 80090c0:	b2f6      	uxtb	r6, r6
 80090c2:	4283      	cmp	r3, r0
 80090c4:	4637      	mov	r7, r6
 80090c6:	dc04      	bgt.n	80090d2 <__swbuf_r+0x42>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 f926 	bl	800931c <_fflush_r>
 80090d0:	bb30      	cbnz	r0, 8009120 <__swbuf_r+0x90>
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	701e      	strb	r6, [r3, #0]
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	3001      	adds	r0, #1
 80090e4:	4283      	cmp	r3, r0
 80090e6:	d004      	beq.n	80090f2 <__swbuf_r+0x62>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	07db      	lsls	r3, r3, #31
 80090ec:	d506      	bpl.n	80090fc <__swbuf_r+0x6c>
 80090ee:	2e0a      	cmp	r6, #10
 80090f0:	d104      	bne.n	80090fc <__swbuf_r+0x6c>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f911 	bl	800931c <_fflush_r>
 80090fa:	b988      	cbnz	r0, 8009120 <__swbuf_r+0x90>
 80090fc:	4638      	mov	r0, r7
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009100:	4b0a      	ldr	r3, [pc, #40]	; (800912c <__swbuf_r+0x9c>)
 8009102:	429c      	cmp	r4, r3
 8009104:	d101      	bne.n	800910a <__swbuf_r+0x7a>
 8009106:	68ac      	ldr	r4, [r5, #8]
 8009108:	e7cf      	b.n	80090aa <__swbuf_r+0x1a>
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <__swbuf_r+0xa0>)
 800910c:	429c      	cmp	r4, r3
 800910e:	bf08      	it	eq
 8009110:	68ec      	ldreq	r4, [r5, #12]
 8009112:	e7ca      	b.n	80090aa <__swbuf_r+0x1a>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f80c 	bl	8009134 <__swsetup_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	d0cb      	beq.n	80090b8 <__swbuf_r+0x28>
 8009120:	f04f 37ff 	mov.w	r7, #4294967295
 8009124:	e7ea      	b.n	80090fc <__swbuf_r+0x6c>
 8009126:	bf00      	nop
 8009128:	0800a998 	.word	0x0800a998
 800912c:	0800a9b8 	.word	0x0800a9b8
 8009130:	0800a978 	.word	0x0800a978

08009134 <__swsetup_r>:
 8009134:	4b32      	ldr	r3, [pc, #200]	; (8009200 <__swsetup_r+0xcc>)
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	681d      	ldr	r5, [r3, #0]
 800913a:	4606      	mov	r6, r0
 800913c:	460c      	mov	r4, r1
 800913e:	b125      	cbz	r5, 800914a <__swsetup_r+0x16>
 8009140:	69ab      	ldr	r3, [r5, #24]
 8009142:	b913      	cbnz	r3, 800914a <__swsetup_r+0x16>
 8009144:	4628      	mov	r0, r5
 8009146:	f000 f97d 	bl	8009444 <__sinit>
 800914a:	4b2e      	ldr	r3, [pc, #184]	; (8009204 <__swsetup_r+0xd0>)
 800914c:	429c      	cmp	r4, r3
 800914e:	d10f      	bne.n	8009170 <__swsetup_r+0x3c>
 8009150:	686c      	ldr	r4, [r5, #4]
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009158:	0719      	lsls	r1, r3, #28
 800915a:	d42c      	bmi.n	80091b6 <__swsetup_r+0x82>
 800915c:	06dd      	lsls	r5, r3, #27
 800915e:	d411      	bmi.n	8009184 <__swsetup_r+0x50>
 8009160:	2309      	movs	r3, #9
 8009162:	6033      	str	r3, [r6, #0]
 8009164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	f04f 30ff 	mov.w	r0, #4294967295
 800916e:	e03e      	b.n	80091ee <__swsetup_r+0xba>
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <__swsetup_r+0xd4>)
 8009172:	429c      	cmp	r4, r3
 8009174:	d101      	bne.n	800917a <__swsetup_r+0x46>
 8009176:	68ac      	ldr	r4, [r5, #8]
 8009178:	e7eb      	b.n	8009152 <__swsetup_r+0x1e>
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <__swsetup_r+0xd8>)
 800917c:	429c      	cmp	r4, r3
 800917e:	bf08      	it	eq
 8009180:	68ec      	ldreq	r4, [r5, #12]
 8009182:	e7e6      	b.n	8009152 <__swsetup_r+0x1e>
 8009184:	0758      	lsls	r0, r3, #29
 8009186:	d512      	bpl.n	80091ae <__swsetup_r+0x7a>
 8009188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918a:	b141      	cbz	r1, 800919e <__swsetup_r+0x6a>
 800918c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009190:	4299      	cmp	r1, r3
 8009192:	d002      	beq.n	800919a <__swsetup_r+0x66>
 8009194:	4630      	mov	r0, r6
 8009196:	f000 fa59 	bl	800964c <_free_r>
 800919a:	2300      	movs	r3, #0
 800919c:	6363      	str	r3, [r4, #52]	; 0x34
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	2300      	movs	r3, #0
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0308 	orr.w	r3, r3, #8
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	6923      	ldr	r3, [r4, #16]
 80091b8:	b94b      	cbnz	r3, 80091ce <__swsetup_r+0x9a>
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091c4:	d003      	beq.n	80091ce <__swsetup_r+0x9a>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 f9ff 	bl	80095cc <__smakebuf_r>
 80091ce:	89a0      	ldrh	r0, [r4, #12]
 80091d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091d4:	f010 0301 	ands.w	r3, r0, #1
 80091d8:	d00a      	beq.n	80091f0 <__swsetup_r+0xbc>
 80091da:	2300      	movs	r3, #0
 80091dc:	60a3      	str	r3, [r4, #8]
 80091de:	6963      	ldr	r3, [r4, #20]
 80091e0:	425b      	negs	r3, r3
 80091e2:	61a3      	str	r3, [r4, #24]
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	b943      	cbnz	r3, 80091fa <__swsetup_r+0xc6>
 80091e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ec:	d1ba      	bne.n	8009164 <__swsetup_r+0x30>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	0781      	lsls	r1, r0, #30
 80091f2:	bf58      	it	pl
 80091f4:	6963      	ldrpl	r3, [r4, #20]
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	e7f4      	b.n	80091e4 <__swsetup_r+0xb0>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e7f7      	b.n	80091ee <__swsetup_r+0xba>
 80091fe:	bf00      	nop
 8009200:	20000028 	.word	0x20000028
 8009204:	0800a998 	.word	0x0800a998
 8009208:	0800a9b8 	.word	0x0800a9b8
 800920c:	0800a978 	.word	0x0800a978

08009210 <__sflush_r>:
 8009210:	898a      	ldrh	r2, [r1, #12]
 8009212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009216:	4605      	mov	r5, r0
 8009218:	0710      	lsls	r0, r2, #28
 800921a:	460c      	mov	r4, r1
 800921c:	d458      	bmi.n	80092d0 <__sflush_r+0xc0>
 800921e:	684b      	ldr	r3, [r1, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	dc05      	bgt.n	8009230 <__sflush_r+0x20>
 8009224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	dc02      	bgt.n	8009230 <__sflush_r+0x20>
 800922a:	2000      	movs	r0, #0
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009232:	2e00      	cmp	r6, #0
 8009234:	d0f9      	beq.n	800922a <__sflush_r+0x1a>
 8009236:	2300      	movs	r3, #0
 8009238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800923c:	682f      	ldr	r7, [r5, #0]
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	d032      	beq.n	80092a8 <__sflush_r+0x98>
 8009242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	075a      	lsls	r2, r3, #29
 8009248:	d505      	bpl.n	8009256 <__sflush_r+0x46>
 800924a:	6863      	ldr	r3, [r4, #4]
 800924c:	1ac0      	subs	r0, r0, r3
 800924e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009250:	b10b      	cbz	r3, 8009256 <__sflush_r+0x46>
 8009252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009254:	1ac0      	subs	r0, r0, r3
 8009256:	2300      	movs	r3, #0
 8009258:	4602      	mov	r2, r0
 800925a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800925c:	6a21      	ldr	r1, [r4, #32]
 800925e:	4628      	mov	r0, r5
 8009260:	47b0      	blx	r6
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	d106      	bne.n	8009276 <__sflush_r+0x66>
 8009268:	6829      	ldr	r1, [r5, #0]
 800926a:	291d      	cmp	r1, #29
 800926c:	d82c      	bhi.n	80092c8 <__sflush_r+0xb8>
 800926e:	4a2a      	ldr	r2, [pc, #168]	; (8009318 <__sflush_r+0x108>)
 8009270:	40ca      	lsrs	r2, r1
 8009272:	07d6      	lsls	r6, r2, #31
 8009274:	d528      	bpl.n	80092c8 <__sflush_r+0xb8>
 8009276:	2200      	movs	r2, #0
 8009278:	6062      	str	r2, [r4, #4]
 800927a:	04d9      	lsls	r1, r3, #19
 800927c:	6922      	ldr	r2, [r4, #16]
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	d504      	bpl.n	800928c <__sflush_r+0x7c>
 8009282:	1c42      	adds	r2, r0, #1
 8009284:	d101      	bne.n	800928a <__sflush_r+0x7a>
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	b903      	cbnz	r3, 800928c <__sflush_r+0x7c>
 800928a:	6560      	str	r0, [r4, #84]	; 0x54
 800928c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800928e:	602f      	str	r7, [r5, #0]
 8009290:	2900      	cmp	r1, #0
 8009292:	d0ca      	beq.n	800922a <__sflush_r+0x1a>
 8009294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009298:	4299      	cmp	r1, r3
 800929a:	d002      	beq.n	80092a2 <__sflush_r+0x92>
 800929c:	4628      	mov	r0, r5
 800929e:	f000 f9d5 	bl	800964c <_free_r>
 80092a2:	2000      	movs	r0, #0
 80092a4:	6360      	str	r0, [r4, #52]	; 0x34
 80092a6:	e7c1      	b.n	800922c <__sflush_r+0x1c>
 80092a8:	6a21      	ldr	r1, [r4, #32]
 80092aa:	2301      	movs	r3, #1
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b0      	blx	r6
 80092b0:	1c41      	adds	r1, r0, #1
 80092b2:	d1c7      	bne.n	8009244 <__sflush_r+0x34>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0c4      	beq.n	8009244 <__sflush_r+0x34>
 80092ba:	2b1d      	cmp	r3, #29
 80092bc:	d001      	beq.n	80092c2 <__sflush_r+0xb2>
 80092be:	2b16      	cmp	r3, #22
 80092c0:	d101      	bne.n	80092c6 <__sflush_r+0xb6>
 80092c2:	602f      	str	r7, [r5, #0]
 80092c4:	e7b1      	b.n	800922a <__sflush_r+0x1a>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	e7ad      	b.n	800922c <__sflush_r+0x1c>
 80092d0:	690f      	ldr	r7, [r1, #16]
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	d0a9      	beq.n	800922a <__sflush_r+0x1a>
 80092d6:	0793      	lsls	r3, r2, #30
 80092d8:	680e      	ldr	r6, [r1, #0]
 80092da:	bf08      	it	eq
 80092dc:	694b      	ldreq	r3, [r1, #20]
 80092de:	600f      	str	r7, [r1, #0]
 80092e0:	bf18      	it	ne
 80092e2:	2300      	movne	r3, #0
 80092e4:	eba6 0807 	sub.w	r8, r6, r7
 80092e8:	608b      	str	r3, [r1, #8]
 80092ea:	f1b8 0f00 	cmp.w	r8, #0
 80092ee:	dd9c      	ble.n	800922a <__sflush_r+0x1a>
 80092f0:	6a21      	ldr	r1, [r4, #32]
 80092f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092f4:	4643      	mov	r3, r8
 80092f6:	463a      	mov	r2, r7
 80092f8:	4628      	mov	r0, r5
 80092fa:	47b0      	blx	r6
 80092fc:	2800      	cmp	r0, #0
 80092fe:	dc06      	bgt.n	800930e <__sflush_r+0xfe>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	e78e      	b.n	800922c <__sflush_r+0x1c>
 800930e:	4407      	add	r7, r0
 8009310:	eba8 0800 	sub.w	r8, r8, r0
 8009314:	e7e9      	b.n	80092ea <__sflush_r+0xda>
 8009316:	bf00      	nop
 8009318:	20400001 	.word	0x20400001

0800931c <_fflush_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	690b      	ldr	r3, [r1, #16]
 8009320:	4605      	mov	r5, r0
 8009322:	460c      	mov	r4, r1
 8009324:	b913      	cbnz	r3, 800932c <_fflush_r+0x10>
 8009326:	2500      	movs	r5, #0
 8009328:	4628      	mov	r0, r5
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	b118      	cbz	r0, 8009336 <_fflush_r+0x1a>
 800932e:	6983      	ldr	r3, [r0, #24]
 8009330:	b90b      	cbnz	r3, 8009336 <_fflush_r+0x1a>
 8009332:	f000 f887 	bl	8009444 <__sinit>
 8009336:	4b14      	ldr	r3, [pc, #80]	; (8009388 <_fflush_r+0x6c>)
 8009338:	429c      	cmp	r4, r3
 800933a:	d11b      	bne.n	8009374 <_fflush_r+0x58>
 800933c:	686c      	ldr	r4, [r5, #4]
 800933e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0ef      	beq.n	8009326 <_fflush_r+0xa>
 8009346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009348:	07d0      	lsls	r0, r2, #31
 800934a:	d404      	bmi.n	8009356 <_fflush_r+0x3a>
 800934c:	0599      	lsls	r1, r3, #22
 800934e:	d402      	bmi.n	8009356 <_fflush_r+0x3a>
 8009350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009352:	f000 f915 	bl	8009580 <__retarget_lock_acquire_recursive>
 8009356:	4628      	mov	r0, r5
 8009358:	4621      	mov	r1, r4
 800935a:	f7ff ff59 	bl	8009210 <__sflush_r>
 800935e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009360:	07da      	lsls	r2, r3, #31
 8009362:	4605      	mov	r5, r0
 8009364:	d4e0      	bmi.n	8009328 <_fflush_r+0xc>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	059b      	lsls	r3, r3, #22
 800936a:	d4dd      	bmi.n	8009328 <_fflush_r+0xc>
 800936c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800936e:	f000 f908 	bl	8009582 <__retarget_lock_release_recursive>
 8009372:	e7d9      	b.n	8009328 <_fflush_r+0xc>
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <_fflush_r+0x70>)
 8009376:	429c      	cmp	r4, r3
 8009378:	d101      	bne.n	800937e <_fflush_r+0x62>
 800937a:	68ac      	ldr	r4, [r5, #8]
 800937c:	e7df      	b.n	800933e <_fflush_r+0x22>
 800937e:	4b04      	ldr	r3, [pc, #16]	; (8009390 <_fflush_r+0x74>)
 8009380:	429c      	cmp	r4, r3
 8009382:	bf08      	it	eq
 8009384:	68ec      	ldreq	r4, [r5, #12]
 8009386:	e7da      	b.n	800933e <_fflush_r+0x22>
 8009388:	0800a998 	.word	0x0800a998
 800938c:	0800a9b8 	.word	0x0800a9b8
 8009390:	0800a978 	.word	0x0800a978

08009394 <std>:
 8009394:	2300      	movs	r3, #0
 8009396:	b510      	push	{r4, lr}
 8009398:	4604      	mov	r4, r0
 800939a:	e9c0 3300 	strd	r3, r3, [r0]
 800939e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a2:	6083      	str	r3, [r0, #8]
 80093a4:	8181      	strh	r1, [r0, #12]
 80093a6:	6643      	str	r3, [r0, #100]	; 0x64
 80093a8:	81c2      	strh	r2, [r0, #14]
 80093aa:	6183      	str	r3, [r0, #24]
 80093ac:	4619      	mov	r1, r3
 80093ae:	2208      	movs	r2, #8
 80093b0:	305c      	adds	r0, #92	; 0x5c
 80093b2:	f7ff fdd7 	bl	8008f64 <memset>
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <std+0x38>)
 80093b8:	6263      	str	r3, [r4, #36]	; 0x24
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x3c>)
 80093bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <std+0x40>)
 80093c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <std+0x44>)
 80093c4:	6224      	str	r4, [r4, #32]
 80093c6:	6323      	str	r3, [r4, #48]	; 0x30
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	bf00      	nop
 80093cc:	08009d9d 	.word	0x08009d9d
 80093d0:	08009dbf 	.word	0x08009dbf
 80093d4:	08009df7 	.word	0x08009df7
 80093d8:	08009e1b 	.word	0x08009e1b

080093dc <_cleanup_r>:
 80093dc:	4901      	ldr	r1, [pc, #4]	; (80093e4 <_cleanup_r+0x8>)
 80093de:	f000 b8af 	b.w	8009540 <_fwalk_reent>
 80093e2:	bf00      	nop
 80093e4:	0800931d 	.word	0x0800931d

080093e8 <__sfmoreglue>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	1e4a      	subs	r2, r1, #1
 80093ec:	2568      	movs	r5, #104	; 0x68
 80093ee:	4355      	muls	r5, r2
 80093f0:	460e      	mov	r6, r1
 80093f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093f6:	f000 f979 	bl	80096ec <_malloc_r>
 80093fa:	4604      	mov	r4, r0
 80093fc:	b140      	cbz	r0, 8009410 <__sfmoreglue+0x28>
 80093fe:	2100      	movs	r1, #0
 8009400:	e9c0 1600 	strd	r1, r6, [r0]
 8009404:	300c      	adds	r0, #12
 8009406:	60a0      	str	r0, [r4, #8]
 8009408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800940c:	f7ff fdaa 	bl	8008f64 <memset>
 8009410:	4620      	mov	r0, r4
 8009412:	bd70      	pop	{r4, r5, r6, pc}

08009414 <__sfp_lock_acquire>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__sfp_lock_acquire+0x8>)
 8009416:	f000 b8b3 	b.w	8009580 <__retarget_lock_acquire_recursive>
 800941a:	bf00      	nop
 800941c:	20000d34 	.word	0x20000d34

08009420 <__sfp_lock_release>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__sfp_lock_release+0x8>)
 8009422:	f000 b8ae 	b.w	8009582 <__retarget_lock_release_recursive>
 8009426:	bf00      	nop
 8009428:	20000d34 	.word	0x20000d34

0800942c <__sinit_lock_acquire>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__sinit_lock_acquire+0x8>)
 800942e:	f000 b8a7 	b.w	8009580 <__retarget_lock_acquire_recursive>
 8009432:	bf00      	nop
 8009434:	20000d2f 	.word	0x20000d2f

08009438 <__sinit_lock_release>:
 8009438:	4801      	ldr	r0, [pc, #4]	; (8009440 <__sinit_lock_release+0x8>)
 800943a:	f000 b8a2 	b.w	8009582 <__retarget_lock_release_recursive>
 800943e:	bf00      	nop
 8009440:	20000d2f 	.word	0x20000d2f

08009444 <__sinit>:
 8009444:	b510      	push	{r4, lr}
 8009446:	4604      	mov	r4, r0
 8009448:	f7ff fff0 	bl	800942c <__sinit_lock_acquire>
 800944c:	69a3      	ldr	r3, [r4, #24]
 800944e:	b11b      	cbz	r3, 8009458 <__sinit+0x14>
 8009450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009454:	f7ff bff0 	b.w	8009438 <__sinit_lock_release>
 8009458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800945c:	6523      	str	r3, [r4, #80]	; 0x50
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <__sinit+0x68>)
 8009460:	4a13      	ldr	r2, [pc, #76]	; (80094b0 <__sinit+0x6c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	62a2      	str	r2, [r4, #40]	; 0x28
 8009466:	42a3      	cmp	r3, r4
 8009468:	bf04      	itt	eq
 800946a:	2301      	moveq	r3, #1
 800946c:	61a3      	streq	r3, [r4, #24]
 800946e:	4620      	mov	r0, r4
 8009470:	f000 f820 	bl	80094b4 <__sfp>
 8009474:	6060      	str	r0, [r4, #4]
 8009476:	4620      	mov	r0, r4
 8009478:	f000 f81c 	bl	80094b4 <__sfp>
 800947c:	60a0      	str	r0, [r4, #8]
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f818 	bl	80094b4 <__sfp>
 8009484:	2200      	movs	r2, #0
 8009486:	60e0      	str	r0, [r4, #12]
 8009488:	2104      	movs	r1, #4
 800948a:	6860      	ldr	r0, [r4, #4]
 800948c:	f7ff ff82 	bl	8009394 <std>
 8009490:	68a0      	ldr	r0, [r4, #8]
 8009492:	2201      	movs	r2, #1
 8009494:	2109      	movs	r1, #9
 8009496:	f7ff ff7d 	bl	8009394 <std>
 800949a:	68e0      	ldr	r0, [r4, #12]
 800949c:	2202      	movs	r2, #2
 800949e:	2112      	movs	r1, #18
 80094a0:	f7ff ff78 	bl	8009394 <std>
 80094a4:	2301      	movs	r3, #1
 80094a6:	61a3      	str	r3, [r4, #24]
 80094a8:	e7d2      	b.n	8009450 <__sinit+0xc>
 80094aa:	bf00      	nop
 80094ac:	0800a974 	.word	0x0800a974
 80094b0:	080093dd 	.word	0x080093dd

080094b4 <__sfp>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	4607      	mov	r7, r0
 80094b8:	f7ff ffac 	bl	8009414 <__sfp_lock_acquire>
 80094bc:	4b1e      	ldr	r3, [pc, #120]	; (8009538 <__sfp+0x84>)
 80094be:	681e      	ldr	r6, [r3, #0]
 80094c0:	69b3      	ldr	r3, [r6, #24]
 80094c2:	b913      	cbnz	r3, 80094ca <__sfp+0x16>
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff ffbd 	bl	8009444 <__sinit>
 80094ca:	3648      	adds	r6, #72	; 0x48
 80094cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	d503      	bpl.n	80094dc <__sfp+0x28>
 80094d4:	6833      	ldr	r3, [r6, #0]
 80094d6:	b30b      	cbz	r3, 800951c <__sfp+0x68>
 80094d8:	6836      	ldr	r6, [r6, #0]
 80094da:	e7f7      	b.n	80094cc <__sfp+0x18>
 80094dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094e0:	b9d5      	cbnz	r5, 8009518 <__sfp+0x64>
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <__sfp+0x88>)
 80094e4:	60e3      	str	r3, [r4, #12]
 80094e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ea:	6665      	str	r5, [r4, #100]	; 0x64
 80094ec:	f000 f847 	bl	800957e <__retarget_lock_init_recursive>
 80094f0:	f7ff ff96 	bl	8009420 <__sfp_lock_release>
 80094f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094fc:	6025      	str	r5, [r4, #0]
 80094fe:	61a5      	str	r5, [r4, #24]
 8009500:	2208      	movs	r2, #8
 8009502:	4629      	mov	r1, r5
 8009504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009508:	f7ff fd2c 	bl	8008f64 <memset>
 800950c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009514:	4620      	mov	r0, r4
 8009516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009518:	3468      	adds	r4, #104	; 0x68
 800951a:	e7d9      	b.n	80094d0 <__sfp+0x1c>
 800951c:	2104      	movs	r1, #4
 800951e:	4638      	mov	r0, r7
 8009520:	f7ff ff62 	bl	80093e8 <__sfmoreglue>
 8009524:	4604      	mov	r4, r0
 8009526:	6030      	str	r0, [r6, #0]
 8009528:	2800      	cmp	r0, #0
 800952a:	d1d5      	bne.n	80094d8 <__sfp+0x24>
 800952c:	f7ff ff78 	bl	8009420 <__sfp_lock_release>
 8009530:	230c      	movs	r3, #12
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	e7ee      	b.n	8009514 <__sfp+0x60>
 8009536:	bf00      	nop
 8009538:	0800a974 	.word	0x0800a974
 800953c:	ffff0001 	.word	0xffff0001

08009540 <_fwalk_reent>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	4606      	mov	r6, r0
 8009546:	4688      	mov	r8, r1
 8009548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800954c:	2700      	movs	r7, #0
 800954e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009552:	f1b9 0901 	subs.w	r9, r9, #1
 8009556:	d505      	bpl.n	8009564 <_fwalk_reent+0x24>
 8009558:	6824      	ldr	r4, [r4, #0]
 800955a:	2c00      	cmp	r4, #0
 800955c:	d1f7      	bne.n	800954e <_fwalk_reent+0xe>
 800955e:	4638      	mov	r0, r7
 8009560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009564:	89ab      	ldrh	r3, [r5, #12]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d907      	bls.n	800957a <_fwalk_reent+0x3a>
 800956a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800956e:	3301      	adds	r3, #1
 8009570:	d003      	beq.n	800957a <_fwalk_reent+0x3a>
 8009572:	4629      	mov	r1, r5
 8009574:	4630      	mov	r0, r6
 8009576:	47c0      	blx	r8
 8009578:	4307      	orrs	r7, r0
 800957a:	3568      	adds	r5, #104	; 0x68
 800957c:	e7e9      	b.n	8009552 <_fwalk_reent+0x12>

0800957e <__retarget_lock_init_recursive>:
 800957e:	4770      	bx	lr

08009580 <__retarget_lock_acquire_recursive>:
 8009580:	4770      	bx	lr

08009582 <__retarget_lock_release_recursive>:
 8009582:	4770      	bx	lr

08009584 <__swhatbuf_r>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	460e      	mov	r6, r1
 8009588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958c:	2900      	cmp	r1, #0
 800958e:	b096      	sub	sp, #88	; 0x58
 8009590:	4614      	mov	r4, r2
 8009592:	461d      	mov	r5, r3
 8009594:	da07      	bge.n	80095a6 <__swhatbuf_r+0x22>
 8009596:	2300      	movs	r3, #0
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	89b3      	ldrh	r3, [r6, #12]
 800959c:	061a      	lsls	r2, r3, #24
 800959e:	d410      	bmi.n	80095c2 <__swhatbuf_r+0x3e>
 80095a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a4:	e00e      	b.n	80095c4 <__swhatbuf_r+0x40>
 80095a6:	466a      	mov	r2, sp
 80095a8:	f000 fc5e 	bl	8009e68 <_fstat_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	dbf2      	blt.n	8009596 <__swhatbuf_r+0x12>
 80095b0:	9a01      	ldr	r2, [sp, #4]
 80095b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095ba:	425a      	negs	r2, r3
 80095bc:	415a      	adcs	r2, r3
 80095be:	602a      	str	r2, [r5, #0]
 80095c0:	e7ee      	b.n	80095a0 <__swhatbuf_r+0x1c>
 80095c2:	2340      	movs	r3, #64	; 0x40
 80095c4:	2000      	movs	r0, #0
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	b016      	add	sp, #88	; 0x58
 80095ca:	bd70      	pop	{r4, r5, r6, pc}

080095cc <__smakebuf_r>:
 80095cc:	898b      	ldrh	r3, [r1, #12]
 80095ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095d0:	079d      	lsls	r5, r3, #30
 80095d2:	4606      	mov	r6, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	d507      	bpl.n	80095e8 <__smakebuf_r+0x1c>
 80095d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	2301      	movs	r3, #1
 80095e2:	6163      	str	r3, [r4, #20]
 80095e4:	b002      	add	sp, #8
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	ab01      	add	r3, sp, #4
 80095ea:	466a      	mov	r2, sp
 80095ec:	f7ff ffca 	bl	8009584 <__swhatbuf_r>
 80095f0:	9900      	ldr	r1, [sp, #0]
 80095f2:	4605      	mov	r5, r0
 80095f4:	4630      	mov	r0, r6
 80095f6:	f000 f879 	bl	80096ec <_malloc_r>
 80095fa:	b948      	cbnz	r0, 8009610 <__smakebuf_r+0x44>
 80095fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009600:	059a      	lsls	r2, r3, #22
 8009602:	d4ef      	bmi.n	80095e4 <__smakebuf_r+0x18>
 8009604:	f023 0303 	bic.w	r3, r3, #3
 8009608:	f043 0302 	orr.w	r3, r3, #2
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	e7e3      	b.n	80095d8 <__smakebuf_r+0xc>
 8009610:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <__smakebuf_r+0x7c>)
 8009612:	62b3      	str	r3, [r6, #40]	; 0x28
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	6020      	str	r0, [r4, #0]
 8009618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	9b00      	ldr	r3, [sp, #0]
 8009620:	6163      	str	r3, [r4, #20]
 8009622:	9b01      	ldr	r3, [sp, #4]
 8009624:	6120      	str	r0, [r4, #16]
 8009626:	b15b      	cbz	r3, 8009640 <__smakebuf_r+0x74>
 8009628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800962c:	4630      	mov	r0, r6
 800962e:	f000 fc2d 	bl	8009e8c <_isatty_r>
 8009632:	b128      	cbz	r0, 8009640 <__smakebuf_r+0x74>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f023 0303 	bic.w	r3, r3, #3
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	89a0      	ldrh	r0, [r4, #12]
 8009642:	4305      	orrs	r5, r0
 8009644:	81a5      	strh	r5, [r4, #12]
 8009646:	e7cd      	b.n	80095e4 <__smakebuf_r+0x18>
 8009648:	080093dd 	.word	0x080093dd

0800964c <_free_r>:
 800964c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800964e:	2900      	cmp	r1, #0
 8009650:	d048      	beq.n	80096e4 <_free_r+0x98>
 8009652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009656:	9001      	str	r0, [sp, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f1a1 0404 	sub.w	r4, r1, #4
 800965e:	bfb8      	it	lt
 8009660:	18e4      	addlt	r4, r4, r3
 8009662:	f000 fc35 	bl	8009ed0 <__malloc_lock>
 8009666:	4a20      	ldr	r2, [pc, #128]	; (80096e8 <_free_r+0x9c>)
 8009668:	9801      	ldr	r0, [sp, #4]
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	4615      	mov	r5, r2
 800966e:	b933      	cbnz	r3, 800967e <_free_r+0x32>
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	6014      	str	r4, [r2, #0]
 8009674:	b003      	add	sp, #12
 8009676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800967a:	f000 bc2f 	b.w	8009edc <__malloc_unlock>
 800967e:	42a3      	cmp	r3, r4
 8009680:	d90b      	bls.n	800969a <_free_r+0x4e>
 8009682:	6821      	ldr	r1, [r4, #0]
 8009684:	1862      	adds	r2, r4, r1
 8009686:	4293      	cmp	r3, r2
 8009688:	bf04      	itt	eq
 800968a:	681a      	ldreq	r2, [r3, #0]
 800968c:	685b      	ldreq	r3, [r3, #4]
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	bf04      	itt	eq
 8009692:	1852      	addeq	r2, r2, r1
 8009694:	6022      	streq	r2, [r4, #0]
 8009696:	602c      	str	r4, [r5, #0]
 8009698:	e7ec      	b.n	8009674 <_free_r+0x28>
 800969a:	461a      	mov	r2, r3
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	b10b      	cbz	r3, 80096a4 <_free_r+0x58>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d9fa      	bls.n	800969a <_free_r+0x4e>
 80096a4:	6811      	ldr	r1, [r2, #0]
 80096a6:	1855      	adds	r5, r2, r1
 80096a8:	42a5      	cmp	r5, r4
 80096aa:	d10b      	bne.n	80096c4 <_free_r+0x78>
 80096ac:	6824      	ldr	r4, [r4, #0]
 80096ae:	4421      	add	r1, r4
 80096b0:	1854      	adds	r4, r2, r1
 80096b2:	42a3      	cmp	r3, r4
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	d1dd      	bne.n	8009674 <_free_r+0x28>
 80096b8:	681c      	ldr	r4, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	6053      	str	r3, [r2, #4]
 80096be:	4421      	add	r1, r4
 80096c0:	6011      	str	r1, [r2, #0]
 80096c2:	e7d7      	b.n	8009674 <_free_r+0x28>
 80096c4:	d902      	bls.n	80096cc <_free_r+0x80>
 80096c6:	230c      	movs	r3, #12
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	e7d3      	b.n	8009674 <_free_r+0x28>
 80096cc:	6825      	ldr	r5, [r4, #0]
 80096ce:	1961      	adds	r1, r4, r5
 80096d0:	428b      	cmp	r3, r1
 80096d2:	bf04      	itt	eq
 80096d4:	6819      	ldreq	r1, [r3, #0]
 80096d6:	685b      	ldreq	r3, [r3, #4]
 80096d8:	6063      	str	r3, [r4, #4]
 80096da:	bf04      	itt	eq
 80096dc:	1949      	addeq	r1, r1, r5
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	6054      	str	r4, [r2, #4]
 80096e2:	e7c7      	b.n	8009674 <_free_r+0x28>
 80096e4:	b003      	add	sp, #12
 80096e6:	bd30      	pop	{r4, r5, pc}
 80096e8:	20000700 	.word	0x20000700

080096ec <_malloc_r>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	1ccd      	adds	r5, r1, #3
 80096f0:	f025 0503 	bic.w	r5, r5, #3
 80096f4:	3508      	adds	r5, #8
 80096f6:	2d0c      	cmp	r5, #12
 80096f8:	bf38      	it	cc
 80096fa:	250c      	movcc	r5, #12
 80096fc:	2d00      	cmp	r5, #0
 80096fe:	4606      	mov	r6, r0
 8009700:	db01      	blt.n	8009706 <_malloc_r+0x1a>
 8009702:	42a9      	cmp	r1, r5
 8009704:	d903      	bls.n	800970e <_malloc_r+0x22>
 8009706:	230c      	movs	r3, #12
 8009708:	6033      	str	r3, [r6, #0]
 800970a:	2000      	movs	r0, #0
 800970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970e:	f000 fbdf 	bl	8009ed0 <__malloc_lock>
 8009712:	4921      	ldr	r1, [pc, #132]	; (8009798 <_malloc_r+0xac>)
 8009714:	680a      	ldr	r2, [r1, #0]
 8009716:	4614      	mov	r4, r2
 8009718:	b99c      	cbnz	r4, 8009742 <_malloc_r+0x56>
 800971a:	4f20      	ldr	r7, [pc, #128]	; (800979c <_malloc_r+0xb0>)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	b923      	cbnz	r3, 800972a <_malloc_r+0x3e>
 8009720:	4621      	mov	r1, r4
 8009722:	4630      	mov	r0, r6
 8009724:	f000 fb2a 	bl	8009d7c <_sbrk_r>
 8009728:	6038      	str	r0, [r7, #0]
 800972a:	4629      	mov	r1, r5
 800972c:	4630      	mov	r0, r6
 800972e:	f000 fb25 	bl	8009d7c <_sbrk_r>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	d123      	bne.n	800977e <_malloc_r+0x92>
 8009736:	230c      	movs	r3, #12
 8009738:	6033      	str	r3, [r6, #0]
 800973a:	4630      	mov	r0, r6
 800973c:	f000 fbce 	bl	8009edc <__malloc_unlock>
 8009740:	e7e3      	b.n	800970a <_malloc_r+0x1e>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	1b5b      	subs	r3, r3, r5
 8009746:	d417      	bmi.n	8009778 <_malloc_r+0x8c>
 8009748:	2b0b      	cmp	r3, #11
 800974a:	d903      	bls.n	8009754 <_malloc_r+0x68>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	441c      	add	r4, r3
 8009750:	6025      	str	r5, [r4, #0]
 8009752:	e004      	b.n	800975e <_malloc_r+0x72>
 8009754:	6863      	ldr	r3, [r4, #4]
 8009756:	42a2      	cmp	r2, r4
 8009758:	bf0c      	ite	eq
 800975a:	600b      	streq	r3, [r1, #0]
 800975c:	6053      	strne	r3, [r2, #4]
 800975e:	4630      	mov	r0, r6
 8009760:	f000 fbbc 	bl	8009edc <__malloc_unlock>
 8009764:	f104 000b 	add.w	r0, r4, #11
 8009768:	1d23      	adds	r3, r4, #4
 800976a:	f020 0007 	bic.w	r0, r0, #7
 800976e:	1ac2      	subs	r2, r0, r3
 8009770:	d0cc      	beq.n	800970c <_malloc_r+0x20>
 8009772:	1a1b      	subs	r3, r3, r0
 8009774:	50a3      	str	r3, [r4, r2]
 8009776:	e7c9      	b.n	800970c <_malloc_r+0x20>
 8009778:	4622      	mov	r2, r4
 800977a:	6864      	ldr	r4, [r4, #4]
 800977c:	e7cc      	b.n	8009718 <_malloc_r+0x2c>
 800977e:	1cc4      	adds	r4, r0, #3
 8009780:	f024 0403 	bic.w	r4, r4, #3
 8009784:	42a0      	cmp	r0, r4
 8009786:	d0e3      	beq.n	8009750 <_malloc_r+0x64>
 8009788:	1a21      	subs	r1, r4, r0
 800978a:	4630      	mov	r0, r6
 800978c:	f000 faf6 	bl	8009d7c <_sbrk_r>
 8009790:	3001      	adds	r0, #1
 8009792:	d1dd      	bne.n	8009750 <_malloc_r+0x64>
 8009794:	e7cf      	b.n	8009736 <_malloc_r+0x4a>
 8009796:	bf00      	nop
 8009798:	20000700 	.word	0x20000700
 800979c:	20000704 	.word	0x20000704

080097a0 <__sfputc_r>:
 80097a0:	6893      	ldr	r3, [r2, #8]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	b410      	push	{r4}
 80097a8:	6093      	str	r3, [r2, #8]
 80097aa:	da08      	bge.n	80097be <__sfputc_r+0x1e>
 80097ac:	6994      	ldr	r4, [r2, #24]
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	db01      	blt.n	80097b6 <__sfputc_r+0x16>
 80097b2:	290a      	cmp	r1, #10
 80097b4:	d103      	bne.n	80097be <__sfputc_r+0x1e>
 80097b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ba:	f7ff bc69 	b.w	8009090 <__swbuf_r>
 80097be:	6813      	ldr	r3, [r2, #0]
 80097c0:	1c58      	adds	r0, r3, #1
 80097c2:	6010      	str	r0, [r2, #0]
 80097c4:	7019      	strb	r1, [r3, #0]
 80097c6:	4608      	mov	r0, r1
 80097c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <__sfputs_r>:
 80097ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d0:	4606      	mov	r6, r0
 80097d2:	460f      	mov	r7, r1
 80097d4:	4614      	mov	r4, r2
 80097d6:	18d5      	adds	r5, r2, r3
 80097d8:	42ac      	cmp	r4, r5
 80097da:	d101      	bne.n	80097e0 <__sfputs_r+0x12>
 80097dc:	2000      	movs	r0, #0
 80097de:	e007      	b.n	80097f0 <__sfputs_r+0x22>
 80097e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e4:	463a      	mov	r2, r7
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ffda 	bl	80097a0 <__sfputc_r>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d1f3      	bne.n	80097d8 <__sfputs_r+0xa>
 80097f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097f4 <_vfiprintf_r>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	460d      	mov	r5, r1
 80097fa:	b09d      	sub	sp, #116	; 0x74
 80097fc:	4614      	mov	r4, r2
 80097fe:	4698      	mov	r8, r3
 8009800:	4606      	mov	r6, r0
 8009802:	b118      	cbz	r0, 800980c <_vfiprintf_r+0x18>
 8009804:	6983      	ldr	r3, [r0, #24]
 8009806:	b90b      	cbnz	r3, 800980c <_vfiprintf_r+0x18>
 8009808:	f7ff fe1c 	bl	8009444 <__sinit>
 800980c:	4b89      	ldr	r3, [pc, #548]	; (8009a34 <_vfiprintf_r+0x240>)
 800980e:	429d      	cmp	r5, r3
 8009810:	d11b      	bne.n	800984a <_vfiprintf_r+0x56>
 8009812:	6875      	ldr	r5, [r6, #4]
 8009814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009816:	07d9      	lsls	r1, r3, #31
 8009818:	d405      	bmi.n	8009826 <_vfiprintf_r+0x32>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	059a      	lsls	r2, r3, #22
 800981e:	d402      	bmi.n	8009826 <_vfiprintf_r+0x32>
 8009820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009822:	f7ff fead 	bl	8009580 <__retarget_lock_acquire_recursive>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	071b      	lsls	r3, r3, #28
 800982a:	d501      	bpl.n	8009830 <_vfiprintf_r+0x3c>
 800982c:	692b      	ldr	r3, [r5, #16]
 800982e:	b9eb      	cbnz	r3, 800986c <_vfiprintf_r+0x78>
 8009830:	4629      	mov	r1, r5
 8009832:	4630      	mov	r0, r6
 8009834:	f7ff fc7e 	bl	8009134 <__swsetup_r>
 8009838:	b1c0      	cbz	r0, 800986c <_vfiprintf_r+0x78>
 800983a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800983c:	07dc      	lsls	r4, r3, #31
 800983e:	d50e      	bpl.n	800985e <_vfiprintf_r+0x6a>
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	b01d      	add	sp, #116	; 0x74
 8009846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984a:	4b7b      	ldr	r3, [pc, #492]	; (8009a38 <_vfiprintf_r+0x244>)
 800984c:	429d      	cmp	r5, r3
 800984e:	d101      	bne.n	8009854 <_vfiprintf_r+0x60>
 8009850:	68b5      	ldr	r5, [r6, #8]
 8009852:	e7df      	b.n	8009814 <_vfiprintf_r+0x20>
 8009854:	4b79      	ldr	r3, [pc, #484]	; (8009a3c <_vfiprintf_r+0x248>)
 8009856:	429d      	cmp	r5, r3
 8009858:	bf08      	it	eq
 800985a:	68f5      	ldreq	r5, [r6, #12]
 800985c:	e7da      	b.n	8009814 <_vfiprintf_r+0x20>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	0598      	lsls	r0, r3, #22
 8009862:	d4ed      	bmi.n	8009840 <_vfiprintf_r+0x4c>
 8009864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009866:	f7ff fe8c 	bl	8009582 <__retarget_lock_release_recursive>
 800986a:	e7e9      	b.n	8009840 <_vfiprintf_r+0x4c>
 800986c:	2300      	movs	r3, #0
 800986e:	9309      	str	r3, [sp, #36]	; 0x24
 8009870:	2320      	movs	r3, #32
 8009872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009876:	f8cd 800c 	str.w	r8, [sp, #12]
 800987a:	2330      	movs	r3, #48	; 0x30
 800987c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a40 <_vfiprintf_r+0x24c>
 8009880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009884:	f04f 0901 	mov.w	r9, #1
 8009888:	4623      	mov	r3, r4
 800988a:	469a      	mov	sl, r3
 800988c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009890:	b10a      	cbz	r2, 8009896 <_vfiprintf_r+0xa2>
 8009892:	2a25      	cmp	r2, #37	; 0x25
 8009894:	d1f9      	bne.n	800988a <_vfiprintf_r+0x96>
 8009896:	ebba 0b04 	subs.w	fp, sl, r4
 800989a:	d00b      	beq.n	80098b4 <_vfiprintf_r+0xc0>
 800989c:	465b      	mov	r3, fp
 800989e:	4622      	mov	r2, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7ff ff93 	bl	80097ce <__sfputs_r>
 80098a8:	3001      	adds	r0, #1
 80098aa:	f000 80aa 	beq.w	8009a02 <_vfiprintf_r+0x20e>
 80098ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b0:	445a      	add	r2, fp
 80098b2:	9209      	str	r2, [sp, #36]	; 0x24
 80098b4:	f89a 3000 	ldrb.w	r3, [sl]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 80a2 	beq.w	8009a02 <_vfiprintf_r+0x20e>
 80098be:	2300      	movs	r3, #0
 80098c0:	f04f 32ff 	mov.w	r2, #4294967295
 80098c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c8:	f10a 0a01 	add.w	sl, sl, #1
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	9307      	str	r3, [sp, #28]
 80098d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d4:	931a      	str	r3, [sp, #104]	; 0x68
 80098d6:	4654      	mov	r4, sl
 80098d8:	2205      	movs	r2, #5
 80098da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098de:	4858      	ldr	r0, [pc, #352]	; (8009a40 <_vfiprintf_r+0x24c>)
 80098e0:	f7f6 fcae 	bl	8000240 <memchr>
 80098e4:	9a04      	ldr	r2, [sp, #16]
 80098e6:	b9d8      	cbnz	r0, 8009920 <_vfiprintf_r+0x12c>
 80098e8:	06d1      	lsls	r1, r2, #27
 80098ea:	bf44      	itt	mi
 80098ec:	2320      	movmi	r3, #32
 80098ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f2:	0713      	lsls	r3, r2, #28
 80098f4:	bf44      	itt	mi
 80098f6:	232b      	movmi	r3, #43	; 0x2b
 80098f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009900:	2b2a      	cmp	r3, #42	; 0x2a
 8009902:	d015      	beq.n	8009930 <_vfiprintf_r+0x13c>
 8009904:	9a07      	ldr	r2, [sp, #28]
 8009906:	4654      	mov	r4, sl
 8009908:	2000      	movs	r0, #0
 800990a:	f04f 0c0a 	mov.w	ip, #10
 800990e:	4621      	mov	r1, r4
 8009910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009914:	3b30      	subs	r3, #48	; 0x30
 8009916:	2b09      	cmp	r3, #9
 8009918:	d94e      	bls.n	80099b8 <_vfiprintf_r+0x1c4>
 800991a:	b1b0      	cbz	r0, 800994a <_vfiprintf_r+0x156>
 800991c:	9207      	str	r2, [sp, #28]
 800991e:	e014      	b.n	800994a <_vfiprintf_r+0x156>
 8009920:	eba0 0308 	sub.w	r3, r0, r8
 8009924:	fa09 f303 	lsl.w	r3, r9, r3
 8009928:	4313      	orrs	r3, r2
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	46a2      	mov	sl, r4
 800992e:	e7d2      	b.n	80098d6 <_vfiprintf_r+0xe2>
 8009930:	9b03      	ldr	r3, [sp, #12]
 8009932:	1d19      	adds	r1, r3, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	9103      	str	r1, [sp, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	bfbb      	ittet	lt
 800993c:	425b      	neglt	r3, r3
 800993e:	f042 0202 	orrlt.w	r2, r2, #2
 8009942:	9307      	strge	r3, [sp, #28]
 8009944:	9307      	strlt	r3, [sp, #28]
 8009946:	bfb8      	it	lt
 8009948:	9204      	strlt	r2, [sp, #16]
 800994a:	7823      	ldrb	r3, [r4, #0]
 800994c:	2b2e      	cmp	r3, #46	; 0x2e
 800994e:	d10c      	bne.n	800996a <_vfiprintf_r+0x176>
 8009950:	7863      	ldrb	r3, [r4, #1]
 8009952:	2b2a      	cmp	r3, #42	; 0x2a
 8009954:	d135      	bne.n	80099c2 <_vfiprintf_r+0x1ce>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	1d1a      	adds	r2, r3, #4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	9203      	str	r2, [sp, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	bfb8      	it	lt
 8009962:	f04f 33ff 	movlt.w	r3, #4294967295
 8009966:	3402      	adds	r4, #2
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a50 <_vfiprintf_r+0x25c>
 800996e:	7821      	ldrb	r1, [r4, #0]
 8009970:	2203      	movs	r2, #3
 8009972:	4650      	mov	r0, sl
 8009974:	f7f6 fc64 	bl	8000240 <memchr>
 8009978:	b140      	cbz	r0, 800998c <_vfiprintf_r+0x198>
 800997a:	2340      	movs	r3, #64	; 0x40
 800997c:	eba0 000a 	sub.w	r0, r0, sl
 8009980:	fa03 f000 	lsl.w	r0, r3, r0
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	4303      	orrs	r3, r0
 8009988:	3401      	adds	r4, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009990:	482c      	ldr	r0, [pc, #176]	; (8009a44 <_vfiprintf_r+0x250>)
 8009992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009996:	2206      	movs	r2, #6
 8009998:	f7f6 fc52 	bl	8000240 <memchr>
 800999c:	2800      	cmp	r0, #0
 800999e:	d03f      	beq.n	8009a20 <_vfiprintf_r+0x22c>
 80099a0:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <_vfiprintf_r+0x254>)
 80099a2:	bb1b      	cbnz	r3, 80099ec <_vfiprintf_r+0x1f8>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	3307      	adds	r3, #7
 80099a8:	f023 0307 	bic.w	r3, r3, #7
 80099ac:	3308      	adds	r3, #8
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	443b      	add	r3, r7
 80099b4:	9309      	str	r3, [sp, #36]	; 0x24
 80099b6:	e767      	b.n	8009888 <_vfiprintf_r+0x94>
 80099b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099bc:	460c      	mov	r4, r1
 80099be:	2001      	movs	r0, #1
 80099c0:	e7a5      	b.n	800990e <_vfiprintf_r+0x11a>
 80099c2:	2300      	movs	r3, #0
 80099c4:	3401      	adds	r4, #1
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	4619      	mov	r1, r3
 80099ca:	f04f 0c0a 	mov.w	ip, #10
 80099ce:	4620      	mov	r0, r4
 80099d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d4:	3a30      	subs	r2, #48	; 0x30
 80099d6:	2a09      	cmp	r2, #9
 80099d8:	d903      	bls.n	80099e2 <_vfiprintf_r+0x1ee>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0c5      	beq.n	800996a <_vfiprintf_r+0x176>
 80099de:	9105      	str	r1, [sp, #20]
 80099e0:	e7c3      	b.n	800996a <_vfiprintf_r+0x176>
 80099e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e6:	4604      	mov	r4, r0
 80099e8:	2301      	movs	r3, #1
 80099ea:	e7f0      	b.n	80099ce <_vfiprintf_r+0x1da>
 80099ec:	ab03      	add	r3, sp, #12
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	462a      	mov	r2, r5
 80099f2:	4b16      	ldr	r3, [pc, #88]	; (8009a4c <_vfiprintf_r+0x258>)
 80099f4:	a904      	add	r1, sp, #16
 80099f6:	4630      	mov	r0, r6
 80099f8:	f3af 8000 	nop.w
 80099fc:	4607      	mov	r7, r0
 80099fe:	1c78      	adds	r0, r7, #1
 8009a00:	d1d6      	bne.n	80099b0 <_vfiprintf_r+0x1bc>
 8009a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a04:	07d9      	lsls	r1, r3, #31
 8009a06:	d405      	bmi.n	8009a14 <_vfiprintf_r+0x220>
 8009a08:	89ab      	ldrh	r3, [r5, #12]
 8009a0a:	059a      	lsls	r2, r3, #22
 8009a0c:	d402      	bmi.n	8009a14 <_vfiprintf_r+0x220>
 8009a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a10:	f7ff fdb7 	bl	8009582 <__retarget_lock_release_recursive>
 8009a14:	89ab      	ldrh	r3, [r5, #12]
 8009a16:	065b      	lsls	r3, r3, #25
 8009a18:	f53f af12 	bmi.w	8009840 <_vfiprintf_r+0x4c>
 8009a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a1e:	e711      	b.n	8009844 <_vfiprintf_r+0x50>
 8009a20:	ab03      	add	r3, sp, #12
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	462a      	mov	r2, r5
 8009a26:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <_vfiprintf_r+0x258>)
 8009a28:	a904      	add	r1, sp, #16
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f000 f880 	bl	8009b30 <_printf_i>
 8009a30:	e7e4      	b.n	80099fc <_vfiprintf_r+0x208>
 8009a32:	bf00      	nop
 8009a34:	0800a998 	.word	0x0800a998
 8009a38:	0800a9b8 	.word	0x0800a9b8
 8009a3c:	0800a978 	.word	0x0800a978
 8009a40:	0800a9d8 	.word	0x0800a9d8
 8009a44:	0800a9e2 	.word	0x0800a9e2
 8009a48:	00000000 	.word	0x00000000
 8009a4c:	080097cf 	.word	0x080097cf
 8009a50:	0800a9de 	.word	0x0800a9de

08009a54 <_printf_common>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	4616      	mov	r6, r2
 8009a5a:	4699      	mov	r9, r3
 8009a5c:	688a      	ldr	r2, [r1, #8]
 8009a5e:	690b      	ldr	r3, [r1, #16]
 8009a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a64:	4293      	cmp	r3, r2
 8009a66:	bfb8      	it	lt
 8009a68:	4613      	movlt	r3, r2
 8009a6a:	6033      	str	r3, [r6, #0]
 8009a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a70:	4607      	mov	r7, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	b10a      	cbz	r2, 8009a7a <_printf_common+0x26>
 8009a76:	3301      	adds	r3, #1
 8009a78:	6033      	str	r3, [r6, #0]
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	0699      	lsls	r1, r3, #26
 8009a7e:	bf42      	ittt	mi
 8009a80:	6833      	ldrmi	r3, [r6, #0]
 8009a82:	3302      	addmi	r3, #2
 8009a84:	6033      	strmi	r3, [r6, #0]
 8009a86:	6825      	ldr	r5, [r4, #0]
 8009a88:	f015 0506 	ands.w	r5, r5, #6
 8009a8c:	d106      	bne.n	8009a9c <_printf_common+0x48>
 8009a8e:	f104 0a19 	add.w	sl, r4, #25
 8009a92:	68e3      	ldr	r3, [r4, #12]
 8009a94:	6832      	ldr	r2, [r6, #0]
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	42ab      	cmp	r3, r5
 8009a9a:	dc26      	bgt.n	8009aea <_printf_common+0x96>
 8009a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009aa0:	1e13      	subs	r3, r2, #0
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	bf18      	it	ne
 8009aa6:	2301      	movne	r3, #1
 8009aa8:	0692      	lsls	r2, r2, #26
 8009aaa:	d42b      	bmi.n	8009b04 <_printf_common+0xb0>
 8009aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	47c0      	blx	r8
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d01e      	beq.n	8009af8 <_printf_common+0xa4>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	68e5      	ldr	r5, [r4, #12]
 8009abe:	6832      	ldr	r2, [r6, #0]
 8009ac0:	f003 0306 	and.w	r3, r3, #6
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	bf08      	it	eq
 8009ac8:	1aad      	subeq	r5, r5, r2
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	6922      	ldr	r2, [r4, #16]
 8009ace:	bf0c      	ite	eq
 8009ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ad4:	2500      	movne	r5, #0
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	bfc4      	itt	gt
 8009ada:	1a9b      	subgt	r3, r3, r2
 8009adc:	18ed      	addgt	r5, r5, r3
 8009ade:	2600      	movs	r6, #0
 8009ae0:	341a      	adds	r4, #26
 8009ae2:	42b5      	cmp	r5, r6
 8009ae4:	d11a      	bne.n	8009b1c <_printf_common+0xc8>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	e008      	b.n	8009afc <_printf_common+0xa8>
 8009aea:	2301      	movs	r3, #1
 8009aec:	4652      	mov	r2, sl
 8009aee:	4649      	mov	r1, r9
 8009af0:	4638      	mov	r0, r7
 8009af2:	47c0      	blx	r8
 8009af4:	3001      	adds	r0, #1
 8009af6:	d103      	bne.n	8009b00 <_printf_common+0xac>
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b00:	3501      	adds	r5, #1
 8009b02:	e7c6      	b.n	8009a92 <_printf_common+0x3e>
 8009b04:	18e1      	adds	r1, r4, r3
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	2030      	movs	r0, #48	; 0x30
 8009b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b0e:	4422      	add	r2, r4
 8009b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b18:	3302      	adds	r3, #2
 8009b1a:	e7c7      	b.n	8009aac <_printf_common+0x58>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	4622      	mov	r2, r4
 8009b20:	4649      	mov	r1, r9
 8009b22:	4638      	mov	r0, r7
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d0e6      	beq.n	8009af8 <_printf_common+0xa4>
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7d9      	b.n	8009ae2 <_printf_common+0x8e>
	...

08009b30 <_printf_i>:
 8009b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	460c      	mov	r4, r1
 8009b36:	4691      	mov	r9, r2
 8009b38:	7e27      	ldrb	r7, [r4, #24]
 8009b3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b3c:	2f78      	cmp	r7, #120	; 0x78
 8009b3e:	4680      	mov	r8, r0
 8009b40:	469a      	mov	sl, r3
 8009b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b46:	d807      	bhi.n	8009b58 <_printf_i+0x28>
 8009b48:	2f62      	cmp	r7, #98	; 0x62
 8009b4a:	d80a      	bhi.n	8009b62 <_printf_i+0x32>
 8009b4c:	2f00      	cmp	r7, #0
 8009b4e:	f000 80d8 	beq.w	8009d02 <_printf_i+0x1d2>
 8009b52:	2f58      	cmp	r7, #88	; 0x58
 8009b54:	f000 80a3 	beq.w	8009c9e <_printf_i+0x16e>
 8009b58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b60:	e03a      	b.n	8009bd8 <_printf_i+0xa8>
 8009b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b66:	2b15      	cmp	r3, #21
 8009b68:	d8f6      	bhi.n	8009b58 <_printf_i+0x28>
 8009b6a:	a001      	add	r0, pc, #4	; (adr r0, 8009b70 <_printf_i+0x40>)
 8009b6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bdd 	.word	0x08009bdd
 8009b78:	08009b59 	.word	0x08009b59
 8009b7c:	08009b59 	.word	0x08009b59
 8009b80:	08009b59 	.word	0x08009b59
 8009b84:	08009b59 	.word	0x08009b59
 8009b88:	08009bdd 	.word	0x08009bdd
 8009b8c:	08009b59 	.word	0x08009b59
 8009b90:	08009b59 	.word	0x08009b59
 8009b94:	08009b59 	.word	0x08009b59
 8009b98:	08009b59 	.word	0x08009b59
 8009b9c:	08009ce9 	.word	0x08009ce9
 8009ba0:	08009c0d 	.word	0x08009c0d
 8009ba4:	08009ccb 	.word	0x08009ccb
 8009ba8:	08009b59 	.word	0x08009b59
 8009bac:	08009b59 	.word	0x08009b59
 8009bb0:	08009d0b 	.word	0x08009d0b
 8009bb4:	08009b59 	.word	0x08009b59
 8009bb8:	08009c0d 	.word	0x08009c0d
 8009bbc:	08009b59 	.word	0x08009b59
 8009bc0:	08009b59 	.word	0x08009b59
 8009bc4:	08009cd3 	.word	0x08009cd3
 8009bc8:	680b      	ldr	r3, [r1, #0]
 8009bca:	1d1a      	adds	r2, r3, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	600a      	str	r2, [r1, #0]
 8009bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e0a3      	b.n	8009d24 <_printf_i+0x1f4>
 8009bdc:	6825      	ldr	r5, [r4, #0]
 8009bde:	6808      	ldr	r0, [r1, #0]
 8009be0:	062e      	lsls	r6, r5, #24
 8009be2:	f100 0304 	add.w	r3, r0, #4
 8009be6:	d50a      	bpl.n	8009bfe <_printf_i+0xce>
 8009be8:	6805      	ldr	r5, [r0, #0]
 8009bea:	600b      	str	r3, [r1, #0]
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	da03      	bge.n	8009bf8 <_printf_i+0xc8>
 8009bf0:	232d      	movs	r3, #45	; 0x2d
 8009bf2:	426d      	negs	r5, r5
 8009bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf8:	485e      	ldr	r0, [pc, #376]	; (8009d74 <_printf_i+0x244>)
 8009bfa:	230a      	movs	r3, #10
 8009bfc:	e019      	b.n	8009c32 <_printf_i+0x102>
 8009bfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c02:	6805      	ldr	r5, [r0, #0]
 8009c04:	600b      	str	r3, [r1, #0]
 8009c06:	bf18      	it	ne
 8009c08:	b22d      	sxthne	r5, r5
 8009c0a:	e7ef      	b.n	8009bec <_printf_i+0xbc>
 8009c0c:	680b      	ldr	r3, [r1, #0]
 8009c0e:	6825      	ldr	r5, [r4, #0]
 8009c10:	1d18      	adds	r0, r3, #4
 8009c12:	6008      	str	r0, [r1, #0]
 8009c14:	0628      	lsls	r0, r5, #24
 8009c16:	d501      	bpl.n	8009c1c <_printf_i+0xec>
 8009c18:	681d      	ldr	r5, [r3, #0]
 8009c1a:	e002      	b.n	8009c22 <_printf_i+0xf2>
 8009c1c:	0669      	lsls	r1, r5, #25
 8009c1e:	d5fb      	bpl.n	8009c18 <_printf_i+0xe8>
 8009c20:	881d      	ldrh	r5, [r3, #0]
 8009c22:	4854      	ldr	r0, [pc, #336]	; (8009d74 <_printf_i+0x244>)
 8009c24:	2f6f      	cmp	r7, #111	; 0x6f
 8009c26:	bf0c      	ite	eq
 8009c28:	2308      	moveq	r3, #8
 8009c2a:	230a      	movne	r3, #10
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c32:	6866      	ldr	r6, [r4, #4]
 8009c34:	60a6      	str	r6, [r4, #8]
 8009c36:	2e00      	cmp	r6, #0
 8009c38:	bfa2      	ittt	ge
 8009c3a:	6821      	ldrge	r1, [r4, #0]
 8009c3c:	f021 0104 	bicge.w	r1, r1, #4
 8009c40:	6021      	strge	r1, [r4, #0]
 8009c42:	b90d      	cbnz	r5, 8009c48 <_printf_i+0x118>
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	d04d      	beq.n	8009ce4 <_printf_i+0x1b4>
 8009c48:	4616      	mov	r6, r2
 8009c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c52:	5dc7      	ldrb	r7, [r0, r7]
 8009c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c58:	462f      	mov	r7, r5
 8009c5a:	42bb      	cmp	r3, r7
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	d9f4      	bls.n	8009c4a <_printf_i+0x11a>
 8009c60:	2b08      	cmp	r3, #8
 8009c62:	d10b      	bne.n	8009c7c <_printf_i+0x14c>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	07df      	lsls	r7, r3, #31
 8009c68:	d508      	bpl.n	8009c7c <_printf_i+0x14c>
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	6861      	ldr	r1, [r4, #4]
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	bfde      	ittt	le
 8009c72:	2330      	movle	r3, #48	; 0x30
 8009c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c7c:	1b92      	subs	r2, r2, r6
 8009c7e:	6122      	str	r2, [r4, #16]
 8009c80:	f8cd a000 	str.w	sl, [sp]
 8009c84:	464b      	mov	r3, r9
 8009c86:	aa03      	add	r2, sp, #12
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f7ff fee2 	bl	8009a54 <_printf_common>
 8009c90:	3001      	adds	r0, #1
 8009c92:	d14c      	bne.n	8009d2e <_printf_i+0x1fe>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b004      	add	sp, #16
 8009c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9e:	4835      	ldr	r0, [pc, #212]	; (8009d74 <_printf_i+0x244>)
 8009ca0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	680e      	ldr	r6, [r1, #0]
 8009ca8:	061f      	lsls	r7, r3, #24
 8009caa:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cae:	600e      	str	r6, [r1, #0]
 8009cb0:	d514      	bpl.n	8009cdc <_printf_i+0x1ac>
 8009cb2:	07d9      	lsls	r1, r3, #31
 8009cb4:	bf44      	itt	mi
 8009cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cba:	6023      	strmi	r3, [r4, #0]
 8009cbc:	b91d      	cbnz	r5, 8009cc6 <_printf_i+0x196>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	f023 0320 	bic.w	r3, r3, #32
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	e7b0      	b.n	8009c2c <_printf_i+0xfc>
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	f043 0320 	orr.w	r3, r3, #32
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	2378      	movs	r3, #120	; 0x78
 8009cd4:	4828      	ldr	r0, [pc, #160]	; (8009d78 <_printf_i+0x248>)
 8009cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cda:	e7e3      	b.n	8009ca4 <_printf_i+0x174>
 8009cdc:	065e      	lsls	r6, r3, #25
 8009cde:	bf48      	it	mi
 8009ce0:	b2ad      	uxthmi	r5, r5
 8009ce2:	e7e6      	b.n	8009cb2 <_printf_i+0x182>
 8009ce4:	4616      	mov	r6, r2
 8009ce6:	e7bb      	b.n	8009c60 <_printf_i+0x130>
 8009ce8:	680b      	ldr	r3, [r1, #0]
 8009cea:	6826      	ldr	r6, [r4, #0]
 8009cec:	6960      	ldr	r0, [r4, #20]
 8009cee:	1d1d      	adds	r5, r3, #4
 8009cf0:	600d      	str	r5, [r1, #0]
 8009cf2:	0635      	lsls	r5, r6, #24
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	d501      	bpl.n	8009cfc <_printf_i+0x1cc>
 8009cf8:	6018      	str	r0, [r3, #0]
 8009cfa:	e002      	b.n	8009d02 <_printf_i+0x1d2>
 8009cfc:	0671      	lsls	r1, r6, #25
 8009cfe:	d5fb      	bpl.n	8009cf8 <_printf_i+0x1c8>
 8009d00:	8018      	strh	r0, [r3, #0]
 8009d02:	2300      	movs	r3, #0
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	4616      	mov	r6, r2
 8009d08:	e7ba      	b.n	8009c80 <_printf_i+0x150>
 8009d0a:	680b      	ldr	r3, [r1, #0]
 8009d0c:	1d1a      	adds	r2, r3, #4
 8009d0e:	600a      	str	r2, [r1, #0]
 8009d10:	681e      	ldr	r6, [r3, #0]
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	2100      	movs	r1, #0
 8009d16:	4630      	mov	r0, r6
 8009d18:	f7f6 fa92 	bl	8000240 <memchr>
 8009d1c:	b108      	cbz	r0, 8009d22 <_printf_i+0x1f2>
 8009d1e:	1b80      	subs	r0, r0, r6
 8009d20:	6060      	str	r0, [r4, #4]
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	2300      	movs	r3, #0
 8009d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d2c:	e7a8      	b.n	8009c80 <_printf_i+0x150>
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d0ab      	beq.n	8009c94 <_printf_i+0x164>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	079b      	lsls	r3, r3, #30
 8009d40:	d413      	bmi.n	8009d6a <_printf_i+0x23a>
 8009d42:	68e0      	ldr	r0, [r4, #12]
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	4298      	cmp	r0, r3
 8009d48:	bfb8      	it	lt
 8009d4a:	4618      	movlt	r0, r3
 8009d4c:	e7a4      	b.n	8009c98 <_printf_i+0x168>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4632      	mov	r2, r6
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d09b      	beq.n	8009c94 <_printf_i+0x164>
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	68e3      	ldr	r3, [r4, #12]
 8009d60:	9903      	ldr	r1, [sp, #12]
 8009d62:	1a5b      	subs	r3, r3, r1
 8009d64:	42ab      	cmp	r3, r5
 8009d66:	dcf2      	bgt.n	8009d4e <_printf_i+0x21e>
 8009d68:	e7eb      	b.n	8009d42 <_printf_i+0x212>
 8009d6a:	2500      	movs	r5, #0
 8009d6c:	f104 0619 	add.w	r6, r4, #25
 8009d70:	e7f5      	b.n	8009d5e <_printf_i+0x22e>
 8009d72:	bf00      	nop
 8009d74:	0800a9e9 	.word	0x0800a9e9
 8009d78:	0800a9fa 	.word	0x0800a9fa

08009d7c <_sbrk_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	; (8009d98 <_sbrk_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f8 f894 	bl	8001eb4 <_sbrk>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_sbrk_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_sbrk_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20000d38 	.word	0x20000d38

08009d9c <__sread>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	460c      	mov	r4, r1
 8009da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da4:	f000 f8a0 	bl	8009ee8 <_read_r>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	bfab      	itete	ge
 8009dac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dae:	89a3      	ldrhlt	r3, [r4, #12]
 8009db0:	181b      	addge	r3, r3, r0
 8009db2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009db6:	bfac      	ite	ge
 8009db8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dba:	81a3      	strhlt	r3, [r4, #12]
 8009dbc:	bd10      	pop	{r4, pc}

08009dbe <__swrite>:
 8009dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	461f      	mov	r7, r3
 8009dc4:	898b      	ldrh	r3, [r1, #12]
 8009dc6:	05db      	lsls	r3, r3, #23
 8009dc8:	4605      	mov	r5, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	4616      	mov	r6, r2
 8009dce:	d505      	bpl.n	8009ddc <__swrite+0x1e>
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f000 f868 	bl	8009eac <_lseek_r>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	4632      	mov	r2, r6
 8009dea:	463b      	mov	r3, r7
 8009dec:	4628      	mov	r0, r5
 8009dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df2:	f000 b817 	b.w	8009e24 <_write_r>

08009df6 <__sseek>:
 8009df6:	b510      	push	{r4, lr}
 8009df8:	460c      	mov	r4, r1
 8009dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfe:	f000 f855 	bl	8009eac <_lseek_r>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	bf15      	itete	ne
 8009e08:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e12:	81a3      	strheq	r3, [r4, #12]
 8009e14:	bf18      	it	ne
 8009e16:	81a3      	strhne	r3, [r4, #12]
 8009e18:	bd10      	pop	{r4, pc}

08009e1a <__sclose>:
 8009e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1e:	f000 b813 	b.w	8009e48 <_close_r>
	...

08009e24 <_write_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	; (8009e44 <_write_r+0x20>)
 8009e28:	4604      	mov	r4, r0
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f7f7 ffed 	bl	8001e12 <_write>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_write_r+0x1e>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_write_r+0x1e>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20000d38 	.word	0x20000d38

08009e48 <_close_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_close_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f7 fff9 	bl	8001e4a <_close>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_close_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_close_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20000d38 	.word	0x20000d38

08009e68 <_fstat_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d07      	ldr	r5, [pc, #28]	; (8009e88 <_fstat_r+0x20>)
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4608      	mov	r0, r1
 8009e72:	4611      	mov	r1, r2
 8009e74:	602b      	str	r3, [r5, #0]
 8009e76:	f7f7 fff4 	bl	8001e62 <_fstat>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	d102      	bne.n	8009e84 <_fstat_r+0x1c>
 8009e7e:	682b      	ldr	r3, [r5, #0]
 8009e80:	b103      	cbz	r3, 8009e84 <_fstat_r+0x1c>
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	bf00      	nop
 8009e88:	20000d38 	.word	0x20000d38

08009e8c <_isatty_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d06      	ldr	r5, [pc, #24]	; (8009ea8 <_isatty_r+0x1c>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f7 fff3 	bl	8001e82 <_isatty>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_isatty_r+0x1a>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_isatty_r+0x1a>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	20000d38 	.word	0x20000d38

08009eac <_lseek_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d07      	ldr	r5, [pc, #28]	; (8009ecc <_lseek_r+0x20>)
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	602a      	str	r2, [r5, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f7f7 ffec 	bl	8001e98 <_lseek>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_lseek_r+0x1e>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_lseek_r+0x1e>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	20000d38 	.word	0x20000d38

08009ed0 <__malloc_lock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__malloc_lock+0x8>)
 8009ed2:	f7ff bb55 	b.w	8009580 <__retarget_lock_acquire_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	20000d30 	.word	0x20000d30

08009edc <__malloc_unlock>:
 8009edc:	4801      	ldr	r0, [pc, #4]	; (8009ee4 <__malloc_unlock+0x8>)
 8009ede:	f7ff bb50 	b.w	8009582 <__retarget_lock_release_recursive>
 8009ee2:	bf00      	nop
 8009ee4:	20000d30 	.word	0x20000d30

08009ee8 <_read_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_read_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f7 ff6e 	bl	8001dd8 <_read>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_read_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_read_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20000d38 	.word	0x20000d38

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
