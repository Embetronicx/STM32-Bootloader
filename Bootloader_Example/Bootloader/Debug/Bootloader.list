
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d34  08003d34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d3c  08003d3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003db4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003db4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097ca  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bb  00000000  00000000  00029868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0002b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277b4  00000000  00000000  0002bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008821  00000000  00000000  00053744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d4f  00000000  00000000  0005bf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014dcb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002540  00000000  00000000  0014dd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c34 	.word	0x08003c34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003c34 	.word	0x08003c34

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 faa7 	bl	8000b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81a 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f8c2 	bl	800076c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f890 	bl	800070c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );  	//Green LED ON
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x38>)
 80005f2:	f000 fdaf 	bl	8001154 <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\n", BL_Version[0], BL_Version[1] );
 80005f6:	2300      	movs	r3, #0
 80005f8:	2201      	movs	r2, #1
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <main+0x3c>)
 80005fe:	f002 fb4d 	bl	8002c9c <iprintf>
  HAL_Delay(2000);   //2sec delay for nothing
 8000602:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000606:	f000 faef 	bl	8000be8 <HAL_Delay>

  // Jump to application
  goto_application();
 800060a:	f000 f8ff 	bl	800080c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x36>
 8000610:	40020400 	.word	0x40020400
 8000614:	08003c4c 	.word	0x08003c4c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fb30 	bl	8002c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2290      	movs	r2, #144	; 0x90
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fb21 	bl	8002c8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <SystemClock_Config+0xec>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <SystemClock_Config+0xec>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <SystemClock_Config+0xec>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <SystemClock_Config+0xf0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xf0>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xf0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2310      	movs	r3, #16
 800068c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd74 	bl	8001188 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006a6:	f000 f8cb 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f808 	bl	80016e4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f8b1 	bl	8000840 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f9cf 	bl	8001a90 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006f8:	f000 f8a2 	bl	8000840 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	37e0      	adds	r7, #224	; 0xe0
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART3_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000750:	f001 fdc6 	bl	80022e0 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f871 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000098 	.word	0x20000098
 8000768:	40004800 	.word	0x40004800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_GPIO_Init+0x74>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x74>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x74>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x74>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x74>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x74>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0x78>)
 80007b8:	f000 fccc 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x78>)
 80007d4:	f000 fb12 	bl	8000dfc <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	2201      	movs	r2, #1
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <__io_putchar+0x20>)
 80007fa:	f001 fdbf 	bl	800237c <HAL_UART_Transmit>

  return ch;
 80007fe:	687b      	ldr	r3, [r7, #4]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000098 	.word	0x20000098

0800080c <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\n");
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <goto_application+0x28>)
 8000814:	f002 fac8 	bl	8002da8 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <goto_application+0x2c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) 0x08040000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );	//Green LED OFF
 800081e:	2200      	movs	r2, #0
 8000820:	2101      	movs	r1, #1
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <goto_application+0x30>)
 8000824:	f000 fc96 	bl	8001154 <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4798      	blx	r3
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08003c68 	.word	0x08003c68
 8000838:	08040004 	.word	0x08040004
 800083c:	40020400 	.word	0x40020400

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x44>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x7c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d128      	bne.n	8000908 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008f8:	2307      	movs	r3, #7
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x84>)
 8000904:	f000 fa7a 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40004800 	.word	0x40004800
 8000914:	40023800 	.word	0x40023800
 8000918:	40020c00 	.word	0x40020c00

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f91e 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
	}

return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff0f 	bl	80007e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
	}
	return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f002 f8dc 	bl	8002c38 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20080000 	.word	0x20080000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	20000130 	.word	0x20000130

08000ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd7 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 f89b 	bl	8002c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd63 	bl	80005d8 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b20:	08003d44 	.word	0x08003d44
  ldr r2, =_sbss
 8000b24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b28:	20000130 	.word	0x20000130

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>

08000b2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f000 f92e 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 f805 	bl	8000b48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b3e:	f7ff fe85 	bl	800084c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f93b 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f911 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	2000011c 	.word	0x2000011c

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000011c 	.word	0x2000011c

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <__NVIC_SetPriorityGrouping+0x40>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x40>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	05fa0000 	.word	0x05fa0000

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e175      	b.n	8001108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8164 	bne.w	8001102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d00b      	beq.n	8000e5a <HAL_GPIO_Init+0x5e>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4e:	2b11      	cmp	r3, #17
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d130      	bne.n	8000ebc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x100>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b12      	cmp	r3, #18
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80be 	beq.w	8001102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a65      	ldr	r2, [pc, #404]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f9e:	4a61      	ldr	r2, [pc, #388]	; (8001124 <HAL_GPIO_Init+0x328>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x32c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d037      	beq.n	800103a <HAL_GPIO_Init+0x23e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a57      	ldr	r2, [pc, #348]	; (800112c <HAL_GPIO_Init+0x330>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d031      	beq.n	8001036 <HAL_GPIO_Init+0x23a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a56      	ldr	r2, [pc, #344]	; (8001130 <HAL_GPIO_Init+0x334>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d02b      	beq.n	8001032 <HAL_GPIO_Init+0x236>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a55      	ldr	r2, [pc, #340]	; (8001134 <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d025      	beq.n	800102e <HAL_GPIO_Init+0x232>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a54      	ldr	r2, [pc, #336]	; (8001138 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01f      	beq.n	800102a <HAL_GPIO_Init+0x22e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a53      	ldr	r2, [pc, #332]	; (800113c <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d019      	beq.n	8001026 <HAL_GPIO_Init+0x22a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x226>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x222>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x21e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x350>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x21a>
 8001012:	2309      	movs	r3, #9
 8001014:	e012      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001016:	230a      	movs	r3, #10
 8001018:	e010      	b.n	800103c <HAL_GPIO_Init+0x240>
 800101a:	2308      	movs	r3, #8
 800101c:	e00e      	b.n	800103c <HAL_GPIO_Init+0x240>
 800101e:	2307      	movs	r3, #7
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x240>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x240>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x240>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x328>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_GPIO_Init+0x354>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107e:	4a34      	ldr	r2, [pc, #208]	; (8001150 <HAL_GPIO_Init+0x354>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_GPIO_Init+0x354>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae86 	bls.w	8000e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40022000 	.word	0x40022000
 800114c:	40022400 	.word	0x40022400
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e29b      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8087 	beq.w	80012ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d00c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b8:	4b93      	ldr	r3, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d112      	bne.n	80011ea <HAL_RCC_OscConfig+0x62>
 80011c4:	4b90      	ldr	r3, [pc, #576]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d0:	d10b      	bne.n	80011ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d2:	4b8d      	ldr	r3, [pc, #564]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d06c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x130>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d168      	bne.n	80012b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e275      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f2:	d106      	bne.n	8001202 <HAL_RCC_OscConfig+0x7a>
 80011f4:	4b84      	ldr	r3, [pc, #528]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a83      	ldr	r2, [pc, #524]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e02e      	b.n	8001260 <HAL_RCC_OscConfig+0xd8>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x9c>
 800120a:	4b7f      	ldr	r3, [pc, #508]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a7e      	ldr	r2, [pc, #504]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a7b      	ldr	r2, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800121c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xd8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0xc0>
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b73      	ldr	r3, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a72      	ldr	r2, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xd8>
 8001248:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a6b      	ldr	r2, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fcb2 	bl	8000bd0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fcae 	bl	8000bd0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e229      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b61      	ldr	r3, [pc, #388]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xe8>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc9e 	bl	8000bd0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc9a 	bl	8000bd0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e215      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x110>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d069      	beq.n	800139a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c6:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x190>
 80012de:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x17a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e1e9      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	493d      	ldr	r1, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e040      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fc50 	bl	8000bd0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fc4c 	bl	8000bd0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1c7      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4929      	ldr	r1, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e018      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fc2c 	bl	8000bd0 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff fc28 	bl	8000bd0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1a3      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d038      	beq.n	8001418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d019      	beq.n	80013e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fc09 	bl	8000bd0 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc05 	bl	8000bd0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e180      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x23a>
 80013e0:	e01a      	b.n	8001418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fbef 	bl	8000bd0 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fbeb 	bl	8000bd0 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d903      	bls.n	800140c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e166      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
 8001408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a4 	beq.w	800156e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b89      	ldr	r3, [pc, #548]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a88      	ldr	r2, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b86      	ldr	r3, [pc, #536]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144e:	4b83      	ldr	r3, [pc, #524]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800145a:	4b80      	ldr	r3, [pc, #512]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7f      	ldr	r2, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fbb3 	bl	8000bd0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fbaf 	bl	8000bd0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e12a      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001480:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x31a>
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a6f      	ldr	r2, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	e02d      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x33c>
 80014aa:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a67      	ldr	r2, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x35e>
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a61      	ldr	r2, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fb63 	bl	8000bd0 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fb5f 	bl	8000bd0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0d8      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ee      	beq.n	800150e <HAL_RCC_OscConfig+0x386>
 8001530:	e014      	b.n	800155c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fb4d 	bl	8000bd0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fb49 	bl	8000bd0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0c2      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80ae 	beq.w	80016d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d06d      	beq.n	8001660 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d14b      	bne.n	8001624 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fb1a 	bl	8000bd0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fb16 	bl	8000bd0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e091      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	071b      	lsls	r3, r3, #28
 80015ea:	491b      	ldr	r1, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fae8 	bl	8000bd0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fae4 	bl	8000bd0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e05f      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x47c>
 8001622:	e057      	b.n	80016d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800162a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff face 	bl	8000bd0 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff faca 	bl	8000bd0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e045      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x4b0>
 8001656:	e03d      	b.n	80016d4 <HAL_RCC_OscConfig+0x54c>
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_RCC_OscConfig+0x558>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d030      	beq.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d129      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d122      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001698:	4293      	cmp	r3, r2
 800169a:	d119      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	3b01      	subs	r3, #1
 80016aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0d0      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 020f 	bic.w	r2, r3, #15
 8001712:	4965      	ldr	r1, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d040      	beq.n	8001808 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d115      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e073      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06b      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d8:	f7ff f9fa 	bl	8000bd0 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff f9f6 	bl	8000bd0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e053      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d210      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 020f 	bic.w	r2, r3, #15
 800181e:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f956 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08003c84 	.word	0x08003c84
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018c2:	2100      	movs	r1, #0
 80018c4:	6079      	str	r1, [r7, #4]
 80018c6:	2100      	movs	r1, #0
 80018c8:	60f9      	str	r1, [r7, #12]
 80018ca:	2100      	movs	r1, #0
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018ce:	2100      	movs	r1, #0
 80018d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d2:	4952      	ldr	r1, [pc, #328]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80018d4:	6889      	ldr	r1, [r1, #8]
 80018d6:	f001 010c 	and.w	r1, r1, #12
 80018da:	2908      	cmp	r1, #8
 80018dc:	d00d      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3e>
 80018de:	2908      	cmp	r1, #8
 80018e0:	f200 8094 	bhi.w	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d002      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x32>
 80018e8:	2904      	cmp	r1, #4
 80018ea:	d003      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x38>
 80018ec:	e08e      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x164>)
 80018f0:	60bb      	str	r3, [r7, #8]
      break;
 80018f2:	e08e      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x168>)
 80018f6:	60bb      	str	r3, [r7, #8]
      break;
 80018f8:	e08b      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fa:	4948      	ldr	r1, [pc, #288]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80018fc:	6849      	ldr	r1, [r1, #4]
 80018fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001902:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001904:	4945      	ldr	r1, [pc, #276]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001906:	6849      	ldr	r1, [r1, #4]
 8001908:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800190c:	2900      	cmp	r1, #0
 800190e:	d024      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001910:	4942      	ldr	r1, [pc, #264]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001912:	6849      	ldr	r1, [r1, #4]
 8001914:	0989      	lsrs	r1, r1, #6
 8001916:	4608      	mov	r0, r1
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001920:	f04f 0500 	mov.w	r5, #0
 8001924:	ea00 0204 	and.w	r2, r0, r4
 8001928:	ea01 0305 	and.w	r3, r1, r5
 800192c:	493d      	ldr	r1, [pc, #244]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x168>)
 800192e:	fb01 f003 	mul.w	r0, r1, r3
 8001932:	2100      	movs	r1, #0
 8001934:	fb01 f102 	mul.w	r1, r1, r2
 8001938:	1844      	adds	r4, r0, r1
 800193a:	493a      	ldr	r1, [pc, #232]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x168>)
 800193c:	fba2 0101 	umull	r0, r1, r2, r1
 8001940:	1863      	adds	r3, r4, r1
 8001942:	4619      	mov	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f7fe fcc8 	bl	80002e0 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e04a      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	461a      	mov	r2, r3
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	ea02 0400 	and.w	r4, r2, r0
 8001972:	ea03 0501 	and.w	r5, r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	014b      	lsls	r3, r1, #5
 8001984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001988:	0142      	lsls	r2, r0, #5
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	1b00      	subs	r0, r0, r4
 8001990:	eb61 0105 	sbc.w	r1, r1, r5
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	018b      	lsls	r3, r1, #6
 800199e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a2:	0182      	lsls	r2, r0, #6
 80019a4:	1a12      	subs	r2, r2, r0
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	00d9      	lsls	r1, r3, #3
 80019b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b8:	00d0      	lsls	r0, r2, #3
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	1912      	adds	r2, r2, r4
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0299      	lsls	r1, r3, #10
 80019ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019d2:	0290      	lsls	r0, r2, #10
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f7fe fc7c 	bl	80002e0 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	3301      	adds	r3, #1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	60bb      	str	r3, [r7, #8]
      break;
 8001a0a:	e002      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a0e:	60bb      	str	r3, [r7, #8]
      break;
 8001a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a12:	68bb      	ldr	r3, [r7, #8]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	017d7840 	.word	0x017d7840

08001a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08003c94 	.word	0x08003c94

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffdc 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0b5b      	lsrs	r3, r3, #13
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08003c94 	.word	0x08003c94

08001a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ab8:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a68      	ldr	r2, [pc, #416]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001abe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ac2:	6093      	str	r3, [r2, #8]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001acc:	4964      	ldr	r1, [pc, #400]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d017      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001aea:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	4959      	ldr	r1, [pc, #356]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b08:	d101      	bne.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d017      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b26:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	494a      	ldr	r1, [pc, #296]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b44:	d101      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 808b 	beq.w	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	4a39      	ldr	r2, [pc, #228]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b80:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b98:	f7ff f81a 	bl	8000bd0 <HAL_GetTick>
 8001b9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba0:	f7ff f816 	bl	8000bd0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e38f      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d035      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d02e      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d114      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe ffde 	bl	8000bd0 <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7fe ffda 	bl	8000bd0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e351      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ee      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c46:	d111      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c56:	400b      	ands	r3, r1
 8001c58:	4901      	ldr	r1, [pc, #4]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000
 8001c68:	0ffffcff 	.word	0x0ffffcff
 8001c6c:	4bb3      	ldr	r3, [pc, #716]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4ab2      	ldr	r2, [pc, #712]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c76:	6093      	str	r3, [r2, #8]
 8001c78:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c84:	49ad      	ldr	r1, [pc, #692]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c96:	4ba9      	ldr	r3, [pc, #676]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c9c:	4aa7      	ldr	r2, [pc, #668]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ca6:	4ba5      	ldr	r3, [pc, #660]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	49a2      	ldr	r1, [pc, #648]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cc4:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cd2:	499a      	ldr	r1, [pc, #616]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ce6:	4b95      	ldr	r3, [pc, #596]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cf4:	4991      	ldr	r1, [pc, #580]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d16:	4989      	ldr	r1, [pc, #548]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4980      	ldr	r1, [pc, #512]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d4c:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4978      	ldr	r1, [pc, #480]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	f023 020c 	bic.w	r2, r3, #12
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7c:	496f      	ldr	r1, [pc, #444]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4967      	ldr	r1, [pc, #412]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc0:	495e      	ldr	r1, [pc, #376]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	4956      	ldr	r1, [pc, #344]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001df6:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	494d      	ldr	r1, [pc, #308]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e18:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	4945      	ldr	r1, [pc, #276]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e48:	493c      	ldr	r1, [pc, #240]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e5c:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e6a:	4934      	ldr	r1, [pc, #208]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d011      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ecc:	491b      	ldr	r1, [pc, #108]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef0:	4912      	ldr	r1, [pc, #72]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	4909      	ldr	r1, [pc, #36]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00f      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	e002      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	4986      	ldr	r1, [pc, #536]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f54:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f64:	497d      	ldr	r1, [pc, #500]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d006      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80d6 	beq.w	800212c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f80:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a75      	ldr	r2, [pc, #468]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fe20 	bl	8000bd0 <HAL_GetTick>
 8001f90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f94:	f7fe fe1c 	bl	8000bd0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e195      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d021      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11d      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fc6:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fcc:	0c1b      	lsrs	r3, r3, #16
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fd4:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fda:	0e1b      	lsrs	r3, r3, #24
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	019a      	lsls	r2, r3, #6
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	431a      	orrs	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	071b      	lsls	r3, r3, #28
 8001ffa:	4958      	ldr	r1, [pc, #352]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002020:	2b00      	cmp	r3, #0
 8002022:	d02e      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202c:	d129      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002042:	0f1b      	lsrs	r3, r3, #28
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	019a      	lsls	r2, r3, #6
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	061b      	lsls	r3, r3, #24
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	071b      	lsls	r3, r3, #28
 8002062:	493e      	ldr	r1, [pc, #248]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002070:	f023 021f 	bic.w	r2, r3, #31
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	3b01      	subs	r3, #1
 800207a:	4938      	ldr	r1, [pc, #224]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01d      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002094:	0e1b      	lsrs	r3, r3, #24
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800209e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a2:	0f1b      	lsrs	r3, r3, #28
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	019a      	lsls	r2, r3, #6
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	431a      	orrs	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	061b      	lsls	r3, r3, #24
 80020bc:	431a      	orrs	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	071b      	lsls	r3, r3, #28
 80020c2:	4926      	ldr	r1, [pc, #152]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d011      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	019a      	lsls	r2, r3, #6
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	071b      	lsls	r3, r3, #28
 80020f2:	491a      	ldr	r1, [pc, #104]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002106:	f7fe fd63 	bl	8000bd0 <HAL_GetTick>
 800210a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800210e:	f7fe fd5f 	bl	8000bd0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0d8      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	f040 80ce 	bne.w	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe fd46 	bl	8000bd0 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002146:	e00b      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002148:	f7fe fd42 	bl	8000bd0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d904      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0bb      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002160:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800216c:	d0ec      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02e      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d12a      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021a4:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	0f1b      	lsrs	r3, r3, #28
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	019a      	lsls	r2, r3, #6
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	071b      	lsls	r3, r3, #28
 80021ca:	4944      	ldr	r1, [pc, #272]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021d2:	4b42      	ldr	r3, [pc, #264]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	493d      	ldr	r1, [pc, #244]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002200:	d11d      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	0e1b      	lsrs	r3, r3, #24
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002210:	4b32      	ldr	r3, [pc, #200]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	0f1b      	lsrs	r3, r3, #28
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	019a      	lsls	r2, r3, #6
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	4929      	ldr	r1, [pc, #164]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d028      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	0e1b      	lsrs	r3, r3, #24
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	019a      	lsls	r2, r3, #6
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	071b      	lsls	r3, r3, #28
 800227e:	4917      	ldr	r1, [pc, #92]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	4911      	ldr	r1, [pc, #68]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a8:	f7fe fc92 	bl	8000bd0 <HAL_GetTick>
 80022ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022b0:	f7fe fc8e 	bl	8000bd0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e007      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ce:	d1ef      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e040      	b.n	8002374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fac6 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8c0 	bl	80024a4 <UART_SetConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e022      	b.n	8002374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fb16 	bl	8002968 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800234a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800235a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fb9d 	bl	8002aac <UART_CheckIdleState>
 8002372:	4603      	mov	r3, r0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002390:	2b20      	cmp	r3, #32
 8002392:	f040 8081 	bne.w	8002498 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_UART_Transmit+0x26>
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e079      	b.n	800249a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_UART_Transmit+0x38>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e072      	b.n	800249a <HAL_UART_Transmit+0x11e>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2221      	movs	r2, #33	; 0x21
 80023c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ca:	f7fe fc01 	bl	8000bd0 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d108      	bne.n	80023fc <HAL_UART_Transmit+0x80>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e003      	b.n	8002404 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800240c:	e02c      	b.n	8002468 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb90 	bl	8002b3e <UART_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e038      	b.n	800249a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10b      	bne.n	8002446 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	3302      	adds	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e007      	b.n	8002456 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	3301      	adds	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1cc      	bne.n	800240e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2200      	movs	r2, #0
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fb5d 	bl	8002b3e <UART_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e005      	b.n	800249a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4ba7      	ldr	r3, [pc, #668]	; (800276c <UART_SetConfig+0x2c8>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	430b      	orrs	r3, r1
 80024da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a95      	ldr	r2, [pc, #596]	; (8002770 <UART_SetConfig+0x2cc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d120      	bne.n	8002562 <UART_SetConfig+0xbe>
 8002520:	4b94      	ldr	r3, [pc, #592]	; (8002774 <UART_SetConfig+0x2d0>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b03      	cmp	r3, #3
 800252c:	d816      	bhi.n	800255c <UART_SetConfig+0xb8>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <UART_SetConfig+0x90>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002545 	.word	0x08002545
 8002538:	08002551 	.word	0x08002551
 800253c:	0800254b 	.word	0x0800254b
 8002540:	08002557 	.word	0x08002557
 8002544:	2301      	movs	r3, #1
 8002546:	77fb      	strb	r3, [r7, #31]
 8002548:	e14f      	b.n	80027ea <UART_SetConfig+0x346>
 800254a:	2302      	movs	r3, #2
 800254c:	77fb      	strb	r3, [r7, #31]
 800254e:	e14c      	b.n	80027ea <UART_SetConfig+0x346>
 8002550:	2304      	movs	r3, #4
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e149      	b.n	80027ea <UART_SetConfig+0x346>
 8002556:	2308      	movs	r3, #8
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	e146      	b.n	80027ea <UART_SetConfig+0x346>
 800255c:	2310      	movs	r3, #16
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	e143      	b.n	80027ea <UART_SetConfig+0x346>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a84      	ldr	r2, [pc, #528]	; (8002778 <UART_SetConfig+0x2d4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d132      	bne.n	80025d2 <UART_SetConfig+0x12e>
 800256c:	4b81      	ldr	r3, [pc, #516]	; (8002774 <UART_SetConfig+0x2d0>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b0c      	cmp	r3, #12
 8002578:	d828      	bhi.n	80025cc <UART_SetConfig+0x128>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <UART_SetConfig+0xdc>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	080025b5 	.word	0x080025b5
 8002584:	080025cd 	.word	0x080025cd
 8002588:	080025cd 	.word	0x080025cd
 800258c:	080025cd 	.word	0x080025cd
 8002590:	080025c1 	.word	0x080025c1
 8002594:	080025cd 	.word	0x080025cd
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025bb 	.word	0x080025bb
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	080025cd 	.word	0x080025cd
 80025ac:	080025cd 	.word	0x080025cd
 80025b0:	080025c7 	.word	0x080025c7
 80025b4:	2300      	movs	r3, #0
 80025b6:	77fb      	strb	r3, [r7, #31]
 80025b8:	e117      	b.n	80027ea <UART_SetConfig+0x346>
 80025ba:	2302      	movs	r3, #2
 80025bc:	77fb      	strb	r3, [r7, #31]
 80025be:	e114      	b.n	80027ea <UART_SetConfig+0x346>
 80025c0:	2304      	movs	r3, #4
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e111      	b.n	80027ea <UART_SetConfig+0x346>
 80025c6:	2308      	movs	r3, #8
 80025c8:	77fb      	strb	r3, [r7, #31]
 80025ca:	e10e      	b.n	80027ea <UART_SetConfig+0x346>
 80025cc:	2310      	movs	r3, #16
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e10b      	b.n	80027ea <UART_SetConfig+0x346>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <UART_SetConfig+0x2d8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d120      	bne.n	800261e <UART_SetConfig+0x17a>
 80025dc:	4b65      	ldr	r3, [pc, #404]	; (8002774 <UART_SetConfig+0x2d0>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025e6:	2b30      	cmp	r3, #48	; 0x30
 80025e8:	d013      	beq.n	8002612 <UART_SetConfig+0x16e>
 80025ea:	2b30      	cmp	r3, #48	; 0x30
 80025ec:	d814      	bhi.n	8002618 <UART_SetConfig+0x174>
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d009      	beq.n	8002606 <UART_SetConfig+0x162>
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d810      	bhi.n	8002618 <UART_SetConfig+0x174>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <UART_SetConfig+0x15c>
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d006      	beq.n	800260c <UART_SetConfig+0x168>
 80025fe:	e00b      	b.n	8002618 <UART_SetConfig+0x174>
 8002600:	2300      	movs	r3, #0
 8002602:	77fb      	strb	r3, [r7, #31]
 8002604:	e0f1      	b.n	80027ea <UART_SetConfig+0x346>
 8002606:	2302      	movs	r3, #2
 8002608:	77fb      	strb	r3, [r7, #31]
 800260a:	e0ee      	b.n	80027ea <UART_SetConfig+0x346>
 800260c:	2304      	movs	r3, #4
 800260e:	77fb      	strb	r3, [r7, #31]
 8002610:	e0eb      	b.n	80027ea <UART_SetConfig+0x346>
 8002612:	2308      	movs	r3, #8
 8002614:	77fb      	strb	r3, [r7, #31]
 8002616:	e0e8      	b.n	80027ea <UART_SetConfig+0x346>
 8002618:	2310      	movs	r3, #16
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e0e5      	b.n	80027ea <UART_SetConfig+0x346>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a57      	ldr	r2, [pc, #348]	; (8002780 <UART_SetConfig+0x2dc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d120      	bne.n	800266a <UART_SetConfig+0x1c6>
 8002628:	4b52      	ldr	r3, [pc, #328]	; (8002774 <UART_SetConfig+0x2d0>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002632:	2bc0      	cmp	r3, #192	; 0xc0
 8002634:	d013      	beq.n	800265e <UART_SetConfig+0x1ba>
 8002636:	2bc0      	cmp	r3, #192	; 0xc0
 8002638:	d814      	bhi.n	8002664 <UART_SetConfig+0x1c0>
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d009      	beq.n	8002652 <UART_SetConfig+0x1ae>
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d810      	bhi.n	8002664 <UART_SetConfig+0x1c0>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <UART_SetConfig+0x1a8>
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d006      	beq.n	8002658 <UART_SetConfig+0x1b4>
 800264a:	e00b      	b.n	8002664 <UART_SetConfig+0x1c0>
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
 8002650:	e0cb      	b.n	80027ea <UART_SetConfig+0x346>
 8002652:	2302      	movs	r3, #2
 8002654:	77fb      	strb	r3, [r7, #31]
 8002656:	e0c8      	b.n	80027ea <UART_SetConfig+0x346>
 8002658:	2304      	movs	r3, #4
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e0c5      	b.n	80027ea <UART_SetConfig+0x346>
 800265e:	2308      	movs	r3, #8
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e0c2      	b.n	80027ea <UART_SetConfig+0x346>
 8002664:	2310      	movs	r3, #16
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e0bf      	b.n	80027ea <UART_SetConfig+0x346>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a45      	ldr	r2, [pc, #276]	; (8002784 <UART_SetConfig+0x2e0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d125      	bne.n	80026c0 <UART_SetConfig+0x21c>
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <UART_SetConfig+0x2d0>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002682:	d017      	beq.n	80026b4 <UART_SetConfig+0x210>
 8002684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002688:	d817      	bhi.n	80026ba <UART_SetConfig+0x216>
 800268a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268e:	d00b      	beq.n	80026a8 <UART_SetConfig+0x204>
 8002690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002694:	d811      	bhi.n	80026ba <UART_SetConfig+0x216>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <UART_SetConfig+0x1fe>
 800269a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269e:	d006      	beq.n	80026ae <UART_SetConfig+0x20a>
 80026a0:	e00b      	b.n	80026ba <UART_SetConfig+0x216>
 80026a2:	2300      	movs	r3, #0
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e0a0      	b.n	80027ea <UART_SetConfig+0x346>
 80026a8:	2302      	movs	r3, #2
 80026aa:	77fb      	strb	r3, [r7, #31]
 80026ac:	e09d      	b.n	80027ea <UART_SetConfig+0x346>
 80026ae:	2304      	movs	r3, #4
 80026b0:	77fb      	strb	r3, [r7, #31]
 80026b2:	e09a      	b.n	80027ea <UART_SetConfig+0x346>
 80026b4:	2308      	movs	r3, #8
 80026b6:	77fb      	strb	r3, [r7, #31]
 80026b8:	e097      	b.n	80027ea <UART_SetConfig+0x346>
 80026ba:	2310      	movs	r3, #16
 80026bc:	77fb      	strb	r3, [r7, #31]
 80026be:	e094      	b.n	80027ea <UART_SetConfig+0x346>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a30      	ldr	r2, [pc, #192]	; (8002788 <UART_SetConfig+0x2e4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d125      	bne.n	8002716 <UART_SetConfig+0x272>
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <UART_SetConfig+0x2d0>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026d8:	d017      	beq.n	800270a <UART_SetConfig+0x266>
 80026da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026de:	d817      	bhi.n	8002710 <UART_SetConfig+0x26c>
 80026e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e4:	d00b      	beq.n	80026fe <UART_SetConfig+0x25a>
 80026e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ea:	d811      	bhi.n	8002710 <UART_SetConfig+0x26c>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <UART_SetConfig+0x254>
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d006      	beq.n	8002704 <UART_SetConfig+0x260>
 80026f6:	e00b      	b.n	8002710 <UART_SetConfig+0x26c>
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e075      	b.n	80027ea <UART_SetConfig+0x346>
 80026fe:	2302      	movs	r3, #2
 8002700:	77fb      	strb	r3, [r7, #31]
 8002702:	e072      	b.n	80027ea <UART_SetConfig+0x346>
 8002704:	2304      	movs	r3, #4
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e06f      	b.n	80027ea <UART_SetConfig+0x346>
 800270a:	2308      	movs	r3, #8
 800270c:	77fb      	strb	r3, [r7, #31]
 800270e:	e06c      	b.n	80027ea <UART_SetConfig+0x346>
 8002710:	2310      	movs	r3, #16
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e069      	b.n	80027ea <UART_SetConfig+0x346>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <UART_SetConfig+0x2e8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d137      	bne.n	8002790 <UART_SetConfig+0x2ec>
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <UART_SetConfig+0x2d0>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800272a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800272e:	d017      	beq.n	8002760 <UART_SetConfig+0x2bc>
 8002730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002734:	d817      	bhi.n	8002766 <UART_SetConfig+0x2c2>
 8002736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273a:	d00b      	beq.n	8002754 <UART_SetConfig+0x2b0>
 800273c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002740:	d811      	bhi.n	8002766 <UART_SetConfig+0x2c2>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <UART_SetConfig+0x2aa>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	d006      	beq.n	800275a <UART_SetConfig+0x2b6>
 800274c:	e00b      	b.n	8002766 <UART_SetConfig+0x2c2>
 800274e:	2300      	movs	r3, #0
 8002750:	77fb      	strb	r3, [r7, #31]
 8002752:	e04a      	b.n	80027ea <UART_SetConfig+0x346>
 8002754:	2302      	movs	r3, #2
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e047      	b.n	80027ea <UART_SetConfig+0x346>
 800275a:	2304      	movs	r3, #4
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e044      	b.n	80027ea <UART_SetConfig+0x346>
 8002760:	2308      	movs	r3, #8
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e041      	b.n	80027ea <UART_SetConfig+0x346>
 8002766:	2310      	movs	r3, #16
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e03e      	b.n	80027ea <UART_SetConfig+0x346>
 800276c:	efff69f3 	.word	0xefff69f3
 8002770:	40011000 	.word	0x40011000
 8002774:	40023800 	.word	0x40023800
 8002778:	40004400 	.word	0x40004400
 800277c:	40004800 	.word	0x40004800
 8002780:	40004c00 	.word	0x40004c00
 8002784:	40005000 	.word	0x40005000
 8002788:	40011400 	.word	0x40011400
 800278c:	40007800 	.word	0x40007800
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a71      	ldr	r2, [pc, #452]	; (800295c <UART_SetConfig+0x4b8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d125      	bne.n	80027e6 <UART_SetConfig+0x342>
 800279a:	4b71      	ldr	r3, [pc, #452]	; (8002960 <UART_SetConfig+0x4bc>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027a8:	d017      	beq.n	80027da <UART_SetConfig+0x336>
 80027aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027ae:	d817      	bhi.n	80027e0 <UART_SetConfig+0x33c>
 80027b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b4:	d00b      	beq.n	80027ce <UART_SetConfig+0x32a>
 80027b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ba:	d811      	bhi.n	80027e0 <UART_SetConfig+0x33c>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <UART_SetConfig+0x324>
 80027c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c4:	d006      	beq.n	80027d4 <UART_SetConfig+0x330>
 80027c6:	e00b      	b.n	80027e0 <UART_SetConfig+0x33c>
 80027c8:	2300      	movs	r3, #0
 80027ca:	77fb      	strb	r3, [r7, #31]
 80027cc:	e00d      	b.n	80027ea <UART_SetConfig+0x346>
 80027ce:	2302      	movs	r3, #2
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	e00a      	b.n	80027ea <UART_SetConfig+0x346>
 80027d4:	2304      	movs	r3, #4
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e007      	b.n	80027ea <UART_SetConfig+0x346>
 80027da:	2308      	movs	r3, #8
 80027dc:	77fb      	strb	r3, [r7, #31]
 80027de:	e004      	b.n	80027ea <UART_SetConfig+0x346>
 80027e0:	2310      	movs	r3, #16
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e001      	b.n	80027ea <UART_SetConfig+0x346>
 80027e6:	2310      	movs	r3, #16
 80027e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f2:	d15b      	bne.n	80028ac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d827      	bhi.n	800284a <UART_SetConfig+0x3a6>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <UART_SetConfig+0x35c>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002825 	.word	0x08002825
 8002804:	0800282d 	.word	0x0800282d
 8002808:	08002835 	.word	0x08002835
 800280c:	0800284b 	.word	0x0800284b
 8002810:	0800283b 	.word	0x0800283b
 8002814:	0800284b 	.word	0x0800284b
 8002818:	0800284b 	.word	0x0800284b
 800281c:	0800284b 	.word	0x0800284b
 8002820:	08002843 	.word	0x08002843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002824:	f7ff f90c 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002828:	61b8      	str	r0, [r7, #24]
        break;
 800282a:	e013      	b.n	8002854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800282c:	f7ff f91c 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8002830:	61b8      	str	r0, [r7, #24]
        break;
 8002832:	e00f      	b.n	8002854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002834:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <UART_SetConfig+0x4c0>)
 8002836:	61bb      	str	r3, [r7, #24]
        break;
 8002838:	e00c      	b.n	8002854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800283a:	f7ff f83f 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800283e:	61b8      	str	r0, [r7, #24]
        break;
 8002840:	e008      	b.n	8002854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002846:	61bb      	str	r3, [r7, #24]
        break;
 8002848:	e004      	b.n	8002854 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77bb      	strb	r3, [r7, #30]
        break;
 8002852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d074      	beq.n	8002944 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	441a      	add	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	b29b      	uxth	r3, r3
 8002870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d916      	bls.n	80028a6 <UART_SetConfig+0x402>
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d212      	bcs.n	80028a6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	b29b      	uxth	r3, r3
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	b29b      	uxth	r3, r3
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	b29a      	uxth	r2, r3
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	4313      	orrs	r3, r2
 800289a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	89fa      	ldrh	r2, [r7, #14]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	e04e      	b.n	8002944 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77bb      	strb	r3, [r7, #30]
 80028aa:	e04b      	b.n	8002944 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d827      	bhi.n	8002902 <UART_SetConfig+0x45e>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <UART_SetConfig+0x414>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028dd 	.word	0x080028dd
 80028bc:	080028e5 	.word	0x080028e5
 80028c0:	080028ed 	.word	0x080028ed
 80028c4:	08002903 	.word	0x08002903
 80028c8:	080028f3 	.word	0x080028f3
 80028cc:	08002903 	.word	0x08002903
 80028d0:	08002903 	.word	0x08002903
 80028d4:	08002903 	.word	0x08002903
 80028d8:	080028fb 	.word	0x080028fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028dc:	f7ff f8b0 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 80028e0:	61b8      	str	r0, [r7, #24]
        break;
 80028e2:	e013      	b.n	800290c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff f8c0 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 80028e8:	61b8      	str	r0, [r7, #24]
        break;
 80028ea:	e00f      	b.n	800290c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <UART_SetConfig+0x4c0>)
 80028ee:	61bb      	str	r3, [r7, #24]
        break;
 80028f0:	e00c      	b.n	800290c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f2:	f7fe ffe3 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 80028f6:	61b8      	str	r0, [r7, #24]
        break;
 80028f8:	e008      	b.n	800290c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fe:	61bb      	str	r3, [r7, #24]
        break;
 8002900:	e004      	b.n	800290c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	77bb      	strb	r3, [r7, #30]
        break;
 800290a:	bf00      	nop
    }

    if (pclk != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	085a      	lsrs	r2, r3, #1
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	d908      	bls.n	8002940 <UART_SetConfig+0x49c>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d204      	bcs.n	8002940 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	e001      	b.n	8002944 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002950:	7fbb      	ldrb	r3, [r7, #30]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40007c00 	.word	0x40007c00
 8002960:	40023800 	.word	0x40023800
 8002964:	00f42400 	.word	0x00f42400

08002968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01a      	beq.n	8002a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a66:	d10a      	bne.n	8002a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002abc:	f7fe f888 	bl	8000bd0 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d10e      	bne.n	8002aee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f82d 	bl	8002b3e <UART_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e023      	b.n	8002b36 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d10e      	bne.n	8002b1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f817 	bl	8002b3e <UART_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e00d      	b.n	8002b36 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4e:	e05e      	b.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d05a      	beq.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7fe f83a 	bl	8000bd0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11b      	bne.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e043      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02c      	beq.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc2:	d124      	bne.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bdc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00f      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d091      	beq.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <__errno>:
 8002c38:	4b01      	ldr	r3, [pc, #4]	; (8002c40 <__errno+0x8>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000000c 	.word	0x2000000c

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	4d0d      	ldr	r5, [pc, #52]	; (8002c7c <__libc_init_array+0x38>)
 8002c48:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	2600      	movs	r6, #0
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	4d0b      	ldr	r5, [pc, #44]	; (8002c84 <__libc_init_array+0x40>)
 8002c56:	4c0c      	ldr	r4, [pc, #48]	; (8002c88 <__libc_init_array+0x44>)
 8002c58:	f000 ffec 	bl	8003c34 <_init>
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	2600      	movs	r6, #0
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08003d3c 	.word	0x08003d3c
 8002c80:	08003d3c 	.word	0x08003d3c
 8002c84:	08003d3c 	.word	0x08003d3c
 8002c88:	08003d40 	.word	0x08003d40

08002c8c <memset>:
 8002c8c:	4402      	add	r2, r0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d100      	bne.n	8002c96 <memset+0xa>
 8002c94:	4770      	bx	lr
 8002c96:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9a:	e7f9      	b.n	8002c90 <memset+0x4>

08002c9c <iprintf>:
 8002c9c:	b40f      	push	{r0, r1, r2, r3}
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <iprintf+0x2c>)
 8002ca0:	b513      	push	{r0, r1, r4, lr}
 8002ca2:	681c      	ldr	r4, [r3, #0]
 8002ca4:	b124      	cbz	r4, 8002cb0 <iprintf+0x14>
 8002ca6:	69a3      	ldr	r3, [r4, #24]
 8002ca8:	b913      	cbnz	r3, 8002cb0 <iprintf+0x14>
 8002caa:	4620      	mov	r0, r4
 8002cac:	f000 fa5e 	bl	800316c <__sinit>
 8002cb0:	ab05      	add	r3, sp, #20
 8002cb2:	9a04      	ldr	r2, [sp, #16]
 8002cb4:	68a1      	ldr	r1, [r4, #8]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 fc2f 	bl	800351c <_vfiprintf_r>
 8002cbe:	b002      	add	sp, #8
 8002cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc4:	b004      	add	sp, #16
 8002cc6:	4770      	bx	lr
 8002cc8:	2000000c 	.word	0x2000000c

08002ccc <_puts_r>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	460e      	mov	r6, r1
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	b118      	cbz	r0, 8002cdc <_puts_r+0x10>
 8002cd4:	6983      	ldr	r3, [r0, #24]
 8002cd6:	b90b      	cbnz	r3, 8002cdc <_puts_r+0x10>
 8002cd8:	f000 fa48 	bl	800316c <__sinit>
 8002cdc:	69ab      	ldr	r3, [r5, #24]
 8002cde:	68ac      	ldr	r4, [r5, #8]
 8002ce0:	b913      	cbnz	r3, 8002ce8 <_puts_r+0x1c>
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 fa42 	bl	800316c <__sinit>
 8002ce8:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <_puts_r+0xd0>)
 8002cea:	429c      	cmp	r4, r3
 8002cec:	d120      	bne.n	8002d30 <_puts_r+0x64>
 8002cee:	686c      	ldr	r4, [r5, #4]
 8002cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cf2:	07db      	lsls	r3, r3, #31
 8002cf4:	d405      	bmi.n	8002d02 <_puts_r+0x36>
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	0598      	lsls	r0, r3, #22
 8002cfa:	d402      	bmi.n	8002d02 <_puts_r+0x36>
 8002cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cfe:	f000 fad3 	bl	80032a8 <__retarget_lock_acquire_recursive>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	0719      	lsls	r1, r3, #28
 8002d06:	d51d      	bpl.n	8002d44 <_puts_r+0x78>
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	b1db      	cbz	r3, 8002d44 <_puts_r+0x78>
 8002d0c:	3e01      	subs	r6, #1
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60a3      	str	r3, [r4, #8]
 8002d18:	bb39      	cbnz	r1, 8002d6a <_puts_r+0x9e>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da38      	bge.n	8002d90 <_puts_r+0xc4>
 8002d1e:	4622      	mov	r2, r4
 8002d20:	210a      	movs	r1, #10
 8002d22:	4628      	mov	r0, r5
 8002d24:	f000 f848 	bl	8002db8 <__swbuf_r>
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d011      	beq.n	8002d50 <_puts_r+0x84>
 8002d2c:	250a      	movs	r5, #10
 8002d2e:	e011      	b.n	8002d54 <_puts_r+0x88>
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <_puts_r+0xd4>)
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d101      	bne.n	8002d3a <_puts_r+0x6e>
 8002d36:	68ac      	ldr	r4, [r5, #8]
 8002d38:	e7da      	b.n	8002cf0 <_puts_r+0x24>
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <_puts_r+0xd8>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	bf08      	it	eq
 8002d40:	68ec      	ldreq	r4, [r5, #12]
 8002d42:	e7d5      	b.n	8002cf0 <_puts_r+0x24>
 8002d44:	4621      	mov	r1, r4
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 f888 	bl	8002e5c <__swsetup_r>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d0dd      	beq.n	8002d0c <_puts_r+0x40>
 8002d50:	f04f 35ff 	mov.w	r5, #4294967295
 8002d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d56:	07da      	lsls	r2, r3, #31
 8002d58:	d405      	bmi.n	8002d66 <_puts_r+0x9a>
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	059b      	lsls	r3, r3, #22
 8002d5e:	d402      	bmi.n	8002d66 <_puts_r+0x9a>
 8002d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d62:	f000 faa2 	bl	80032aa <__retarget_lock_release_recursive>
 8002d66:	4628      	mov	r0, r5
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da04      	bge.n	8002d78 <_puts_r+0xac>
 8002d6e:	69a2      	ldr	r2, [r4, #24]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dc06      	bgt.n	8002d82 <_puts_r+0xb6>
 8002d74:	290a      	cmp	r1, #10
 8002d76:	d004      	beq.n	8002d82 <_puts_r+0xb6>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	6022      	str	r2, [r4, #0]
 8002d7e:	7019      	strb	r1, [r3, #0]
 8002d80:	e7c5      	b.n	8002d0e <_puts_r+0x42>
 8002d82:	4622      	mov	r2, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	f000 f817 	bl	8002db8 <__swbuf_r>
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	d1bf      	bne.n	8002d0e <_puts_r+0x42>
 8002d8e:	e7df      	b.n	8002d50 <_puts_r+0x84>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	250a      	movs	r5, #10
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	6022      	str	r2, [r4, #0]
 8002d98:	701d      	strb	r5, [r3, #0]
 8002d9a:	e7db      	b.n	8002d54 <_puts_r+0x88>
 8002d9c:	08003cc0 	.word	0x08003cc0
 8002da0:	08003ce0 	.word	0x08003ce0
 8002da4:	08003ca0 	.word	0x08003ca0

08002da8 <puts>:
 8002da8:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <puts+0xc>)
 8002daa:	4601      	mov	r1, r0
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	f7ff bf8d 	b.w	8002ccc <_puts_r>
 8002db2:	bf00      	nop
 8002db4:	2000000c 	.word	0x2000000c

08002db8 <__swbuf_r>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	460e      	mov	r6, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	b118      	cbz	r0, 8002dca <__swbuf_r+0x12>
 8002dc2:	6983      	ldr	r3, [r0, #24]
 8002dc4:	b90b      	cbnz	r3, 8002dca <__swbuf_r+0x12>
 8002dc6:	f000 f9d1 	bl	800316c <__sinit>
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <__swbuf_r+0x98>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	d12b      	bne.n	8002e28 <__swbuf_r+0x70>
 8002dd0:	686c      	ldr	r4, [r5, #4]
 8002dd2:	69a3      	ldr	r3, [r4, #24]
 8002dd4:	60a3      	str	r3, [r4, #8]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	071a      	lsls	r2, r3, #28
 8002dda:	d52f      	bpl.n	8002e3c <__swbuf_r+0x84>
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	b36b      	cbz	r3, 8002e3c <__swbuf_r+0x84>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	b2f6      	uxtb	r6, r6
 8002dea:	4283      	cmp	r3, r0
 8002dec:	4637      	mov	r7, r6
 8002dee:	dc04      	bgt.n	8002dfa <__swbuf_r+0x42>
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f926 	bl	8003044 <_fflush_r>
 8002df8:	bb30      	cbnz	r0, 8002e48 <__swbuf_r+0x90>
 8002dfa:	68a3      	ldr	r3, [r4, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60a3      	str	r3, [r4, #8]
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	701e      	strb	r6, [r3, #0]
 8002e08:	6963      	ldr	r3, [r4, #20]
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	4283      	cmp	r3, r0
 8002e0e:	d004      	beq.n	8002e1a <__swbuf_r+0x62>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	07db      	lsls	r3, r3, #31
 8002e14:	d506      	bpl.n	8002e24 <__swbuf_r+0x6c>
 8002e16:	2e0a      	cmp	r6, #10
 8002e18:	d104      	bne.n	8002e24 <__swbuf_r+0x6c>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f911 	bl	8003044 <_fflush_r>
 8002e22:	b988      	cbnz	r0, 8002e48 <__swbuf_r+0x90>
 8002e24:	4638      	mov	r0, r7
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <__swbuf_r+0x9c>)
 8002e2a:	429c      	cmp	r4, r3
 8002e2c:	d101      	bne.n	8002e32 <__swbuf_r+0x7a>
 8002e2e:	68ac      	ldr	r4, [r5, #8]
 8002e30:	e7cf      	b.n	8002dd2 <__swbuf_r+0x1a>
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <__swbuf_r+0xa0>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	bf08      	it	eq
 8002e38:	68ec      	ldreq	r4, [r5, #12]
 8002e3a:	e7ca      	b.n	8002dd2 <__swbuf_r+0x1a>
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 f80c 	bl	8002e5c <__swsetup_r>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d0cb      	beq.n	8002de0 <__swbuf_r+0x28>
 8002e48:	f04f 37ff 	mov.w	r7, #4294967295
 8002e4c:	e7ea      	b.n	8002e24 <__swbuf_r+0x6c>
 8002e4e:	bf00      	nop
 8002e50:	08003cc0 	.word	0x08003cc0
 8002e54:	08003ce0 	.word	0x08003ce0
 8002e58:	08003ca0 	.word	0x08003ca0

08002e5c <__swsetup_r>:
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <__swsetup_r+0xcc>)
 8002e5e:	b570      	push	{r4, r5, r6, lr}
 8002e60:	681d      	ldr	r5, [r3, #0]
 8002e62:	4606      	mov	r6, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	b125      	cbz	r5, 8002e72 <__swsetup_r+0x16>
 8002e68:	69ab      	ldr	r3, [r5, #24]
 8002e6a:	b913      	cbnz	r3, 8002e72 <__swsetup_r+0x16>
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f97d 	bl	800316c <__sinit>
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <__swsetup_r+0xd0>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d10f      	bne.n	8002e98 <__swsetup_r+0x3c>
 8002e78:	686c      	ldr	r4, [r5, #4]
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e80:	0719      	lsls	r1, r3, #28
 8002e82:	d42c      	bmi.n	8002ede <__swsetup_r+0x82>
 8002e84:	06dd      	lsls	r5, r3, #27
 8002e86:	d411      	bmi.n	8002eac <__swsetup_r+0x50>
 8002e88:	2309      	movs	r3, #9
 8002e8a:	6033      	str	r3, [r6, #0]
 8002e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	e03e      	b.n	8002f16 <__swsetup_r+0xba>
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <__swsetup_r+0xd4>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	d101      	bne.n	8002ea2 <__swsetup_r+0x46>
 8002e9e:	68ac      	ldr	r4, [r5, #8]
 8002ea0:	e7eb      	b.n	8002e7a <__swsetup_r+0x1e>
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <__swsetup_r+0xd8>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	bf08      	it	eq
 8002ea8:	68ec      	ldreq	r4, [r5, #12]
 8002eaa:	e7e6      	b.n	8002e7a <__swsetup_r+0x1e>
 8002eac:	0758      	lsls	r0, r3, #29
 8002eae:	d512      	bpl.n	8002ed6 <__swsetup_r+0x7a>
 8002eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eb2:	b141      	cbz	r1, 8002ec6 <__swsetup_r+0x6a>
 8002eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	d002      	beq.n	8002ec2 <__swsetup_r+0x66>
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	f000 fa59 	bl	8003374 <_free_r>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6063      	str	r3, [r4, #4]
 8002ed2:	6923      	ldr	r3, [r4, #16]
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	81a3      	strh	r3, [r4, #12]
 8002ede:	6923      	ldr	r3, [r4, #16]
 8002ee0:	b94b      	cbnz	r3, 8002ef6 <__swsetup_r+0x9a>
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d003      	beq.n	8002ef6 <__swsetup_r+0x9a>
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f000 f9ff 	bl	80032f4 <__smakebuf_r>
 8002ef6:	89a0      	ldrh	r0, [r4, #12]
 8002ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002efc:	f010 0301 	ands.w	r3, r0, #1
 8002f00:	d00a      	beq.n	8002f18 <__swsetup_r+0xbc>
 8002f02:	2300      	movs	r3, #0
 8002f04:	60a3      	str	r3, [r4, #8]
 8002f06:	6963      	ldr	r3, [r4, #20]
 8002f08:	425b      	negs	r3, r3
 8002f0a:	61a3      	str	r3, [r4, #24]
 8002f0c:	6923      	ldr	r3, [r4, #16]
 8002f0e:	b943      	cbnz	r3, 8002f22 <__swsetup_r+0xc6>
 8002f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f14:	d1ba      	bne.n	8002e8c <__swsetup_r+0x30>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	0781      	lsls	r1, r0, #30
 8002f1a:	bf58      	it	pl
 8002f1c:	6963      	ldrpl	r3, [r4, #20]
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	e7f4      	b.n	8002f0c <__swsetup_r+0xb0>
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7f7      	b.n	8002f16 <__swsetup_r+0xba>
 8002f26:	bf00      	nop
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	08003cc0 	.word	0x08003cc0
 8002f30:	08003ce0 	.word	0x08003ce0
 8002f34:	08003ca0 	.word	0x08003ca0

08002f38 <__sflush_r>:
 8002f38:	898a      	ldrh	r2, [r1, #12]
 8002f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f3e:	4605      	mov	r5, r0
 8002f40:	0710      	lsls	r0, r2, #28
 8002f42:	460c      	mov	r4, r1
 8002f44:	d458      	bmi.n	8002ff8 <__sflush_r+0xc0>
 8002f46:	684b      	ldr	r3, [r1, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	dc05      	bgt.n	8002f58 <__sflush_r+0x20>
 8002f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	dc02      	bgt.n	8002f58 <__sflush_r+0x20>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f5a:	2e00      	cmp	r6, #0
 8002f5c:	d0f9      	beq.n	8002f52 <__sflush_r+0x1a>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f64:	682f      	ldr	r7, [r5, #0]
 8002f66:	602b      	str	r3, [r5, #0]
 8002f68:	d032      	beq.n	8002fd0 <__sflush_r+0x98>
 8002f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	075a      	lsls	r2, r3, #29
 8002f70:	d505      	bpl.n	8002f7e <__sflush_r+0x46>
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	1ac0      	subs	r0, r0, r3
 8002f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f78:	b10b      	cbz	r3, 8002f7e <__sflush_r+0x46>
 8002f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f7c:	1ac0      	subs	r0, r0, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4602      	mov	r2, r0
 8002f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f84:	6a21      	ldr	r1, [r4, #32]
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b0      	blx	r6
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	d106      	bne.n	8002f9e <__sflush_r+0x66>
 8002f90:	6829      	ldr	r1, [r5, #0]
 8002f92:	291d      	cmp	r1, #29
 8002f94:	d82c      	bhi.n	8002ff0 <__sflush_r+0xb8>
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <__sflush_r+0x108>)
 8002f98:	40ca      	lsrs	r2, r1
 8002f9a:	07d6      	lsls	r6, r2, #31
 8002f9c:	d528      	bpl.n	8002ff0 <__sflush_r+0xb8>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	6062      	str	r2, [r4, #4]
 8002fa2:	04d9      	lsls	r1, r3, #19
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	6022      	str	r2, [r4, #0]
 8002fa8:	d504      	bpl.n	8002fb4 <__sflush_r+0x7c>
 8002faa:	1c42      	adds	r2, r0, #1
 8002fac:	d101      	bne.n	8002fb2 <__sflush_r+0x7a>
 8002fae:	682b      	ldr	r3, [r5, #0]
 8002fb0:	b903      	cbnz	r3, 8002fb4 <__sflush_r+0x7c>
 8002fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8002fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb6:	602f      	str	r7, [r5, #0]
 8002fb8:	2900      	cmp	r1, #0
 8002fba:	d0ca      	beq.n	8002f52 <__sflush_r+0x1a>
 8002fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	d002      	beq.n	8002fca <__sflush_r+0x92>
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 f9d5 	bl	8003374 <_free_r>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8002fce:	e7c1      	b.n	8002f54 <__sflush_r+0x1c>
 8002fd0:	6a21      	ldr	r1, [r4, #32]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b0      	blx	r6
 8002fd8:	1c41      	adds	r1, r0, #1
 8002fda:	d1c7      	bne.n	8002f6c <__sflush_r+0x34>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0c4      	beq.n	8002f6c <__sflush_r+0x34>
 8002fe2:	2b1d      	cmp	r3, #29
 8002fe4:	d001      	beq.n	8002fea <__sflush_r+0xb2>
 8002fe6:	2b16      	cmp	r3, #22
 8002fe8:	d101      	bne.n	8002fee <__sflush_r+0xb6>
 8002fea:	602f      	str	r7, [r5, #0]
 8002fec:	e7b1      	b.n	8002f52 <__sflush_r+0x1a>
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	e7ad      	b.n	8002f54 <__sflush_r+0x1c>
 8002ff8:	690f      	ldr	r7, [r1, #16]
 8002ffa:	2f00      	cmp	r7, #0
 8002ffc:	d0a9      	beq.n	8002f52 <__sflush_r+0x1a>
 8002ffe:	0793      	lsls	r3, r2, #30
 8003000:	680e      	ldr	r6, [r1, #0]
 8003002:	bf08      	it	eq
 8003004:	694b      	ldreq	r3, [r1, #20]
 8003006:	600f      	str	r7, [r1, #0]
 8003008:	bf18      	it	ne
 800300a:	2300      	movne	r3, #0
 800300c:	eba6 0807 	sub.w	r8, r6, r7
 8003010:	608b      	str	r3, [r1, #8]
 8003012:	f1b8 0f00 	cmp.w	r8, #0
 8003016:	dd9c      	ble.n	8002f52 <__sflush_r+0x1a>
 8003018:	6a21      	ldr	r1, [r4, #32]
 800301a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800301c:	4643      	mov	r3, r8
 800301e:	463a      	mov	r2, r7
 8003020:	4628      	mov	r0, r5
 8003022:	47b0      	blx	r6
 8003024:	2800      	cmp	r0, #0
 8003026:	dc06      	bgt.n	8003036 <__sflush_r+0xfe>
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	e78e      	b.n	8002f54 <__sflush_r+0x1c>
 8003036:	4407      	add	r7, r0
 8003038:	eba8 0800 	sub.w	r8, r8, r0
 800303c:	e7e9      	b.n	8003012 <__sflush_r+0xda>
 800303e:	bf00      	nop
 8003040:	20400001 	.word	0x20400001

08003044 <_fflush_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	690b      	ldr	r3, [r1, #16]
 8003048:	4605      	mov	r5, r0
 800304a:	460c      	mov	r4, r1
 800304c:	b913      	cbnz	r3, 8003054 <_fflush_r+0x10>
 800304e:	2500      	movs	r5, #0
 8003050:	4628      	mov	r0, r5
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	b118      	cbz	r0, 800305e <_fflush_r+0x1a>
 8003056:	6983      	ldr	r3, [r0, #24]
 8003058:	b90b      	cbnz	r3, 800305e <_fflush_r+0x1a>
 800305a:	f000 f887 	bl	800316c <__sinit>
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <_fflush_r+0x6c>)
 8003060:	429c      	cmp	r4, r3
 8003062:	d11b      	bne.n	800309c <_fflush_r+0x58>
 8003064:	686c      	ldr	r4, [r5, #4]
 8003066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ef      	beq.n	800304e <_fflush_r+0xa>
 800306e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003070:	07d0      	lsls	r0, r2, #31
 8003072:	d404      	bmi.n	800307e <_fflush_r+0x3a>
 8003074:	0599      	lsls	r1, r3, #22
 8003076:	d402      	bmi.n	800307e <_fflush_r+0x3a>
 8003078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800307a:	f000 f915 	bl	80032a8 <__retarget_lock_acquire_recursive>
 800307e:	4628      	mov	r0, r5
 8003080:	4621      	mov	r1, r4
 8003082:	f7ff ff59 	bl	8002f38 <__sflush_r>
 8003086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003088:	07da      	lsls	r2, r3, #31
 800308a:	4605      	mov	r5, r0
 800308c:	d4e0      	bmi.n	8003050 <_fflush_r+0xc>
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	059b      	lsls	r3, r3, #22
 8003092:	d4dd      	bmi.n	8003050 <_fflush_r+0xc>
 8003094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003096:	f000 f908 	bl	80032aa <__retarget_lock_release_recursive>
 800309a:	e7d9      	b.n	8003050 <_fflush_r+0xc>
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <_fflush_r+0x70>)
 800309e:	429c      	cmp	r4, r3
 80030a0:	d101      	bne.n	80030a6 <_fflush_r+0x62>
 80030a2:	68ac      	ldr	r4, [r5, #8]
 80030a4:	e7df      	b.n	8003066 <_fflush_r+0x22>
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <_fflush_r+0x74>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	bf08      	it	eq
 80030ac:	68ec      	ldreq	r4, [r5, #12]
 80030ae:	e7da      	b.n	8003066 <_fflush_r+0x22>
 80030b0:	08003cc0 	.word	0x08003cc0
 80030b4:	08003ce0 	.word	0x08003ce0
 80030b8:	08003ca0 	.word	0x08003ca0

080030bc <std>:
 80030bc:	2300      	movs	r3, #0
 80030be:	b510      	push	{r4, lr}
 80030c0:	4604      	mov	r4, r0
 80030c2:	e9c0 3300 	strd	r3, r3, [r0]
 80030c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ca:	6083      	str	r3, [r0, #8]
 80030cc:	8181      	strh	r1, [r0, #12]
 80030ce:	6643      	str	r3, [r0, #100]	; 0x64
 80030d0:	81c2      	strh	r2, [r0, #14]
 80030d2:	6183      	str	r3, [r0, #24]
 80030d4:	4619      	mov	r1, r3
 80030d6:	2208      	movs	r2, #8
 80030d8:	305c      	adds	r0, #92	; 0x5c
 80030da:	f7ff fdd7 	bl	8002c8c <memset>
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <std+0x38>)
 80030e0:	6263      	str	r3, [r4, #36]	; 0x24
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <std+0x3c>)
 80030e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <std+0x40>)
 80030e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <std+0x44>)
 80030ec:	6224      	str	r4, [r4, #32]
 80030ee:	6323      	str	r3, [r4, #48]	; 0x30
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	bf00      	nop
 80030f4:	08003ac5 	.word	0x08003ac5
 80030f8:	08003ae7 	.word	0x08003ae7
 80030fc:	08003b1f 	.word	0x08003b1f
 8003100:	08003b43 	.word	0x08003b43

08003104 <_cleanup_r>:
 8003104:	4901      	ldr	r1, [pc, #4]	; (800310c <_cleanup_r+0x8>)
 8003106:	f000 b8af 	b.w	8003268 <_fwalk_reent>
 800310a:	bf00      	nop
 800310c:	08003045 	.word	0x08003045

08003110 <__sfmoreglue>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	1e4a      	subs	r2, r1, #1
 8003114:	2568      	movs	r5, #104	; 0x68
 8003116:	4355      	muls	r5, r2
 8003118:	460e      	mov	r6, r1
 800311a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800311e:	f000 f979 	bl	8003414 <_malloc_r>
 8003122:	4604      	mov	r4, r0
 8003124:	b140      	cbz	r0, 8003138 <__sfmoreglue+0x28>
 8003126:	2100      	movs	r1, #0
 8003128:	e9c0 1600 	strd	r1, r6, [r0]
 800312c:	300c      	adds	r0, #12
 800312e:	60a0      	str	r0, [r4, #8]
 8003130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003134:	f7ff fdaa 	bl	8002c8c <memset>
 8003138:	4620      	mov	r0, r4
 800313a:	bd70      	pop	{r4, r5, r6, pc}

0800313c <__sfp_lock_acquire>:
 800313c:	4801      	ldr	r0, [pc, #4]	; (8003144 <__sfp_lock_acquire+0x8>)
 800313e:	f000 b8b3 	b.w	80032a8 <__retarget_lock_acquire_recursive>
 8003142:	bf00      	nop
 8003144:	20000128 	.word	0x20000128

08003148 <__sfp_lock_release>:
 8003148:	4801      	ldr	r0, [pc, #4]	; (8003150 <__sfp_lock_release+0x8>)
 800314a:	f000 b8ae 	b.w	80032aa <__retarget_lock_release_recursive>
 800314e:	bf00      	nop
 8003150:	20000128 	.word	0x20000128

08003154 <__sinit_lock_acquire>:
 8003154:	4801      	ldr	r0, [pc, #4]	; (800315c <__sinit_lock_acquire+0x8>)
 8003156:	f000 b8a7 	b.w	80032a8 <__retarget_lock_acquire_recursive>
 800315a:	bf00      	nop
 800315c:	20000123 	.word	0x20000123

08003160 <__sinit_lock_release>:
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <__sinit_lock_release+0x8>)
 8003162:	f000 b8a2 	b.w	80032aa <__retarget_lock_release_recursive>
 8003166:	bf00      	nop
 8003168:	20000123 	.word	0x20000123

0800316c <__sinit>:
 800316c:	b510      	push	{r4, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	f7ff fff0 	bl	8003154 <__sinit_lock_acquire>
 8003174:	69a3      	ldr	r3, [r4, #24]
 8003176:	b11b      	cbz	r3, 8003180 <__sinit+0x14>
 8003178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800317c:	f7ff bff0 	b.w	8003160 <__sinit_lock_release>
 8003180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003184:	6523      	str	r3, [r4, #80]	; 0x50
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <__sinit+0x68>)
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <__sinit+0x6c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	62a2      	str	r2, [r4, #40]	; 0x28
 800318e:	42a3      	cmp	r3, r4
 8003190:	bf04      	itt	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	61a3      	streq	r3, [r4, #24]
 8003196:	4620      	mov	r0, r4
 8003198:	f000 f820 	bl	80031dc <__sfp>
 800319c:	6060      	str	r0, [r4, #4]
 800319e:	4620      	mov	r0, r4
 80031a0:	f000 f81c 	bl	80031dc <__sfp>
 80031a4:	60a0      	str	r0, [r4, #8]
 80031a6:	4620      	mov	r0, r4
 80031a8:	f000 f818 	bl	80031dc <__sfp>
 80031ac:	2200      	movs	r2, #0
 80031ae:	60e0      	str	r0, [r4, #12]
 80031b0:	2104      	movs	r1, #4
 80031b2:	6860      	ldr	r0, [r4, #4]
 80031b4:	f7ff ff82 	bl	80030bc <std>
 80031b8:	68a0      	ldr	r0, [r4, #8]
 80031ba:	2201      	movs	r2, #1
 80031bc:	2109      	movs	r1, #9
 80031be:	f7ff ff7d 	bl	80030bc <std>
 80031c2:	68e0      	ldr	r0, [r4, #12]
 80031c4:	2202      	movs	r2, #2
 80031c6:	2112      	movs	r1, #18
 80031c8:	f7ff ff78 	bl	80030bc <std>
 80031cc:	2301      	movs	r3, #1
 80031ce:	61a3      	str	r3, [r4, #24]
 80031d0:	e7d2      	b.n	8003178 <__sinit+0xc>
 80031d2:	bf00      	nop
 80031d4:	08003c9c 	.word	0x08003c9c
 80031d8:	08003105 	.word	0x08003105

080031dc <__sfp>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	4607      	mov	r7, r0
 80031e0:	f7ff ffac 	bl	800313c <__sfp_lock_acquire>
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <__sfp+0x84>)
 80031e6:	681e      	ldr	r6, [r3, #0]
 80031e8:	69b3      	ldr	r3, [r6, #24]
 80031ea:	b913      	cbnz	r3, 80031f2 <__sfp+0x16>
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7ff ffbd 	bl	800316c <__sinit>
 80031f2:	3648      	adds	r6, #72	; 0x48
 80031f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	d503      	bpl.n	8003204 <__sfp+0x28>
 80031fc:	6833      	ldr	r3, [r6, #0]
 80031fe:	b30b      	cbz	r3, 8003244 <__sfp+0x68>
 8003200:	6836      	ldr	r6, [r6, #0]
 8003202:	e7f7      	b.n	80031f4 <__sfp+0x18>
 8003204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003208:	b9d5      	cbnz	r5, 8003240 <__sfp+0x64>
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <__sfp+0x88>)
 800320c:	60e3      	str	r3, [r4, #12]
 800320e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003212:	6665      	str	r5, [r4, #100]	; 0x64
 8003214:	f000 f847 	bl	80032a6 <__retarget_lock_init_recursive>
 8003218:	f7ff ff96 	bl	8003148 <__sfp_lock_release>
 800321c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003224:	6025      	str	r5, [r4, #0]
 8003226:	61a5      	str	r5, [r4, #24]
 8003228:	2208      	movs	r2, #8
 800322a:	4629      	mov	r1, r5
 800322c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003230:	f7ff fd2c 	bl	8002c8c <memset>
 8003234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800323c:	4620      	mov	r0, r4
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	3468      	adds	r4, #104	; 0x68
 8003242:	e7d9      	b.n	80031f8 <__sfp+0x1c>
 8003244:	2104      	movs	r1, #4
 8003246:	4638      	mov	r0, r7
 8003248:	f7ff ff62 	bl	8003110 <__sfmoreglue>
 800324c:	4604      	mov	r4, r0
 800324e:	6030      	str	r0, [r6, #0]
 8003250:	2800      	cmp	r0, #0
 8003252:	d1d5      	bne.n	8003200 <__sfp+0x24>
 8003254:	f7ff ff78 	bl	8003148 <__sfp_lock_release>
 8003258:	230c      	movs	r3, #12
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	e7ee      	b.n	800323c <__sfp+0x60>
 800325e:	bf00      	nop
 8003260:	08003c9c 	.word	0x08003c9c
 8003264:	ffff0001 	.word	0xffff0001

08003268 <_fwalk_reent>:
 8003268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800326c:	4606      	mov	r6, r0
 800326e:	4688      	mov	r8, r1
 8003270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003274:	2700      	movs	r7, #0
 8003276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800327a:	f1b9 0901 	subs.w	r9, r9, #1
 800327e:	d505      	bpl.n	800328c <_fwalk_reent+0x24>
 8003280:	6824      	ldr	r4, [r4, #0]
 8003282:	2c00      	cmp	r4, #0
 8003284:	d1f7      	bne.n	8003276 <_fwalk_reent+0xe>
 8003286:	4638      	mov	r0, r7
 8003288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800328c:	89ab      	ldrh	r3, [r5, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d907      	bls.n	80032a2 <_fwalk_reent+0x3a>
 8003292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003296:	3301      	adds	r3, #1
 8003298:	d003      	beq.n	80032a2 <_fwalk_reent+0x3a>
 800329a:	4629      	mov	r1, r5
 800329c:	4630      	mov	r0, r6
 800329e:	47c0      	blx	r8
 80032a0:	4307      	orrs	r7, r0
 80032a2:	3568      	adds	r5, #104	; 0x68
 80032a4:	e7e9      	b.n	800327a <_fwalk_reent+0x12>

080032a6 <__retarget_lock_init_recursive>:
 80032a6:	4770      	bx	lr

080032a8 <__retarget_lock_acquire_recursive>:
 80032a8:	4770      	bx	lr

080032aa <__retarget_lock_release_recursive>:
 80032aa:	4770      	bx	lr

080032ac <__swhatbuf_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	460e      	mov	r6, r1
 80032b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b4:	2900      	cmp	r1, #0
 80032b6:	b096      	sub	sp, #88	; 0x58
 80032b8:	4614      	mov	r4, r2
 80032ba:	461d      	mov	r5, r3
 80032bc:	da07      	bge.n	80032ce <__swhatbuf_r+0x22>
 80032be:	2300      	movs	r3, #0
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	89b3      	ldrh	r3, [r6, #12]
 80032c4:	061a      	lsls	r2, r3, #24
 80032c6:	d410      	bmi.n	80032ea <__swhatbuf_r+0x3e>
 80032c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032cc:	e00e      	b.n	80032ec <__swhatbuf_r+0x40>
 80032ce:	466a      	mov	r2, sp
 80032d0:	f000 fc5e 	bl	8003b90 <_fstat_r>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	dbf2      	blt.n	80032be <__swhatbuf_r+0x12>
 80032d8:	9a01      	ldr	r2, [sp, #4]
 80032da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032e2:	425a      	negs	r2, r3
 80032e4:	415a      	adcs	r2, r3
 80032e6:	602a      	str	r2, [r5, #0]
 80032e8:	e7ee      	b.n	80032c8 <__swhatbuf_r+0x1c>
 80032ea:	2340      	movs	r3, #64	; 0x40
 80032ec:	2000      	movs	r0, #0
 80032ee:	6023      	str	r3, [r4, #0]
 80032f0:	b016      	add	sp, #88	; 0x58
 80032f2:	bd70      	pop	{r4, r5, r6, pc}

080032f4 <__smakebuf_r>:
 80032f4:	898b      	ldrh	r3, [r1, #12]
 80032f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032f8:	079d      	lsls	r5, r3, #30
 80032fa:	4606      	mov	r6, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	d507      	bpl.n	8003310 <__smakebuf_r+0x1c>
 8003300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	6123      	str	r3, [r4, #16]
 8003308:	2301      	movs	r3, #1
 800330a:	6163      	str	r3, [r4, #20]
 800330c:	b002      	add	sp, #8
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	ab01      	add	r3, sp, #4
 8003312:	466a      	mov	r2, sp
 8003314:	f7ff ffca 	bl	80032ac <__swhatbuf_r>
 8003318:	9900      	ldr	r1, [sp, #0]
 800331a:	4605      	mov	r5, r0
 800331c:	4630      	mov	r0, r6
 800331e:	f000 f879 	bl	8003414 <_malloc_r>
 8003322:	b948      	cbnz	r0, 8003338 <__smakebuf_r+0x44>
 8003324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003328:	059a      	lsls	r2, r3, #22
 800332a:	d4ef      	bmi.n	800330c <__smakebuf_r+0x18>
 800332c:	f023 0303 	bic.w	r3, r3, #3
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	81a3      	strh	r3, [r4, #12]
 8003336:	e7e3      	b.n	8003300 <__smakebuf_r+0xc>
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <__smakebuf_r+0x7c>)
 800333a:	62b3      	str	r3, [r6, #40]	; 0x28
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	6020      	str	r0, [r4, #0]
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	81a3      	strh	r3, [r4, #12]
 8003346:	9b00      	ldr	r3, [sp, #0]
 8003348:	6163      	str	r3, [r4, #20]
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	6120      	str	r0, [r4, #16]
 800334e:	b15b      	cbz	r3, 8003368 <__smakebuf_r+0x74>
 8003350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003354:	4630      	mov	r0, r6
 8003356:	f000 fc2d 	bl	8003bb4 <_isatty_r>
 800335a:	b128      	cbz	r0, 8003368 <__smakebuf_r+0x74>
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	81a3      	strh	r3, [r4, #12]
 8003368:	89a0      	ldrh	r0, [r4, #12]
 800336a:	4305      	orrs	r5, r0
 800336c:	81a5      	strh	r5, [r4, #12]
 800336e:	e7cd      	b.n	800330c <__smakebuf_r+0x18>
 8003370:	08003105 	.word	0x08003105

08003374 <_free_r>:
 8003374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003376:	2900      	cmp	r1, #0
 8003378:	d048      	beq.n	800340c <_free_r+0x98>
 800337a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337e:	9001      	str	r0, [sp, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f1a1 0404 	sub.w	r4, r1, #4
 8003386:	bfb8      	it	lt
 8003388:	18e4      	addlt	r4, r4, r3
 800338a:	f000 fc35 	bl	8003bf8 <__malloc_lock>
 800338e:	4a20      	ldr	r2, [pc, #128]	; (8003410 <_free_r+0x9c>)
 8003390:	9801      	ldr	r0, [sp, #4]
 8003392:	6813      	ldr	r3, [r2, #0]
 8003394:	4615      	mov	r5, r2
 8003396:	b933      	cbnz	r3, 80033a6 <_free_r+0x32>
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	6014      	str	r4, [r2, #0]
 800339c:	b003      	add	sp, #12
 800339e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a2:	f000 bc2f 	b.w	8003c04 <__malloc_unlock>
 80033a6:	42a3      	cmp	r3, r4
 80033a8:	d90b      	bls.n	80033c2 <_free_r+0x4e>
 80033aa:	6821      	ldr	r1, [r4, #0]
 80033ac:	1862      	adds	r2, r4, r1
 80033ae:	4293      	cmp	r3, r2
 80033b0:	bf04      	itt	eq
 80033b2:	681a      	ldreq	r2, [r3, #0]
 80033b4:	685b      	ldreq	r3, [r3, #4]
 80033b6:	6063      	str	r3, [r4, #4]
 80033b8:	bf04      	itt	eq
 80033ba:	1852      	addeq	r2, r2, r1
 80033bc:	6022      	streq	r2, [r4, #0]
 80033be:	602c      	str	r4, [r5, #0]
 80033c0:	e7ec      	b.n	800339c <_free_r+0x28>
 80033c2:	461a      	mov	r2, r3
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	b10b      	cbz	r3, 80033cc <_free_r+0x58>
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	d9fa      	bls.n	80033c2 <_free_r+0x4e>
 80033cc:	6811      	ldr	r1, [r2, #0]
 80033ce:	1855      	adds	r5, r2, r1
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d10b      	bne.n	80033ec <_free_r+0x78>
 80033d4:	6824      	ldr	r4, [r4, #0]
 80033d6:	4421      	add	r1, r4
 80033d8:	1854      	adds	r4, r2, r1
 80033da:	42a3      	cmp	r3, r4
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	d1dd      	bne.n	800339c <_free_r+0x28>
 80033e0:	681c      	ldr	r4, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	6053      	str	r3, [r2, #4]
 80033e6:	4421      	add	r1, r4
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	e7d7      	b.n	800339c <_free_r+0x28>
 80033ec:	d902      	bls.n	80033f4 <_free_r+0x80>
 80033ee:	230c      	movs	r3, #12
 80033f0:	6003      	str	r3, [r0, #0]
 80033f2:	e7d3      	b.n	800339c <_free_r+0x28>
 80033f4:	6825      	ldr	r5, [r4, #0]
 80033f6:	1961      	adds	r1, r4, r5
 80033f8:	428b      	cmp	r3, r1
 80033fa:	bf04      	itt	eq
 80033fc:	6819      	ldreq	r1, [r3, #0]
 80033fe:	685b      	ldreq	r3, [r3, #4]
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	bf04      	itt	eq
 8003404:	1949      	addeq	r1, r1, r5
 8003406:	6021      	streq	r1, [r4, #0]
 8003408:	6054      	str	r4, [r2, #4]
 800340a:	e7c7      	b.n	800339c <_free_r+0x28>
 800340c:	b003      	add	sp, #12
 800340e:	bd30      	pop	{r4, r5, pc}
 8003410:	20000090 	.word	0x20000090

08003414 <_malloc_r>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	1ccd      	adds	r5, r1, #3
 8003418:	f025 0503 	bic.w	r5, r5, #3
 800341c:	3508      	adds	r5, #8
 800341e:	2d0c      	cmp	r5, #12
 8003420:	bf38      	it	cc
 8003422:	250c      	movcc	r5, #12
 8003424:	2d00      	cmp	r5, #0
 8003426:	4606      	mov	r6, r0
 8003428:	db01      	blt.n	800342e <_malloc_r+0x1a>
 800342a:	42a9      	cmp	r1, r5
 800342c:	d903      	bls.n	8003436 <_malloc_r+0x22>
 800342e:	230c      	movs	r3, #12
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	2000      	movs	r0, #0
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003436:	f000 fbdf 	bl	8003bf8 <__malloc_lock>
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <_malloc_r+0xac>)
 800343c:	680a      	ldr	r2, [r1, #0]
 800343e:	4614      	mov	r4, r2
 8003440:	b99c      	cbnz	r4, 800346a <_malloc_r+0x56>
 8003442:	4f20      	ldr	r7, [pc, #128]	; (80034c4 <_malloc_r+0xb0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b923      	cbnz	r3, 8003452 <_malloc_r+0x3e>
 8003448:	4621      	mov	r1, r4
 800344a:	4630      	mov	r0, r6
 800344c:	f000 fb2a 	bl	8003aa4 <_sbrk_r>
 8003450:	6038      	str	r0, [r7, #0]
 8003452:	4629      	mov	r1, r5
 8003454:	4630      	mov	r0, r6
 8003456:	f000 fb25 	bl	8003aa4 <_sbrk_r>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d123      	bne.n	80034a6 <_malloc_r+0x92>
 800345e:	230c      	movs	r3, #12
 8003460:	6033      	str	r3, [r6, #0]
 8003462:	4630      	mov	r0, r6
 8003464:	f000 fbce 	bl	8003c04 <__malloc_unlock>
 8003468:	e7e3      	b.n	8003432 <_malloc_r+0x1e>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	1b5b      	subs	r3, r3, r5
 800346e:	d417      	bmi.n	80034a0 <_malloc_r+0x8c>
 8003470:	2b0b      	cmp	r3, #11
 8003472:	d903      	bls.n	800347c <_malloc_r+0x68>
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	441c      	add	r4, r3
 8003478:	6025      	str	r5, [r4, #0]
 800347a:	e004      	b.n	8003486 <_malloc_r+0x72>
 800347c:	6863      	ldr	r3, [r4, #4]
 800347e:	42a2      	cmp	r2, r4
 8003480:	bf0c      	ite	eq
 8003482:	600b      	streq	r3, [r1, #0]
 8003484:	6053      	strne	r3, [r2, #4]
 8003486:	4630      	mov	r0, r6
 8003488:	f000 fbbc 	bl	8003c04 <__malloc_unlock>
 800348c:	f104 000b 	add.w	r0, r4, #11
 8003490:	1d23      	adds	r3, r4, #4
 8003492:	f020 0007 	bic.w	r0, r0, #7
 8003496:	1ac2      	subs	r2, r0, r3
 8003498:	d0cc      	beq.n	8003434 <_malloc_r+0x20>
 800349a:	1a1b      	subs	r3, r3, r0
 800349c:	50a3      	str	r3, [r4, r2]
 800349e:	e7c9      	b.n	8003434 <_malloc_r+0x20>
 80034a0:	4622      	mov	r2, r4
 80034a2:	6864      	ldr	r4, [r4, #4]
 80034a4:	e7cc      	b.n	8003440 <_malloc_r+0x2c>
 80034a6:	1cc4      	adds	r4, r0, #3
 80034a8:	f024 0403 	bic.w	r4, r4, #3
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d0e3      	beq.n	8003478 <_malloc_r+0x64>
 80034b0:	1a21      	subs	r1, r4, r0
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 faf6 	bl	8003aa4 <_sbrk_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d1dd      	bne.n	8003478 <_malloc_r+0x64>
 80034bc:	e7cf      	b.n	800345e <_malloc_r+0x4a>
 80034be:	bf00      	nop
 80034c0:	20000090 	.word	0x20000090
 80034c4:	20000094 	.word	0x20000094

080034c8 <__sfputc_r>:
 80034c8:	6893      	ldr	r3, [r2, #8]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	b410      	push	{r4}
 80034d0:	6093      	str	r3, [r2, #8]
 80034d2:	da08      	bge.n	80034e6 <__sfputc_r+0x1e>
 80034d4:	6994      	ldr	r4, [r2, #24]
 80034d6:	42a3      	cmp	r3, r4
 80034d8:	db01      	blt.n	80034de <__sfputc_r+0x16>
 80034da:	290a      	cmp	r1, #10
 80034dc:	d103      	bne.n	80034e6 <__sfputc_r+0x1e>
 80034de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e2:	f7ff bc69 	b.w	8002db8 <__swbuf_r>
 80034e6:	6813      	ldr	r3, [r2, #0]
 80034e8:	1c58      	adds	r0, r3, #1
 80034ea:	6010      	str	r0, [r2, #0]
 80034ec:	7019      	strb	r1, [r3, #0]
 80034ee:	4608      	mov	r0, r1
 80034f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <__sfputs_r>:
 80034f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f8:	4606      	mov	r6, r0
 80034fa:	460f      	mov	r7, r1
 80034fc:	4614      	mov	r4, r2
 80034fe:	18d5      	adds	r5, r2, r3
 8003500:	42ac      	cmp	r4, r5
 8003502:	d101      	bne.n	8003508 <__sfputs_r+0x12>
 8003504:	2000      	movs	r0, #0
 8003506:	e007      	b.n	8003518 <__sfputs_r+0x22>
 8003508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350c:	463a      	mov	r2, r7
 800350e:	4630      	mov	r0, r6
 8003510:	f7ff ffda 	bl	80034c8 <__sfputc_r>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d1f3      	bne.n	8003500 <__sfputs_r+0xa>
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800351c <_vfiprintf_r>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	460d      	mov	r5, r1
 8003522:	b09d      	sub	sp, #116	; 0x74
 8003524:	4614      	mov	r4, r2
 8003526:	4698      	mov	r8, r3
 8003528:	4606      	mov	r6, r0
 800352a:	b118      	cbz	r0, 8003534 <_vfiprintf_r+0x18>
 800352c:	6983      	ldr	r3, [r0, #24]
 800352e:	b90b      	cbnz	r3, 8003534 <_vfiprintf_r+0x18>
 8003530:	f7ff fe1c 	bl	800316c <__sinit>
 8003534:	4b89      	ldr	r3, [pc, #548]	; (800375c <_vfiprintf_r+0x240>)
 8003536:	429d      	cmp	r5, r3
 8003538:	d11b      	bne.n	8003572 <_vfiprintf_r+0x56>
 800353a:	6875      	ldr	r5, [r6, #4]
 800353c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800353e:	07d9      	lsls	r1, r3, #31
 8003540:	d405      	bmi.n	800354e <_vfiprintf_r+0x32>
 8003542:	89ab      	ldrh	r3, [r5, #12]
 8003544:	059a      	lsls	r2, r3, #22
 8003546:	d402      	bmi.n	800354e <_vfiprintf_r+0x32>
 8003548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800354a:	f7ff fead 	bl	80032a8 <__retarget_lock_acquire_recursive>
 800354e:	89ab      	ldrh	r3, [r5, #12]
 8003550:	071b      	lsls	r3, r3, #28
 8003552:	d501      	bpl.n	8003558 <_vfiprintf_r+0x3c>
 8003554:	692b      	ldr	r3, [r5, #16]
 8003556:	b9eb      	cbnz	r3, 8003594 <_vfiprintf_r+0x78>
 8003558:	4629      	mov	r1, r5
 800355a:	4630      	mov	r0, r6
 800355c:	f7ff fc7e 	bl	8002e5c <__swsetup_r>
 8003560:	b1c0      	cbz	r0, 8003594 <_vfiprintf_r+0x78>
 8003562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003564:	07dc      	lsls	r4, r3, #31
 8003566:	d50e      	bpl.n	8003586 <_vfiprintf_r+0x6a>
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	b01d      	add	sp, #116	; 0x74
 800356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003572:	4b7b      	ldr	r3, [pc, #492]	; (8003760 <_vfiprintf_r+0x244>)
 8003574:	429d      	cmp	r5, r3
 8003576:	d101      	bne.n	800357c <_vfiprintf_r+0x60>
 8003578:	68b5      	ldr	r5, [r6, #8]
 800357a:	e7df      	b.n	800353c <_vfiprintf_r+0x20>
 800357c:	4b79      	ldr	r3, [pc, #484]	; (8003764 <_vfiprintf_r+0x248>)
 800357e:	429d      	cmp	r5, r3
 8003580:	bf08      	it	eq
 8003582:	68f5      	ldreq	r5, [r6, #12]
 8003584:	e7da      	b.n	800353c <_vfiprintf_r+0x20>
 8003586:	89ab      	ldrh	r3, [r5, #12]
 8003588:	0598      	lsls	r0, r3, #22
 800358a:	d4ed      	bmi.n	8003568 <_vfiprintf_r+0x4c>
 800358c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800358e:	f7ff fe8c 	bl	80032aa <__retarget_lock_release_recursive>
 8003592:	e7e9      	b.n	8003568 <_vfiprintf_r+0x4c>
 8003594:	2300      	movs	r3, #0
 8003596:	9309      	str	r3, [sp, #36]	; 0x24
 8003598:	2320      	movs	r3, #32
 800359a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800359e:	f8cd 800c 	str.w	r8, [sp, #12]
 80035a2:	2330      	movs	r3, #48	; 0x30
 80035a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003768 <_vfiprintf_r+0x24c>
 80035a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035ac:	f04f 0901 	mov.w	r9, #1
 80035b0:	4623      	mov	r3, r4
 80035b2:	469a      	mov	sl, r3
 80035b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035b8:	b10a      	cbz	r2, 80035be <_vfiprintf_r+0xa2>
 80035ba:	2a25      	cmp	r2, #37	; 0x25
 80035bc:	d1f9      	bne.n	80035b2 <_vfiprintf_r+0x96>
 80035be:	ebba 0b04 	subs.w	fp, sl, r4
 80035c2:	d00b      	beq.n	80035dc <_vfiprintf_r+0xc0>
 80035c4:	465b      	mov	r3, fp
 80035c6:	4622      	mov	r2, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	4630      	mov	r0, r6
 80035cc:	f7ff ff93 	bl	80034f6 <__sfputs_r>
 80035d0:	3001      	adds	r0, #1
 80035d2:	f000 80aa 	beq.w	800372a <_vfiprintf_r+0x20e>
 80035d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035d8:	445a      	add	r2, fp
 80035da:	9209      	str	r2, [sp, #36]	; 0x24
 80035dc:	f89a 3000 	ldrb.w	r3, [sl]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a2 	beq.w	800372a <_vfiprintf_r+0x20e>
 80035e6:	2300      	movs	r3, #0
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035f0:	f10a 0a01 	add.w	sl, sl, #1
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	9307      	str	r3, [sp, #28]
 80035f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035fc:	931a      	str	r3, [sp, #104]	; 0x68
 80035fe:	4654      	mov	r4, sl
 8003600:	2205      	movs	r2, #5
 8003602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003606:	4858      	ldr	r0, [pc, #352]	; (8003768 <_vfiprintf_r+0x24c>)
 8003608:	f7fc fe1a 	bl	8000240 <memchr>
 800360c:	9a04      	ldr	r2, [sp, #16]
 800360e:	b9d8      	cbnz	r0, 8003648 <_vfiprintf_r+0x12c>
 8003610:	06d1      	lsls	r1, r2, #27
 8003612:	bf44      	itt	mi
 8003614:	2320      	movmi	r3, #32
 8003616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800361a:	0713      	lsls	r3, r2, #28
 800361c:	bf44      	itt	mi
 800361e:	232b      	movmi	r3, #43	; 0x2b
 8003620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003624:	f89a 3000 	ldrb.w	r3, [sl]
 8003628:	2b2a      	cmp	r3, #42	; 0x2a
 800362a:	d015      	beq.n	8003658 <_vfiprintf_r+0x13c>
 800362c:	9a07      	ldr	r2, [sp, #28]
 800362e:	4654      	mov	r4, sl
 8003630:	2000      	movs	r0, #0
 8003632:	f04f 0c0a 	mov.w	ip, #10
 8003636:	4621      	mov	r1, r4
 8003638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800363c:	3b30      	subs	r3, #48	; 0x30
 800363e:	2b09      	cmp	r3, #9
 8003640:	d94e      	bls.n	80036e0 <_vfiprintf_r+0x1c4>
 8003642:	b1b0      	cbz	r0, 8003672 <_vfiprintf_r+0x156>
 8003644:	9207      	str	r2, [sp, #28]
 8003646:	e014      	b.n	8003672 <_vfiprintf_r+0x156>
 8003648:	eba0 0308 	sub.w	r3, r0, r8
 800364c:	fa09 f303 	lsl.w	r3, r9, r3
 8003650:	4313      	orrs	r3, r2
 8003652:	9304      	str	r3, [sp, #16]
 8003654:	46a2      	mov	sl, r4
 8003656:	e7d2      	b.n	80035fe <_vfiprintf_r+0xe2>
 8003658:	9b03      	ldr	r3, [sp, #12]
 800365a:	1d19      	adds	r1, r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	9103      	str	r1, [sp, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	bfbb      	ittet	lt
 8003664:	425b      	neglt	r3, r3
 8003666:	f042 0202 	orrlt.w	r2, r2, #2
 800366a:	9307      	strge	r3, [sp, #28]
 800366c:	9307      	strlt	r3, [sp, #28]
 800366e:	bfb8      	it	lt
 8003670:	9204      	strlt	r2, [sp, #16]
 8003672:	7823      	ldrb	r3, [r4, #0]
 8003674:	2b2e      	cmp	r3, #46	; 0x2e
 8003676:	d10c      	bne.n	8003692 <_vfiprintf_r+0x176>
 8003678:	7863      	ldrb	r3, [r4, #1]
 800367a:	2b2a      	cmp	r3, #42	; 0x2a
 800367c:	d135      	bne.n	80036ea <_vfiprintf_r+0x1ce>
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	9203      	str	r2, [sp, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	bfb8      	it	lt
 800368a:	f04f 33ff 	movlt.w	r3, #4294967295
 800368e:	3402      	adds	r4, #2
 8003690:	9305      	str	r3, [sp, #20]
 8003692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003778 <_vfiprintf_r+0x25c>
 8003696:	7821      	ldrb	r1, [r4, #0]
 8003698:	2203      	movs	r2, #3
 800369a:	4650      	mov	r0, sl
 800369c:	f7fc fdd0 	bl	8000240 <memchr>
 80036a0:	b140      	cbz	r0, 80036b4 <_vfiprintf_r+0x198>
 80036a2:	2340      	movs	r3, #64	; 0x40
 80036a4:	eba0 000a 	sub.w	r0, r0, sl
 80036a8:	fa03 f000 	lsl.w	r0, r3, r0
 80036ac:	9b04      	ldr	r3, [sp, #16]
 80036ae:	4303      	orrs	r3, r0
 80036b0:	3401      	adds	r4, #1
 80036b2:	9304      	str	r3, [sp, #16]
 80036b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b8:	482c      	ldr	r0, [pc, #176]	; (800376c <_vfiprintf_r+0x250>)
 80036ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036be:	2206      	movs	r2, #6
 80036c0:	f7fc fdbe 	bl	8000240 <memchr>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d03f      	beq.n	8003748 <_vfiprintf_r+0x22c>
 80036c8:	4b29      	ldr	r3, [pc, #164]	; (8003770 <_vfiprintf_r+0x254>)
 80036ca:	bb1b      	cbnz	r3, 8003714 <_vfiprintf_r+0x1f8>
 80036cc:	9b03      	ldr	r3, [sp, #12]
 80036ce:	3307      	adds	r3, #7
 80036d0:	f023 0307 	bic.w	r3, r3, #7
 80036d4:	3308      	adds	r3, #8
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036da:	443b      	add	r3, r7
 80036dc:	9309      	str	r3, [sp, #36]	; 0x24
 80036de:	e767      	b.n	80035b0 <_vfiprintf_r+0x94>
 80036e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80036e4:	460c      	mov	r4, r1
 80036e6:	2001      	movs	r0, #1
 80036e8:	e7a5      	b.n	8003636 <_vfiprintf_r+0x11a>
 80036ea:	2300      	movs	r3, #0
 80036ec:	3401      	adds	r4, #1
 80036ee:	9305      	str	r3, [sp, #20]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f04f 0c0a 	mov.w	ip, #10
 80036f6:	4620      	mov	r0, r4
 80036f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036fc:	3a30      	subs	r2, #48	; 0x30
 80036fe:	2a09      	cmp	r2, #9
 8003700:	d903      	bls.n	800370a <_vfiprintf_r+0x1ee>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0c5      	beq.n	8003692 <_vfiprintf_r+0x176>
 8003706:	9105      	str	r1, [sp, #20]
 8003708:	e7c3      	b.n	8003692 <_vfiprintf_r+0x176>
 800370a:	fb0c 2101 	mla	r1, ip, r1, r2
 800370e:	4604      	mov	r4, r0
 8003710:	2301      	movs	r3, #1
 8003712:	e7f0      	b.n	80036f6 <_vfiprintf_r+0x1da>
 8003714:	ab03      	add	r3, sp, #12
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	462a      	mov	r2, r5
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <_vfiprintf_r+0x258>)
 800371c:	a904      	add	r1, sp, #16
 800371e:	4630      	mov	r0, r6
 8003720:	f3af 8000 	nop.w
 8003724:	4607      	mov	r7, r0
 8003726:	1c78      	adds	r0, r7, #1
 8003728:	d1d6      	bne.n	80036d8 <_vfiprintf_r+0x1bc>
 800372a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800372c:	07d9      	lsls	r1, r3, #31
 800372e:	d405      	bmi.n	800373c <_vfiprintf_r+0x220>
 8003730:	89ab      	ldrh	r3, [r5, #12]
 8003732:	059a      	lsls	r2, r3, #22
 8003734:	d402      	bmi.n	800373c <_vfiprintf_r+0x220>
 8003736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003738:	f7ff fdb7 	bl	80032aa <__retarget_lock_release_recursive>
 800373c:	89ab      	ldrh	r3, [r5, #12]
 800373e:	065b      	lsls	r3, r3, #25
 8003740:	f53f af12 	bmi.w	8003568 <_vfiprintf_r+0x4c>
 8003744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003746:	e711      	b.n	800356c <_vfiprintf_r+0x50>
 8003748:	ab03      	add	r3, sp, #12
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	462a      	mov	r2, r5
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <_vfiprintf_r+0x258>)
 8003750:	a904      	add	r1, sp, #16
 8003752:	4630      	mov	r0, r6
 8003754:	f000 f880 	bl	8003858 <_printf_i>
 8003758:	e7e4      	b.n	8003724 <_vfiprintf_r+0x208>
 800375a:	bf00      	nop
 800375c:	08003cc0 	.word	0x08003cc0
 8003760:	08003ce0 	.word	0x08003ce0
 8003764:	08003ca0 	.word	0x08003ca0
 8003768:	08003d00 	.word	0x08003d00
 800376c:	08003d0a 	.word	0x08003d0a
 8003770:	00000000 	.word	0x00000000
 8003774:	080034f7 	.word	0x080034f7
 8003778:	08003d06 	.word	0x08003d06

0800377c <_printf_common>:
 800377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003780:	4616      	mov	r6, r2
 8003782:	4699      	mov	r9, r3
 8003784:	688a      	ldr	r2, [r1, #8]
 8003786:	690b      	ldr	r3, [r1, #16]
 8003788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800378c:	4293      	cmp	r3, r2
 800378e:	bfb8      	it	lt
 8003790:	4613      	movlt	r3, r2
 8003792:	6033      	str	r3, [r6, #0]
 8003794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003798:	4607      	mov	r7, r0
 800379a:	460c      	mov	r4, r1
 800379c:	b10a      	cbz	r2, 80037a2 <_printf_common+0x26>
 800379e:	3301      	adds	r3, #1
 80037a0:	6033      	str	r3, [r6, #0]
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	0699      	lsls	r1, r3, #26
 80037a6:	bf42      	ittt	mi
 80037a8:	6833      	ldrmi	r3, [r6, #0]
 80037aa:	3302      	addmi	r3, #2
 80037ac:	6033      	strmi	r3, [r6, #0]
 80037ae:	6825      	ldr	r5, [r4, #0]
 80037b0:	f015 0506 	ands.w	r5, r5, #6
 80037b4:	d106      	bne.n	80037c4 <_printf_common+0x48>
 80037b6:	f104 0a19 	add.w	sl, r4, #25
 80037ba:	68e3      	ldr	r3, [r4, #12]
 80037bc:	6832      	ldr	r2, [r6, #0]
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	42ab      	cmp	r3, r5
 80037c2:	dc26      	bgt.n	8003812 <_printf_common+0x96>
 80037c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037c8:	1e13      	subs	r3, r2, #0
 80037ca:	6822      	ldr	r2, [r4, #0]
 80037cc:	bf18      	it	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	0692      	lsls	r2, r2, #26
 80037d2:	d42b      	bmi.n	800382c <_printf_common+0xb0>
 80037d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d8:	4649      	mov	r1, r9
 80037da:	4638      	mov	r0, r7
 80037dc:	47c0      	blx	r8
 80037de:	3001      	adds	r0, #1
 80037e0:	d01e      	beq.n	8003820 <_printf_common+0xa4>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	68e5      	ldr	r5, [r4, #12]
 80037e6:	6832      	ldr	r2, [r6, #0]
 80037e8:	f003 0306 	and.w	r3, r3, #6
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	bf08      	it	eq
 80037f0:	1aad      	subeq	r5, r5, r2
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	6922      	ldr	r2, [r4, #16]
 80037f6:	bf0c      	ite	eq
 80037f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037fc:	2500      	movne	r5, #0
 80037fe:	4293      	cmp	r3, r2
 8003800:	bfc4      	itt	gt
 8003802:	1a9b      	subgt	r3, r3, r2
 8003804:	18ed      	addgt	r5, r5, r3
 8003806:	2600      	movs	r6, #0
 8003808:	341a      	adds	r4, #26
 800380a:	42b5      	cmp	r5, r6
 800380c:	d11a      	bne.n	8003844 <_printf_common+0xc8>
 800380e:	2000      	movs	r0, #0
 8003810:	e008      	b.n	8003824 <_printf_common+0xa8>
 8003812:	2301      	movs	r3, #1
 8003814:	4652      	mov	r2, sl
 8003816:	4649      	mov	r1, r9
 8003818:	4638      	mov	r0, r7
 800381a:	47c0      	blx	r8
 800381c:	3001      	adds	r0, #1
 800381e:	d103      	bne.n	8003828 <_printf_common+0xac>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	3501      	adds	r5, #1
 800382a:	e7c6      	b.n	80037ba <_printf_common+0x3e>
 800382c:	18e1      	adds	r1, r4, r3
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	2030      	movs	r0, #48	; 0x30
 8003832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003836:	4422      	add	r2, r4
 8003838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800383c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003840:	3302      	adds	r3, #2
 8003842:	e7c7      	b.n	80037d4 <_printf_common+0x58>
 8003844:	2301      	movs	r3, #1
 8003846:	4622      	mov	r2, r4
 8003848:	4649      	mov	r1, r9
 800384a:	4638      	mov	r0, r7
 800384c:	47c0      	blx	r8
 800384e:	3001      	adds	r0, #1
 8003850:	d0e6      	beq.n	8003820 <_printf_common+0xa4>
 8003852:	3601      	adds	r6, #1
 8003854:	e7d9      	b.n	800380a <_printf_common+0x8e>
	...

08003858 <_printf_i>:
 8003858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	460c      	mov	r4, r1
 800385e:	4691      	mov	r9, r2
 8003860:	7e27      	ldrb	r7, [r4, #24]
 8003862:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003864:	2f78      	cmp	r7, #120	; 0x78
 8003866:	4680      	mov	r8, r0
 8003868:	469a      	mov	sl, r3
 800386a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800386e:	d807      	bhi.n	8003880 <_printf_i+0x28>
 8003870:	2f62      	cmp	r7, #98	; 0x62
 8003872:	d80a      	bhi.n	800388a <_printf_i+0x32>
 8003874:	2f00      	cmp	r7, #0
 8003876:	f000 80d8 	beq.w	8003a2a <_printf_i+0x1d2>
 800387a:	2f58      	cmp	r7, #88	; 0x58
 800387c:	f000 80a3 	beq.w	80039c6 <_printf_i+0x16e>
 8003880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003888:	e03a      	b.n	8003900 <_printf_i+0xa8>
 800388a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800388e:	2b15      	cmp	r3, #21
 8003890:	d8f6      	bhi.n	8003880 <_printf_i+0x28>
 8003892:	a001      	add	r0, pc, #4	; (adr r0, 8003898 <_printf_i+0x40>)
 8003894:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003898:	080038f1 	.word	0x080038f1
 800389c:	08003905 	.word	0x08003905
 80038a0:	08003881 	.word	0x08003881
 80038a4:	08003881 	.word	0x08003881
 80038a8:	08003881 	.word	0x08003881
 80038ac:	08003881 	.word	0x08003881
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003881 	.word	0x08003881
 80038b8:	08003881 	.word	0x08003881
 80038bc:	08003881 	.word	0x08003881
 80038c0:	08003881 	.word	0x08003881
 80038c4:	08003a11 	.word	0x08003a11
 80038c8:	08003935 	.word	0x08003935
 80038cc:	080039f3 	.word	0x080039f3
 80038d0:	08003881 	.word	0x08003881
 80038d4:	08003881 	.word	0x08003881
 80038d8:	08003a33 	.word	0x08003a33
 80038dc:	08003881 	.word	0x08003881
 80038e0:	08003935 	.word	0x08003935
 80038e4:	08003881 	.word	0x08003881
 80038e8:	08003881 	.word	0x08003881
 80038ec:	080039fb 	.word	0x080039fb
 80038f0:	680b      	ldr	r3, [r1, #0]
 80038f2:	1d1a      	adds	r2, r3, #4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	600a      	str	r2, [r1, #0]
 80038f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003900:	2301      	movs	r3, #1
 8003902:	e0a3      	b.n	8003a4c <_printf_i+0x1f4>
 8003904:	6825      	ldr	r5, [r4, #0]
 8003906:	6808      	ldr	r0, [r1, #0]
 8003908:	062e      	lsls	r6, r5, #24
 800390a:	f100 0304 	add.w	r3, r0, #4
 800390e:	d50a      	bpl.n	8003926 <_printf_i+0xce>
 8003910:	6805      	ldr	r5, [r0, #0]
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	2d00      	cmp	r5, #0
 8003916:	da03      	bge.n	8003920 <_printf_i+0xc8>
 8003918:	232d      	movs	r3, #45	; 0x2d
 800391a:	426d      	negs	r5, r5
 800391c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003920:	485e      	ldr	r0, [pc, #376]	; (8003a9c <_printf_i+0x244>)
 8003922:	230a      	movs	r3, #10
 8003924:	e019      	b.n	800395a <_printf_i+0x102>
 8003926:	f015 0f40 	tst.w	r5, #64	; 0x40
 800392a:	6805      	ldr	r5, [r0, #0]
 800392c:	600b      	str	r3, [r1, #0]
 800392e:	bf18      	it	ne
 8003930:	b22d      	sxthne	r5, r5
 8003932:	e7ef      	b.n	8003914 <_printf_i+0xbc>
 8003934:	680b      	ldr	r3, [r1, #0]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	1d18      	adds	r0, r3, #4
 800393a:	6008      	str	r0, [r1, #0]
 800393c:	0628      	lsls	r0, r5, #24
 800393e:	d501      	bpl.n	8003944 <_printf_i+0xec>
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	e002      	b.n	800394a <_printf_i+0xf2>
 8003944:	0669      	lsls	r1, r5, #25
 8003946:	d5fb      	bpl.n	8003940 <_printf_i+0xe8>
 8003948:	881d      	ldrh	r5, [r3, #0]
 800394a:	4854      	ldr	r0, [pc, #336]	; (8003a9c <_printf_i+0x244>)
 800394c:	2f6f      	cmp	r7, #111	; 0x6f
 800394e:	bf0c      	ite	eq
 8003950:	2308      	moveq	r3, #8
 8003952:	230a      	movne	r3, #10
 8003954:	2100      	movs	r1, #0
 8003956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800395a:	6866      	ldr	r6, [r4, #4]
 800395c:	60a6      	str	r6, [r4, #8]
 800395e:	2e00      	cmp	r6, #0
 8003960:	bfa2      	ittt	ge
 8003962:	6821      	ldrge	r1, [r4, #0]
 8003964:	f021 0104 	bicge.w	r1, r1, #4
 8003968:	6021      	strge	r1, [r4, #0]
 800396a:	b90d      	cbnz	r5, 8003970 <_printf_i+0x118>
 800396c:	2e00      	cmp	r6, #0
 800396e:	d04d      	beq.n	8003a0c <_printf_i+0x1b4>
 8003970:	4616      	mov	r6, r2
 8003972:	fbb5 f1f3 	udiv	r1, r5, r3
 8003976:	fb03 5711 	mls	r7, r3, r1, r5
 800397a:	5dc7      	ldrb	r7, [r0, r7]
 800397c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003980:	462f      	mov	r7, r5
 8003982:	42bb      	cmp	r3, r7
 8003984:	460d      	mov	r5, r1
 8003986:	d9f4      	bls.n	8003972 <_printf_i+0x11a>
 8003988:	2b08      	cmp	r3, #8
 800398a:	d10b      	bne.n	80039a4 <_printf_i+0x14c>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	07df      	lsls	r7, r3, #31
 8003990:	d508      	bpl.n	80039a4 <_printf_i+0x14c>
 8003992:	6923      	ldr	r3, [r4, #16]
 8003994:	6861      	ldr	r1, [r4, #4]
 8003996:	4299      	cmp	r1, r3
 8003998:	bfde      	ittt	le
 800399a:	2330      	movle	r3, #48	; 0x30
 800399c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039a4:	1b92      	subs	r2, r2, r6
 80039a6:	6122      	str	r2, [r4, #16]
 80039a8:	f8cd a000 	str.w	sl, [sp]
 80039ac:	464b      	mov	r3, r9
 80039ae:	aa03      	add	r2, sp, #12
 80039b0:	4621      	mov	r1, r4
 80039b2:	4640      	mov	r0, r8
 80039b4:	f7ff fee2 	bl	800377c <_printf_common>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d14c      	bne.n	8003a56 <_printf_i+0x1fe>
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	b004      	add	sp, #16
 80039c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c6:	4835      	ldr	r0, [pc, #212]	; (8003a9c <_printf_i+0x244>)
 80039c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	680e      	ldr	r6, [r1, #0]
 80039d0:	061f      	lsls	r7, r3, #24
 80039d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80039d6:	600e      	str	r6, [r1, #0]
 80039d8:	d514      	bpl.n	8003a04 <_printf_i+0x1ac>
 80039da:	07d9      	lsls	r1, r3, #31
 80039dc:	bf44      	itt	mi
 80039de:	f043 0320 	orrmi.w	r3, r3, #32
 80039e2:	6023      	strmi	r3, [r4, #0]
 80039e4:	b91d      	cbnz	r5, 80039ee <_printf_i+0x196>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	f023 0320 	bic.w	r3, r3, #32
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	2310      	movs	r3, #16
 80039f0:	e7b0      	b.n	8003954 <_printf_i+0xfc>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	f043 0320 	orr.w	r3, r3, #32
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	2378      	movs	r3, #120	; 0x78
 80039fc:	4828      	ldr	r0, [pc, #160]	; (8003aa0 <_printf_i+0x248>)
 80039fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a02:	e7e3      	b.n	80039cc <_printf_i+0x174>
 8003a04:	065e      	lsls	r6, r3, #25
 8003a06:	bf48      	it	mi
 8003a08:	b2ad      	uxthmi	r5, r5
 8003a0a:	e7e6      	b.n	80039da <_printf_i+0x182>
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	e7bb      	b.n	8003988 <_printf_i+0x130>
 8003a10:	680b      	ldr	r3, [r1, #0]
 8003a12:	6826      	ldr	r6, [r4, #0]
 8003a14:	6960      	ldr	r0, [r4, #20]
 8003a16:	1d1d      	adds	r5, r3, #4
 8003a18:	600d      	str	r5, [r1, #0]
 8003a1a:	0635      	lsls	r5, r6, #24
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	d501      	bpl.n	8003a24 <_printf_i+0x1cc>
 8003a20:	6018      	str	r0, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <_printf_i+0x1d2>
 8003a24:	0671      	lsls	r1, r6, #25
 8003a26:	d5fb      	bpl.n	8003a20 <_printf_i+0x1c8>
 8003a28:	8018      	strh	r0, [r3, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	4616      	mov	r6, r2
 8003a30:	e7ba      	b.n	80039a8 <_printf_i+0x150>
 8003a32:	680b      	ldr	r3, [r1, #0]
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	600a      	str	r2, [r1, #0]
 8003a38:	681e      	ldr	r6, [r3, #0]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7fc fbfe 	bl	8000240 <memchr>
 8003a44:	b108      	cbz	r0, 8003a4a <_printf_i+0x1f2>
 8003a46:	1b80      	subs	r0, r0, r6
 8003a48:	6060      	str	r0, [r4, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a54:	e7a8      	b.n	80039a8 <_printf_i+0x150>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	4632      	mov	r2, r6
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	47d0      	blx	sl
 8003a60:	3001      	adds	r0, #1
 8003a62:	d0ab      	beq.n	80039bc <_printf_i+0x164>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	079b      	lsls	r3, r3, #30
 8003a68:	d413      	bmi.n	8003a92 <_printf_i+0x23a>
 8003a6a:	68e0      	ldr	r0, [r4, #12]
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	bfb8      	it	lt
 8003a72:	4618      	movlt	r0, r3
 8003a74:	e7a4      	b.n	80039c0 <_printf_i+0x168>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	47d0      	blx	sl
 8003a80:	3001      	adds	r0, #1
 8003a82:	d09b      	beq.n	80039bc <_printf_i+0x164>
 8003a84:	3501      	adds	r5, #1
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	9903      	ldr	r1, [sp, #12]
 8003a8a:	1a5b      	subs	r3, r3, r1
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dcf2      	bgt.n	8003a76 <_printf_i+0x21e>
 8003a90:	e7eb      	b.n	8003a6a <_printf_i+0x212>
 8003a92:	2500      	movs	r5, #0
 8003a94:	f104 0619 	add.w	r6, r4, #25
 8003a98:	e7f5      	b.n	8003a86 <_printf_i+0x22e>
 8003a9a:	bf00      	nop
 8003a9c:	08003d11 	.word	0x08003d11
 8003aa0:	08003d22 	.word	0x08003d22

08003aa4 <_sbrk_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4d06      	ldr	r5, [pc, #24]	; (8003ac0 <_sbrk_r+0x1c>)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4604      	mov	r4, r0
 8003aac:	4608      	mov	r0, r1
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	f7fc ffcc 	bl	8000a4c <_sbrk>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_sbrk_r+0x1a>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_sbrk_r+0x1a>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	2000012c 	.word	0x2000012c

08003ac4 <__sread>:
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003acc:	f000 f8a0 	bl	8003c10 <_read_r>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	bfab      	itete	ge
 8003ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ad8:	181b      	addge	r3, r3, r0
 8003ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ade:	bfac      	ite	ge
 8003ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ae2:	81a3      	strhlt	r3, [r4, #12]
 8003ae4:	bd10      	pop	{r4, pc}

08003ae6 <__swrite>:
 8003ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aea:	461f      	mov	r7, r3
 8003aec:	898b      	ldrh	r3, [r1, #12]
 8003aee:	05db      	lsls	r3, r3, #23
 8003af0:	4605      	mov	r5, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	4616      	mov	r6, r2
 8003af6:	d505      	bpl.n	8003b04 <__swrite+0x1e>
 8003af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afc:	2302      	movs	r3, #2
 8003afe:	2200      	movs	r2, #0
 8003b00:	f000 f868 	bl	8003bd4 <_lseek_r>
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	4632      	mov	r2, r6
 8003b12:	463b      	mov	r3, r7
 8003b14:	4628      	mov	r0, r5
 8003b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1a:	f000 b817 	b.w	8003b4c <_write_r>

08003b1e <__sseek>:
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	460c      	mov	r4, r1
 8003b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b26:	f000 f855 	bl	8003bd4 <_lseek_r>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	bf15      	itete	ne
 8003b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b3a:	81a3      	strheq	r3, [r4, #12]
 8003b3c:	bf18      	it	ne
 8003b3e:	81a3      	strhne	r3, [r4, #12]
 8003b40:	bd10      	pop	{r4, pc}

08003b42 <__sclose>:
 8003b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b46:	f000 b813 	b.w	8003b70 <_close_r>
	...

08003b4c <_write_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4d07      	ldr	r5, [pc, #28]	; (8003b6c <_write_r+0x20>)
 8003b50:	4604      	mov	r4, r0
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	602a      	str	r2, [r5, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7fc ff25 	bl	80009aa <_write>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_write_r+0x1e>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_write_r+0x1e>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	2000012c 	.word	0x2000012c

08003b70 <_close_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d06      	ldr	r5, [pc, #24]	; (8003b8c <_close_r+0x1c>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fc ff31 	bl	80009e2 <_close>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_close_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_close_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	2000012c 	.word	0x2000012c

08003b90 <_fstat_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d07      	ldr	r5, [pc, #28]	; (8003bb0 <_fstat_r+0x20>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	602b      	str	r3, [r5, #0]
 8003b9e:	f7fc ff2c 	bl	80009fa <_fstat>
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	d102      	bne.n	8003bac <_fstat_r+0x1c>
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	b103      	cbz	r3, 8003bac <_fstat_r+0x1c>
 8003baa:	6023      	str	r3, [r4, #0]
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000012c 	.word	0x2000012c

08003bb4 <_isatty_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4d06      	ldr	r5, [pc, #24]	; (8003bd0 <_isatty_r+0x1c>)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4604      	mov	r4, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	f7fc ff2b 	bl	8000a1a <_isatty>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_isatty_r+0x1a>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_isatty_r+0x1a>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	2000012c 	.word	0x2000012c

08003bd4 <_lseek_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d07      	ldr	r5, [pc, #28]	; (8003bf4 <_lseek_r+0x20>)
 8003bd8:	4604      	mov	r4, r0
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	602a      	str	r2, [r5, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f7fc ff24 	bl	8000a30 <_lseek>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_lseek_r+0x1e>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_lseek_r+0x1e>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	2000012c 	.word	0x2000012c

08003bf8 <__malloc_lock>:
 8003bf8:	4801      	ldr	r0, [pc, #4]	; (8003c00 <__malloc_lock+0x8>)
 8003bfa:	f7ff bb55 	b.w	80032a8 <__retarget_lock_acquire_recursive>
 8003bfe:	bf00      	nop
 8003c00:	20000124 	.word	0x20000124

08003c04 <__malloc_unlock>:
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <__malloc_unlock+0x8>)
 8003c06:	f7ff bb50 	b.w	80032aa <__retarget_lock_release_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	20000124 	.word	0x20000124

08003c10 <_read_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d07      	ldr	r5, [pc, #28]	; (8003c30 <_read_r+0x20>)
 8003c14:	4604      	mov	r4, r0
 8003c16:	4608      	mov	r0, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	602a      	str	r2, [r5, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f7fc fea6 	bl	8000970 <_read>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d102      	bne.n	8003c2e <_read_r+0x1e>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	b103      	cbz	r3, 8003c2e <_read_r+0x1e>
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	2000012c 	.word	0x2000012c

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
