
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb4  08005bb4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bbc  08005bbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000074  08005c38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08005c38  00020614  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8e1  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e7  00000000  00000000  0002d983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028881  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c137  00000000  00000000  000599f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3755  00000000  00000000  00065b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015927d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e20  00000000  00000000  001592d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005684 	.word	0x08005684

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005684 	.word	0x08005684

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <etx_ota_download_and_flash+0x90>)
 80005e4:	f004 f908 	bl	80047f8 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <etx_ota_download_and_flash+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <etx_ota_download_and_flash+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
  slot_num_to_write    = 0xFFu;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <etx_ota_download_and_flash+0xa4>)
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000606:	f240 4209 	movw	r2, #1033	; 0x409
 800060a:	2100      	movs	r1, #0
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 800060e:	f004 f865 	bl	80046dc <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 8000612:	f240 4109 	movw	r1, #1033	; 0x409
 8000616:	481a      	ldr	r0, [pc, #104]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 8000618:	f000 fa0c 	bl	8000a34 <etx_receive_chunk>
 800061c:	4603      	mov	r3, r0
 800061e:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <etx_ota_download_and_flash+0x5e>
    {
      ret = etx_process_data( Rx_Buffer, len );
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <etx_ota_download_and_flash+0xa8>)
 800062c:	f000 f82c 	bl	8000688 <etx_process_data>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e001      	b.n	800063a <etx_ota_download_and_flash+0x62>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 8000636:	2301      	movs	r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <etx_ota_download_and_flash+0x76>
    {
      printf("Sending NACK\r\n");
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <etx_ota_download_and_flash+0xac>)
 8000642:	f004 f8d9 	bl	80047f8 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fad8 	bl	8000bfc <etx_ota_send_resp>
      break;
 800064c:	e006      	b.n	800065c <etx_ota_download_and_flash+0x84>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fad4 	bl	8000bfc <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1d4      	bne.n	8000606 <etx_ota_download_and_flash+0x2e>

  return ret;
 800065c:	79fb      	ldrb	r3, [r7, #7]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	0800569c 	.word	0x0800569c
 800066c:	2000049c 	.word	0x2000049c
 8000670:	200004a4 	.word	0x200004a4
 8000674:	200004a0 	.word	0x200004a0
 8000678:	20000499 	.word	0x20000499
 800067c:	200004a8 	.word	0x200004a8
 8000680:	20000090 	.word	0x20000090
 8000684:	080056bc 	.word	0x080056bc

08000688 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b09b      	sub	sp, #108	; 0x6c
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000694:	2301      	movs	r3, #1
 8000696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f000 8190 	beq.w	80009c2 <etx_process_data+0x33a>
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 818c 	beq.w	80009c2 <etx_process_data+0x33a>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	65bb      	str	r3, [r7, #88]	; 0x58
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d104      	bne.n	80006c0 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 80006b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	f000 81a8 	beq.w	8000a10 <etx_process_data+0x388>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 80006c0:	4bc1      	ldr	r3, [pc, #772]	; (80009c8 <etx_process_data+0x340>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	f200 8178 	bhi.w	80009ba <etx_process_data+0x332>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <etx_process_data+0x48>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006f3 	.word	0x080006f3
 80006d8:	0800071f 	.word	0x0800071f
 80006dc:	0800076d 	.word	0x0800076d
 80006e0:	08000851 	.word	0x08000851
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006e4:	48b9      	ldr	r0, [pc, #740]	; (80009cc <etx_process_data+0x344>)
 80006e6:	f004 f887 	bl	80047f8 <puts>
        ret = ETX_OTA_EX_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      }
      break;
 80006f0:	e199      	b.n	8000a26 <etx_process_data+0x39e>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f040 818a 	bne.w	8000a14 <etx_process_data+0x38c>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 8000700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 8185 	bne.w	8000a14 <etx_process_data+0x38c>
          {
            printf("Received OTA START Command\r\n");
 800070a:	48b1      	ldr	r0, [pc, #708]	; (80009d0 <etx_process_data+0x348>)
 800070c:	f004 f874 	bl	80047f8 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000710:	4bad      	ldr	r3, [pc, #692]	; (80009c8 <etx_process_data+0x340>)
 8000712:	2202      	movs	r2, #2
 8000714:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800071c:	e17a      	b.n	8000a14 <etx_process_data+0x38c>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 8000722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	2b02      	cmp	r3, #2
 8000728:	f040 8176 	bne.w	8000a18 <etx_process_data+0x390>
        {
          ota_fw_total_size = header->meta_data.package_size;
 800072c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4aa8      	ldr	r2, [pc, #672]	; (80009d4 <etx_process_data+0x34c>)
 8000732:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 8000734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4aa7      	ldr	r2, [pc, #668]	; (80009d8 <etx_process_data+0x350>)
 800073a:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 800073c:	4ba5      	ldr	r3, [pc, #660]	; (80009d4 <etx_process_data+0x34c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	48a6      	ldr	r0, [pc, #664]	; (80009dc <etx_process_data+0x354>)
 8000744:	f003 ffd2 	bl	80046ec <iprintf>

          //get the slot number
          slot_num_to_write = get_available_slot_number();
 8000748:	f000 fb20 	bl	8000d8c <get_available_slot_number>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <etx_process_data+0x358>)
 8000752:	701a      	strb	r2, [r3, #0]
          if( slot_num_to_write != 0xFF )
 8000754:	4ba2      	ldr	r3, [pc, #648]	; (80009e0 <etx_process_data+0x358>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2bff      	cmp	r3, #255	; 0xff
 800075a:	f000 815d 	beq.w	8000a18 <etx_process_data+0x390>
          {
            ota_state = ETX_OTA_STATE_DATA;
 800075e:	4b9a      	ldr	r3, [pc, #616]	; (80009c8 <etx_process_data+0x340>)
 8000760:	2203      	movs	r2, #3
 8000762:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800076a:	e155      	b.n	8000a18 <etx_process_data+0x390>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
        uint16_t          data_len = data->data_len;
 8000770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000772:	789a      	ldrb	r2, [r3, #2]
 8000774:	78db      	ldrb	r3, [r3, #3]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	4313      	orrs	r3, r2
 800077a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 800077e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	2b01      	cmp	r3, #1
 8000784:	f040 814a 	bne.w	8000a1c <etx_process_data+0x394>
        {
          bool is_first_block = false;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          if( ota_fw_received_size == 0 )
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <etx_process_data+0x35c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d133      	bne.n	80007fe <etx_process_data+0x176>
          {
            //This is the first block
            is_first_block = true;
 8000796:	2301      	movs	r3, #1
 8000798:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

            /* Read the configuration */
            ETX_GNRL_CFG_ cfg;
            memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 800079c:	4b92      	ldr	r3, [pc, #584]	; (80009e8 <etx_process_data+0x360>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	461c      	mov	r4, r3
 80007a2:	f107 060c 	add.w	r6, r7, #12
 80007a6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80007aa:	4635      	mov	r5, r6
 80007ac:	4623      	mov	r3, r4
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	6859      	ldr	r1, [r3, #4]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b8:	3410      	adds	r4, #16
 80007ba:	3610      	adds	r6, #16
 80007bc:	4564      	cmp	r4, ip
 80007be:	d1f4      	bne.n	80007aa <etx_process_data+0x122>
 80007c0:	4632      	mov	r2, r6
 80007c2:	4623      	mov	r3, r4
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	8013      	strh	r3, [r2, #0]

            /* Before writing the data, reset the available slot */
            cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 1u;
 80007c8:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <etx_process_data+0x358>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007dc:	4413      	add	r3, r2
 80007de:	3b58      	subs	r3, #88	; 0x58
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]

            /* write back the updated config */
            ret = write_cfg_to_flash( &cfg );
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fccf 	bl	800118c <write_cfg_to_flash>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if( ret != ETX_OTA_EX_OK )
 80007f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f040 8111 	bne.w	8000a20 <etx_process_data+0x398>
              break;
            }
          }

          /* write the chunk to the Flash (App location) */
          ex = write_data_to_slot( slot_num_to_write, buf+4, data_len, is_first_block );
 80007fe:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <etx_process_data+0x358>)
 8000800:	7818      	ldrb	r0, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	1d19      	adds	r1, r3, #4
 8000806:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800080a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800080e:	f000 fa25 	bl	8000c5c <write_data_to_slot>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

          if( ex == HAL_OK )
 8000818:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800081c:	2b00      	cmp	r3, #0
 800081e:	f040 80fd 	bne.w	8000a1c <etx_process_data+0x394>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000822:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <etx_process_data+0x35c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	0a99      	lsrs	r1, r3, #10
 8000828:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <etx_process_data+0x34c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	0a9b      	lsrs	r3, r3, #10
 800082e:	461a      	mov	r2, r3
 8000830:	486e      	ldr	r0, [pc, #440]	; (80009ec <etx_process_data+0x364>)
 8000832:	f003 ff5b 	bl	80046ec <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <etx_process_data+0x35c>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <etx_process_data+0x34c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d302      	bcc.n	8000848 <etx_process_data+0x1c0>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000842:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <etx_process_data+0x340>)
 8000844:	2204      	movs	r2, #4
 8000846:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          }
        }
      }
      break;
 800084e:	e0e5      	b.n	8000a1c <etx_process_data+0x394>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	657b      	str	r3, [r7, #84]	; 0x54

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b00      	cmp	r3, #0
 800085a:	f040 80e3 	bne.w	8000a24 <etx_process_data+0x39c>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 800085e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	f040 80de 	bne.w	8000a24 <etx_process_data+0x39c>
          {
            printf("Received OTA END Command\r\n");
 8000868:	4861      	ldr	r0, [pc, #388]	; (80009f0 <etx_process_data+0x368>)
 800086a:	f003 ffc5 	bl	80047f8 <puts>

            printf("Validating the received Binary...\r\n");
 800086e:	4861      	ldr	r0, [pc, #388]	; (80009f4 <etx_process_data+0x36c>)
 8000870:	f003 ffc2 	bl	80047f8 <puts>

            uint32_t slot_addr;
            if( slot_num_to_write == 0u )
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <etx_process_data+0x358>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <etx_process_data+0x1fa>
            {
              slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 800087c:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <etx_process_data+0x370>)
 800087e:	663b      	str	r3, [r7, #96]	; 0x60
 8000880:	e001      	b.n	8000886 <etx_process_data+0x1fe>
            }
            else
            {
              slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <etx_process_data+0x374>)
 8000884:	663b      	str	r3, [r7, #96]	; 0x60
            }

            //Calculate and verify the CRC
            uint32_t cal_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)slot_addr, ota_fw_total_size);
 8000886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000888:	4a52      	ldr	r2, [pc, #328]	; (80009d4 <etx_process_data+0x34c>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	485c      	ldr	r0, [pc, #368]	; (8000a00 <etx_process_data+0x378>)
 8000890:	f001 fa9e 	bl	8001dd0 <HAL_CRC_Calculate>
 8000894:	6538      	str	r0, [r7, #80]	; 0x50
            if( cal_crc != ota_fw_crc )
 8000896:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <etx_process_data+0x350>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800089c:	429a      	cmp	r2, r3
 800089e:	d003      	beq.n	80008a8 <etx_process_data+0x220>
            {
              printf("ERROR: FW CRC Mismatch\r\n");
 80008a0:	4858      	ldr	r0, [pc, #352]	; (8000a04 <etx_process_data+0x37c>)
 80008a2:	f003 ffa9 	bl	80047f8 <puts>
 80008a6:	e0be      	b.n	8000a26 <etx_process_data+0x39e>
              break;
            }
            printf("Done!!!\r\n");
 80008a8:	4857      	ldr	r0, [pc, #348]	; (8000a08 <etx_process_data+0x380>)
 80008aa:	f003 ffa5 	bl	80047f8 <puts>

            /* Read the configuration */
            ETX_GNRL_CFG_ cfg;
            memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 80008ae:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <etx_process_data+0x360>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461c      	mov	r4, r3
 80008b4:	f107 060c 	add.w	r6, r7, #12
 80008b8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80008bc:	4635      	mov	r5, r6
 80008be:	4623      	mov	r3, r4
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	6859      	ldr	r1, [r3, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ca:	3410      	adds	r4, #16
 80008cc:	3610      	adds	r6, #16
 80008ce:	4564      	cmp	r4, ip
 80008d0:	d1f4      	bne.n	80008bc <etx_process_data+0x234>
 80008d2:	4632      	mov	r2, r6
 80008d4:	4623      	mov	r3, r4
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	8013      	strh	r3, [r2, #0]

            //update the slot
            cfg.slot_table[slot_num_to_write].fw_crc                 = cal_crc;
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <etx_process_data+0x358>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008ee:	4413      	add	r3, r2
 80008f0:	3b5c      	subs	r3, #92	; 0x5c
 80008f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008f4:	f8c3 200b 	str.w	r2, [r3, #11]
            cfg.slot_table[slot_num_to_write].fw_size                = ota_fw_total_size;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <etx_process_data+0x358>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <etx_process_data+0x34c>)
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000910:	4413      	add	r3, r2
 8000912:	3b5c      	subs	r3, #92	; 0x5c
 8000914:	f8c3 1007 	str.w	r1, [r3, #7]
            cfg.slot_table[slot_num_to_write].is_this_slot_not_valid = 0u;
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <etx_process_data+0x358>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800092c:	4413      	add	r3, r2
 800092e:	3b58      	subs	r3, #88	; 0x58
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
            cfg.slot_table[slot_num_to_write].should_we_run_this_fw  = 1u;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <etx_process_data+0x358>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000948:	4413      	add	r3, r2
 800094a:	3b56      	subs	r3, #86	; 0x56
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]

            //reset other slots
            for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000950:	2300      	movs	r3, #0
 8000952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000956:	e017      	b.n	8000988 <etx_process_data+0x300>
            {
              if( slot_num_to_write != i )
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <etx_process_data+0x358>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000960:	429a      	cmp	r2, r3
 8000962:	d00c      	beq.n	800097e <etx_process_data+0x2f6>
              {
                //update the slot as inactive
                cfg.slot_table[i].should_we_run_this_fw = 0u;
 8000964:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000976:	4413      	add	r3, r2
 8000978:	3b56      	subs	r3, #86	; 0x56
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800097e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000982:	3301      	adds	r3, #1
 8000984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800098c:	2b01      	cmp	r3, #1
 800098e:	d9e3      	bls.n	8000958 <etx_process_data+0x2d0>
              }
            }

            //update the reboot reason
            cfg.reboot_cause = ETX_NORMAL_BOOT;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <etx_process_data+0x384>)
 8000992:	60fb      	str	r3, [r7, #12]

            /* write back the updated config */
            ret = write_cfg_to_flash( &cfg );
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fbf7 	bl	800118c <write_cfg_to_flash>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if( ret == ETX_OTA_EX_OK )
 80009a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d13b      	bne.n	8000a24 <etx_process_data+0x39c>
            {
              ota_state = ETX_OTA_STATE_IDLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <etx_process_data+0x340>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
              ret = ETX_OTA_EX_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
          }
        }
      }
      break;
 80009b8:	e034      	b.n	8000a24 <etx_process_data+0x39c>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      }
      break;
 80009c0:	e031      	b.n	8000a26 <etx_process_data+0x39e>
    };
 80009c2:	bf00      	nop
 80009c4:	e02f      	b.n	8000a26 <etx_process_data+0x39e>
 80009c6:	bf00      	nop
 80009c8:	20000499 	.word	0x20000499
 80009cc:	080056cc 	.word	0x080056cc
 80009d0:	080056e4 	.word	0x080056e4
 80009d4:	2000049c 	.word	0x2000049c
 80009d8:	200004a0 	.word	0x200004a0
 80009dc:	08005700 	.word	0x08005700
 80009e0:	200004a8 	.word	0x200004a8
 80009e4:	200004a4 	.word	0x200004a4
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08005728 	.word	0x08005728
 80009f0:	08005734 	.word	0x08005734
 80009f4:	08005750 	.word	0x08005750
 80009f8:	080c0000 	.word	0x080c0000
 80009fc:	08140000 	.word	0x08140000
 8000a00:	2000053c 	.word	0x2000053c
 8000a04:	08005774 	.word	0x08005774
 8000a08:	0800578c 	.word	0x0800578c
 8000a0c:	beeffeed 	.word	0xbeeffeed
        break;
 8000a10:	bf00      	nop
 8000a12:	e008      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a14:	bf00      	nop
 8000a16:	e006      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a18:	bf00      	nop
 8000a1a:	e004      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <etx_process_data+0x39e>
              break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <etx_process_data+0x39e>
      break;
 8000a24:	bf00      	nop
  }while( false );

  return ret;
 8000a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	376c      	adds	r7, #108	; 0x6c
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a32:	bf00      	nop

08000a34 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index        = 0u;
 8000a40:	2300      	movs	r3, #0
 8000a42:	83bb      	strh	r3, [r7, #28]
  uint16_t data_len;
  uint32_t cal_data_crc = 0u;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  uint32_t rec_data_crc = 0u;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000a4c:	8bbb      	ldrh	r3, [r7, #28]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	18d1      	adds	r1, r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2201      	movs	r2, #1
 8000a58:	4864      	ldr	r0, [pc, #400]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000a5a:	f003 f97a 	bl	8003d52 <HAL_UART_Receive>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000a62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 809e 	bne.w	8000ba8 <etx_receive_chunk+0x174>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 8000a6c:	8bbb      	ldrh	r3, [r7, #28]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	83ba      	strh	r2, [r7, #28]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2baa      	cmp	r3, #170	; 0xaa
 8000a7c:	d002      	beq.n	8000a84 <etx_receive_chunk+0x50>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	83fb      	strh	r3, [r7, #30]
      break;
 8000a82:	e09c      	b.n	8000bbe <etx_receive_chunk+0x18a>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000a84:	8bbb      	ldrh	r3, [r7, #28]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	83ba      	strh	r2, [r7, #28]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1899      	adds	r1, r3, r2
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2201      	movs	r2, #1
 8000a96:	4855      	ldr	r0, [pc, #340]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000a98:	f003 f95b 	bl	8003d52 <HAL_UART_Receive>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000aa0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f040 8081 	bne.w	8000bac <etx_receive_chunk+0x178>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000aaa:	8bbb      	ldrh	r3, [r7, #28]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	18d1      	adds	r1, r2, r3
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	484d      	ldr	r0, [pc, #308]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000ab8:	f003 f94b 	bl	8003d52 <HAL_UART_Receive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000ac0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d173      	bne.n	8000bb0 <etx_receive_chunk+0x17c>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000ac8:	8bbb      	ldrh	r3, [r7, #28]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	81fb      	strh	r3, [r7, #14]
    index += 2u;
 8000ad2:	8bbb      	ldrh	r3, [r7, #28]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	83bb      	strh	r3, [r7, #28]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000ad8:	2300      	movs	r3, #0
 8000ada:	837b      	strh	r3, [r7, #26]
 8000adc:	e014      	b.n	8000b08 <etx_receive_chunk+0xd4>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000ade:	8bbb      	ldrh	r3, [r7, #28]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	83ba      	strh	r2, [r7, #28]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1899      	adds	r1, r3, r2
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	2201      	movs	r2, #1
 8000af0:	483e      	ldr	r0, [pc, #248]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000af2:	f003 f92e 	bl	8003d52 <HAL_UART_Receive>
 8000af6:	4603      	mov	r3, r0
 8000af8:	83fb      	strh	r3, [r7, #30]
      if( ret != HAL_OK )
 8000afa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <etx_receive_chunk+0xde>
    for( uint16_t i = 0u; i < data_len; i++ )
 8000b02:	8b7b      	ldrh	r3, [r7, #26]
 8000b04:	3301      	adds	r3, #1
 8000b06:	837b      	strh	r3, [r7, #26]
 8000b08:	8b7a      	ldrh	r2, [r7, #26]
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3e6      	bcc.n	8000ade <etx_receive_chunk+0xaa>
 8000b10:	e000      	b.n	8000b14 <etx_receive_chunk+0xe0>
      {
        break;
 8000b12:	bf00      	nop
      }
    }

    if( ret != HAL_OK )
 8000b14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14b      	bne.n	8000bb4 <etx_receive_chunk+0x180>
    {
      break;
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 8000b1c:	8bbb      	ldrh	r3, [r7, #28]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	18d1      	adds	r1, r2, r3
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	2204      	movs	r2, #4
 8000b28:	4830      	ldr	r0, [pc, #192]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000b2a:	f003 f912 	bl	8003d52 <HAL_UART_Receive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000b32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d13e      	bne.n	8000bb8 <etx_receive_chunk+0x184>
    {
      break;
    }
    rec_data_crc = *(uint32_t *)&buf[index];
 8000b3a:	8bbb      	ldrh	r3, [r7, #28]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
    index += 4u;
 8000b44:	8bbb      	ldrh	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	83bb      	strh	r3, [r7, #28]

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000b4a:	8bbb      	ldrh	r3, [r7, #28]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	18d1      	adds	r1, r2, r3
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2201      	movs	r2, #1
 8000b56:	4825      	ldr	r0, [pc, #148]	; (8000bec <etx_receive_chunk+0x1b8>)
 8000b58:	f003 f8fb 	bl	8003d52 <HAL_UART_Receive>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000b60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d129      	bne.n	8000bbc <etx_receive_chunk+0x188>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 8000b68:	8bbb      	ldrh	r3, [r7, #28]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	83ba      	strh	r2, [r7, #28]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2bbb      	cmp	r3, #187	; 0xbb
 8000b78:	d002      	beq.n	8000b80 <etx_receive_chunk+0x14c>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	83fb      	strh	r3, [r7, #30]
      break;
 8000b7e:	e01e      	b.n	8000bbe <etx_receive_chunk+0x18a>
    }

    //Calculate the received data's CRC
    cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&buf[4], data_len);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3304      	adds	r3, #4
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <etx_receive_chunk+0x1bc>)
 8000b8a:	f001 f921 	bl	8001dd0 <HAL_CRC_Calculate>
 8000b8e:	6178      	str	r0, [r7, #20]

    //Verify the CRC
    if( cal_data_crc != rec_data_crc )
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d012      	beq.n	8000bbe <etx_receive_chunk+0x18a>
    {
      printf("Chunk's CRC mismatch [Cal CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	6979      	ldr	r1, [r7, #20]
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <etx_receive_chunk+0x1c0>)
 8000b9e:	f003 fda5 	bl	80046ec <iprintf>
                                                   cal_data_crc, rec_data_crc );
      ret = ETX_OTA_EX_ERR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	83fb      	strh	r3, [r7, #30]
      break;
 8000ba6:	e00a      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000ba8:	bf00      	nop
 8000baa:	e008      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bac:	bf00      	nop
 8000bae:	e006      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb0:	bf00      	nop
 8000bb2:	e004      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <etx_receive_chunk+0x18a>
      break;
 8000bbc:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000bbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <etx_receive_chunk+0x196>
  {
    //clear the index if error
    index = 0u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	83bb      	strh	r3, [r7, #28]
  }

  if( max_len < index )
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	8bbb      	ldrh	r3, [r7, #28]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d207      	bcs.n	8000be2 <etx_receive_chunk+0x1ae>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	8bba      	ldrh	r2, [r7, #28]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <etx_receive_chunk+0x1c4>)
 8000bda:	f003 fd87 	bl	80046ec <iprintf>
                                                              max_len, index );
    index = 0u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	83bb      	strh	r3, [r7, #28]
  }

  return index;
 8000be2:	8bbb      	ldrh	r3, [r7, #28]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000560 	.word	0x20000560
 8000bf0:	2000053c 	.word	0x2000053c
 8000bf4:	08005798 	.word	0x08005798
 8000bf8:	080057d8 	.word	0x080057d8

08000bfc <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	811a      	strh	r2, [r3, #8]
 8000c12:	23aa      	movs	r3, #170	; 0xaa
 8000c14:	733b      	strb	r3, [r7, #12]
 8000c16:	2303      	movs	r3, #3
 8000c18:	737b      	strb	r3, [r7, #13]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	81fb      	strh	r3, [r7, #14]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	743b      	strb	r3, [r7, #16]
 8000c22:	23bb      	movs	r3, #187	; 0xbb
 8000c24:	757b      	strb	r3, [r7, #21]
    .data_len    = 1u,
    .status      = type,
    .eof         = ETX_OTA_EOF
  };

  rsp.crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&rsp.status, 1);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <etx_ota_send_resp+0x58>)
 8000c32:	f001 f8cd 	bl	8001dd0 <HAL_CRC_Calculate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f8c7 3011 	str.w	r3, [r7, #17]

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	220a      	movs	r2, #10
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <etx_ota_send_resp+0x5c>)
 8000c48:	f002 fff0 	bl	8003c2c <HAL_UART_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000053c 	.word	0x2000053c
 8000c58:	20000560 	.word	0x20000560

08000c5c <write_data_to_slot>:
  */
static HAL_StatusTypeDef write_data_to_slot( uint8_t slot_num,
                                             uint8_t *data,
                                             uint16_t data_len,
                                             bool is_first_block )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6039      	str	r1, [r7, #0]
 8000c64:	4611      	mov	r1, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	80bb      	strh	r3, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;

  do
  {

    if( slot_num >= ETX_NO_OF_SLOTS )
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d903      	bls.n	8000c82 <write_data_to_slot+0x26>
    {
      ret = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8000c80:	e072      	b.n	8000d68 <write_data_to_slot+0x10c>
    }

    ret = HAL_FLASH_Unlock();
 8000c82:	f001 fa9b 	bl	80021bc <HAL_FLASH_Unlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d166      	bne.n	8000d62 <write_data_to_slot+0x106>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d025      	beq.n	8000ce6 <write_data_to_slot+0x8a>
    {
      printf("Erasing the Slot %d Flash memory...\r\n", slot_num);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4835      	ldr	r0, [pc, #212]	; (8000d74 <write_data_to_slot+0x118>)
 8000ca0:	f003 fd24 	bl	80046ec <iprintf>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
      if( slot_num == 0 )
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <write_data_to_slot+0x58>
      {
        EraseInitStruct.Sector        = FLASH_SECTOR_7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	e001      	b.n	8000cb8 <write_data_to_slot+0x5c>
      }
      else
      {
        EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8000cb4:	2309      	movs	r3, #9
 8000cb6:	61bb      	str	r3, [r7, #24]
      }
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fbd8 	bl	8002480 <HAL_FLASHEx_Erase>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if( ret != HAL_OK )
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <write_data_to_slot+0x8a>
      {
        printf("Flash Erase Error\r\n");
 8000cde:	4826      	ldr	r0, [pc, #152]	; (8000d78 <write_data_to_slot+0x11c>)
 8000ce0:	f003 fd8a 	bl	80047f8 <puts>
 8000ce4:	e040      	b.n	8000d68 <write_data_to_slot+0x10c>
        break;
      }
    }

    uint32_t flash_addr;
    if( slot_num == 0 )
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <write_data_to_slot+0x96>
    {
      flash_addr = ETX_APP_SLOT0_FLASH_ADDR;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <write_data_to_slot+0x120>)
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	e001      	b.n	8000cf6 <write_data_to_slot+0x9a>
    }
    else
    {
      flash_addr = ETX_APP_SLOT1_FLASH_ADDR;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <write_data_to_slot+0x124>)
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    for(int i = 0; i < data_len; i++ )
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	e021      	b.n	8000d40 <write_data_to_slot+0xe4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <write_data_to_slot+0x128>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	18d1      	adds	r1, r2, r3
                               (flash_addr + ota_fw_received_size),
                               data[i]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f001 f9f6 	bl	8002104 <HAL_FLASH_Program>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret == HAL_OK )
 8000d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <write_data_to_slot+0xd6>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <write_data_to_slot+0x128>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <write_data_to_slot+0x128>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e003      	b.n	8000d3a <write_data_to_slot+0xde>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <write_data_to_slot+0x12c>)
 8000d34:	f003 fd60 	bl	80047f8 <puts>
        break;
 8000d38:	e006      	b.n	8000d48 <write_data_to_slot+0xec>
    for(int i = 0; i < data_len; i++ )
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbd9      	blt.n	8000cfc <write_data_to_slot+0xa0>
      }
    }

    if( ret != HAL_OK )
 8000d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10a      	bne.n	8000d66 <write_data_to_slot+0x10a>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000d50:	f001 fa56 	bl	8002200 <HAL_FLASH_Lock>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8000d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	e002      	b.n	8000d68 <write_data_to_slot+0x10c>
      break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <write_data_to_slot+0x10c>
      break;
 8000d66:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	0800581c 	.word	0x0800581c
 8000d78:	08005844 	.word	0x08005844
 8000d7c:	080c0000 	.word	0x080c0000
 8000d80:	08140000 	.word	0x08140000
 8000d84:	200004a4 	.word	0x200004a4
 8000d88:	08005858 	.word	0x08005858

08000d8c <get_available_slot_number>:
  * @brief Return the available slot number
  * @param none
  * @retval slot number
  */
static uint8_t get_available_slot_number( void )
{
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b08f      	sub	sp, #60	; 0x3c
 8000d90:	af00      	add	r7, sp, #0
  uint8_t   slot_number = 0xFF;
 8000d92:	23ff      	movs	r3, #255	; 0xff
 8000d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Read the configuration */
  ETX_GNRL_CFG_ cfg;
  memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <get_available_slot_number+0xac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	461c      	mov	r4, r3
 8000d9e:	1d3e      	adds	r6, r7, #4
 8000da0:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000da4:	4635      	mov	r5, r6
 8000da6:	4623      	mov	r3, r4
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	3410      	adds	r4, #16
 8000db4:	3610      	adds	r6, #16
 8000db6:	4564      	cmp	r4, ip
 8000db8:	d1f4      	bne.n	8000da4 <get_available_slot_number+0x18>
 8000dba:	4632      	mov	r2, r6
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	8013      	strh	r3, [r2, #0]
   * If it is valid and not active, then use that slot.
   * If it is not valid, then use that slot.
   *
   */

   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000dc8:	e02b      	b.n	8000e22 <get_available_slot_number+0x96>
   {
     if( ( cfg.slot_table[i].is_this_slot_not_valid != 0u ) || ( cfg.slot_table[i].is_this_slot_active == 0u ) )
 8000dca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b30      	subs	r3, #48	; 0x30
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <get_available_slot_number+0x76>
 8000de6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b2f      	subs	r3, #47	; 0x2f
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10a      	bne.n	8000e18 <get_available_slot_number+0x8c>
     {
       slot_number = i;
 8000e02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
       printf("Slot %d is available for OTA update\r\n", slot_number);
 8000e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <get_available_slot_number+0xb0>)
 8000e12:	f003 fc6b 	bl	80046ec <iprintf>
       break;
 8000e16:	e008      	b.n	8000e2a <get_available_slot_number+0x9e>
   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000e18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000e22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d9cf      	bls.n	8000dca <get_available_slot_number+0x3e>
     }
   }

   return slot_number;
 8000e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	373c      	adds	r7, #60	; 0x3c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	0800586c 	.word	0x0800586c

08000e40 <write_data_to_flash_app>:
  * @param data data to be written
  * @param data_len data length
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data, uint32_t data_len )
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000e4a:	f001 f9b7 	bl	80021bc <HAL_FLASH_Unlock>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d158      	bne.n	8000f0e <write_data_to_flash_app+0xce>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f001 f9de 	bl	8002220 <FLASH_WaitForLastOperation>

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <write_data_to_flash_app+0xe4>)
 8000e66:	2273      	movs	r2, #115	; 0x73
 8000e68:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    printf("Erasing the App Flash memory...\r\n");
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <write_data_to_flash_app+0xe8>)
 8000e6c:	f003 fcc4 	bl	80047f8 <puts>
    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000e74:	2305      	movs	r3, #5
 8000e76:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000e80:	f107 0208 	add.w	r2, r7, #8
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 faf8 	bl	8002480 <HAL_FLASHEx_Erase>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <write_data_to_flash_app+0x66>
    {
      printf("Flash erase Error\r\n");
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <write_data_to_flash_app+0xec>)
 8000ea0:	f003 fcaa 	bl	80047f8 <puts>
      break;
 8000ea4:	e038      	b.n	8000f18 <write_data_to_flash_app+0xd8>
    }

    for( uint32_t i = 0; i < data_len; i++ )
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	e01a      	b.n	8000ee2 <write_data_to_flash_app+0xa2>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	4920      	ldr	r1, [pc, #128]	; (8000f30 <write_data_to_flash_app+0xf0>)
 8000eb0:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + i),
                               data[i]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f001 f91f 	bl	8002104 <HAL_FLASH_Program>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret != HAL_OK )
 8000ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <write_data_to_flash_app+0x9c>
      {
        printf("App Flash Write Error\r\n");
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <write_data_to_flash_app+0xf4>)
 8000ed6:	f003 fc8f 	bl	80047f8 <puts>
        break;
 8000eda:	e006      	b.n	8000eea <write_data_to_flash_app+0xaa>
    for( uint32_t i = 0; i < data_len; i++ )
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
 8000ee2:	6a3a      	ldr	r2, [r7, #32]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3e0      	bcc.n	8000eac <write_data_to_flash_app+0x6c>
      }
    }

    if( ret != HAL_OK )
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <write_data_to_flash_app+0xd2>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000ef2:	f001 f985 	bl	8002200 <HAL_FLASH_Lock>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <write_data_to_flash_app+0xd6>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f001 f98a 	bl	8002220 <FLASH_WaitForLastOperation>
 8000f0c:	e004      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f0e:	bf00      	nop
 8000f10:	e002      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <write_data_to_flash_app+0xd8>
      break;
 8000f16:	bf00      	nop

  }while( false );

  return ret;
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023c00 	.word	0x40023c00
 8000f28:	08005894 	.word	0x08005894
 8000f2c:	080058b8 	.word	0x080058b8
 8000f30:	08040000 	.word	0x08040000
 8000f34:	080058cc 	.word	0x080058cc

08000f38 <load_new_app>:
  * @brief Load the new app to the app's actual flash memory.
  * @param none
  * @retval none
  */
void load_new_app( void )
{
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b093      	sub	sp, #76	; 0x4c
 8000f3c:	af00      	add	r7, sp, #0
  bool              is_update_available = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t           slot_num;
  HAL_StatusTypeDef ret;

  /* Read the configuration */
  ETX_GNRL_CFG_ cfg;
  memcpy( &cfg, cfg_flash, sizeof(ETX_GNRL_CFG_) );
 8000f44:	4b85      	ldr	r3, [pc, #532]	; (800115c <load_new_app+0x224>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461c      	mov	r4, r3
 8000f4a:	1d3e      	adds	r6, r7, #4
 8000f4c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000f50:	4635      	mov	r5, r6
 8000f52:	4623      	mov	r3, r4
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	3410      	adds	r4, #16
 8000f60:	3610      	adds	r6, #16
 8000f62:	4564      	cmp	r4, ip
 8000f64:	d1f4      	bne.n	8000f50 <load_new_app+0x18>
 8000f66:	4632      	mov	r2, r6
 8000f68:	4623      	mov	r3, r4
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	8013      	strh	r3, [r2, #0]

  /*
   * Check the slot whether it has a new application.
   */

   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000f74:	e03a      	b.n	8000fec <load_new_app+0xb4>
   {
     if( cfg.slot_table[i].should_we_run_this_fw == 1u )
 8000f76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b3e      	subs	r3, #62	; 0x3e
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d127      	bne.n	8000fe2 <load_new_app+0xaa>
     {
       printf("New Application is available in the slot %d!!!\r\n", i);
 8000f92:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000f96:	4619      	mov	r1, r3
 8000f98:	4871      	ldr	r0, [pc, #452]	; (8001160 <load_new_app+0x228>)
 8000f9a:	f003 fba7 	bl	80046ec <iprintf>
       is_update_available               = true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
       slot_num                          = i;
 8000fa4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000fa8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

       //update the slot
       cfg.slot_table[i].is_this_slot_active    = 1u;
 8000fac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b3f      	subs	r3, #63	; 0x3f
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
       cfg.slot_table[i].should_we_run_this_fw  = 0u;
 8000fc6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b3e      	subs	r3, #62	; 0x3e
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]

       break;
 8000fe0:	e008      	b.n	8000ff4 <load_new_app+0xbc>
   for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000fe2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000fec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d9c0      	bls.n	8000f76 <load_new_app+0x3e>
     }
   }

   if( is_update_available )
 8000ff4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d053      	beq.n	80010a4 <load_new_app+0x16c>
   {
     //make other slots inactive
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001002:	e017      	b.n	8001034 <load_new_app+0xfc>
     {
       if( slot_num != i )
 8001004:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001008:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800100c:	429a      	cmp	r2, r3
 800100e:	d00c      	beq.n	800102a <load_new_app+0xf2>
       {
         //update the slot as inactive
         cfg.slot_table[i].is_this_slot_active = 0u;
 8001010:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001022:	4413      	add	r3, r2
 8001024:	3b3f      	subs	r3, #63	; 0x3f
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 800102a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800102e:	3301      	adds	r3, #1
 8001030:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001034:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001038:	2b01      	cmp	r3, #1
 800103a:	d9e3      	bls.n	8001004 <load_new_app+0xcc>
       }
     }

     uint32_t slot_addr;
     if( slot_num == 0u )
 800103c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <load_new_app+0x112>
     {
       slot_addr = ETX_APP_SLOT0_FLASH_ADDR;
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <load_new_app+0x22c>)
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
 8001048:	e001      	b.n	800104e <load_new_app+0x116>
     }
     else
     {
       slot_addr = ETX_APP_SLOT1_FLASH_ADDR;
 800104a:	4b47      	ldr	r3, [pc, #284]	; (8001168 <load_new_app+0x230>)
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
     }

     //Load the new app or firmware to app's flash address
     ret = write_data_to_flash_app( (uint8_t*)slot_addr, cfg.slot_table[slot_num].fw_size );
 800104e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001050:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001062:	4413      	add	r3, r2
 8001064:	3b44      	subs	r3, #68	; 0x44
 8001066:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fee8 	bl	8000e40 <write_data_to_flash_app>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
     if( ret != HAL_OK )
 8001076:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <load_new_app+0x14e>
     {
       printf("App Flash write Error\r\n");
 800107e:	483b      	ldr	r0, [pc, #236]	; (800116c <load_new_app+0x234>)
 8001080:	f003 fbba 	bl	80047f8 <puts>
 8001084:	e02e      	b.n	80010e4 <load_new_app+0x1ac>
     }
     else
     {
       /* write back the updated config */
       ret = write_cfg_to_flash( &cfg );
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f87f 	bl	800118c <write_cfg_to_flash>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
       if( ret != HAL_OK )
 8001094:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001098:	2b00      	cmp	r3, #0
 800109a:	d023      	beq.n	80010e4 <load_new_app+0x1ac>
       {
         printf("Config Flash write Error\r\n");
 800109c:	4834      	ldr	r0, [pc, #208]	; (8001170 <load_new_app+0x238>)
 800109e:	f003 fbab 	bl	80047f8 <puts>
 80010a2:	e01f      	b.n	80010e4 <load_new_app+0x1ac>
     }
   }
   else
   {
     //Find the active slot in case the update is not available
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010aa:	e017      	b.n	80010dc <load_new_app+0x1a4>
     {
       if( cfg.slot_table[i].is_this_slot_active == 1u )
 80010ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010be:	4413      	add	r3, r2
 80010c0:	3b3f      	subs	r3, #63	; 0x3f
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d104      	bne.n	80010d2 <load_new_app+0x19a>
       {
         slot_num = i;
 80010c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
         break;
 80010d0:	e008      	b.n	80010e4 <load_new_app+0x1ac>
     for( uint8_t i = 0; i < ETX_NO_OF_SLOTS; i++ )
 80010d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d9e3      	bls.n	80010ac <load_new_app+0x174>
       }
     }
   }

   //Verify the application is corrupted or not
   printf("Verifying the Application...");
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <load_new_app+0x23c>)
 80010e6:	f003 fb01 	bl	80046ec <iprintf>

   FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	f001 f897 	bl	8002220 <FLASH_WaitForLastOperation>
   //Verify the application
   uint32_t cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)ETX_APP_FLASH_ADDR, cfg.slot_table[slot_num].fw_size );
 80010f2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001104:	4413      	add	r3, r2
 8001106:	3b44      	subs	r3, #68	; 0x44
 8001108:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800110c:	461a      	mov	r2, r3
 800110e:	491a      	ldr	r1, [pc, #104]	; (8001178 <load_new_app+0x240>)
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <load_new_app+0x244>)
 8001112:	f000 fe5d 	bl	8001dd0 <HAL_CRC_Calculate>
 8001116:	63b8      	str	r0, [r7, #56]	; 0x38
   FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f001 f880 	bl	8002220 <FLASH_WaitForLastOperation>

   //Verify the CRC
   if( cal_data_crc != cfg.slot_table[slot_num].fw_crc )
 8001120:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001132:	4413      	add	r3, r2
 8001134:	3b44      	subs	r3, #68	; 0x44
 8001136:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800113a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800113c:	429a      	cmp	r2, r3
 800113e:	d006      	beq.n	800114e <load_new_app+0x216>
   {
     printf("ERROR!!!\r\n");
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <load_new_app+0x248>)
 8001142:	f003 fb59 	bl	80047f8 <puts>
     printf("Invalid Application. HALT!!!\r\n");
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <load_new_app+0x24c>)
 8001148:	f003 fb56 	bl	80047f8 <puts>
     while(1);
 800114c:	e7fe      	b.n	800114c <load_new_app+0x214>
   }
   printf("Done!!!\r\n");
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <load_new_app+0x250>)
 8001150:	f003 fb52 	bl	80047f8 <puts>
}
 8001154:	bf00      	nop
 8001156:	374c      	adds	r7, #76	; 0x4c
 8001158:	46bd      	mov	sp, r7
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	080058e4 	.word	0x080058e4
 8001164:	080c0000 	.word	0x080c0000
 8001168:	08140000 	.word	0x08140000
 800116c:	08005918 	.word	0x08005918
 8001170:	08005930 	.word	0x08005930
 8001174:	0800594c 	.word	0x0800594c
 8001178:	08040000 	.word	0x08040000
 800117c:	2000053c 	.word	0x2000053c
 8001180:	0800596c 	.word	0x0800596c
 8001184:	08005978 	.word	0x08005978
 8001188:	0800578c 	.word	0x0800578c

0800118c <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( ETX_GNRL_CFG_ *cfg )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;

  do
  {
    if( cfg == NULL )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <write_cfg_to_flash+0x16>
    {
      ret = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 80011a0:	e05f      	b.n	8001262 <write_cfg_to_flash+0xd6>
    }

    ret = HAL_FLASH_Unlock();
 80011a2:	f001 f80b 	bl	80021bc <HAL_FLASH_Unlock>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d151      	bne.n	8001258 <write_cfg_to_flash+0xcc>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f001 f832 	bl	8002220 <FLASH_WaitForLastOperation>

    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector        = FLASH_SECTOR_4;
 80011c0:	2304      	movs	r3, #4
 80011c2:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors     = 1;                    //erase only sector 4
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <write_cfg_to_flash+0xe4>)
 80011ce:	2273      	movs	r2, #115	; 0x73
 80011d0:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f94f 	bl	8002480 <HAL_FLASHEx_Erase>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 80011e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d135      	bne.n	800125c <write_cfg_to_flash+0xd0>
    {
      break;
    }

    //write the configuration
    uint8_t *data = (uint8_t *) cfg;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f8:	e01a      	b.n	8001230 <write_cfg_to_flash+0xa4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	491d      	ldr	r1, [pc, #116]	; (8001274 <write_cfg_to_flash+0xe8>)
 80011fe:	4419      	add	r1, r3
                               ETX_CONFIG_FLASH_ADDR + i,
                               data[i]
 8001200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8001208:	b2da      	uxtb	r2, r3
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f000 ff78 	bl	8002104 <HAL_FLASH_Program>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret != HAL_OK )
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <write_cfg_to_flash+0x9e>
      {
        printf("Slot table Flash Write Error\r\n");
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <write_cfg_to_flash+0xec>)
 8001224:	f003 fae8 	bl	80047f8 <puts>
        break;
 8001228:	e005      	b.n	8001236 <write_cfg_to_flash+0xaa>
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	3301      	adds	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	2b31      	cmp	r3, #49	; 0x31
 8001234:	d9e1      	bls.n	80011fa <write_cfg_to_flash+0x6e>
      }
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001236:	f04f 30ff 	mov.w	r0, #4294967295
 800123a:	f000 fff1 	bl	8002220 <FLASH_WaitForLastOperation>

    if( ret != HAL_OK )
 800123e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <write_cfg_to_flash+0xd4>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8001246:	f000 ffdb 	bl	8002200 <HAL_FLASH_Lock>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8001250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001254:	2b00      	cmp	r3, #0
 8001256:	e004      	b.n	8001262 <write_cfg_to_flash+0xd6>
      break;
 8001258:	bf00      	nop
 800125a:	e002      	b.n	8001262 <write_cfg_to_flash+0xd6>
      break;
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <write_cfg_to_flash+0xd6>
      break;
 8001260:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001266:	4618      	mov	r0, r3
 8001268:	3730      	adds	r7, #48	; 0x30
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00
 8001274:	08020000 	.word	0x08020000
 8001278:	08005998 	.word	0x08005998

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f000 fbe4 	bl	8001a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f897 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 f993 	bl	80015b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800128e:	f000 f961 	bl	8001554 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001292:	f000 f92f 	bl	80014f4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001296:	f000 f90b 	bl	80014b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 800129a:	2201      	movs	r2, #1
 800129c:	2101      	movs	r1, #1
 800129e:	4837      	ldr	r0, [pc, #220]	; (800137c <main+0x100>)
 80012a0:	f001 fbb0 	bl	8002a04 <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 80012a4:	2300      	movs	r3, #0
 80012a6:	2203      	movs	r2, #3
 80012a8:	4619      	mov	r1, r3
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <main+0x104>)
 80012ac:	f003 fa1e 	bl	80046ec <iprintf>
  //HAL_Delay(2000);   //2sec delay for nothing


  //Read the reboot cause and act accordingly
  printf("Reading the reboot reason...\r\n");
 80012b0:	4834      	ldr	r0, [pc, #208]	; (8001384 <main+0x108>)
 80012b2:	f003 faa1 	bl	80047f8 <puts>

  ETX_GNRL_CFG_ *cfg          = (ETX_GNRL_CFG_*) (ETX_CONFIG_FLASH_ADDR);
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x10c>)
 80012b8:	613b      	str	r3, [r7, #16]
  bool          goto_ota_mode = false;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]

  switch( cfg->reboot_cause )
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c6:	d010      	beq.n	80012ea <main+0x6e>
 80012c8:	4a30      	ldr	r2, [pc, #192]	; (800138c <main+0x110>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d016      	beq.n	80012fc <main+0x80>
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <main+0x110>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d815      	bhi.n	8001300 <main+0x84>
 80012d4:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <main+0x114>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d003      	beq.n	80012e2 <main+0x66>
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <main+0x118>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d004      	beq.n	80012ea <main+0x6e>
      //TODO: Implement
      break;
    }
  default:
    /* should not get here */
    break;
 80012e0:	e00e      	b.n	8001300 <main+0x84>
      printf("Normal Boot\r\n");
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <main+0x11c>)
 80012e4:	f003 fa88 	bl	80047f8 <puts>
      break;
 80012e8:	e00b      	b.n	8001302 <main+0x86>
      printf("First time boot / OTA Request...\r\n");
 80012ea:	482c      	ldr	r0, [pc, #176]	; (800139c <main+0x120>)
 80012ec:	f003 fa84 	bl	80047f8 <puts>
      printf("Going to OTA mode...\r\n");
 80012f0:	482b      	ldr	r0, [pc, #172]	; (80013a0 <main+0x124>)
 80012f2:	f003 fa81 	bl	80047f8 <puts>
      goto_ota_mode = true;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
      break;
 80012fa:	e002      	b.n	8001302 <main+0x86>
      break;
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <main+0x86>
    break;
 8001300:	bf00      	nop
  };

  /* Check the GPIO for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8001302:	f000 fbf5 	bl	8001af0 <HAL_GetTick>
 8001306:	4603      	mov	r3, r0
 8001308:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800130c:	60fb      	str	r3, [r7, #12]

  printf("Press the User Button PC13 to trigger OTA update...\r\n");
 800130e:	4825      	ldr	r0, [pc, #148]	; (80013a4 <main+0x128>)
 8001310:	f003 fa72 	bl	80047f8 <puts>
  do
  {
    OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8001314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001318:	4823      	ldr	r0, [pc, #140]	; (80013a8 <main+0x12c>)
 800131a:	f001 fb5b 	bl	80029d4 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	72fb      	strb	r3, [r7, #11]
    uint32_t current_tick = HAL_GetTick();
 8001322:	f000 fbe5 	bl	8001af0 <HAL_GetTick>
 8001326:	6078      	str	r0, [r7, #4]

    /* Check the button is pressed or not for 3seconds */
    if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <main+0xc6>
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	d805      	bhi.n	8001342 <main+0xc6>
    {
      /* Either timeout or Button is pressed */
      break;
    }
  }while( !goto_ota_mode );
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e8      	bne.n	8001314 <main+0x98>

  /*Start the Firmware or Application update */
  if( ( OTA_Pin_state == GPIO_PIN_SET ) || ( goto_ota_mode ) )
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d002      	beq.n	800134e <main+0xd2>
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d010      	beq.n	8001370 <main+0xf4>
  {
    printf("Starting Firmware Download!!!\r\n");
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <main+0x130>)
 8001350:	f003 fa52 	bl	80047f8 <puts>
    /* OTA Request. Receive the data from the UART4 and flash */
    if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8001354:	f7ff f940 	bl	80005d8 <etx_ota_download_and_flash>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <main+0xea>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <main+0x134>)
 8001360:	f003 fa4a 	bl	80047f8 <puts>
      while( 1 );
 8001364:	e7fe      	b.n	8001364 <main+0xe8>
    }
    else
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <main+0x138>)
 8001368:	f003 fa46 	bl	80047f8 <puts>
      HAL_NVIC_SystemReset();
 800136c:	f000 fcbb 	bl	8001ce6 <HAL_NVIC_SystemReset>
    }
  }

  //Load the updated app, if it is available
  load_new_app();
 8001370:	f7ff fde2 	bl	8000f38 <load_new_app>

  // Jump to application
  goto_application();
 8001374:	f000 f98a 	bl	800168c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001378:	e7fe      	b.n	8001378 <main+0xfc>
 800137a:	bf00      	nop
 800137c:	40020400 	.word	0x40020400
 8001380:	080059b8 	.word	0x080059b8
 8001384:	080059d8 	.word	0x080059d8
 8001388:	08020000 	.word	0x08020000
 800138c:	facefade 	.word	0xfacefade
 8001390:	beeffeed 	.word	0xbeeffeed
 8001394:	deadbeef 	.word	0xdeadbeef
 8001398:	080059f8 	.word	0x080059f8
 800139c:	08005a08 	.word	0x08005a08
 80013a0:	08005a2c 	.word	0x08005a2c
 80013a4:	08005a44 	.word	0x08005a44
 80013a8:	40020800 	.word	0x40020800
 80013ac:	08005a7c 	.word	0x08005a7c
 80013b0:	08005a9c 	.word	0x08005a9c
 80013b4:	08005abc 	.word	0x08005abc

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0b8      	sub	sp, #224	; 0xe0
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013c2:	2234      	movs	r2, #52	; 0x34
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f988 	bl	80046dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2290      	movs	r2, #144	; 0x90
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f979 	bl	80046dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <SystemClock_Config+0xf0>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <SystemClock_Config+0xf0>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <SystemClock_Config+0xf0>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <SystemClock_Config+0xf4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <SystemClock_Config+0xf4>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <SystemClock_Config+0xf4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001424:	2301      	movs	r3, #1
 8001426:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142a:	2310      	movs	r3, #16
 800142c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001436:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fafc 	bl	8002a38 <HAL_RCC_OscConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001446:	f000 f93b 	bl	80016c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	230f      	movs	r3, #15
 800144c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001468:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fd90 	bl	8002f94 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800147a:	f000 f921 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800147e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001482:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001488:	2300      	movs	r3, #0
 800148a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4618      	mov	r0, r3
 8001492:	f001 ff55 	bl	8003340 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800149c:	f000 f910 	bl	80016c0 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	37e0      	adds	r7, #224	; 0xe0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_CRC_Init+0x3c>)
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <MX_CRC_Init+0x40>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_CRC_Init+0x3c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_CRC_Init+0x3c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_CRC_Init+0x3c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_CRC_Init+0x3c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_CRC_Init+0x3c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_CRC_Init+0x3c>)
 80014da:	f000 fc15 	bl	8001d08 <HAL_CRC_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014e4:	f000 f8ec 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000053c 	.word	0x2000053c
 80014f0:	40023000 	.word	0x40023000

080014f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_USART2_UART_Init+0x58>)
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <MX_USART2_UART_Init+0x5c>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USART2_UART_Init+0x58>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USART2_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001538:	f002 fb2a 	bl	8003b90 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001542:	f000 f8bd 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000560 	.word	0x20000560
 8001550:	40004400 	.word	0x40004400

08001554 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_USART3_UART_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001598:	f002 fafa 	bl	8003b90 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015a2:	f000 f88d 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200004b8 	.word	0x200004b8
 80015b0:	40004800 	.word	0x40004800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_GPIO_Init+0xa8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <MX_GPIO_Init+0xa8>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_GPIO_Init+0xa8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_GPIO_Init+0xa8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <MX_GPIO_Init+0xa8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_GPIO_Init+0xa8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_GPIO_Init+0xa8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_GPIO_Init+0xa8>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_GPIO_Init+0xa8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2101      	movs	r1, #1
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <MX_GPIO_Init+0xac>)
 8001618:	f001 f9f4 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_GPIO_Init+0xb0>)
 8001632:	f001 f823 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001636:	2301      	movs	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4619      	mov	r1, r3
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_GPIO_Init+0xac>)
 800164e:	f001 f815 	bl	800267c <HAL_GPIO_Init>

}
 8001652:	bf00      	nop
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800

08001668 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001670:	1d39      	adds	r1, r7, #4
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	2201      	movs	r2, #1
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <__io_putchar+0x20>)
 800167a:	f002 fad7 	bl	8003c2c <HAL_UART_Transmit>

  return ch;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200004b8 	.word	0x200004b8

0800168c <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <goto_application+0x28>)
 8001694:	f003 f8b0 	bl	80047f8 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (ETX_APP_FLASH_ADDR + 4U)));
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <goto_application+0x2c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) ETX_APP_FLASH_ADDR);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <goto_application+0x30>)
 80016a4:	f001 f9ae 	bl	8002a04 <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4798      	blx	r3
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08005ae8 	.word	0x08005ae8
 80016b8:	08040004 	.word	0x08040004
 80016bc:	40020400 	.word	0x40020400

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x44>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_CRC_MspInit+0x38>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10b      	bne.n	800173e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_CRC_MspInit+0x3c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_CRC_MspInit+0x3c>)
 800172c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HAL_CRC_MspInit+0x3c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023000 	.word	0x40023000
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2e      	ldr	r2, [pc, #184]	; (800182c <HAL_UART_MspInit+0xd8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d128      	bne.n	80017c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_UART_MspInit+0xdc>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_UART_MspInit+0xdc>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_UART_MspInit+0xdc>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_UART_MspInit+0xdc>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_UART_MspInit+0xdc>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_UART_MspInit+0xdc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b6:	2307      	movs	r3, #7
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	481c      	ldr	r0, [pc, #112]	; (8001834 <HAL_UART_MspInit+0xe0>)
 80017c2:	f000 ff5b 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c6:	e02d      	b.n	8001824 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_UART_MspInit+0xe4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d128      	bne.n	8001824 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_UART_MspInit+0xdc>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <HAL_UART_MspInit+0xdc>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_UART_MspInit+0xdc>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_UART_MspInit+0xdc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_UART_MspInit+0xdc>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_UART_MspInit+0xdc>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001814:	2307      	movs	r3, #7
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_MspInit+0xe0>)
 8001820:	f000 ff2c 	bl	800267c <HAL_GPIO_Init>
}
 8001824:	bf00      	nop
 8001826:	3730      	adds	r7, #48	; 0x30
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40004400 	.word	0x40004400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40004800 	.word	0x40004800

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f91e 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
	}

return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff febf 	bl	8001668 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
	}
	return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192a:	605a      	str	r2, [r3, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f002 fe74 	bl	8004688 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20080000 	.word	0x20080000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	200004ac 	.word	0x200004ac
 80019d4:	20000618 	.word	0x20000618

080019d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a02:	490e      	ldr	r1, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a18:	4c0b      	ldr	r4, [pc, #44]	; (8001a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a26:	f7ff ffd7 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f002 fe33 	bl	8004694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fc25 	bl	800127c <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a40:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 8001a44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a48:	20000614 	.word	0x20000614

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>

08001a4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f000 f920 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 f805 	bl	8001a68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a5e:	f7ff fe35 	bl	80016cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f931 	bl	8001cee <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f903 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	2000000c 	.word	0x2000000c
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	200005e4 	.word	0x200005e4

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200005e4 	.word	0x200005e4

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <__NVIC_SetPriorityGrouping+0x40>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x40>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	05fa0000 	.word	0x05fa0000

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c2c:	f3bf 8f4f 	dsb	sy
}
 8001c30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <__NVIC_SystemReset+0x24>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c3a:	4904      	ldr	r1, [pc, #16]	; (8001c4c <__NVIC_SystemReset+0x24>)
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_SystemReset+0x28>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c42:	f3bf 8f4f 	dsb	sy
}
 8001c46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <__NVIC_SystemReset+0x20>
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	05fa0004 	.word	0x05fa0004

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff78 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff46 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff78 	bl	8001bc0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff47 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001cea:	f7ff ff9d 	bl	8001c28 <__NVIC_SystemReset>

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffac 	bl	8001c54 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e054      	b.n	8001dc4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7f5b      	ldrb	r3, [r3, #29]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fcf2 	bl	8001714 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	791b      	ldrb	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_CRC_Init+0xc4>)
 8001d44:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0218 	bic.w	r2, r2, #24
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e00c      	b.n	8001d72 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	461a      	mov	r2, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f948 	bl	8001ff8 <HAL_CRCEx_Polynomial_Set>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e028      	b.n	8001dc4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	795b      	ldrb	r3, [r3, #5]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	e004      	b.n	8001d90 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6912      	ldr	r2, [r2, #16]
 8001d8e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	04c11db7 	.word	0x04c11db7

08001dd0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2202      	movs	r2, #2
 8001de4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d006      	beq.n	8001e0c <HAL_CRC_Calculate+0x3c>
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d829      	bhi.n	8001e56 <HAL_CRC_Calculate+0x86>
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d019      	beq.n	8001e3a <HAL_CRC_Calculate+0x6a>
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d01e      	beq.n	8001e48 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001e0a:	e024      	b.n	8001e56 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	441a      	add	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d3f0      	bcc.n	8001e12 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
      break;
 8001e38:	e00e      	b.n	8001e58 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f812 	bl	8001e68 <CRC_Handle_8>
 8001e44:	6138      	str	r0, [r7, #16]
      break;
 8001e46:	e007      	b.n	8001e58 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f899 	bl	8001f84 <CRC_Handle_16>
 8001e52:	6138      	str	r0, [r7, #16]
      break;
 8001e54:	e000      	b.n	8001e58 <HAL_CRC_Calculate+0x88>
      break;
 8001e56:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001e5e:	693b      	ldr	r3, [r7, #16]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e023      	b.n	8001ec2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	440b      	add	r3, r1
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e94:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001ea4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	3303      	adds	r3, #3
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	440b      	add	r3, r1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001eb8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3d6      	bcc.n	8001e7a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d04d      	beq.n	8001f72 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d116      	bne.n	8001f28 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	440b      	add	r3, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	8b7a      	ldrh	r2, [r7, #26]
 8001f26:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d11f      	bne.n	8001f72 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	3301      	adds	r3, #1
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	440b      	add	r3, r1
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	8b7a      	ldrh	r2, [r7, #26]
 8001f5e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	4413      	add	r3, r2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3724      	adds	r7, #36	; 0x24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e013      	b.n	8001fbe <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	440b      	add	r3, r1
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d3e6      	bcc.n	8001f96 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002008:	231f      	movs	r3, #31
 800200a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800200c:	bf00      	nop
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	613a      	str	r2, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_CRCEx_Polynomial_Set+0x34>
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_CRCEx_Polynomial_Set+0x16>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b18      	cmp	r3, #24
 8002030:	d846      	bhi.n	80020c0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	080020c7 	.word	0x080020c7
 800203c:	080020c1 	.word	0x080020c1
 8002040:	080020c1 	.word	0x080020c1
 8002044:	080020c1 	.word	0x080020c1
 8002048:	080020c1 	.word	0x080020c1
 800204c:	080020c1 	.word	0x080020c1
 8002050:	080020c1 	.word	0x080020c1
 8002054:	080020c1 	.word	0x080020c1
 8002058:	080020b5 	.word	0x080020b5
 800205c:	080020c1 	.word	0x080020c1
 8002060:	080020c1 	.word	0x080020c1
 8002064:	080020c1 	.word	0x080020c1
 8002068:	080020c1 	.word	0x080020c1
 800206c:	080020c1 	.word	0x080020c1
 8002070:	080020c1 	.word	0x080020c1
 8002074:	080020c1 	.word	0x080020c1
 8002078:	080020a9 	.word	0x080020a9
 800207c:	080020c1 	.word	0x080020c1
 8002080:	080020c1 	.word	0x080020c1
 8002084:	080020c1 	.word	0x080020c1
 8002088:	080020c1 	.word	0x080020c1
 800208c:	080020c1 	.word	0x080020c1
 8002090:	080020c1 	.word	0x080020c1
 8002094:	080020c1 	.word	0x080020c1
 8002098:	0800209d 	.word	0x0800209d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d913      	bls.n	80020ca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80020a6:	e010      	b.n	80020ca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b07      	cmp	r3, #7
 80020ac:	d90f      	bls.n	80020ce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80020b2:	e00c      	b.n	80020ce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	d90b      	bls.n	80020d2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80020be:	e008      	b.n	80020d2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
      break;
 80020c4:	e006      	b.n	80020d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020c6:	bf00      	nop
 80020c8:	e004      	b.n	80020d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020ca:	bf00      	nop
 80020cc:	e002      	b.n	80020d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020ce:	bf00      	nop
 80020d0:	e000      	b.n	80020d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020d2:	bf00      	nop
  }
  if (status == HAL_OK)
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 0118 	bic.w	r1, r3, #24
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_FLASH_Program+0xb0>)
 8002118:	7d1b      	ldrb	r3, [r3, #20]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_FLASH_Program+0x1e>
 800211e:	2302      	movs	r3, #2
 8002120:	e043      	b.n	80021aa <HAL_FLASH_Program+0xa6>
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_FLASH_Program+0xb0>)
 8002124:	2201      	movs	r2, #1
 8002126:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002128:	f24c 3050 	movw	r0, #50000	; 0xc350
 800212c:	f000 f878 	bl	8002220 <FLASH_WaitForLastOperation>
 8002130:	4603      	mov	r3, r0
 8002132:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d133      	bne.n	80021a2 <HAL_FLASH_Program+0x9e>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d823      	bhi.n	8002188 <HAL_FLASH_Program+0x84>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <HAL_FLASH_Program+0x44>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002159 	.word	0x08002159
 800214c:	08002165 	.word	0x08002165
 8002150:	08002171 	.word	0x08002171
 8002154:	0800217d 	.word	0x0800217d
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002158:	783b      	ldrb	r3, [r7, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f000 f921 	bl	80023a4 <FLASH_Program_Byte>
        break;
 8002162:	e012      	b.n	800218a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002164:	883b      	ldrh	r3, [r7, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	68b8      	ldr	r0, [r7, #8]
 800216a:	f000 f8f5 	bl	8002358 <FLASH_Program_HalfWord>
        break;
 800216e:	e00c      	b.n	800218a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	68b8      	ldr	r0, [r7, #8]
 8002176:	f000 f8c9 	bl	800230c <FLASH_Program_Word>
        break;
 800217a:	e006      	b.n	800218a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800217c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002180:	68b8      	ldr	r0, [r7, #8]
 8002182:	f000 f88d 	bl	80022a0 <FLASH_Program_DoubleWord>
        break;
 8002186:	e000      	b.n	800218a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002188:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800218a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800218e:	f000 f847 	bl	8002220 <FLASH_WaitForLastOperation>
 8002192:	4603      	mov	r3, r0
 8002194:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_FLASH_Program+0xb4>)
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_FLASH_Program+0xb4>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_FLASH_Program+0xb0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	751a      	strb	r2, [r3, #20]

  return status;
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200005e8 	.word	0x200005e8
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_FLASH_Unlock+0x38>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da0b      	bge.n	80021e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_FLASH_Unlock+0x38>)
 80021d0:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_FLASH_Unlock+0x3c>)
 80021d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_FLASH_Unlock+0x38>)
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_FLASH_Unlock+0x40>)
 80021d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_FLASH_Unlock+0x38>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da01      	bge.n	80021e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80021e6:	79fb      	ldrb	r3, [r7, #7]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	45670123 	.word	0x45670123
 80021fc:	cdef89ab 	.word	0xcdef89ab

08002200 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_FLASH_Lock+0x1c>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_FLASH_Lock+0x1c>)
 800220a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800220e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023c00 	.word	0x40023c00

08002220 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <FLASH_WaitForLastOperation+0x78>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002232:	f7ff fc5d 	bl	8001af0 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002238:	e010      	b.n	800225c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d00c      	beq.n	800225c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <FLASH_WaitForLastOperation+0x38>
 8002248:	f7ff fc52 	bl	8001af0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d201      	bcs.n	800225c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e019      	b.n	8002290 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <FLASH_WaitForLastOperation+0x7c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e8      	bne.n	800223a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <FLASH_WaitForLastOperation+0x7c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002274:	f000 f8ba 	bl	80023ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e009      	b.n	8002290 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <FLASH_WaitForLastOperation+0x7c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <FLASH_WaitForLastOperation+0x7c>)
 800228a:	2201      	movs	r2, #1
 800228c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
  
}  
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200005e8 	.word	0x200005e8
 800229c:	40023c00 	.word	0x40023c00

080022a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <FLASH_Program_DoubleWord+0x68>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	4a15      	ldr	r2, [pc, #84]	; (8002308 <FLASH_Program_DoubleWord+0x68>)
 80022b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <FLASH_Program_DoubleWord+0x68>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <FLASH_Program_DoubleWord+0x68>)
 80022be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <FLASH_Program_DoubleWord+0x68>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <FLASH_Program_DoubleWord+0x68>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80022d6:	f3bf 8f6f 	isb	sy
}
 80022da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80022dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	000a      	movs	r2, r1
 80022ea:	2300      	movs	r3, #0
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	3104      	adds	r1, #4
 80022f0:	4613      	mov	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80022f4:	f3bf 8f4f 	dsb	sy
}
 80022f8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <FLASH_Program_Word+0x48>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <FLASH_Program_Word+0x48>)
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <FLASH_Program_Word+0x48>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <FLASH_Program_Word+0x48>)
 8002328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <FLASH_Program_Word+0x48>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <FLASH_Program_Word+0x48>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002340:	f3bf 8f4f 	dsb	sy
}
 8002344:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023c00 	.word	0x40023c00

08002358 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <FLASH_Program_HalfWord+0x48>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <FLASH_Program_HalfWord+0x48>)
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <FLASH_Program_HalfWord+0x48>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <FLASH_Program_HalfWord+0x48>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <FLASH_Program_HalfWord+0x48>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <FLASH_Program_HalfWord+0x48>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
}
 8002392:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <FLASH_Program_Byte+0x44>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <FLASH_Program_Byte+0x44>)
 80023b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <FLASH_Program_Byte+0x44>)
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <FLASH_Program_Byte+0x44>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <FLASH_Program_Byte+0x44>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <FLASH_Program_Byte+0x44>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80023d6:	f3bf 8f4f 	dsb	sy
}
 80023da:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40023c00 	.word	0x40023c00

080023ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <FLASH_SetErrorCode+0x8c>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <FLASH_SetErrorCode+0x90>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <FLASH_SetErrorCode+0x90>)
 8002406:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <FLASH_SetErrorCode+0x8c>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <FLASH_SetErrorCode+0x90>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f043 0310 	orr.w	r3, r3, #16
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <FLASH_SetErrorCode+0x90>)
 800241e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <FLASH_SetErrorCode+0x8c>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <FLASH_SetErrorCode+0x90>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <FLASH_SetErrorCode+0x90>)
 8002436:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <FLASH_SetErrorCode+0x8c>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <FLASH_SetErrorCode+0x90>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	4a0b      	ldr	r2, [pc, #44]	; (800247c <FLASH_SetErrorCode+0x90>)
 800244e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <FLASH_SetErrorCode+0x8c>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <FLASH_SetErrorCode+0x90>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	4a05      	ldr	r2, [pc, #20]	; (800247c <FLASH_SetErrorCode+0x90>)
 8002466:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <FLASH_SetErrorCode+0x8c>)
 800246a:	22f2      	movs	r2, #242	; 0xf2
 800246c:	60da      	str	r2, [r3, #12]
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023c00 	.word	0x40023c00
 800247c:	200005e8 	.word	0x200005e8

08002480 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_FLASHEx_Erase+0xd4>)
 8002494:	7d1b      	ldrb	r3, [r3, #20]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_FLASHEx_Erase+0x1e>
 800249a:	2302      	movs	r3, #2
 800249c:	e056      	b.n	800254c <HAL_FLASHEx_Erase+0xcc>
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_FLASHEx_Erase+0xd4>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024a8:	f7ff feba 	bl	8002220 <FLASH_WaitForLastOperation>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d146      	bne.n	8002544 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d115      	bne.n	80024f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f000 f844 	bl	8002560 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024dc:	f7ff fea0 	bl	8002220 <FLASH_WaitForLastOperation>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_FLASHEx_Erase+0xd8>)
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	491b      	ldr	r1, [pc, #108]	; (8002558 <HAL_FLASHEx_Erase+0xd8>)
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_FLASHEx_Erase+0xdc>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	610b      	str	r3, [r1, #16]
 80024f0:	e028      	b.n	8002544 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	e01c      	b.n	8002534 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4619      	mov	r1, r3
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	f000 f868 	bl	80025d8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002508:	f24c 3050 	movw	r0, #50000	; 0xc350
 800250c:	f7ff fe88 	bl	8002220 <FLASH_WaitForLastOperation>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_FLASHEx_Erase+0xd8>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_FLASHEx_Erase+0xd8>)
 800251a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800251e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	601a      	str	r2, [r3, #0]
          break;
 800252c:	e00a      	b.n	8002544 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4413      	add	r3, r2
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	d3da      	bcc.n	80024fa <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_FLASHEx_Erase+0xd4>)
 8002546:	2200      	movs	r2, #0
 8002548:	751a      	strb	r2, [r3, #20]

  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200005e8 	.word	0x200005e8
 8002558:	40023c00 	.word	0x40023c00
 800255c:	ffff7ffb 	.word	0xffff7ffb

08002560 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <FLASH_MassErase+0x74>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <FLASH_MassErase+0x74>)
 8002572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002576:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d107      	bne.n	800258e <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <FLASH_MassErase+0x74>)
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	4914      	ldr	r1, [pc, #80]	; (80025d4 <FLASH_MassErase+0x74>)
 8002584:	f248 0304 	movw	r3, #32772	; 0x8004
 8002588:	4313      	orrs	r3, r2
 800258a:	610b      	str	r3, [r1, #16]
 800258c:	e00f      	b.n	80025ae <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d106      	bne.n	80025a2 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <FLASH_MassErase+0x74>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <FLASH_MassErase+0x74>)
 800259a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259e:	6113      	str	r3, [r2, #16]
 80025a0:	e005      	b.n	80025ae <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <FLASH_MassErase+0x74>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <FLASH_MassErase+0x74>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <FLASH_MassErase+0x74>)
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4313      	orrs	r3, r2
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <FLASH_MassErase+0x74>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80025c0:	f3bf 8f4f 	dsb	sy
}
 80025c4:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00

080025d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e010      	b.n	8002616 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d103      	bne.n	8002602 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80025fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e009      	b.n	8002616 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d103      	bne.n	8002610 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e002      	b.n	8002616 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002614:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b0b      	cmp	r3, #11
 800261a:	d902      	bls.n	8002622 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	4911      	ldr	r1, [pc, #68]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002640:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002644:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4313      	orrs	r3, r2
 8002650:	4a09      	ldr	r2, [pc, #36]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <FLASH_Erase_Sector+0xa0>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002664:	f3bf 8f4f 	dsb	sy
}
 8002668:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023c00 	.word	0x40023c00

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e175      	b.n	8002988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800269c:	2201      	movs	r2, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f040 8164 	bne.w	8002982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d00b      	beq.n	80026da <HAL_GPIO_Init+0x5e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d007      	beq.n	80026da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ce:	2b11      	cmp	r3, #17
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d130      	bne.n	800273c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 0201 	and.w	r2, r3, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x100>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b12      	cmp	r3, #18
 800277a:	d123      	bne.n	80027c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	08da      	lsrs	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3208      	adds	r2, #8
 8002784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0203 	and.w	r2, r3, #3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80be 	beq.w	8002982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_GPIO_Init+0x324>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a65      	ldr	r2, [pc, #404]	; (80029a0 <HAL_GPIO_Init+0x324>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_GPIO_Init+0x324>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800281e:	4a61      	ldr	r2, [pc, #388]	; (80029a4 <HAL_GPIO_Init+0x328>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	220f      	movs	r2, #15
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_GPIO_Init+0x32c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d037      	beq.n	80028ba <HAL_GPIO_Init+0x23e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a57      	ldr	r2, [pc, #348]	; (80029ac <HAL_GPIO_Init+0x330>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_GPIO_Init+0x23a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a56      	ldr	r2, [pc, #344]	; (80029b0 <HAL_GPIO_Init+0x334>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <HAL_GPIO_Init+0x236>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a55      	ldr	r2, [pc, #340]	; (80029b4 <HAL_GPIO_Init+0x338>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d025      	beq.n	80028ae <HAL_GPIO_Init+0x232>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a54      	ldr	r2, [pc, #336]	; (80029b8 <HAL_GPIO_Init+0x33c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <HAL_GPIO_Init+0x22e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a53      	ldr	r2, [pc, #332]	; (80029bc <HAL_GPIO_Init+0x340>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x22a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x344>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_GPIO_Init+0x348>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_GPIO_Init+0x34c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_GPIO_Init+0x350>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x21a>
 8002892:	2309      	movs	r3, #9
 8002894:	e012      	b.n	80028bc <HAL_GPIO_Init+0x240>
 8002896:	230a      	movs	r3, #10
 8002898:	e010      	b.n	80028bc <HAL_GPIO_Init+0x240>
 800289a:	2308      	movs	r3, #8
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x240>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x328>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_GPIO_Init+0x354>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fe:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002928:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <HAL_GPIO_Init+0x354>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_GPIO_Init+0x354>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_GPIO_Init+0x354>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae86 	bls.w	800269c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40022400 	.word	0x40022400
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e001      	b.n	80029f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a20:	e003      	b.n	8002a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e29b      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8087 	beq.w	8002b6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5c:	4b96      	ldr	r3, [pc, #600]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d00c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a68:	4b93      	ldr	r3, [pc, #588]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d112      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62>
 8002a74:	4b90      	ldr	r3, [pc, #576]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a80:	d10b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a82:	4b8d      	ldr	r3, [pc, #564]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d06c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x130>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d168      	bne.n	8002b68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e275      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x7a>
 8002aa4:	4b84      	ldr	r3, [pc, #528]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a83      	ldr	r2, [pc, #524]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e02e      	b.n	8002b10 <HAL_RCC_OscConfig+0xd8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x9c>
 8002aba:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7e      	ldr	r2, [pc, #504]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7b      	ldr	r2, [pc, #492]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xd8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002ade:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a75      	ldr	r2, [pc, #468]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a72      	ldr	r2, [pc, #456]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xd8>
 8002af8:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6b      	ldr	r2, [pc, #428]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe ffea 	bl	8001af0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe ffe6 	bl	8001af0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e229      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe ffd6 	bl	8001af0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe ffd2 	bl	8001af0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e215      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b57      	ldr	r3, [pc, #348]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x110>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d069      	beq.n	8002c4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b76:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b4d      	ldr	r3, [pc, #308]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x190>
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1e9      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	493d      	ldr	r1, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e040      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d023      	beq.n	8002c18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ff88 	bl	8001af0 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be4:	f7fe ff84 	bl	8001af0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1c7      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4929      	ldr	r1, [pc, #164]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
 8002c16:	e018      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe ff64 	bl	8001af0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7fe ff60 	bl	8001af0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1a3      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d038      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe ff41 	bl	8001af0 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe ff3d 	bl	8001af0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e180      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x23a>
 8002c90:	e01a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x280>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe ff27 	bl	8001af0 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca6:	f7fe ff23 	bl	8001af0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d903      	bls.n	8002cbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e166      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
 8002cb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a4 	beq.w	8002e1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a88      	ldr	r2, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b86      	ldr	r3, [pc, #536]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfe:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <HAL_RCC_OscConfig+0x4d4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d0a:	4b80      	ldr	r3, [pc, #512]	; (8002f0c <HAL_RCC_OscConfig+0x4d4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7f      	ldr	r2, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x4d4>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe feeb 	bl	8001af0 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe fee7 	bl	8001af0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e12a      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x4d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x31a>
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a6f      	ldr	r2, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	e02d      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x33c>
 8002d5a:	4b6b      	ldr	r3, [pc, #428]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
 8002d66:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	e01c      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCC_OscConfig+0x35e>
 8002d7c:	4b62      	ldr	r3, [pc, #392]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a61      	ldr	r2, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a5e      	ldr	r2, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	e00b      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
 8002d96:	4b5c      	ldr	r3, [pc, #368]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a5b      	ldr	r2, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe fe9b 	bl	8001af0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fe97 	bl	8001af0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0d8      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RCC_OscConfig+0x386>
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7fe fe85 	bl	8001af0 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe fe81 	bl	8001af0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0c2      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80ae 	beq.w	8002f84 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d06d      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d14b      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a31      	ldr	r2, [pc, #196]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fe52 	bl	8001af0 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fe4e 	bl	8001af0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e091      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	3b01      	subs	r3, #1
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	071b      	lsls	r3, r3, #28
 8002e9a:	491b      	ldr	r1, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fe20 	bl	8001af0 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe fe1c 	bl	8001af0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e05f      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
 8002ed2:	e057      	b.n	8002f84 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fe06 	bl	8001af0 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fe02 	bl	8001af0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e045      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4b0>
 8002f06:	e03d      	b.n	8002f84 <HAL_RCC_OscConfig+0x54c>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_RCC_OscConfig+0x558>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d030      	beq.n	8002f80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d129      	bne.n	8002f80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d122      	bne.n	8002f80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d119      	bne.n	8002f80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10f      	bne.n	8002f80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0d0      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d910      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b67      	ldr	r3, [pc, #412]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 020f 	bic.w	r2, r3, #15
 8002fc2:	4965      	ldr	r1, [pc, #404]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8002ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d040      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d115      	bne.n	8003076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e073      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06b      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4936      	ldr	r1, [pc, #216]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fe fd32 	bl	8001af0 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fe fd2e 	bl	8001af0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e053      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b27      	ldr	r3, [pc, #156]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d210      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	4922      	ldr	r1, [pc, #136]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490a      	ldr	r1, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x1cc>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1d0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1d4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fc8e 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00
 800315c:	40023800 	.word	0x40023800
 8003160:	08005b04 	.word	0x08005b04
 8003164:	20000004 	.word	0x20000004
 8003168:	20000008 	.word	0x20000008

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b5b0      	push	{r4, r5, r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003172:	2100      	movs	r1, #0
 8003174:	6079      	str	r1, [r7, #4]
 8003176:	2100      	movs	r1, #0
 8003178:	60f9      	str	r1, [r7, #12]
 800317a:	2100      	movs	r1, #0
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800317e:	2100      	movs	r1, #0
 8003180:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003182:	4952      	ldr	r1, [pc, #328]	; (80032cc <HAL_RCC_GetSysClockFreq+0x160>)
 8003184:	6889      	ldr	r1, [r1, #8]
 8003186:	f001 010c 	and.w	r1, r1, #12
 800318a:	2908      	cmp	r1, #8
 800318c:	d00d      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x3e>
 800318e:	2908      	cmp	r1, #8
 8003190:	f200 8094 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x150>
 8003194:	2900      	cmp	r1, #0
 8003196:	d002      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x32>
 8003198:	2904      	cmp	r1, #4
 800319a:	d003      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x38>
 800319c:	e08e      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319e:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80031a0:	60bb      	str	r3, [r7, #8]
      break;
 80031a2:	e08e      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80031a6:	60bb      	str	r3, [r7, #8]
      break;
 80031a8:	e08b      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031aa:	4948      	ldr	r1, [pc, #288]	; (80032cc <HAL_RCC_GetSysClockFreq+0x160>)
 80031ac:	6849      	ldr	r1, [r1, #4]
 80031ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80031b2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031b4:	4945      	ldr	r1, [pc, #276]	; (80032cc <HAL_RCC_GetSysClockFreq+0x160>)
 80031b6:	6849      	ldr	r1, [r1, #4]
 80031b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031bc:	2900      	cmp	r1, #0
 80031be:	d024      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4942      	ldr	r1, [pc, #264]	; (80032cc <HAL_RCC_GetSysClockFreq+0x160>)
 80031c2:	6849      	ldr	r1, [r1, #4]
 80031c4:	0989      	lsrs	r1, r1, #6
 80031c6:	4608      	mov	r0, r1
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031d0:	f04f 0500 	mov.w	r5, #0
 80031d4:	ea00 0204 	and.w	r2, r0, r4
 80031d8:	ea01 0305 	and.w	r3, r1, r5
 80031dc:	493d      	ldr	r1, [pc, #244]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80031de:	fb01 f003 	mul.w	r0, r1, r3
 80031e2:	2100      	movs	r1, #0
 80031e4:	fb01 f102 	mul.w	r1, r1, r2
 80031e8:	1844      	adds	r4, r0, r1
 80031ea:	493a      	ldr	r1, [pc, #232]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80031ec:	fba2 0101 	umull	r0, r1, r2, r1
 80031f0:	1863      	adds	r3, r4, r1
 80031f2:	4619      	mov	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	f7fd f870 	bl	80002e0 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e04a      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_GetSysClockFreq+0x160>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	461a      	mov	r2, r3
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	ea02 0400 	and.w	r4, r2, r0
 8003222:	ea03 0501 	and.w	r5, r3, r1
 8003226:	4620      	mov	r0, r4
 8003228:	4629      	mov	r1, r5
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	014b      	lsls	r3, r1, #5
 8003234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003238:	0142      	lsls	r2, r0, #5
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	1b00      	subs	r0, r0, r4
 8003240:	eb61 0105 	sbc.w	r1, r1, r5
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	018b      	lsls	r3, r1, #6
 800324e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003252:	0182      	lsls	r2, r0, #6
 8003254:	1a12      	subs	r2, r2, r0
 8003256:	eb63 0301 	sbc.w	r3, r3, r1
 800325a:	f04f 0000 	mov.w	r0, #0
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	00d9      	lsls	r1, r3, #3
 8003264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003268:	00d0      	lsls	r0, r2, #3
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	1912      	adds	r2, r2, r4
 8003270:	eb45 0303 	adc.w	r3, r5, r3
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0299      	lsls	r1, r3, #10
 800327e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003282:	0290      	lsls	r0, r2, #10
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	461a      	mov	r2, r3
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	f7fd f824 	bl	80002e0 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_GetSysClockFreq+0x160>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	60bb      	str	r3, [r7, #8]
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80032be:	60bb      	str	r3, [r7, #8]
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	68bb      	ldr	r3, [r7, #8]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bdb0      	pop	{r4, r5, r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	017d7840 	.word	0x017d7840

080032d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_RCC_GetHCLKFreq+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f4:	f7ff fff0 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0a9b      	lsrs	r3, r3, #10
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	08005b14 	.word	0x08005b14

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff ffdc 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0b5b      	lsrs	r3, r3, #13
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	08005b14 	.word	0x08005b14

08003340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d012      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003368:	4b69      	ldr	r3, [pc, #420]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a68      	ldr	r2, [pc, #416]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003372:	6093      	str	r3, [r2, #8]
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	4964      	ldr	r1, [pc, #400]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800338a:	2301      	movs	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d017      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	4959      	ldr	r1, [pc, #356]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b8:	d101      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d017      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	494a      	ldr	r1, [pc, #296]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 808b 	beq.w	800353a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a39      	ldr	r2, [pc, #228]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
 8003430:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a34      	ldr	r2, [pc, #208]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fe fb52 	bl	8001af0 <HAL_GetTick>
 800344c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003450:	f7fe fb4e 	bl	8001af0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e38f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d035      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	d02e      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003494:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a1a      	ldr	r2, [pc, #104]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d114      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fb16 	bl	8001af0 <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fe fb12 	bl	8001af0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e351      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ee      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f6:	d111      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003506:	400b      	ands	r3, r1
 8003508:	4901      	ldr	r1, [pc, #4]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
 800350e:	e00b      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003510:	40023800 	.word	0x40023800
 8003514:	40007000 	.word	0x40007000
 8003518:	0ffffcff 	.word	0x0ffffcff
 800351c:	4bb3      	ldr	r3, [pc, #716]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4ab2      	ldr	r2, [pc, #712]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003526:	6093      	str	r3, [r2, #8]
 8003528:	4bb0      	ldr	r3, [pc, #704]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003534:	49ad      	ldr	r1, [pc, #692]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	4313      	orrs	r3, r2
 8003538:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	d010      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003546:	4ba9      	ldr	r3, [pc, #676]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354c:	4aa7      	ldr	r2, [pc, #668]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003556:	4ba5      	ldr	r3, [pc, #660]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	49a2      	ldr	r1, [pc, #648]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003574:	4b9d      	ldr	r3, [pc, #628]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003582:	499a      	ldr	r1, [pc, #616]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003596:	4b95      	ldr	r3, [pc, #596]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a4:	4991      	ldr	r1, [pc, #580]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b8:	4b8c      	ldr	r3, [pc, #560]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c6:	4989      	ldr	r1, [pc, #548]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035da:	4b84      	ldr	r3, [pc, #528]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4980      	ldr	r1, [pc, #512]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035fc:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	4978      	ldr	r1, [pc, #480]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800361e:	4b73      	ldr	r3, [pc, #460]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	f023 020c 	bic.w	r2, r3, #12
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362c:	496f      	ldr	r1, [pc, #444]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003640:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	4967      	ldr	r1, [pc, #412]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003662:	4b62      	ldr	r3, [pc, #392]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003670:	495e      	ldr	r1, [pc, #376]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003684:	4b59      	ldr	r3, [pc, #356]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	4956      	ldr	r1, [pc, #344]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	494d      	ldr	r1, [pc, #308]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	4945      	ldr	r1, [pc, #276]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036ea:	4b40      	ldr	r3, [pc, #256]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	493c      	ldr	r1, [pc, #240]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800370c:	4b37      	ldr	r3, [pc, #220]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371a:	4934      	ldr	r1, [pc, #208]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373c:	492b      	ldr	r1, [pc, #172]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	491b      	ldr	r1, [pc, #108]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a0:	4912      	ldr	r1, [pc, #72]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	4909      	ldr	r1, [pc, #36]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	4986      	ldr	r1, [pc, #536]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003804:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003814:	497d      	ldr	r1, [pc, #500]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d006      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80d6 	beq.w	80039dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003830:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a75      	ldr	r2, [pc, #468]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800383a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fe f958 	bl	8001af0 <HAL_GetTick>
 8003840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003844:	f7fe f954 	bl	8001af0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e195      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003856:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d021      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11d      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003884:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388a:	0e1b      	lsrs	r3, r3, #24
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	019a      	lsls	r2, r3, #6
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	061b      	lsls	r3, r3, #24
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	071b      	lsls	r3, r3, #28
 80038aa:	4958      	ldr	r1, [pc, #352]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d129      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038de:	4b4b      	ldr	r3, [pc, #300]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038ec:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f2:	0f1b      	lsrs	r3, r3, #28
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	019a      	lsls	r2, r3, #6
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	071b      	lsls	r3, r3, #28
 8003912:	493e      	ldr	r1, [pc, #248]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800391a:	4b3c      	ldr	r3, [pc, #240]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003920:	f023 021f 	bic.w	r2, r3, #31
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	3b01      	subs	r3, #1
 800392a:	4938      	ldr	r1, [pc, #224]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01d      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800393e:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003944:	0e1b      	lsrs	r3, r3, #24
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800394c:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003952:	0f1b      	lsrs	r3, r3, #28
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	019a      	lsls	r2, r3, #6
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	071b      	lsls	r3, r3, #28
 8003972:	4926      	ldr	r1, [pc, #152]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	019a      	lsls	r2, r3, #6
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	491a      	ldr	r1, [pc, #104]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b6:	f7fe f89b 	bl	8001af0 <HAL_GetTick>
 80039ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039be:	f7fe f897 	bl	8001af0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	; 0x64
 80039ca:	d901      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0d8      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 80ce 	bne.w	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f0:	f7fe f87e 	bl	8001af0 <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f8:	f7fe f87a 	bl	8001af0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d904      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0bb      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a10:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1c:	d0ec      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d12a      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a46:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a54:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	0f1b      	lsrs	r3, r3, #28
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	019a      	lsls	r2, r3, #6
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	071b      	lsls	r3, r3, #28
 8003a7a:	4944      	ldr	r1, [pc, #272]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a82:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	3b01      	subs	r3, #1
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	493d      	ldr	r1, [pc, #244]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d022      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab0:	d11d      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ab2:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	0e1b      	lsrs	r3, r3, #24
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ac0:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	0f1b      	lsrs	r3, r3, #28
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	019a      	lsls	r2, r3, #6
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	071b      	lsls	r3, r3, #28
 8003ae6:	4929      	ldr	r1, [pc, #164]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d028      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	0e1b      	lsrs	r3, r3, #24
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	019a      	lsls	r2, r3, #6
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	071b      	lsls	r3, r3, #28
 8003b2e:	4917      	ldr	r1, [pc, #92]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4911      	ldr	r1, [pc, #68]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fd ffca 	bl	8001af0 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b60:	f7fd ffc6 	bl	8001af0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e007      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7e:	d1ef      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e040      	b.n	8003c24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fdce 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f990 	bl	8003ef4 <UART_SetConfig>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e022      	b.n	8003c24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fbe6 	bl	80043b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fc6d 	bl	80044fc <UART_CheckIdleState>
 8003c22:	4603      	mov	r3, r0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	; 0x28
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	f040 8081 	bne.w	8003d48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_UART_Transmit+0x26>
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e079      	b.n	8003d4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Transmit+0x38>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e072      	b.n	8003d4a <HAL_UART_Transmit+0x11e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2221      	movs	r2, #33	; 0x21
 8003c78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd ff39 	bl	8001af0 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c98:	d108      	bne.n	8003cac <HAL_UART_Transmit+0x80>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003cbc:	e02c      	b.n	8003d18 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fc60 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e038      	b.n	8003d4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3301      	adds	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1cc      	bne.n	8003cbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fc2d 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e005      	b.n	8003d4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08a      	sub	sp, #40	; 0x28
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 80be 	bne.w	8003ee8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Receive+0x26>
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b6      	b.n	8003eea <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Receive+0x38>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0af      	b.n	8003eea <HAL_UART_Receive+0x198>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2222      	movs	r2, #34	; 0x22
 8003d9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da6:	f7fd fea3 	bl	8001af0 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d10e      	bne.n	8003de4 <HAL_UART_Receive+0x92>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_UART_Receive+0x88>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dd8:	e02d      	b.n	8003e36 <HAL_UART_Receive+0xe4>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	22ff      	movs	r2, #255	; 0xff
 8003dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003de2:	e028      	b.n	8003e36 <HAL_UART_Receive+0xe4>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10d      	bne.n	8003e08 <HAL_UART_Receive+0xb6>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <HAL_UART_Receive+0xac>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dfc:	e01b      	b.n	8003e36 <HAL_UART_Receive+0xe4>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	227f      	movs	r2, #127	; 0x7f
 8003e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e06:	e016      	b.n	8003e36 <HAL_UART_Receive+0xe4>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e10:	d10d      	bne.n	8003e2e <HAL_UART_Receive+0xdc>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_Receive+0xd2>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	227f      	movs	r2, #127	; 0x7f
 8003e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e22:	e008      	b.n	8003e36 <HAL_UART_Receive+0xe4>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	223f      	movs	r2, #63	; 0x3f
 8003e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e2c:	e003      	b.n	8003e36 <HAL_UART_Receive+0xe4>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e3c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d108      	bne.n	8003e5a <HAL_UART_Receive+0x108>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e003      	b.n	8003e62 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003e6a:	e032      	b.n	8003ed2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2120      	movs	r1, #32
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fb89 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e031      	b.n	8003eea <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	8a7b      	ldrh	r3, [r7, #18]
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e00c      	b.n	8003ec0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	8a7b      	ldrh	r3, [r7, #18]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1c6      	bne.n	8003e6c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4ba7      	ldr	r3, [pc, #668]	; (80041bc <UART_SetConfig+0x2c8>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	6979      	ldr	r1, [r7, #20]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a95      	ldr	r2, [pc, #596]	; (80041c0 <UART_SetConfig+0x2cc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d120      	bne.n	8003fb2 <UART_SetConfig+0xbe>
 8003f70:	4b94      	ldr	r3, [pc, #592]	; (80041c4 <UART_SetConfig+0x2d0>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d816      	bhi.n	8003fac <UART_SetConfig+0xb8>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <UART_SetConfig+0x90>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003fa1 	.word	0x08003fa1
 8003f8c:	08003f9b 	.word	0x08003f9b
 8003f90:	08003fa7 	.word	0x08003fa7
 8003f94:	2301      	movs	r3, #1
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e14f      	b.n	800423a <UART_SetConfig+0x346>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e14c      	b.n	800423a <UART_SetConfig+0x346>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e149      	b.n	800423a <UART_SetConfig+0x346>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e146      	b.n	800423a <UART_SetConfig+0x346>
 8003fac:	2310      	movs	r3, #16
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e143      	b.n	800423a <UART_SetConfig+0x346>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a84      	ldr	r2, [pc, #528]	; (80041c8 <UART_SetConfig+0x2d4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d132      	bne.n	8004022 <UART_SetConfig+0x12e>
 8003fbc:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <UART_SetConfig+0x2d0>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d828      	bhi.n	800401c <UART_SetConfig+0x128>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0xdc>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08004005 	.word	0x08004005
 8003fd4:	0800401d 	.word	0x0800401d
 8003fd8:	0800401d 	.word	0x0800401d
 8003fdc:	0800401d 	.word	0x0800401d
 8003fe0:	08004011 	.word	0x08004011
 8003fe4:	0800401d 	.word	0x0800401d
 8003fe8:	0800401d 	.word	0x0800401d
 8003fec:	0800401d 	.word	0x0800401d
 8003ff0:	0800400b 	.word	0x0800400b
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	0800401d 	.word	0x0800401d
 8004000:	08004017 	.word	0x08004017
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e117      	b.n	800423a <UART_SetConfig+0x346>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e114      	b.n	800423a <UART_SetConfig+0x346>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e111      	b.n	800423a <UART_SetConfig+0x346>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e10e      	b.n	800423a <UART_SetConfig+0x346>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e10b      	b.n	800423a <UART_SetConfig+0x346>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a69      	ldr	r2, [pc, #420]	; (80041cc <UART_SetConfig+0x2d8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d120      	bne.n	800406e <UART_SetConfig+0x17a>
 800402c:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <UART_SetConfig+0x2d0>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004036:	2b30      	cmp	r3, #48	; 0x30
 8004038:	d013      	beq.n	8004062 <UART_SetConfig+0x16e>
 800403a:	2b30      	cmp	r3, #48	; 0x30
 800403c:	d814      	bhi.n	8004068 <UART_SetConfig+0x174>
 800403e:	2b20      	cmp	r3, #32
 8004040:	d009      	beq.n	8004056 <UART_SetConfig+0x162>
 8004042:	2b20      	cmp	r3, #32
 8004044:	d810      	bhi.n	8004068 <UART_SetConfig+0x174>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <UART_SetConfig+0x15c>
 800404a:	2b10      	cmp	r3, #16
 800404c:	d006      	beq.n	800405c <UART_SetConfig+0x168>
 800404e:	e00b      	b.n	8004068 <UART_SetConfig+0x174>
 8004050:	2300      	movs	r3, #0
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e0f1      	b.n	800423a <UART_SetConfig+0x346>
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e0ee      	b.n	800423a <UART_SetConfig+0x346>
 800405c:	2304      	movs	r3, #4
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e0eb      	b.n	800423a <UART_SetConfig+0x346>
 8004062:	2308      	movs	r3, #8
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e0e8      	b.n	800423a <UART_SetConfig+0x346>
 8004068:	2310      	movs	r3, #16
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e0e5      	b.n	800423a <UART_SetConfig+0x346>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a57      	ldr	r2, [pc, #348]	; (80041d0 <UART_SetConfig+0x2dc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d120      	bne.n	80040ba <UART_SetConfig+0x1c6>
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <UART_SetConfig+0x2d0>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004082:	2bc0      	cmp	r3, #192	; 0xc0
 8004084:	d013      	beq.n	80040ae <UART_SetConfig+0x1ba>
 8004086:	2bc0      	cmp	r3, #192	; 0xc0
 8004088:	d814      	bhi.n	80040b4 <UART_SetConfig+0x1c0>
 800408a:	2b80      	cmp	r3, #128	; 0x80
 800408c:	d009      	beq.n	80040a2 <UART_SetConfig+0x1ae>
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d810      	bhi.n	80040b4 <UART_SetConfig+0x1c0>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <UART_SetConfig+0x1a8>
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d006      	beq.n	80040a8 <UART_SetConfig+0x1b4>
 800409a:	e00b      	b.n	80040b4 <UART_SetConfig+0x1c0>
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e0cb      	b.n	800423a <UART_SetConfig+0x346>
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e0c8      	b.n	800423a <UART_SetConfig+0x346>
 80040a8:	2304      	movs	r3, #4
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e0c5      	b.n	800423a <UART_SetConfig+0x346>
 80040ae:	2308      	movs	r3, #8
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e0c2      	b.n	800423a <UART_SetConfig+0x346>
 80040b4:	2310      	movs	r3, #16
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e0bf      	b.n	800423a <UART_SetConfig+0x346>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a45      	ldr	r2, [pc, #276]	; (80041d4 <UART_SetConfig+0x2e0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d125      	bne.n	8004110 <UART_SetConfig+0x21c>
 80040c4:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <UART_SetConfig+0x2d0>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d2:	d017      	beq.n	8004104 <UART_SetConfig+0x210>
 80040d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d8:	d817      	bhi.n	800410a <UART_SetConfig+0x216>
 80040da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040de:	d00b      	beq.n	80040f8 <UART_SetConfig+0x204>
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d811      	bhi.n	800410a <UART_SetConfig+0x216>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <UART_SetConfig+0x1fe>
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ee:	d006      	beq.n	80040fe <UART_SetConfig+0x20a>
 80040f0:	e00b      	b.n	800410a <UART_SetConfig+0x216>
 80040f2:	2300      	movs	r3, #0
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e0a0      	b.n	800423a <UART_SetConfig+0x346>
 80040f8:	2302      	movs	r3, #2
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e09d      	b.n	800423a <UART_SetConfig+0x346>
 80040fe:	2304      	movs	r3, #4
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e09a      	b.n	800423a <UART_SetConfig+0x346>
 8004104:	2308      	movs	r3, #8
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e097      	b.n	800423a <UART_SetConfig+0x346>
 800410a:	2310      	movs	r3, #16
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e094      	b.n	800423a <UART_SetConfig+0x346>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a30      	ldr	r2, [pc, #192]	; (80041d8 <UART_SetConfig+0x2e4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d125      	bne.n	8004166 <UART_SetConfig+0x272>
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <UART_SetConfig+0x2d0>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004128:	d017      	beq.n	800415a <UART_SetConfig+0x266>
 800412a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800412e:	d817      	bhi.n	8004160 <UART_SetConfig+0x26c>
 8004130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004134:	d00b      	beq.n	800414e <UART_SetConfig+0x25a>
 8004136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413a:	d811      	bhi.n	8004160 <UART_SetConfig+0x26c>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <UART_SetConfig+0x254>
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004144:	d006      	beq.n	8004154 <UART_SetConfig+0x260>
 8004146:	e00b      	b.n	8004160 <UART_SetConfig+0x26c>
 8004148:	2301      	movs	r3, #1
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e075      	b.n	800423a <UART_SetConfig+0x346>
 800414e:	2302      	movs	r3, #2
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e072      	b.n	800423a <UART_SetConfig+0x346>
 8004154:	2304      	movs	r3, #4
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e06f      	b.n	800423a <UART_SetConfig+0x346>
 800415a:	2308      	movs	r3, #8
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e06c      	b.n	800423a <UART_SetConfig+0x346>
 8004160:	2310      	movs	r3, #16
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e069      	b.n	800423a <UART_SetConfig+0x346>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <UART_SetConfig+0x2e8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d137      	bne.n	80041e0 <UART_SetConfig+0x2ec>
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <UART_SetConfig+0x2d0>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800417a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800417e:	d017      	beq.n	80041b0 <UART_SetConfig+0x2bc>
 8004180:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004184:	d817      	bhi.n	80041b6 <UART_SetConfig+0x2c2>
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418a:	d00b      	beq.n	80041a4 <UART_SetConfig+0x2b0>
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004190:	d811      	bhi.n	80041b6 <UART_SetConfig+0x2c2>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <UART_SetConfig+0x2aa>
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419a:	d006      	beq.n	80041aa <UART_SetConfig+0x2b6>
 800419c:	e00b      	b.n	80041b6 <UART_SetConfig+0x2c2>
 800419e:	2300      	movs	r3, #0
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e04a      	b.n	800423a <UART_SetConfig+0x346>
 80041a4:	2302      	movs	r3, #2
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e047      	b.n	800423a <UART_SetConfig+0x346>
 80041aa:	2304      	movs	r3, #4
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e044      	b.n	800423a <UART_SetConfig+0x346>
 80041b0:	2308      	movs	r3, #8
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e041      	b.n	800423a <UART_SetConfig+0x346>
 80041b6:	2310      	movs	r3, #16
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e03e      	b.n	800423a <UART_SetConfig+0x346>
 80041bc:	efff69f3 	.word	0xefff69f3
 80041c0:	40011000 	.word	0x40011000
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40004400 	.word	0x40004400
 80041cc:	40004800 	.word	0x40004800
 80041d0:	40004c00 	.word	0x40004c00
 80041d4:	40005000 	.word	0x40005000
 80041d8:	40011400 	.word	0x40011400
 80041dc:	40007800 	.word	0x40007800
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a71      	ldr	r2, [pc, #452]	; (80043ac <UART_SetConfig+0x4b8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d125      	bne.n	8004236 <UART_SetConfig+0x342>
 80041ea:	4b71      	ldr	r3, [pc, #452]	; (80043b0 <UART_SetConfig+0x4bc>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041f8:	d017      	beq.n	800422a <UART_SetConfig+0x336>
 80041fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0x33c>
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d00b      	beq.n	800421e <UART_SetConfig+0x32a>
 8004206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420a:	d811      	bhi.n	8004230 <UART_SetConfig+0x33c>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0x324>
 8004210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004214:	d006      	beq.n	8004224 <UART_SetConfig+0x330>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x33c>
 8004218:	2300      	movs	r3, #0
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e00d      	b.n	800423a <UART_SetConfig+0x346>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e00a      	b.n	800423a <UART_SetConfig+0x346>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e007      	b.n	800423a <UART_SetConfig+0x346>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e004      	b.n	800423a <UART_SetConfig+0x346>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e001      	b.n	800423a <UART_SetConfig+0x346>
 8004236:	2310      	movs	r3, #16
 8004238:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004242:	d15b      	bne.n	80042fc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004244:	7ffb      	ldrb	r3, [r7, #31]
 8004246:	2b08      	cmp	r3, #8
 8004248:	d827      	bhi.n	800429a <UART_SetConfig+0x3a6>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <UART_SetConfig+0x35c>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004275 	.word	0x08004275
 8004254:	0800427d 	.word	0x0800427d
 8004258:	08004285 	.word	0x08004285
 800425c:	0800429b 	.word	0x0800429b
 8004260:	0800428b 	.word	0x0800428b
 8004264:	0800429b 	.word	0x0800429b
 8004268:	0800429b 	.word	0x0800429b
 800426c:	0800429b 	.word	0x0800429b
 8004270:	08004293 	.word	0x08004293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004274:	f7ff f83c 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004278:	61b8      	str	r0, [r7, #24]
        break;
 800427a:	e013      	b.n	80042a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7ff f84c 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 8004280:	61b8      	str	r0, [r7, #24]
        break;
 8004282:	e00f      	b.n	80042a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004284:	4b4b      	ldr	r3, [pc, #300]	; (80043b4 <UART_SetConfig+0x4c0>)
 8004286:	61bb      	str	r3, [r7, #24]
        break;
 8004288:	e00c      	b.n	80042a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800428a:	f7fe ff6f 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800428e:	61b8      	str	r0, [r7, #24]
        break;
 8004290:	e008      	b.n	80042a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	61bb      	str	r3, [r7, #24]
        break;
 8004298:	e004      	b.n	80042a4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	77bb      	strb	r3, [r7, #30]
        break;
 80042a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d074      	beq.n	8004394 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	005a      	lsls	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b0f      	cmp	r3, #15
 80042c6:	d916      	bls.n	80042f6 <UART_SetConfig+0x402>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d212      	bcs.n	80042f6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f023 030f 	bic.w	r3, r3, #15
 80042d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	89fb      	ldrh	r3, [r7, #14]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	89fa      	ldrh	r2, [r7, #14]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e04e      	b.n	8004394 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	77bb      	strb	r3, [r7, #30]
 80042fa:	e04b      	b.n	8004394 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042fc:	7ffb      	ldrb	r3, [r7, #31]
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d827      	bhi.n	8004352 <UART_SetConfig+0x45e>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0x414>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800432d 	.word	0x0800432d
 800430c:	08004335 	.word	0x08004335
 8004310:	0800433d 	.word	0x0800433d
 8004314:	08004353 	.word	0x08004353
 8004318:	08004343 	.word	0x08004343
 800431c:	08004353 	.word	0x08004353
 8004320:	08004353 	.word	0x08004353
 8004324:	08004353 	.word	0x08004353
 8004328:	0800434b 	.word	0x0800434b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800432c:	f7fe ffe0 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004330:	61b8      	str	r0, [r7, #24]
        break;
 8004332:	e013      	b.n	800435c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7fe fff0 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 8004338:	61b8      	str	r0, [r7, #24]
        break;
 800433a:	e00f      	b.n	800435c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <UART_SetConfig+0x4c0>)
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e00c      	b.n	800435c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004342:	f7fe ff13 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8004346:	61b8      	str	r0, [r7, #24]
        break;
 8004348:	e008      	b.n	800435c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	61bb      	str	r3, [r7, #24]
        break;
 8004350:	e004      	b.n	800435c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	77bb      	strb	r3, [r7, #30]
        break;
 800435a:	bf00      	nop
    }

    if (pclk != 0U)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d018      	beq.n	8004394 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	085a      	lsrs	r2, r3, #1
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	b29b      	uxth	r3, r3
 8004376:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b0f      	cmp	r3, #15
 800437c:	d908      	bls.n	8004390 <UART_SetConfig+0x49c>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d204      	bcs.n	8004390 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	e001      	b.n	8004394 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40007c00 	.word	0x40007c00
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400

080043b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01a      	beq.n	80044ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b6:	d10a      	bne.n	80044ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af02      	add	r7, sp, #8
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800450c:	f7fd faf0 	bl	8001af0 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d10e      	bne.n	800453e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f82d 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e023      	b.n	8004586 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d10e      	bne.n	800456a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f817 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00d      	b.n	8004586 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	e05e      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d05a      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fd faa2 	bl	8001af0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <UART_WaitOnFlagUntilTimeout+0x30>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11b      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e043      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02c      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004612:	d124      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800461c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800462c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00f      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d091      	beq.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <__errno>:
 8004688:	4b01      	ldr	r3, [pc, #4]	; (8004690 <__errno+0x8>)
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	20000010 	.word	0x20000010

08004694 <__libc_init_array>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4d0d      	ldr	r5, [pc, #52]	; (80046cc <__libc_init_array+0x38>)
 8004698:	4c0d      	ldr	r4, [pc, #52]	; (80046d0 <__libc_init_array+0x3c>)
 800469a:	1b64      	subs	r4, r4, r5
 800469c:	10a4      	asrs	r4, r4, #2
 800469e:	2600      	movs	r6, #0
 80046a0:	42a6      	cmp	r6, r4
 80046a2:	d109      	bne.n	80046b8 <__libc_init_array+0x24>
 80046a4:	4d0b      	ldr	r5, [pc, #44]	; (80046d4 <__libc_init_array+0x40>)
 80046a6:	4c0c      	ldr	r4, [pc, #48]	; (80046d8 <__libc_init_array+0x44>)
 80046a8:	f000 ffec 	bl	8005684 <_init>
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	2600      	movs	r6, #0
 80046b2:	42a6      	cmp	r6, r4
 80046b4:	d105      	bne.n	80046c2 <__libc_init_array+0x2e>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046bc:	4798      	blx	r3
 80046be:	3601      	adds	r6, #1
 80046c0:	e7ee      	b.n	80046a0 <__libc_init_array+0xc>
 80046c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c6:	4798      	blx	r3
 80046c8:	3601      	adds	r6, #1
 80046ca:	e7f2      	b.n	80046b2 <__libc_init_array+0x1e>
 80046cc:	08005bbc 	.word	0x08005bbc
 80046d0:	08005bbc 	.word	0x08005bbc
 80046d4:	08005bbc 	.word	0x08005bbc
 80046d8:	08005bc0 	.word	0x08005bc0

080046dc <memset>:
 80046dc:	4402      	add	r2, r0
 80046de:	4603      	mov	r3, r0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d100      	bne.n	80046e6 <memset+0xa>
 80046e4:	4770      	bx	lr
 80046e6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ea:	e7f9      	b.n	80046e0 <memset+0x4>

080046ec <iprintf>:
 80046ec:	b40f      	push	{r0, r1, r2, r3}
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <iprintf+0x2c>)
 80046f0:	b513      	push	{r0, r1, r4, lr}
 80046f2:	681c      	ldr	r4, [r3, #0]
 80046f4:	b124      	cbz	r4, 8004700 <iprintf+0x14>
 80046f6:	69a3      	ldr	r3, [r4, #24]
 80046f8:	b913      	cbnz	r3, 8004700 <iprintf+0x14>
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 fa5e 	bl	8004bbc <__sinit>
 8004700:	ab05      	add	r3, sp, #20
 8004702:	9a04      	ldr	r2, [sp, #16]
 8004704:	68a1      	ldr	r1, [r4, #8]
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fc2f 	bl	8004f6c <_vfiprintf_r>
 800470e:	b002      	add	sp, #8
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004714:	b004      	add	sp, #16
 8004716:	4770      	bx	lr
 8004718:	20000010 	.word	0x20000010

0800471c <_puts_r>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	460e      	mov	r6, r1
 8004720:	4605      	mov	r5, r0
 8004722:	b118      	cbz	r0, 800472c <_puts_r+0x10>
 8004724:	6983      	ldr	r3, [r0, #24]
 8004726:	b90b      	cbnz	r3, 800472c <_puts_r+0x10>
 8004728:	f000 fa48 	bl	8004bbc <__sinit>
 800472c:	69ab      	ldr	r3, [r5, #24]
 800472e:	68ac      	ldr	r4, [r5, #8]
 8004730:	b913      	cbnz	r3, 8004738 <_puts_r+0x1c>
 8004732:	4628      	mov	r0, r5
 8004734:	f000 fa42 	bl	8004bbc <__sinit>
 8004738:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <_puts_r+0xd0>)
 800473a:	429c      	cmp	r4, r3
 800473c:	d120      	bne.n	8004780 <_puts_r+0x64>
 800473e:	686c      	ldr	r4, [r5, #4]
 8004740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004742:	07db      	lsls	r3, r3, #31
 8004744:	d405      	bmi.n	8004752 <_puts_r+0x36>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	0598      	lsls	r0, r3, #22
 800474a:	d402      	bmi.n	8004752 <_puts_r+0x36>
 800474c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474e:	f000 fad3 	bl	8004cf8 <__retarget_lock_acquire_recursive>
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	0719      	lsls	r1, r3, #28
 8004756:	d51d      	bpl.n	8004794 <_puts_r+0x78>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	b1db      	cbz	r3, 8004794 <_puts_r+0x78>
 800475c:	3e01      	subs	r6, #1
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004764:	3b01      	subs	r3, #1
 8004766:	60a3      	str	r3, [r4, #8]
 8004768:	bb39      	cbnz	r1, 80047ba <_puts_r+0x9e>
 800476a:	2b00      	cmp	r3, #0
 800476c:	da38      	bge.n	80047e0 <_puts_r+0xc4>
 800476e:	4622      	mov	r2, r4
 8004770:	210a      	movs	r1, #10
 8004772:	4628      	mov	r0, r5
 8004774:	f000 f848 	bl	8004808 <__swbuf_r>
 8004778:	3001      	adds	r0, #1
 800477a:	d011      	beq.n	80047a0 <_puts_r+0x84>
 800477c:	250a      	movs	r5, #10
 800477e:	e011      	b.n	80047a4 <_puts_r+0x88>
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <_puts_r+0xd4>)
 8004782:	429c      	cmp	r4, r3
 8004784:	d101      	bne.n	800478a <_puts_r+0x6e>
 8004786:	68ac      	ldr	r4, [r5, #8]
 8004788:	e7da      	b.n	8004740 <_puts_r+0x24>
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <_puts_r+0xd8>)
 800478c:	429c      	cmp	r4, r3
 800478e:	bf08      	it	eq
 8004790:	68ec      	ldreq	r4, [r5, #12]
 8004792:	e7d5      	b.n	8004740 <_puts_r+0x24>
 8004794:	4621      	mov	r1, r4
 8004796:	4628      	mov	r0, r5
 8004798:	f000 f888 	bl	80048ac <__swsetup_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	d0dd      	beq.n	800475c <_puts_r+0x40>
 80047a0:	f04f 35ff 	mov.w	r5, #4294967295
 80047a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a6:	07da      	lsls	r2, r3, #31
 80047a8:	d405      	bmi.n	80047b6 <_puts_r+0x9a>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	d402      	bmi.n	80047b6 <_puts_r+0x9a>
 80047b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b2:	f000 faa2 	bl	8004cfa <__retarget_lock_release_recursive>
 80047b6:	4628      	mov	r0, r5
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da04      	bge.n	80047c8 <_puts_r+0xac>
 80047be:	69a2      	ldr	r2, [r4, #24]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	dc06      	bgt.n	80047d2 <_puts_r+0xb6>
 80047c4:	290a      	cmp	r1, #10
 80047c6:	d004      	beq.n	80047d2 <_puts_r+0xb6>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	6022      	str	r2, [r4, #0]
 80047ce:	7019      	strb	r1, [r3, #0]
 80047d0:	e7c5      	b.n	800475e <_puts_r+0x42>
 80047d2:	4622      	mov	r2, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f817 	bl	8004808 <__swbuf_r>
 80047da:	3001      	adds	r0, #1
 80047dc:	d1bf      	bne.n	800475e <_puts_r+0x42>
 80047de:	e7df      	b.n	80047a0 <_puts_r+0x84>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	250a      	movs	r5, #10
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	6022      	str	r2, [r4, #0]
 80047e8:	701d      	strb	r5, [r3, #0]
 80047ea:	e7db      	b.n	80047a4 <_puts_r+0x88>
 80047ec:	08005b40 	.word	0x08005b40
 80047f0:	08005b60 	.word	0x08005b60
 80047f4:	08005b20 	.word	0x08005b20

080047f8 <puts>:
 80047f8:	4b02      	ldr	r3, [pc, #8]	; (8004804 <puts+0xc>)
 80047fa:	4601      	mov	r1, r0
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	f7ff bf8d 	b.w	800471c <_puts_r>
 8004802:	bf00      	nop
 8004804:	20000010 	.word	0x20000010

08004808 <__swbuf_r>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	460e      	mov	r6, r1
 800480c:	4614      	mov	r4, r2
 800480e:	4605      	mov	r5, r0
 8004810:	b118      	cbz	r0, 800481a <__swbuf_r+0x12>
 8004812:	6983      	ldr	r3, [r0, #24]
 8004814:	b90b      	cbnz	r3, 800481a <__swbuf_r+0x12>
 8004816:	f000 f9d1 	bl	8004bbc <__sinit>
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <__swbuf_r+0x98>)
 800481c:	429c      	cmp	r4, r3
 800481e:	d12b      	bne.n	8004878 <__swbuf_r+0x70>
 8004820:	686c      	ldr	r4, [r5, #4]
 8004822:	69a3      	ldr	r3, [r4, #24]
 8004824:	60a3      	str	r3, [r4, #8]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	071a      	lsls	r2, r3, #28
 800482a:	d52f      	bpl.n	800488c <__swbuf_r+0x84>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	b36b      	cbz	r3, 800488c <__swbuf_r+0x84>
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	1ac0      	subs	r0, r0, r3
 8004836:	6963      	ldr	r3, [r4, #20]
 8004838:	b2f6      	uxtb	r6, r6
 800483a:	4283      	cmp	r3, r0
 800483c:	4637      	mov	r7, r6
 800483e:	dc04      	bgt.n	800484a <__swbuf_r+0x42>
 8004840:	4621      	mov	r1, r4
 8004842:	4628      	mov	r0, r5
 8004844:	f000 f926 	bl	8004a94 <_fflush_r>
 8004848:	bb30      	cbnz	r0, 8004898 <__swbuf_r+0x90>
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	3b01      	subs	r3, #1
 800484e:	60a3      	str	r3, [r4, #8]
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	701e      	strb	r6, [r3, #0]
 8004858:	6963      	ldr	r3, [r4, #20]
 800485a:	3001      	adds	r0, #1
 800485c:	4283      	cmp	r3, r0
 800485e:	d004      	beq.n	800486a <__swbuf_r+0x62>
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	07db      	lsls	r3, r3, #31
 8004864:	d506      	bpl.n	8004874 <__swbuf_r+0x6c>
 8004866:	2e0a      	cmp	r6, #10
 8004868:	d104      	bne.n	8004874 <__swbuf_r+0x6c>
 800486a:	4621      	mov	r1, r4
 800486c:	4628      	mov	r0, r5
 800486e:	f000 f911 	bl	8004a94 <_fflush_r>
 8004872:	b988      	cbnz	r0, 8004898 <__swbuf_r+0x90>
 8004874:	4638      	mov	r0, r7
 8004876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <__swbuf_r+0x9c>)
 800487a:	429c      	cmp	r4, r3
 800487c:	d101      	bne.n	8004882 <__swbuf_r+0x7a>
 800487e:	68ac      	ldr	r4, [r5, #8]
 8004880:	e7cf      	b.n	8004822 <__swbuf_r+0x1a>
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <__swbuf_r+0xa0>)
 8004884:	429c      	cmp	r4, r3
 8004886:	bf08      	it	eq
 8004888:	68ec      	ldreq	r4, [r5, #12]
 800488a:	e7ca      	b.n	8004822 <__swbuf_r+0x1a>
 800488c:	4621      	mov	r1, r4
 800488e:	4628      	mov	r0, r5
 8004890:	f000 f80c 	bl	80048ac <__swsetup_r>
 8004894:	2800      	cmp	r0, #0
 8004896:	d0cb      	beq.n	8004830 <__swbuf_r+0x28>
 8004898:	f04f 37ff 	mov.w	r7, #4294967295
 800489c:	e7ea      	b.n	8004874 <__swbuf_r+0x6c>
 800489e:	bf00      	nop
 80048a0:	08005b40 	.word	0x08005b40
 80048a4:	08005b60 	.word	0x08005b60
 80048a8:	08005b20 	.word	0x08005b20

080048ac <__swsetup_r>:
 80048ac:	4b32      	ldr	r3, [pc, #200]	; (8004978 <__swsetup_r+0xcc>)
 80048ae:	b570      	push	{r4, r5, r6, lr}
 80048b0:	681d      	ldr	r5, [r3, #0]
 80048b2:	4606      	mov	r6, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	b125      	cbz	r5, 80048c2 <__swsetup_r+0x16>
 80048b8:	69ab      	ldr	r3, [r5, #24]
 80048ba:	b913      	cbnz	r3, 80048c2 <__swsetup_r+0x16>
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 f97d 	bl	8004bbc <__sinit>
 80048c2:	4b2e      	ldr	r3, [pc, #184]	; (800497c <__swsetup_r+0xd0>)
 80048c4:	429c      	cmp	r4, r3
 80048c6:	d10f      	bne.n	80048e8 <__swsetup_r+0x3c>
 80048c8:	686c      	ldr	r4, [r5, #4]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048d0:	0719      	lsls	r1, r3, #28
 80048d2:	d42c      	bmi.n	800492e <__swsetup_r+0x82>
 80048d4:	06dd      	lsls	r5, r3, #27
 80048d6:	d411      	bmi.n	80048fc <__swsetup_r+0x50>
 80048d8:	2309      	movs	r3, #9
 80048da:	6033      	str	r3, [r6, #0]
 80048dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	f04f 30ff 	mov.w	r0, #4294967295
 80048e6:	e03e      	b.n	8004966 <__swsetup_r+0xba>
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <__swsetup_r+0xd4>)
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d101      	bne.n	80048f2 <__swsetup_r+0x46>
 80048ee:	68ac      	ldr	r4, [r5, #8]
 80048f0:	e7eb      	b.n	80048ca <__swsetup_r+0x1e>
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <__swsetup_r+0xd8>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	bf08      	it	eq
 80048f8:	68ec      	ldreq	r4, [r5, #12]
 80048fa:	e7e6      	b.n	80048ca <__swsetup_r+0x1e>
 80048fc:	0758      	lsls	r0, r3, #29
 80048fe:	d512      	bpl.n	8004926 <__swsetup_r+0x7a>
 8004900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004902:	b141      	cbz	r1, 8004916 <__swsetup_r+0x6a>
 8004904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004908:	4299      	cmp	r1, r3
 800490a:	d002      	beq.n	8004912 <__swsetup_r+0x66>
 800490c:	4630      	mov	r0, r6
 800490e:	f000 fa59 	bl	8004dc4 <_free_r>
 8004912:	2300      	movs	r3, #0
 8004914:	6363      	str	r3, [r4, #52]	; 0x34
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800491c:	81a3      	strh	r3, [r4, #12]
 800491e:	2300      	movs	r3, #0
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f043 0308 	orr.w	r3, r3, #8
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	b94b      	cbnz	r3, 8004946 <__swsetup_r+0x9a>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493c:	d003      	beq.n	8004946 <__swsetup_r+0x9a>
 800493e:	4621      	mov	r1, r4
 8004940:	4630      	mov	r0, r6
 8004942:	f000 f9ff 	bl	8004d44 <__smakebuf_r>
 8004946:	89a0      	ldrh	r0, [r4, #12]
 8004948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800494c:	f010 0301 	ands.w	r3, r0, #1
 8004950:	d00a      	beq.n	8004968 <__swsetup_r+0xbc>
 8004952:	2300      	movs	r3, #0
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	6963      	ldr	r3, [r4, #20]
 8004958:	425b      	negs	r3, r3
 800495a:	61a3      	str	r3, [r4, #24]
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	b943      	cbnz	r3, 8004972 <__swsetup_r+0xc6>
 8004960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004964:	d1ba      	bne.n	80048dc <__swsetup_r+0x30>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	0781      	lsls	r1, r0, #30
 800496a:	bf58      	it	pl
 800496c:	6963      	ldrpl	r3, [r4, #20]
 800496e:	60a3      	str	r3, [r4, #8]
 8004970:	e7f4      	b.n	800495c <__swsetup_r+0xb0>
 8004972:	2000      	movs	r0, #0
 8004974:	e7f7      	b.n	8004966 <__swsetup_r+0xba>
 8004976:	bf00      	nop
 8004978:	20000010 	.word	0x20000010
 800497c:	08005b40 	.word	0x08005b40
 8004980:	08005b60 	.word	0x08005b60
 8004984:	08005b20 	.word	0x08005b20

08004988 <__sflush_r>:
 8004988:	898a      	ldrh	r2, [r1, #12]
 800498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	0710      	lsls	r0, r2, #28
 8004992:	460c      	mov	r4, r1
 8004994:	d458      	bmi.n	8004a48 <__sflush_r+0xc0>
 8004996:	684b      	ldr	r3, [r1, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	dc05      	bgt.n	80049a8 <__sflush_r+0x20>
 800499c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dc02      	bgt.n	80049a8 <__sflush_r+0x20>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	d0f9      	beq.n	80049a2 <__sflush_r+0x1a>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049b4:	682f      	ldr	r7, [r5, #0]
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	d032      	beq.n	8004a20 <__sflush_r+0x98>
 80049ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	075a      	lsls	r2, r3, #29
 80049c0:	d505      	bpl.n	80049ce <__sflush_r+0x46>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	1ac0      	subs	r0, r0, r3
 80049c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049c8:	b10b      	cbz	r3, 80049ce <__sflush_r+0x46>
 80049ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049cc:	1ac0      	subs	r0, r0, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	4602      	mov	r2, r0
 80049d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049d4:	6a21      	ldr	r1, [r4, #32]
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b0      	blx	r6
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	d106      	bne.n	80049ee <__sflush_r+0x66>
 80049e0:	6829      	ldr	r1, [r5, #0]
 80049e2:	291d      	cmp	r1, #29
 80049e4:	d82c      	bhi.n	8004a40 <__sflush_r+0xb8>
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <__sflush_r+0x108>)
 80049e8:	40ca      	lsrs	r2, r1
 80049ea:	07d6      	lsls	r6, r2, #31
 80049ec:	d528      	bpl.n	8004a40 <__sflush_r+0xb8>
 80049ee:	2200      	movs	r2, #0
 80049f0:	6062      	str	r2, [r4, #4]
 80049f2:	04d9      	lsls	r1, r3, #19
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	6022      	str	r2, [r4, #0]
 80049f8:	d504      	bpl.n	8004a04 <__sflush_r+0x7c>
 80049fa:	1c42      	adds	r2, r0, #1
 80049fc:	d101      	bne.n	8004a02 <__sflush_r+0x7a>
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	b903      	cbnz	r3, 8004a04 <__sflush_r+0x7c>
 8004a02:	6560      	str	r0, [r4, #84]	; 0x54
 8004a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a06:	602f      	str	r7, [r5, #0]
 8004a08:	2900      	cmp	r1, #0
 8004a0a:	d0ca      	beq.n	80049a2 <__sflush_r+0x1a>
 8004a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a10:	4299      	cmp	r1, r3
 8004a12:	d002      	beq.n	8004a1a <__sflush_r+0x92>
 8004a14:	4628      	mov	r0, r5
 8004a16:	f000 f9d5 	bl	8004dc4 <_free_r>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a1e:	e7c1      	b.n	80049a4 <__sflush_r+0x1c>
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	2301      	movs	r3, #1
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b0      	blx	r6
 8004a28:	1c41      	adds	r1, r0, #1
 8004a2a:	d1c7      	bne.n	80049bc <__sflush_r+0x34>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0c4      	beq.n	80049bc <__sflush_r+0x34>
 8004a32:	2b1d      	cmp	r3, #29
 8004a34:	d001      	beq.n	8004a3a <__sflush_r+0xb2>
 8004a36:	2b16      	cmp	r3, #22
 8004a38:	d101      	bne.n	8004a3e <__sflush_r+0xb6>
 8004a3a:	602f      	str	r7, [r5, #0]
 8004a3c:	e7b1      	b.n	80049a2 <__sflush_r+0x1a>
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	e7ad      	b.n	80049a4 <__sflush_r+0x1c>
 8004a48:	690f      	ldr	r7, [r1, #16]
 8004a4a:	2f00      	cmp	r7, #0
 8004a4c:	d0a9      	beq.n	80049a2 <__sflush_r+0x1a>
 8004a4e:	0793      	lsls	r3, r2, #30
 8004a50:	680e      	ldr	r6, [r1, #0]
 8004a52:	bf08      	it	eq
 8004a54:	694b      	ldreq	r3, [r1, #20]
 8004a56:	600f      	str	r7, [r1, #0]
 8004a58:	bf18      	it	ne
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	eba6 0807 	sub.w	r8, r6, r7
 8004a60:	608b      	str	r3, [r1, #8]
 8004a62:	f1b8 0f00 	cmp.w	r8, #0
 8004a66:	dd9c      	ble.n	80049a2 <__sflush_r+0x1a>
 8004a68:	6a21      	ldr	r1, [r4, #32]
 8004a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	463a      	mov	r2, r7
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b0      	blx	r6
 8004a74:	2800      	cmp	r0, #0
 8004a76:	dc06      	bgt.n	8004a86 <__sflush_r+0xfe>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	e78e      	b.n	80049a4 <__sflush_r+0x1c>
 8004a86:	4407      	add	r7, r0
 8004a88:	eba8 0800 	sub.w	r8, r8, r0
 8004a8c:	e7e9      	b.n	8004a62 <__sflush_r+0xda>
 8004a8e:	bf00      	nop
 8004a90:	20400001 	.word	0x20400001

08004a94 <_fflush_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	690b      	ldr	r3, [r1, #16]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	b913      	cbnz	r3, 8004aa4 <_fflush_r+0x10>
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	b118      	cbz	r0, 8004aae <_fflush_r+0x1a>
 8004aa6:	6983      	ldr	r3, [r0, #24]
 8004aa8:	b90b      	cbnz	r3, 8004aae <_fflush_r+0x1a>
 8004aaa:	f000 f887 	bl	8004bbc <__sinit>
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <_fflush_r+0x6c>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	d11b      	bne.n	8004aec <_fflush_r+0x58>
 8004ab4:	686c      	ldr	r4, [r5, #4]
 8004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <_fflush_r+0xa>
 8004abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ac0:	07d0      	lsls	r0, r2, #31
 8004ac2:	d404      	bmi.n	8004ace <_fflush_r+0x3a>
 8004ac4:	0599      	lsls	r1, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_fflush_r+0x3a>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aca:	f000 f915 	bl	8004cf8 <__retarget_lock_acquire_recursive>
 8004ace:	4628      	mov	r0, r5
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	f7ff ff59 	bl	8004988 <__sflush_r>
 8004ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad8:	07da      	lsls	r2, r3, #31
 8004ada:	4605      	mov	r5, r0
 8004adc:	d4e0      	bmi.n	8004aa0 <_fflush_r+0xc>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	059b      	lsls	r3, r3, #22
 8004ae2:	d4dd      	bmi.n	8004aa0 <_fflush_r+0xc>
 8004ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ae6:	f000 f908 	bl	8004cfa <__retarget_lock_release_recursive>
 8004aea:	e7d9      	b.n	8004aa0 <_fflush_r+0xc>
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <_fflush_r+0x70>)
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d101      	bne.n	8004af6 <_fflush_r+0x62>
 8004af2:	68ac      	ldr	r4, [r5, #8]
 8004af4:	e7df      	b.n	8004ab6 <_fflush_r+0x22>
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <_fflush_r+0x74>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	bf08      	it	eq
 8004afc:	68ec      	ldreq	r4, [r5, #12]
 8004afe:	e7da      	b.n	8004ab6 <_fflush_r+0x22>
 8004b00:	08005b40 	.word	0x08005b40
 8004b04:	08005b60 	.word	0x08005b60
 8004b08:	08005b20 	.word	0x08005b20

08004b0c <std>:
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	e9c0 3300 	strd	r3, r3, [r0]
 8004b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b1a:	6083      	str	r3, [r0, #8]
 8004b1c:	8181      	strh	r1, [r0, #12]
 8004b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b20:	81c2      	strh	r2, [r0, #14]
 8004b22:	6183      	str	r3, [r0, #24]
 8004b24:	4619      	mov	r1, r3
 8004b26:	2208      	movs	r2, #8
 8004b28:	305c      	adds	r0, #92	; 0x5c
 8004b2a:	f7ff fdd7 	bl	80046dc <memset>
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <std+0x38>)
 8004b30:	6263      	str	r3, [r4, #36]	; 0x24
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <std+0x3c>)
 8004b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <std+0x40>)
 8004b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x44>)
 8004b3c:	6224      	str	r4, [r4, #32]
 8004b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop
 8004b44:	08005515 	.word	0x08005515
 8004b48:	08005537 	.word	0x08005537
 8004b4c:	0800556f 	.word	0x0800556f
 8004b50:	08005593 	.word	0x08005593

08004b54 <_cleanup_r>:
 8004b54:	4901      	ldr	r1, [pc, #4]	; (8004b5c <_cleanup_r+0x8>)
 8004b56:	f000 b8af 	b.w	8004cb8 <_fwalk_reent>
 8004b5a:	bf00      	nop
 8004b5c:	08004a95 	.word	0x08004a95

08004b60 <__sfmoreglue>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	1e4a      	subs	r2, r1, #1
 8004b64:	2568      	movs	r5, #104	; 0x68
 8004b66:	4355      	muls	r5, r2
 8004b68:	460e      	mov	r6, r1
 8004b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b6e:	f000 f979 	bl	8004e64 <_malloc_r>
 8004b72:	4604      	mov	r4, r0
 8004b74:	b140      	cbz	r0, 8004b88 <__sfmoreglue+0x28>
 8004b76:	2100      	movs	r1, #0
 8004b78:	e9c0 1600 	strd	r1, r6, [r0]
 8004b7c:	300c      	adds	r0, #12
 8004b7e:	60a0      	str	r0, [r4, #8]
 8004b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b84:	f7ff fdaa 	bl	80046dc <memset>
 8004b88:	4620      	mov	r0, r4
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}

08004b8c <__sfp_lock_acquire>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__sfp_lock_acquire+0x8>)
 8004b8e:	f000 b8b3 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	2000060c 	.word	0x2000060c

08004b98 <__sfp_lock_release>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sfp_lock_release+0x8>)
 8004b9a:	f000 b8ae 	b.w	8004cfa <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	2000060c 	.word	0x2000060c

08004ba4 <__sinit_lock_acquire>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sinit_lock_acquire+0x8>)
 8004ba6:	f000 b8a7 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	20000607 	.word	0x20000607

08004bb0 <__sinit_lock_release>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sinit_lock_release+0x8>)
 8004bb2:	f000 b8a2 	b.w	8004cfa <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	20000607 	.word	0x20000607

08004bbc <__sinit>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	f7ff fff0 	bl	8004ba4 <__sinit_lock_acquire>
 8004bc4:	69a3      	ldr	r3, [r4, #24]
 8004bc6:	b11b      	cbz	r3, 8004bd0 <__sinit+0x14>
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f7ff bff0 	b.w	8004bb0 <__sinit_lock_release>
 8004bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <__sinit+0x68>)
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <__sinit+0x6c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	bf04      	itt	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	61a3      	streq	r3, [r4, #24]
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 f820 	bl	8004c2c <__sfp>
 8004bec:	6060      	str	r0, [r4, #4]
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f81c 	bl	8004c2c <__sfp>
 8004bf4:	60a0      	str	r0, [r4, #8]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 f818 	bl	8004c2c <__sfp>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60e0      	str	r0, [r4, #12]
 8004c00:	2104      	movs	r1, #4
 8004c02:	6860      	ldr	r0, [r4, #4]
 8004c04:	f7ff ff82 	bl	8004b0c <std>
 8004c08:	68a0      	ldr	r0, [r4, #8]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2109      	movs	r1, #9
 8004c0e:	f7ff ff7d 	bl	8004b0c <std>
 8004c12:	68e0      	ldr	r0, [r4, #12]
 8004c14:	2202      	movs	r2, #2
 8004c16:	2112      	movs	r1, #18
 8004c18:	f7ff ff78 	bl	8004b0c <std>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61a3      	str	r3, [r4, #24]
 8004c20:	e7d2      	b.n	8004bc8 <__sinit+0xc>
 8004c22:	bf00      	nop
 8004c24:	08005b1c 	.word	0x08005b1c
 8004c28:	08004b55 	.word	0x08004b55

08004c2c <__sfp>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	4607      	mov	r7, r0
 8004c30:	f7ff ffac 	bl	8004b8c <__sfp_lock_acquire>
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <__sfp+0x84>)
 8004c36:	681e      	ldr	r6, [r3, #0]
 8004c38:	69b3      	ldr	r3, [r6, #24]
 8004c3a:	b913      	cbnz	r3, 8004c42 <__sfp+0x16>
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7ff ffbd 	bl	8004bbc <__sinit>
 8004c42:	3648      	adds	r6, #72	; 0x48
 8004c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	d503      	bpl.n	8004c54 <__sfp+0x28>
 8004c4c:	6833      	ldr	r3, [r6, #0]
 8004c4e:	b30b      	cbz	r3, 8004c94 <__sfp+0x68>
 8004c50:	6836      	ldr	r6, [r6, #0]
 8004c52:	e7f7      	b.n	8004c44 <__sfp+0x18>
 8004c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c58:	b9d5      	cbnz	r5, 8004c90 <__sfp+0x64>
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <__sfp+0x88>)
 8004c5c:	60e3      	str	r3, [r4, #12]
 8004c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c62:	6665      	str	r5, [r4, #100]	; 0x64
 8004c64:	f000 f847 	bl	8004cf6 <__retarget_lock_init_recursive>
 8004c68:	f7ff ff96 	bl	8004b98 <__sfp_lock_release>
 8004c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c74:	6025      	str	r5, [r4, #0]
 8004c76:	61a5      	str	r5, [r4, #24]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c80:	f7ff fd2c 	bl	80046dc <memset>
 8004c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c90:	3468      	adds	r4, #104	; 0x68
 8004c92:	e7d9      	b.n	8004c48 <__sfp+0x1c>
 8004c94:	2104      	movs	r1, #4
 8004c96:	4638      	mov	r0, r7
 8004c98:	f7ff ff62 	bl	8004b60 <__sfmoreglue>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	6030      	str	r0, [r6, #0]
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1d5      	bne.n	8004c50 <__sfp+0x24>
 8004ca4:	f7ff ff78 	bl	8004b98 <__sfp_lock_release>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	e7ee      	b.n	8004c8c <__sfp+0x60>
 8004cae:	bf00      	nop
 8004cb0:	08005b1c 	.word	0x08005b1c
 8004cb4:	ffff0001 	.word	0xffff0001

08004cb8 <_fwalk_reent>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	4688      	mov	r8, r1
 8004cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cc4:	2700      	movs	r7, #0
 8004cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cca:	f1b9 0901 	subs.w	r9, r9, #1
 8004cce:	d505      	bpl.n	8004cdc <_fwalk_reent+0x24>
 8004cd0:	6824      	ldr	r4, [r4, #0]
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	d1f7      	bne.n	8004cc6 <_fwalk_reent+0xe>
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cdc:	89ab      	ldrh	r3, [r5, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d907      	bls.n	8004cf2 <_fwalk_reent+0x3a>
 8004ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	d003      	beq.n	8004cf2 <_fwalk_reent+0x3a>
 8004cea:	4629      	mov	r1, r5
 8004cec:	4630      	mov	r0, r6
 8004cee:	47c0      	blx	r8
 8004cf0:	4307      	orrs	r7, r0
 8004cf2:	3568      	adds	r5, #104	; 0x68
 8004cf4:	e7e9      	b.n	8004cca <_fwalk_reent+0x12>

08004cf6 <__retarget_lock_init_recursive>:
 8004cf6:	4770      	bx	lr

08004cf8 <__retarget_lock_acquire_recursive>:
 8004cf8:	4770      	bx	lr

08004cfa <__retarget_lock_release_recursive>:
 8004cfa:	4770      	bx	lr

08004cfc <__swhatbuf_r>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	460e      	mov	r6, r1
 8004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d04:	2900      	cmp	r1, #0
 8004d06:	b096      	sub	sp, #88	; 0x58
 8004d08:	4614      	mov	r4, r2
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	da07      	bge.n	8004d1e <__swhatbuf_r+0x22>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	89b3      	ldrh	r3, [r6, #12]
 8004d14:	061a      	lsls	r2, r3, #24
 8004d16:	d410      	bmi.n	8004d3a <__swhatbuf_r+0x3e>
 8004d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1c:	e00e      	b.n	8004d3c <__swhatbuf_r+0x40>
 8004d1e:	466a      	mov	r2, sp
 8004d20:	f000 fc5e 	bl	80055e0 <_fstat_r>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	dbf2      	blt.n	8004d0e <__swhatbuf_r+0x12>
 8004d28:	9a01      	ldr	r2, [sp, #4]
 8004d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d32:	425a      	negs	r2, r3
 8004d34:	415a      	adcs	r2, r3
 8004d36:	602a      	str	r2, [r5, #0]
 8004d38:	e7ee      	b.n	8004d18 <__swhatbuf_r+0x1c>
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	b016      	add	sp, #88	; 0x58
 8004d42:	bd70      	pop	{r4, r5, r6, pc}

08004d44 <__smakebuf_r>:
 8004d44:	898b      	ldrh	r3, [r1, #12]
 8004d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d48:	079d      	lsls	r5, r3, #30
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	d507      	bpl.n	8004d60 <__smakebuf_r+0x1c>
 8004d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	6163      	str	r3, [r4, #20]
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	ab01      	add	r3, sp, #4
 8004d62:	466a      	mov	r2, sp
 8004d64:	f7ff ffca 	bl	8004cfc <__swhatbuf_r>
 8004d68:	9900      	ldr	r1, [sp, #0]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f879 	bl	8004e64 <_malloc_r>
 8004d72:	b948      	cbnz	r0, 8004d88 <__smakebuf_r+0x44>
 8004d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d78:	059a      	lsls	r2, r3, #22
 8004d7a:	d4ef      	bmi.n	8004d5c <__smakebuf_r+0x18>
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	e7e3      	b.n	8004d50 <__smakebuf_r+0xc>
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <__smakebuf_r+0x7c>)
 8004d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	6020      	str	r0, [r4, #0]
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	9b00      	ldr	r3, [sp, #0]
 8004d98:	6163      	str	r3, [r4, #20]
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	6120      	str	r0, [r4, #16]
 8004d9e:	b15b      	cbz	r3, 8004db8 <__smakebuf_r+0x74>
 8004da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 fc2d 	bl	8005604 <_isatty_r>
 8004daa:	b128      	cbz	r0, 8004db8 <__smakebuf_r+0x74>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	89a0      	ldrh	r0, [r4, #12]
 8004dba:	4305      	orrs	r5, r0
 8004dbc:	81a5      	strh	r5, [r4, #12]
 8004dbe:	e7cd      	b.n	8004d5c <__smakebuf_r+0x18>
 8004dc0:	08004b55 	.word	0x08004b55

08004dc4 <_free_r>:
 8004dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	d048      	beq.n	8004e5c <_free_r+0x98>
 8004dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dce:	9001      	str	r0, [sp, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004dd6:	bfb8      	it	lt
 8004dd8:	18e4      	addlt	r4, r4, r3
 8004dda:	f000 fc35 	bl	8005648 <__malloc_lock>
 8004dde:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <_free_r+0x9c>)
 8004de0:	9801      	ldr	r0, [sp, #4]
 8004de2:	6813      	ldr	r3, [r2, #0]
 8004de4:	4615      	mov	r5, r2
 8004de6:	b933      	cbnz	r3, 8004df6 <_free_r+0x32>
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6014      	str	r4, [r2, #0]
 8004dec:	b003      	add	sp, #12
 8004dee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004df2:	f000 bc2f 	b.w	8005654 <__malloc_unlock>
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	d90b      	bls.n	8004e12 <_free_r+0x4e>
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	1862      	adds	r2, r4, r1
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf04      	itt	eq
 8004e02:	681a      	ldreq	r2, [r3, #0]
 8004e04:	685b      	ldreq	r3, [r3, #4]
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	bf04      	itt	eq
 8004e0a:	1852      	addeq	r2, r2, r1
 8004e0c:	6022      	streq	r2, [r4, #0]
 8004e0e:	602c      	str	r4, [r5, #0]
 8004e10:	e7ec      	b.n	8004dec <_free_r+0x28>
 8004e12:	461a      	mov	r2, r3
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b10b      	cbz	r3, 8004e1c <_free_r+0x58>
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	d9fa      	bls.n	8004e12 <_free_r+0x4e>
 8004e1c:	6811      	ldr	r1, [r2, #0]
 8004e1e:	1855      	adds	r5, r2, r1
 8004e20:	42a5      	cmp	r5, r4
 8004e22:	d10b      	bne.n	8004e3c <_free_r+0x78>
 8004e24:	6824      	ldr	r4, [r4, #0]
 8004e26:	4421      	add	r1, r4
 8004e28:	1854      	adds	r4, r2, r1
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	d1dd      	bne.n	8004dec <_free_r+0x28>
 8004e30:	681c      	ldr	r4, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	6053      	str	r3, [r2, #4]
 8004e36:	4421      	add	r1, r4
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	e7d7      	b.n	8004dec <_free_r+0x28>
 8004e3c:	d902      	bls.n	8004e44 <_free_r+0x80>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	6003      	str	r3, [r0, #0]
 8004e42:	e7d3      	b.n	8004dec <_free_r+0x28>
 8004e44:	6825      	ldr	r5, [r4, #0]
 8004e46:	1961      	adds	r1, r4, r5
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	bf04      	itt	eq
 8004e4c:	6819      	ldreq	r1, [r3, #0]
 8004e4e:	685b      	ldreq	r3, [r3, #4]
 8004e50:	6063      	str	r3, [r4, #4]
 8004e52:	bf04      	itt	eq
 8004e54:	1949      	addeq	r1, r1, r5
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	6054      	str	r4, [r2, #4]
 8004e5a:	e7c7      	b.n	8004dec <_free_r+0x28>
 8004e5c:	b003      	add	sp, #12
 8004e5e:	bd30      	pop	{r4, r5, pc}
 8004e60:	200004b0 	.word	0x200004b0

08004e64 <_malloc_r>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	1ccd      	adds	r5, r1, #3
 8004e68:	f025 0503 	bic.w	r5, r5, #3
 8004e6c:	3508      	adds	r5, #8
 8004e6e:	2d0c      	cmp	r5, #12
 8004e70:	bf38      	it	cc
 8004e72:	250c      	movcc	r5, #12
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	4606      	mov	r6, r0
 8004e78:	db01      	blt.n	8004e7e <_malloc_r+0x1a>
 8004e7a:	42a9      	cmp	r1, r5
 8004e7c:	d903      	bls.n	8004e86 <_malloc_r+0x22>
 8004e7e:	230c      	movs	r3, #12
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	2000      	movs	r0, #0
 8004e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e86:	f000 fbdf 	bl	8005648 <__malloc_lock>
 8004e8a:	4921      	ldr	r1, [pc, #132]	; (8004f10 <_malloc_r+0xac>)
 8004e8c:	680a      	ldr	r2, [r1, #0]
 8004e8e:	4614      	mov	r4, r2
 8004e90:	b99c      	cbnz	r4, 8004eba <_malloc_r+0x56>
 8004e92:	4f20      	ldr	r7, [pc, #128]	; (8004f14 <_malloc_r+0xb0>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	b923      	cbnz	r3, 8004ea2 <_malloc_r+0x3e>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 fb2a 	bl	80054f4 <_sbrk_r>
 8004ea0:	6038      	str	r0, [r7, #0]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 fb25 	bl	80054f4 <_sbrk_r>
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	d123      	bne.n	8004ef6 <_malloc_r+0x92>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f000 fbce 	bl	8005654 <__malloc_unlock>
 8004eb8:	e7e3      	b.n	8004e82 <_malloc_r+0x1e>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	1b5b      	subs	r3, r3, r5
 8004ebe:	d417      	bmi.n	8004ef0 <_malloc_r+0x8c>
 8004ec0:	2b0b      	cmp	r3, #11
 8004ec2:	d903      	bls.n	8004ecc <_malloc_r+0x68>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	441c      	add	r4, r3
 8004ec8:	6025      	str	r5, [r4, #0]
 8004eca:	e004      	b.n	8004ed6 <_malloc_r+0x72>
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	42a2      	cmp	r2, r4
 8004ed0:	bf0c      	ite	eq
 8004ed2:	600b      	streq	r3, [r1, #0]
 8004ed4:	6053      	strne	r3, [r2, #4]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 fbbc 	bl	8005654 <__malloc_unlock>
 8004edc:	f104 000b 	add.w	r0, r4, #11
 8004ee0:	1d23      	adds	r3, r4, #4
 8004ee2:	f020 0007 	bic.w	r0, r0, #7
 8004ee6:	1ac2      	subs	r2, r0, r3
 8004ee8:	d0cc      	beq.n	8004e84 <_malloc_r+0x20>
 8004eea:	1a1b      	subs	r3, r3, r0
 8004eec:	50a3      	str	r3, [r4, r2]
 8004eee:	e7c9      	b.n	8004e84 <_malloc_r+0x20>
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	6864      	ldr	r4, [r4, #4]
 8004ef4:	e7cc      	b.n	8004e90 <_malloc_r+0x2c>
 8004ef6:	1cc4      	adds	r4, r0, #3
 8004ef8:	f024 0403 	bic.w	r4, r4, #3
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d0e3      	beq.n	8004ec8 <_malloc_r+0x64>
 8004f00:	1a21      	subs	r1, r4, r0
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 faf6 	bl	80054f4 <_sbrk_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d1dd      	bne.n	8004ec8 <_malloc_r+0x64>
 8004f0c:	e7cf      	b.n	8004eae <_malloc_r+0x4a>
 8004f0e:	bf00      	nop
 8004f10:	200004b0 	.word	0x200004b0
 8004f14:	200004b4 	.word	0x200004b4

08004f18 <__sfputc_r>:
 8004f18:	6893      	ldr	r3, [r2, #8]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	b410      	push	{r4}
 8004f20:	6093      	str	r3, [r2, #8]
 8004f22:	da08      	bge.n	8004f36 <__sfputc_r+0x1e>
 8004f24:	6994      	ldr	r4, [r2, #24]
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	db01      	blt.n	8004f2e <__sfputc_r+0x16>
 8004f2a:	290a      	cmp	r1, #10
 8004f2c:	d103      	bne.n	8004f36 <__sfputc_r+0x1e>
 8004f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f32:	f7ff bc69 	b.w	8004808 <__swbuf_r>
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	1c58      	adds	r0, r3, #1
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	7019      	strb	r1, [r3, #0]
 8004f3e:	4608      	mov	r0, r1
 8004f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <__sfputs_r>:
 8004f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f48:	4606      	mov	r6, r0
 8004f4a:	460f      	mov	r7, r1
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	18d5      	adds	r5, r2, r3
 8004f50:	42ac      	cmp	r4, r5
 8004f52:	d101      	bne.n	8004f58 <__sfputs_r+0x12>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e007      	b.n	8004f68 <__sfputs_r+0x22>
 8004f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff ffda 	bl	8004f18 <__sfputc_r>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d1f3      	bne.n	8004f50 <__sfputs_r+0xa>
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f6c <_vfiprintf_r>:
 8004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	460d      	mov	r5, r1
 8004f72:	b09d      	sub	sp, #116	; 0x74
 8004f74:	4614      	mov	r4, r2
 8004f76:	4698      	mov	r8, r3
 8004f78:	4606      	mov	r6, r0
 8004f7a:	b118      	cbz	r0, 8004f84 <_vfiprintf_r+0x18>
 8004f7c:	6983      	ldr	r3, [r0, #24]
 8004f7e:	b90b      	cbnz	r3, 8004f84 <_vfiprintf_r+0x18>
 8004f80:	f7ff fe1c 	bl	8004bbc <__sinit>
 8004f84:	4b89      	ldr	r3, [pc, #548]	; (80051ac <_vfiprintf_r+0x240>)
 8004f86:	429d      	cmp	r5, r3
 8004f88:	d11b      	bne.n	8004fc2 <_vfiprintf_r+0x56>
 8004f8a:	6875      	ldr	r5, [r6, #4]
 8004f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f8e:	07d9      	lsls	r1, r3, #31
 8004f90:	d405      	bmi.n	8004f9e <_vfiprintf_r+0x32>
 8004f92:	89ab      	ldrh	r3, [r5, #12]
 8004f94:	059a      	lsls	r2, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_vfiprintf_r+0x32>
 8004f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f9a:	f7ff fead 	bl	8004cf8 <__retarget_lock_acquire_recursive>
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	d501      	bpl.n	8004fa8 <_vfiprintf_r+0x3c>
 8004fa4:	692b      	ldr	r3, [r5, #16]
 8004fa6:	b9eb      	cbnz	r3, 8004fe4 <_vfiprintf_r+0x78>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4630      	mov	r0, r6
 8004fac:	f7ff fc7e 	bl	80048ac <__swsetup_r>
 8004fb0:	b1c0      	cbz	r0, 8004fe4 <_vfiprintf_r+0x78>
 8004fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fb4:	07dc      	lsls	r4, r3, #31
 8004fb6:	d50e      	bpl.n	8004fd6 <_vfiprintf_r+0x6a>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	b01d      	add	sp, #116	; 0x74
 8004fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc2:	4b7b      	ldr	r3, [pc, #492]	; (80051b0 <_vfiprintf_r+0x244>)
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	d101      	bne.n	8004fcc <_vfiprintf_r+0x60>
 8004fc8:	68b5      	ldr	r5, [r6, #8]
 8004fca:	e7df      	b.n	8004f8c <_vfiprintf_r+0x20>
 8004fcc:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <_vfiprintf_r+0x248>)
 8004fce:	429d      	cmp	r5, r3
 8004fd0:	bf08      	it	eq
 8004fd2:	68f5      	ldreq	r5, [r6, #12]
 8004fd4:	e7da      	b.n	8004f8c <_vfiprintf_r+0x20>
 8004fd6:	89ab      	ldrh	r3, [r5, #12]
 8004fd8:	0598      	lsls	r0, r3, #22
 8004fda:	d4ed      	bmi.n	8004fb8 <_vfiprintf_r+0x4c>
 8004fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fde:	f7ff fe8c 	bl	8004cfa <__retarget_lock_release_recursive>
 8004fe2:	e7e9      	b.n	8004fb8 <_vfiprintf_r+0x4c>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe8:	2320      	movs	r3, #32
 8004fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ff2:	2330      	movs	r3, #48	; 0x30
 8004ff4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051b8 <_vfiprintf_r+0x24c>
 8004ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ffc:	f04f 0901 	mov.w	r9, #1
 8005000:	4623      	mov	r3, r4
 8005002:	469a      	mov	sl, r3
 8005004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005008:	b10a      	cbz	r2, 800500e <_vfiprintf_r+0xa2>
 800500a:	2a25      	cmp	r2, #37	; 0x25
 800500c:	d1f9      	bne.n	8005002 <_vfiprintf_r+0x96>
 800500e:	ebba 0b04 	subs.w	fp, sl, r4
 8005012:	d00b      	beq.n	800502c <_vfiprintf_r+0xc0>
 8005014:	465b      	mov	r3, fp
 8005016:	4622      	mov	r2, r4
 8005018:	4629      	mov	r1, r5
 800501a:	4630      	mov	r0, r6
 800501c:	f7ff ff93 	bl	8004f46 <__sfputs_r>
 8005020:	3001      	adds	r0, #1
 8005022:	f000 80aa 	beq.w	800517a <_vfiprintf_r+0x20e>
 8005026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005028:	445a      	add	r2, fp
 800502a:	9209      	str	r2, [sp, #36]	; 0x24
 800502c:	f89a 3000 	ldrb.w	r3, [sl]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80a2 	beq.w	800517a <_vfiprintf_r+0x20e>
 8005036:	2300      	movs	r3, #0
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005040:	f10a 0a01 	add.w	sl, sl, #1
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800504c:	931a      	str	r3, [sp, #104]	; 0x68
 800504e:	4654      	mov	r4, sl
 8005050:	2205      	movs	r2, #5
 8005052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005056:	4858      	ldr	r0, [pc, #352]	; (80051b8 <_vfiprintf_r+0x24c>)
 8005058:	f7fb f8f2 	bl	8000240 <memchr>
 800505c:	9a04      	ldr	r2, [sp, #16]
 800505e:	b9d8      	cbnz	r0, 8005098 <_vfiprintf_r+0x12c>
 8005060:	06d1      	lsls	r1, r2, #27
 8005062:	bf44      	itt	mi
 8005064:	2320      	movmi	r3, #32
 8005066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800506a:	0713      	lsls	r3, r2, #28
 800506c:	bf44      	itt	mi
 800506e:	232b      	movmi	r3, #43	; 0x2b
 8005070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005074:	f89a 3000 	ldrb.w	r3, [sl]
 8005078:	2b2a      	cmp	r3, #42	; 0x2a
 800507a:	d015      	beq.n	80050a8 <_vfiprintf_r+0x13c>
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	4654      	mov	r4, sl
 8005080:	2000      	movs	r0, #0
 8005082:	f04f 0c0a 	mov.w	ip, #10
 8005086:	4621      	mov	r1, r4
 8005088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800508c:	3b30      	subs	r3, #48	; 0x30
 800508e:	2b09      	cmp	r3, #9
 8005090:	d94e      	bls.n	8005130 <_vfiprintf_r+0x1c4>
 8005092:	b1b0      	cbz	r0, 80050c2 <_vfiprintf_r+0x156>
 8005094:	9207      	str	r2, [sp, #28]
 8005096:	e014      	b.n	80050c2 <_vfiprintf_r+0x156>
 8005098:	eba0 0308 	sub.w	r3, r0, r8
 800509c:	fa09 f303 	lsl.w	r3, r9, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	46a2      	mov	sl, r4
 80050a6:	e7d2      	b.n	800504e <_vfiprintf_r+0xe2>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	1d19      	adds	r1, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	9103      	str	r1, [sp, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bfbb      	ittet	lt
 80050b4:	425b      	neglt	r3, r3
 80050b6:	f042 0202 	orrlt.w	r2, r2, #2
 80050ba:	9307      	strge	r3, [sp, #28]
 80050bc:	9307      	strlt	r3, [sp, #28]
 80050be:	bfb8      	it	lt
 80050c0:	9204      	strlt	r2, [sp, #16]
 80050c2:	7823      	ldrb	r3, [r4, #0]
 80050c4:	2b2e      	cmp	r3, #46	; 0x2e
 80050c6:	d10c      	bne.n	80050e2 <_vfiprintf_r+0x176>
 80050c8:	7863      	ldrb	r3, [r4, #1]
 80050ca:	2b2a      	cmp	r3, #42	; 0x2a
 80050cc:	d135      	bne.n	800513a <_vfiprintf_r+0x1ce>
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	1d1a      	adds	r2, r3, #4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	9203      	str	r2, [sp, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bfb8      	it	lt
 80050da:	f04f 33ff 	movlt.w	r3, #4294967295
 80050de:	3402      	adds	r4, #2
 80050e0:	9305      	str	r3, [sp, #20]
 80050e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051c8 <_vfiprintf_r+0x25c>
 80050e6:	7821      	ldrb	r1, [r4, #0]
 80050e8:	2203      	movs	r2, #3
 80050ea:	4650      	mov	r0, sl
 80050ec:	f7fb f8a8 	bl	8000240 <memchr>
 80050f0:	b140      	cbz	r0, 8005104 <_vfiprintf_r+0x198>
 80050f2:	2340      	movs	r3, #64	; 0x40
 80050f4:	eba0 000a 	sub.w	r0, r0, sl
 80050f8:	fa03 f000 	lsl.w	r0, r3, r0
 80050fc:	9b04      	ldr	r3, [sp, #16]
 80050fe:	4303      	orrs	r3, r0
 8005100:	3401      	adds	r4, #1
 8005102:	9304      	str	r3, [sp, #16]
 8005104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005108:	482c      	ldr	r0, [pc, #176]	; (80051bc <_vfiprintf_r+0x250>)
 800510a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800510e:	2206      	movs	r2, #6
 8005110:	f7fb f896 	bl	8000240 <memchr>
 8005114:	2800      	cmp	r0, #0
 8005116:	d03f      	beq.n	8005198 <_vfiprintf_r+0x22c>
 8005118:	4b29      	ldr	r3, [pc, #164]	; (80051c0 <_vfiprintf_r+0x254>)
 800511a:	bb1b      	cbnz	r3, 8005164 <_vfiprintf_r+0x1f8>
 800511c:	9b03      	ldr	r3, [sp, #12]
 800511e:	3307      	adds	r3, #7
 8005120:	f023 0307 	bic.w	r3, r3, #7
 8005124:	3308      	adds	r3, #8
 8005126:	9303      	str	r3, [sp, #12]
 8005128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512a:	443b      	add	r3, r7
 800512c:	9309      	str	r3, [sp, #36]	; 0x24
 800512e:	e767      	b.n	8005000 <_vfiprintf_r+0x94>
 8005130:	fb0c 3202 	mla	r2, ip, r2, r3
 8005134:	460c      	mov	r4, r1
 8005136:	2001      	movs	r0, #1
 8005138:	e7a5      	b.n	8005086 <_vfiprintf_r+0x11a>
 800513a:	2300      	movs	r3, #0
 800513c:	3401      	adds	r4, #1
 800513e:	9305      	str	r3, [sp, #20]
 8005140:	4619      	mov	r1, r3
 8005142:	f04f 0c0a 	mov.w	ip, #10
 8005146:	4620      	mov	r0, r4
 8005148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800514c:	3a30      	subs	r2, #48	; 0x30
 800514e:	2a09      	cmp	r2, #9
 8005150:	d903      	bls.n	800515a <_vfiprintf_r+0x1ee>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0c5      	beq.n	80050e2 <_vfiprintf_r+0x176>
 8005156:	9105      	str	r1, [sp, #20]
 8005158:	e7c3      	b.n	80050e2 <_vfiprintf_r+0x176>
 800515a:	fb0c 2101 	mla	r1, ip, r1, r2
 800515e:	4604      	mov	r4, r0
 8005160:	2301      	movs	r3, #1
 8005162:	e7f0      	b.n	8005146 <_vfiprintf_r+0x1da>
 8005164:	ab03      	add	r3, sp, #12
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	462a      	mov	r2, r5
 800516a:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <_vfiprintf_r+0x258>)
 800516c:	a904      	add	r1, sp, #16
 800516e:	4630      	mov	r0, r6
 8005170:	f3af 8000 	nop.w
 8005174:	4607      	mov	r7, r0
 8005176:	1c78      	adds	r0, r7, #1
 8005178:	d1d6      	bne.n	8005128 <_vfiprintf_r+0x1bc>
 800517a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800517c:	07d9      	lsls	r1, r3, #31
 800517e:	d405      	bmi.n	800518c <_vfiprintf_r+0x220>
 8005180:	89ab      	ldrh	r3, [r5, #12]
 8005182:	059a      	lsls	r2, r3, #22
 8005184:	d402      	bmi.n	800518c <_vfiprintf_r+0x220>
 8005186:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005188:	f7ff fdb7 	bl	8004cfa <__retarget_lock_release_recursive>
 800518c:	89ab      	ldrh	r3, [r5, #12]
 800518e:	065b      	lsls	r3, r3, #25
 8005190:	f53f af12 	bmi.w	8004fb8 <_vfiprintf_r+0x4c>
 8005194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005196:	e711      	b.n	8004fbc <_vfiprintf_r+0x50>
 8005198:	ab03      	add	r3, sp, #12
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	462a      	mov	r2, r5
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <_vfiprintf_r+0x258>)
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 f880 	bl	80052a8 <_printf_i>
 80051a8:	e7e4      	b.n	8005174 <_vfiprintf_r+0x208>
 80051aa:	bf00      	nop
 80051ac:	08005b40 	.word	0x08005b40
 80051b0:	08005b60 	.word	0x08005b60
 80051b4:	08005b20 	.word	0x08005b20
 80051b8:	08005b80 	.word	0x08005b80
 80051bc:	08005b8a 	.word	0x08005b8a
 80051c0:	00000000 	.word	0x00000000
 80051c4:	08004f47 	.word	0x08004f47
 80051c8:	08005b86 	.word	0x08005b86

080051cc <_printf_common>:
 80051cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d0:	4616      	mov	r6, r2
 80051d2:	4699      	mov	r9, r3
 80051d4:	688a      	ldr	r2, [r1, #8]
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051dc:	4293      	cmp	r3, r2
 80051de:	bfb8      	it	lt
 80051e0:	4613      	movlt	r3, r2
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051e8:	4607      	mov	r7, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	b10a      	cbz	r2, 80051f2 <_printf_common+0x26>
 80051ee:	3301      	adds	r3, #1
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	0699      	lsls	r1, r3, #26
 80051f6:	bf42      	ittt	mi
 80051f8:	6833      	ldrmi	r3, [r6, #0]
 80051fa:	3302      	addmi	r3, #2
 80051fc:	6033      	strmi	r3, [r6, #0]
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	f015 0506 	ands.w	r5, r5, #6
 8005204:	d106      	bne.n	8005214 <_printf_common+0x48>
 8005206:	f104 0a19 	add.w	sl, r4, #25
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	6832      	ldr	r2, [r6, #0]
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	42ab      	cmp	r3, r5
 8005212:	dc26      	bgt.n	8005262 <_printf_common+0x96>
 8005214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005218:	1e13      	subs	r3, r2, #0
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	bf18      	it	ne
 800521e:	2301      	movne	r3, #1
 8005220:	0692      	lsls	r2, r2, #26
 8005222:	d42b      	bmi.n	800527c <_printf_common+0xb0>
 8005224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005228:	4649      	mov	r1, r9
 800522a:	4638      	mov	r0, r7
 800522c:	47c0      	blx	r8
 800522e:	3001      	adds	r0, #1
 8005230:	d01e      	beq.n	8005270 <_printf_common+0xa4>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	68e5      	ldr	r5, [r4, #12]
 8005236:	6832      	ldr	r2, [r6, #0]
 8005238:	f003 0306 	and.w	r3, r3, #6
 800523c:	2b04      	cmp	r3, #4
 800523e:	bf08      	it	eq
 8005240:	1aad      	subeq	r5, r5, r2
 8005242:	68a3      	ldr	r3, [r4, #8]
 8005244:	6922      	ldr	r2, [r4, #16]
 8005246:	bf0c      	ite	eq
 8005248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800524c:	2500      	movne	r5, #0
 800524e:	4293      	cmp	r3, r2
 8005250:	bfc4      	itt	gt
 8005252:	1a9b      	subgt	r3, r3, r2
 8005254:	18ed      	addgt	r5, r5, r3
 8005256:	2600      	movs	r6, #0
 8005258:	341a      	adds	r4, #26
 800525a:	42b5      	cmp	r5, r6
 800525c:	d11a      	bne.n	8005294 <_printf_common+0xc8>
 800525e:	2000      	movs	r0, #0
 8005260:	e008      	b.n	8005274 <_printf_common+0xa8>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4649      	mov	r1, r9
 8005268:	4638      	mov	r0, r7
 800526a:	47c0      	blx	r8
 800526c:	3001      	adds	r0, #1
 800526e:	d103      	bne.n	8005278 <_printf_common+0xac>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	3501      	adds	r5, #1
 800527a:	e7c6      	b.n	800520a <_printf_common+0x3e>
 800527c:	18e1      	adds	r1, r4, r3
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	2030      	movs	r0, #48	; 0x30
 8005282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005286:	4422      	add	r2, r4
 8005288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800528c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005290:	3302      	adds	r3, #2
 8005292:	e7c7      	b.n	8005224 <_printf_common+0x58>
 8005294:	2301      	movs	r3, #1
 8005296:	4622      	mov	r2, r4
 8005298:	4649      	mov	r1, r9
 800529a:	4638      	mov	r0, r7
 800529c:	47c0      	blx	r8
 800529e:	3001      	adds	r0, #1
 80052a0:	d0e6      	beq.n	8005270 <_printf_common+0xa4>
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7d9      	b.n	800525a <_printf_common+0x8e>
	...

080052a8 <_printf_i>:
 80052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	460c      	mov	r4, r1
 80052ae:	4691      	mov	r9, r2
 80052b0:	7e27      	ldrb	r7, [r4, #24]
 80052b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052b4:	2f78      	cmp	r7, #120	; 0x78
 80052b6:	4680      	mov	r8, r0
 80052b8:	469a      	mov	sl, r3
 80052ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052be:	d807      	bhi.n	80052d0 <_printf_i+0x28>
 80052c0:	2f62      	cmp	r7, #98	; 0x62
 80052c2:	d80a      	bhi.n	80052da <_printf_i+0x32>
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	f000 80d8 	beq.w	800547a <_printf_i+0x1d2>
 80052ca:	2f58      	cmp	r7, #88	; 0x58
 80052cc:	f000 80a3 	beq.w	8005416 <_printf_i+0x16e>
 80052d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052d8:	e03a      	b.n	8005350 <_printf_i+0xa8>
 80052da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052de:	2b15      	cmp	r3, #21
 80052e0:	d8f6      	bhi.n	80052d0 <_printf_i+0x28>
 80052e2:	a001      	add	r0, pc, #4	; (adr r0, 80052e8 <_printf_i+0x40>)
 80052e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005355 	.word	0x08005355
 80052f0:	080052d1 	.word	0x080052d1
 80052f4:	080052d1 	.word	0x080052d1
 80052f8:	080052d1 	.word	0x080052d1
 80052fc:	080052d1 	.word	0x080052d1
 8005300:	08005355 	.word	0x08005355
 8005304:	080052d1 	.word	0x080052d1
 8005308:	080052d1 	.word	0x080052d1
 800530c:	080052d1 	.word	0x080052d1
 8005310:	080052d1 	.word	0x080052d1
 8005314:	08005461 	.word	0x08005461
 8005318:	08005385 	.word	0x08005385
 800531c:	08005443 	.word	0x08005443
 8005320:	080052d1 	.word	0x080052d1
 8005324:	080052d1 	.word	0x080052d1
 8005328:	08005483 	.word	0x08005483
 800532c:	080052d1 	.word	0x080052d1
 8005330:	08005385 	.word	0x08005385
 8005334:	080052d1 	.word	0x080052d1
 8005338:	080052d1 	.word	0x080052d1
 800533c:	0800544b 	.word	0x0800544b
 8005340:	680b      	ldr	r3, [r1, #0]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	600a      	str	r2, [r1, #0]
 8005348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005350:	2301      	movs	r3, #1
 8005352:	e0a3      	b.n	800549c <_printf_i+0x1f4>
 8005354:	6825      	ldr	r5, [r4, #0]
 8005356:	6808      	ldr	r0, [r1, #0]
 8005358:	062e      	lsls	r6, r5, #24
 800535a:	f100 0304 	add.w	r3, r0, #4
 800535e:	d50a      	bpl.n	8005376 <_printf_i+0xce>
 8005360:	6805      	ldr	r5, [r0, #0]
 8005362:	600b      	str	r3, [r1, #0]
 8005364:	2d00      	cmp	r5, #0
 8005366:	da03      	bge.n	8005370 <_printf_i+0xc8>
 8005368:	232d      	movs	r3, #45	; 0x2d
 800536a:	426d      	negs	r5, r5
 800536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005370:	485e      	ldr	r0, [pc, #376]	; (80054ec <_printf_i+0x244>)
 8005372:	230a      	movs	r3, #10
 8005374:	e019      	b.n	80053aa <_printf_i+0x102>
 8005376:	f015 0f40 	tst.w	r5, #64	; 0x40
 800537a:	6805      	ldr	r5, [r0, #0]
 800537c:	600b      	str	r3, [r1, #0]
 800537e:	bf18      	it	ne
 8005380:	b22d      	sxthne	r5, r5
 8005382:	e7ef      	b.n	8005364 <_printf_i+0xbc>
 8005384:	680b      	ldr	r3, [r1, #0]
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	1d18      	adds	r0, r3, #4
 800538a:	6008      	str	r0, [r1, #0]
 800538c:	0628      	lsls	r0, r5, #24
 800538e:	d501      	bpl.n	8005394 <_printf_i+0xec>
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0xf2>
 8005394:	0669      	lsls	r1, r5, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0xe8>
 8005398:	881d      	ldrh	r5, [r3, #0]
 800539a:	4854      	ldr	r0, [pc, #336]	; (80054ec <_printf_i+0x244>)
 800539c:	2f6f      	cmp	r7, #111	; 0x6f
 800539e:	bf0c      	ite	eq
 80053a0:	2308      	moveq	r3, #8
 80053a2:	230a      	movne	r3, #10
 80053a4:	2100      	movs	r1, #0
 80053a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053aa:	6866      	ldr	r6, [r4, #4]
 80053ac:	60a6      	str	r6, [r4, #8]
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	bfa2      	ittt	ge
 80053b2:	6821      	ldrge	r1, [r4, #0]
 80053b4:	f021 0104 	bicge.w	r1, r1, #4
 80053b8:	6021      	strge	r1, [r4, #0]
 80053ba:	b90d      	cbnz	r5, 80053c0 <_printf_i+0x118>
 80053bc:	2e00      	cmp	r6, #0
 80053be:	d04d      	beq.n	800545c <_printf_i+0x1b4>
 80053c0:	4616      	mov	r6, r2
 80053c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80053c6:	fb03 5711 	mls	r7, r3, r1, r5
 80053ca:	5dc7      	ldrb	r7, [r0, r7]
 80053cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053d0:	462f      	mov	r7, r5
 80053d2:	42bb      	cmp	r3, r7
 80053d4:	460d      	mov	r5, r1
 80053d6:	d9f4      	bls.n	80053c2 <_printf_i+0x11a>
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10b      	bne.n	80053f4 <_printf_i+0x14c>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07df      	lsls	r7, r3, #31
 80053e0:	d508      	bpl.n	80053f4 <_printf_i+0x14c>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	4299      	cmp	r1, r3
 80053e8:	bfde      	ittt	le
 80053ea:	2330      	movle	r3, #48	; 0x30
 80053ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053f4:	1b92      	subs	r2, r2, r6
 80053f6:	6122      	str	r2, [r4, #16]
 80053f8:	f8cd a000 	str.w	sl, [sp]
 80053fc:	464b      	mov	r3, r9
 80053fe:	aa03      	add	r2, sp, #12
 8005400:	4621      	mov	r1, r4
 8005402:	4640      	mov	r0, r8
 8005404:	f7ff fee2 	bl	80051cc <_printf_common>
 8005408:	3001      	adds	r0, #1
 800540a:	d14c      	bne.n	80054a6 <_printf_i+0x1fe>
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	b004      	add	sp, #16
 8005412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005416:	4835      	ldr	r0, [pc, #212]	; (80054ec <_printf_i+0x244>)
 8005418:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	680e      	ldr	r6, [r1, #0]
 8005420:	061f      	lsls	r7, r3, #24
 8005422:	f856 5b04 	ldr.w	r5, [r6], #4
 8005426:	600e      	str	r6, [r1, #0]
 8005428:	d514      	bpl.n	8005454 <_printf_i+0x1ac>
 800542a:	07d9      	lsls	r1, r3, #31
 800542c:	bf44      	itt	mi
 800542e:	f043 0320 	orrmi.w	r3, r3, #32
 8005432:	6023      	strmi	r3, [r4, #0]
 8005434:	b91d      	cbnz	r5, 800543e <_printf_i+0x196>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f023 0320 	bic.w	r3, r3, #32
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	2310      	movs	r3, #16
 8005440:	e7b0      	b.n	80053a4 <_printf_i+0xfc>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f043 0320 	orr.w	r3, r3, #32
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	2378      	movs	r3, #120	; 0x78
 800544c:	4828      	ldr	r0, [pc, #160]	; (80054f0 <_printf_i+0x248>)
 800544e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005452:	e7e3      	b.n	800541c <_printf_i+0x174>
 8005454:	065e      	lsls	r6, r3, #25
 8005456:	bf48      	it	mi
 8005458:	b2ad      	uxthmi	r5, r5
 800545a:	e7e6      	b.n	800542a <_printf_i+0x182>
 800545c:	4616      	mov	r6, r2
 800545e:	e7bb      	b.n	80053d8 <_printf_i+0x130>
 8005460:	680b      	ldr	r3, [r1, #0]
 8005462:	6826      	ldr	r6, [r4, #0]
 8005464:	6960      	ldr	r0, [r4, #20]
 8005466:	1d1d      	adds	r5, r3, #4
 8005468:	600d      	str	r5, [r1, #0]
 800546a:	0635      	lsls	r5, r6, #24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	d501      	bpl.n	8005474 <_printf_i+0x1cc>
 8005470:	6018      	str	r0, [r3, #0]
 8005472:	e002      	b.n	800547a <_printf_i+0x1d2>
 8005474:	0671      	lsls	r1, r6, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0x1c8>
 8005478:	8018      	strh	r0, [r3, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	4616      	mov	r6, r2
 8005480:	e7ba      	b.n	80053f8 <_printf_i+0x150>
 8005482:	680b      	ldr	r3, [r1, #0]
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	600a      	str	r2, [r1, #0]
 8005488:	681e      	ldr	r6, [r3, #0]
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	4630      	mov	r0, r6
 8005490:	f7fa fed6 	bl	8000240 <memchr>
 8005494:	b108      	cbz	r0, 800549a <_printf_i+0x1f2>
 8005496:	1b80      	subs	r0, r0, r6
 8005498:	6060      	str	r0, [r4, #4]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	2300      	movs	r3, #0
 80054a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a4:	e7a8      	b.n	80053f8 <_printf_i+0x150>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	4632      	mov	r2, r6
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	47d0      	blx	sl
 80054b0:	3001      	adds	r0, #1
 80054b2:	d0ab      	beq.n	800540c <_printf_i+0x164>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	079b      	lsls	r3, r3, #30
 80054b8:	d413      	bmi.n	80054e2 <_printf_i+0x23a>
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	4298      	cmp	r0, r3
 80054c0:	bfb8      	it	lt
 80054c2:	4618      	movlt	r0, r3
 80054c4:	e7a4      	b.n	8005410 <_printf_i+0x168>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4632      	mov	r2, r6
 80054ca:	4649      	mov	r1, r9
 80054cc:	4640      	mov	r0, r8
 80054ce:	47d0      	blx	sl
 80054d0:	3001      	adds	r0, #1
 80054d2:	d09b      	beq.n	800540c <_printf_i+0x164>
 80054d4:	3501      	adds	r5, #1
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	9903      	ldr	r1, [sp, #12]
 80054da:	1a5b      	subs	r3, r3, r1
 80054dc:	42ab      	cmp	r3, r5
 80054de:	dcf2      	bgt.n	80054c6 <_printf_i+0x21e>
 80054e0:	e7eb      	b.n	80054ba <_printf_i+0x212>
 80054e2:	2500      	movs	r5, #0
 80054e4:	f104 0619 	add.w	r6, r4, #25
 80054e8:	e7f5      	b.n	80054d6 <_printf_i+0x22e>
 80054ea:	bf00      	nop
 80054ec:	08005b91 	.word	0x08005b91
 80054f0:	08005ba2 	.word	0x08005ba2

080054f4 <_sbrk_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d06      	ldr	r5, [pc, #24]	; (8005510 <_sbrk_r+0x1c>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f7fc fa34 	bl	800196c <_sbrk>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_sbrk_r+0x1a>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_sbrk_r+0x1a>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	20000610 	.word	0x20000610

08005514 <__sread>:
 8005514:	b510      	push	{r4, lr}
 8005516:	460c      	mov	r4, r1
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	f000 f8a0 	bl	8005660 <_read_r>
 8005520:	2800      	cmp	r0, #0
 8005522:	bfab      	itete	ge
 8005524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005526:	89a3      	ldrhlt	r3, [r4, #12]
 8005528:	181b      	addge	r3, r3, r0
 800552a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800552e:	bfac      	ite	ge
 8005530:	6563      	strge	r3, [r4, #84]	; 0x54
 8005532:	81a3      	strhlt	r3, [r4, #12]
 8005534:	bd10      	pop	{r4, pc}

08005536 <__swrite>:
 8005536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	461f      	mov	r7, r3
 800553c:	898b      	ldrh	r3, [r1, #12]
 800553e:	05db      	lsls	r3, r3, #23
 8005540:	4605      	mov	r5, r0
 8005542:	460c      	mov	r4, r1
 8005544:	4616      	mov	r6, r2
 8005546:	d505      	bpl.n	8005554 <__swrite+0x1e>
 8005548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554c:	2302      	movs	r3, #2
 800554e:	2200      	movs	r2, #0
 8005550:	f000 f868 	bl	8005624 <_lseek_r>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800555a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	4632      	mov	r2, r6
 8005562:	463b      	mov	r3, r7
 8005564:	4628      	mov	r0, r5
 8005566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800556a:	f000 b817 	b.w	800559c <_write_r>

0800556e <__sseek>:
 800556e:	b510      	push	{r4, lr}
 8005570:	460c      	mov	r4, r1
 8005572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005576:	f000 f855 	bl	8005624 <_lseek_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	bf15      	itete	ne
 8005580:	6560      	strne	r0, [r4, #84]	; 0x54
 8005582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800558a:	81a3      	strheq	r3, [r4, #12]
 800558c:	bf18      	it	ne
 800558e:	81a3      	strhne	r3, [r4, #12]
 8005590:	bd10      	pop	{r4, pc}

08005592 <__sclose>:
 8005592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005596:	f000 b813 	b.w	80055c0 <_close_r>
	...

0800559c <_write_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d07      	ldr	r5, [pc, #28]	; (80055bc <_write_r+0x20>)
 80055a0:	4604      	mov	r4, r0
 80055a2:	4608      	mov	r0, r1
 80055a4:	4611      	mov	r1, r2
 80055a6:	2200      	movs	r2, #0
 80055a8:	602a      	str	r2, [r5, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f7fc f98d 	bl	80018ca <_write>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_write_r+0x1e>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_write_r+0x1e>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000610 	.word	0x20000610

080055c0 <_close_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d06      	ldr	r5, [pc, #24]	; (80055dc <_close_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fc f999 	bl	8001902 <_close>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_close_r+0x1a>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_close_r+0x1a>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000610 	.word	0x20000610

080055e0 <_fstat_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d07      	ldr	r5, [pc, #28]	; (8005600 <_fstat_r+0x20>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	f7fc f994 	bl	800191a <_fstat>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	d102      	bne.n	80055fc <_fstat_r+0x1c>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	b103      	cbz	r3, 80055fc <_fstat_r+0x1c>
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	20000610 	.word	0x20000610

08005604 <_isatty_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d06      	ldr	r5, [pc, #24]	; (8005620 <_isatty_r+0x1c>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	f7fc f993 	bl	800193a <_isatty>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_isatty_r+0x1a>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_isatty_r+0x1a>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20000610 	.word	0x20000610

08005624 <_lseek_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d07      	ldr	r5, [pc, #28]	; (8005644 <_lseek_r+0x20>)
 8005628:	4604      	mov	r4, r0
 800562a:	4608      	mov	r0, r1
 800562c:	4611      	mov	r1, r2
 800562e:	2200      	movs	r2, #0
 8005630:	602a      	str	r2, [r5, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f7fc f98c 	bl	8001950 <_lseek>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_lseek_r+0x1e>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_lseek_r+0x1e>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000610 	.word	0x20000610

08005648 <__malloc_lock>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__malloc_lock+0x8>)
 800564a:	f7ff bb55 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 800564e:	bf00      	nop
 8005650:	20000608 	.word	0x20000608

08005654 <__malloc_unlock>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__malloc_unlock+0x8>)
 8005656:	f7ff bb50 	b.w	8004cfa <__retarget_lock_release_recursive>
 800565a:	bf00      	nop
 800565c:	20000608 	.word	0x20000608

08005660 <_read_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	; (8005680 <_read_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fc f90e 	bl	8001890 <_read>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_read_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_read_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000610 	.word	0x20000610

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
