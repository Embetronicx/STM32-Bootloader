
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c34  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08044e34  08044e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044f58  08044f58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08044f58  08044f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044f60  08044f60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044f60  08044f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044f64  08044f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08044f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08044fd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08044fd8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc1f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d7  00000000  00000000  0002bcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e5f  00000000  00000000  0002efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae1f  00000000  00000000  00056dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a09  00000000  00000000  00061c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  0015467c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20000070 	.word	0x20000070
 804021c:	00000000 	.word	0x00000000
 8040220:	08044e1c 	.word	0x08044e1c

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	20000074 	.word	0x20000074
 804023c:	08044e1c 	.word	0x08044e1c

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b96e 	b.w	80405d4 <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9d08      	ldr	r5, [sp, #32]
 8040316:	4604      	mov	r4, r0
 8040318:	468c      	mov	ip, r1
 804031a:	2b00      	cmp	r3, #0
 804031c:	f040 8083 	bne.w	8040426 <__udivmoddi4+0x116>
 8040320:	428a      	cmp	r2, r1
 8040322:	4617      	mov	r7, r2
 8040324:	d947      	bls.n	80403b6 <__udivmoddi4+0xa6>
 8040326:	fab2 f282 	clz	r2, r2
 804032a:	b142      	cbz	r2, 804033e <__udivmoddi4+0x2e>
 804032c:	f1c2 0020 	rsb	r0, r2, #32
 8040330:	fa24 f000 	lsr.w	r0, r4, r0
 8040334:	4091      	lsls	r1, r2
 8040336:	4097      	lsls	r7, r2
 8040338:	ea40 0c01 	orr.w	ip, r0, r1
 804033c:	4094      	lsls	r4, r2
 804033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8040342:	0c23      	lsrs	r3, r4, #16
 8040344:	fbbc f6f8 	udiv	r6, ip, r8
 8040348:	fa1f fe87 	uxth.w	lr, r7
 804034c:	fb08 c116 	mls	r1, r8, r6, ip
 8040350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040354:	fb06 f10e 	mul.w	r1, r6, lr
 8040358:	4299      	cmp	r1, r3
 804035a:	d909      	bls.n	8040370 <__udivmoddi4+0x60>
 804035c:	18fb      	adds	r3, r7, r3
 804035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8040362:	f080 8119 	bcs.w	8040598 <__udivmoddi4+0x288>
 8040366:	4299      	cmp	r1, r3
 8040368:	f240 8116 	bls.w	8040598 <__udivmoddi4+0x288>
 804036c:	3e02      	subs	r6, #2
 804036e:	443b      	add	r3, r7
 8040370:	1a5b      	subs	r3, r3, r1
 8040372:	b2a4      	uxth	r4, r4
 8040374:	fbb3 f0f8 	udiv	r0, r3, r8
 8040378:	fb08 3310 	mls	r3, r8, r0, r3
 804037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040380:	fb00 fe0e 	mul.w	lr, r0, lr
 8040384:	45a6      	cmp	lr, r4
 8040386:	d909      	bls.n	804039c <__udivmoddi4+0x8c>
 8040388:	193c      	adds	r4, r7, r4
 804038a:	f100 33ff 	add.w	r3, r0, #4294967295
 804038e:	f080 8105 	bcs.w	804059c <__udivmoddi4+0x28c>
 8040392:	45a6      	cmp	lr, r4
 8040394:	f240 8102 	bls.w	804059c <__udivmoddi4+0x28c>
 8040398:	3802      	subs	r0, #2
 804039a:	443c      	add	r4, r7
 804039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80403a0:	eba4 040e 	sub.w	r4, r4, lr
 80403a4:	2600      	movs	r6, #0
 80403a6:	b11d      	cbz	r5, 80403b0 <__udivmoddi4+0xa0>
 80403a8:	40d4      	lsrs	r4, r2
 80403aa:	2300      	movs	r3, #0
 80403ac:	e9c5 4300 	strd	r4, r3, [r5]
 80403b0:	4631      	mov	r1, r6
 80403b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403b6:	b902      	cbnz	r2, 80403ba <__udivmoddi4+0xaa>
 80403b8:	deff      	udf	#255	; 0xff
 80403ba:	fab2 f282 	clz	r2, r2
 80403be:	2a00      	cmp	r2, #0
 80403c0:	d150      	bne.n	8040464 <__udivmoddi4+0x154>
 80403c2:	1bcb      	subs	r3, r1, r7
 80403c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403c8:	fa1f f887 	uxth.w	r8, r7
 80403cc:	2601      	movs	r6, #1
 80403ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80403d2:	0c21      	lsrs	r1, r4, #16
 80403d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80403d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80403dc:	fb08 f30c 	mul.w	r3, r8, ip
 80403e0:	428b      	cmp	r3, r1
 80403e2:	d907      	bls.n	80403f4 <__udivmoddi4+0xe4>
 80403e4:	1879      	adds	r1, r7, r1
 80403e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80403ea:	d202      	bcs.n	80403f2 <__udivmoddi4+0xe2>
 80403ec:	428b      	cmp	r3, r1
 80403ee:	f200 80e9 	bhi.w	80405c4 <__udivmoddi4+0x2b4>
 80403f2:	4684      	mov	ip, r0
 80403f4:	1ac9      	subs	r1, r1, r3
 80403f6:	b2a3      	uxth	r3, r4
 80403f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80403fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8040400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040404:	fb08 f800 	mul.w	r8, r8, r0
 8040408:	45a0      	cmp	r8, r4
 804040a:	d907      	bls.n	804041c <__udivmoddi4+0x10c>
 804040c:	193c      	adds	r4, r7, r4
 804040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8040412:	d202      	bcs.n	804041a <__udivmoddi4+0x10a>
 8040414:	45a0      	cmp	r8, r4
 8040416:	f200 80d9 	bhi.w	80405cc <__udivmoddi4+0x2bc>
 804041a:	4618      	mov	r0, r3
 804041c:	eba4 0408 	sub.w	r4, r4, r8
 8040420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040424:	e7bf      	b.n	80403a6 <__udivmoddi4+0x96>
 8040426:	428b      	cmp	r3, r1
 8040428:	d909      	bls.n	804043e <__udivmoddi4+0x12e>
 804042a:	2d00      	cmp	r5, #0
 804042c:	f000 80b1 	beq.w	8040592 <__udivmoddi4+0x282>
 8040430:	2600      	movs	r6, #0
 8040432:	e9c5 0100 	strd	r0, r1, [r5]
 8040436:	4630      	mov	r0, r6
 8040438:	4631      	mov	r1, r6
 804043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804043e:	fab3 f683 	clz	r6, r3
 8040442:	2e00      	cmp	r6, #0
 8040444:	d14a      	bne.n	80404dc <__udivmoddi4+0x1cc>
 8040446:	428b      	cmp	r3, r1
 8040448:	d302      	bcc.n	8040450 <__udivmoddi4+0x140>
 804044a:	4282      	cmp	r2, r0
 804044c:	f200 80b8 	bhi.w	80405c0 <__udivmoddi4+0x2b0>
 8040450:	1a84      	subs	r4, r0, r2
 8040452:	eb61 0103 	sbc.w	r1, r1, r3
 8040456:	2001      	movs	r0, #1
 8040458:	468c      	mov	ip, r1
 804045a:	2d00      	cmp	r5, #0
 804045c:	d0a8      	beq.n	80403b0 <__udivmoddi4+0xa0>
 804045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8040462:	e7a5      	b.n	80403b0 <__udivmoddi4+0xa0>
 8040464:	f1c2 0320 	rsb	r3, r2, #32
 8040468:	fa20 f603 	lsr.w	r6, r0, r3
 804046c:	4097      	lsls	r7, r2
 804046e:	fa01 f002 	lsl.w	r0, r1, r2
 8040472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040476:	40d9      	lsrs	r1, r3
 8040478:	4330      	orrs	r0, r6
 804047a:	0c03      	lsrs	r3, r0, #16
 804047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8040480:	fa1f f887 	uxth.w	r8, r7
 8040484:	fb0e 1116 	mls	r1, lr, r6, r1
 8040488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804048c:	fb06 f108 	mul.w	r1, r6, r8
 8040490:	4299      	cmp	r1, r3
 8040492:	fa04 f402 	lsl.w	r4, r4, r2
 8040496:	d909      	bls.n	80404ac <__udivmoddi4+0x19c>
 8040498:	18fb      	adds	r3, r7, r3
 804049a:	f106 3cff 	add.w	ip, r6, #4294967295
 804049e:	f080 808d 	bcs.w	80405bc <__udivmoddi4+0x2ac>
 80404a2:	4299      	cmp	r1, r3
 80404a4:	f240 808a 	bls.w	80405bc <__udivmoddi4+0x2ac>
 80404a8:	3e02      	subs	r6, #2
 80404aa:	443b      	add	r3, r7
 80404ac:	1a5b      	subs	r3, r3, r1
 80404ae:	b281      	uxth	r1, r0
 80404b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80404b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80404b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404bc:	fb00 f308 	mul.w	r3, r0, r8
 80404c0:	428b      	cmp	r3, r1
 80404c2:	d907      	bls.n	80404d4 <__udivmoddi4+0x1c4>
 80404c4:	1879      	adds	r1, r7, r1
 80404c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80404ca:	d273      	bcs.n	80405b4 <__udivmoddi4+0x2a4>
 80404cc:	428b      	cmp	r3, r1
 80404ce:	d971      	bls.n	80405b4 <__udivmoddi4+0x2a4>
 80404d0:	3802      	subs	r0, #2
 80404d2:	4439      	add	r1, r7
 80404d4:	1acb      	subs	r3, r1, r3
 80404d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80404da:	e778      	b.n	80403ce <__udivmoddi4+0xbe>
 80404dc:	f1c6 0c20 	rsb	ip, r6, #32
 80404e0:	fa03 f406 	lsl.w	r4, r3, r6
 80404e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80404e8:	431c      	orrs	r4, r3
 80404ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80404ee:	fa01 f306 	lsl.w	r3, r1, r6
 80404f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80404f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80404fa:	431f      	orrs	r7, r3
 80404fc:	0c3b      	lsrs	r3, r7, #16
 80404fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8040502:	fa1f f884 	uxth.w	r8, r4
 8040506:	fb0e 1119 	mls	r1, lr, r9, r1
 804050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 804050e:	fb09 fa08 	mul.w	sl, r9, r8
 8040512:	458a      	cmp	sl, r1
 8040514:	fa02 f206 	lsl.w	r2, r2, r6
 8040518:	fa00 f306 	lsl.w	r3, r0, r6
 804051c:	d908      	bls.n	8040530 <__udivmoddi4+0x220>
 804051e:	1861      	adds	r1, r4, r1
 8040520:	f109 30ff 	add.w	r0, r9, #4294967295
 8040524:	d248      	bcs.n	80405b8 <__udivmoddi4+0x2a8>
 8040526:	458a      	cmp	sl, r1
 8040528:	d946      	bls.n	80405b8 <__udivmoddi4+0x2a8>
 804052a:	f1a9 0902 	sub.w	r9, r9, #2
 804052e:	4421      	add	r1, r4
 8040530:	eba1 010a 	sub.w	r1, r1, sl
 8040534:	b2bf      	uxth	r7, r7
 8040536:	fbb1 f0fe 	udiv	r0, r1, lr
 804053a:	fb0e 1110 	mls	r1, lr, r0, r1
 804053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8040542:	fb00 f808 	mul.w	r8, r0, r8
 8040546:	45b8      	cmp	r8, r7
 8040548:	d907      	bls.n	804055a <__udivmoddi4+0x24a>
 804054a:	19e7      	adds	r7, r4, r7
 804054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8040550:	d22e      	bcs.n	80405b0 <__udivmoddi4+0x2a0>
 8040552:	45b8      	cmp	r8, r7
 8040554:	d92c      	bls.n	80405b0 <__udivmoddi4+0x2a0>
 8040556:	3802      	subs	r0, #2
 8040558:	4427      	add	r7, r4
 804055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 804055e:	eba7 0708 	sub.w	r7, r7, r8
 8040562:	fba0 8902 	umull	r8, r9, r0, r2
 8040566:	454f      	cmp	r7, r9
 8040568:	46c6      	mov	lr, r8
 804056a:	4649      	mov	r1, r9
 804056c:	d31a      	bcc.n	80405a4 <__udivmoddi4+0x294>
 804056e:	d017      	beq.n	80405a0 <__udivmoddi4+0x290>
 8040570:	b15d      	cbz	r5, 804058a <__udivmoddi4+0x27a>
 8040572:	ebb3 020e 	subs.w	r2, r3, lr
 8040576:	eb67 0701 	sbc.w	r7, r7, r1
 804057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 804057e:	40f2      	lsrs	r2, r6
 8040580:	ea4c 0202 	orr.w	r2, ip, r2
 8040584:	40f7      	lsrs	r7, r6
 8040586:	e9c5 2700 	strd	r2, r7, [r5]
 804058a:	2600      	movs	r6, #0
 804058c:	4631      	mov	r1, r6
 804058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040592:	462e      	mov	r6, r5
 8040594:	4628      	mov	r0, r5
 8040596:	e70b      	b.n	80403b0 <__udivmoddi4+0xa0>
 8040598:	4606      	mov	r6, r0
 804059a:	e6e9      	b.n	8040370 <__udivmoddi4+0x60>
 804059c:	4618      	mov	r0, r3
 804059e:	e6fd      	b.n	804039c <__udivmoddi4+0x8c>
 80405a0:	4543      	cmp	r3, r8
 80405a2:	d2e5      	bcs.n	8040570 <__udivmoddi4+0x260>
 80405a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80405a8:	eb69 0104 	sbc.w	r1, r9, r4
 80405ac:	3801      	subs	r0, #1
 80405ae:	e7df      	b.n	8040570 <__udivmoddi4+0x260>
 80405b0:	4608      	mov	r0, r1
 80405b2:	e7d2      	b.n	804055a <__udivmoddi4+0x24a>
 80405b4:	4660      	mov	r0, ip
 80405b6:	e78d      	b.n	80404d4 <__udivmoddi4+0x1c4>
 80405b8:	4681      	mov	r9, r0
 80405ba:	e7b9      	b.n	8040530 <__udivmoddi4+0x220>
 80405bc:	4666      	mov	r6, ip
 80405be:	e775      	b.n	80404ac <__udivmoddi4+0x19c>
 80405c0:	4630      	mov	r0, r6
 80405c2:	e74a      	b.n	804045a <__udivmoddi4+0x14a>
 80405c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80405c8:	4439      	add	r1, r7
 80405ca:	e713      	b.n	80403f4 <__udivmoddi4+0xe4>
 80405cc:	3802      	subs	r0, #2
 80405ce:	443c      	add	r4, r7
 80405d0:	e724      	b.n	804041c <__udivmoddi4+0x10c>
 80405d2:	bf00      	nop

080405d4 <__aeabi_idiv0>:
 80405d4:	4770      	bx	lr
 80405d6:	bf00      	nop

080405d8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80405d8:	b5b0      	push	{r4, r5, r7, lr}
 80405da:	b090      	sub	sp, #64	; 0x40
 80405dc:	af00      	add	r7, sp, #0
 80405de:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80405e0:	687b      	ldr	r3, [r7, #4]
 80405e2:	681b      	ldr	r3, [r3, #0]
 80405e4:	4a18      	ldr	r2, [pc, #96]	; (8040648 <HAL_UART_RxCpltCallback+0x70>)
 80405e6:	4293      	cmp	r3, r2
 80405e8:	d12a      	bne.n	8040640 <HAL_UART_RxCpltCallback+0x68>
  {
    if( !strncmp("ota", (char*)rx_buf, 3) )
 80405ea:	2203      	movs	r2, #3
 80405ec:	4917      	ldr	r1, [pc, #92]	; (804064c <HAL_UART_RxCpltCallback+0x74>)
 80405ee:	4818      	ldr	r0, [pc, #96]	; (8040650 <HAL_UART_RxCpltCallback+0x78>)
 80405f0:	f003 fcc4 	bl	8043f7c <strncmp>
 80405f4:	4603      	mov	r3, r0
 80405f6:	2b00      	cmp	r3, #0
 80405f8:	d118      	bne.n	804062c <HAL_UART_RxCpltCallback+0x54>
    {
      printf("Received OTA Request from Mobile Application\r\n");
 80405fa:	4816      	ldr	r0, [pc, #88]	; (8040654 <HAL_UART_RxCpltCallback+0x7c>)
 80405fc:	f003 fcb6 	bl	8043f6c <puts>

      /* Update the reboot reason as OTA request */

      /* Read the configuration */
      ETX_GNRL_CFG_ cfg;
      memcpy( &cfg, (ETX_GNRL_CFG_*) (ETX_CONFIG_FLASH_ADDR), sizeof(ETX_GNRL_CFG_) );
 8040600:	4b15      	ldr	r3, [pc, #84]	; (8040658 <HAL_UART_RxCpltCallback+0x80>)
 8040602:	f107 040c 	add.w	r4, r7, #12
 8040606:	461d      	mov	r5, r3
 8040608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8040610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8040612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8040614:	682b      	ldr	r3, [r5, #0]
 8040616:	8023      	strh	r3, [r4, #0]

      //update the reboot reason
      cfg.reboot_cause = ETX_OTA_REQUEST;
 8040618:	4b10      	ldr	r3, [pc, #64]	; (804065c <HAL_UART_RxCpltCallback+0x84>)
 804061a:	60fb      	str	r3, [r7, #12]

      /* write back the updated config */
      write_cfg_to_flash( &cfg );
 804061c:	f107 030c 	add.w	r3, r7, #12
 8040620:	4618      	mov	r0, r3
 8040622:	f000 f97d 	bl	8040920 <write_cfg_to_flash>

      // Reset the controller
      HAL_NVIC_SystemReset();
 8040626:	f000 fd4c 	bl	80410c2 <HAL_NVIC_SystemReset>
 804062a:	e004      	b.n	8040636 <HAL_UART_RxCpltCallback+0x5e>
    }
    else
    {
      HAL_UART_Receive_IT(&huart2, rx_buf, 3);
 804062c:	2203      	movs	r2, #3
 804062e:	4907      	ldr	r1, [pc, #28]	; (804064c <HAL_UART_RxCpltCallback+0x74>)
 8040630:	480b      	ldr	r0, [pc, #44]	; (8040660 <HAL_UART_RxCpltCallback+0x88>)
 8040632:	f002 fbf8 	bl	8042e26 <HAL_UART_Receive_IT>
    }
    memset(rx_buf, 0, sizeof(rx_buf));
 8040636:	2204      	movs	r2, #4
 8040638:	2100      	movs	r1, #0
 804063a:	4804      	ldr	r0, [pc, #16]	; (804064c <HAL_UART_RxCpltCallback+0x74>)
 804063c:	f003 fc08 	bl	8043e50 <memset>
  }
}
 8040640:	bf00      	nop
 8040642:	3740      	adds	r7, #64	; 0x40
 8040644:	46bd      	mov	sp, r7
 8040646:	bdb0      	pop	{r4, r5, r7, pc}
 8040648:	40004400 	.word	0x40004400
 804064c:	2000011c 	.word	0x2000011c
 8040650:	08044e34 	.word	0x08044e34
 8040654:	08044e38 	.word	0x08044e38
 8040658:	08020000 	.word	0x08020000
 804065c:	deadbeef 	.word	0xdeadbeef
 8040660:	20000120 	.word	0x20000120

08040664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040664:	b580      	push	{r7, lr}
 8040666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040668:	f000 fb8f 	bl	8040d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804066c:	f000 f82c 	bl	80406c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040670:	f000 f906 	bl	8040880 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8040674:	f000 f8d4 	bl	8040820 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8040678:	f000 f8a2 	bl	80407c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d)\r\n", APP_Version[0], APP_Version[1] );
 804067c:	2300      	movs	r3, #0
 804067e:	2204      	movs	r2, #4
 8040680:	4619      	mov	r1, r3
 8040682:	480d      	ldr	r0, [pc, #52]	; (80406b8 <main+0x54>)
 8040684:	f003 fbec 	bl	8043e60 <iprintf>
  HAL_UART_Receive_IT(&huart2, rx_buf, 3);
 8040688:	2203      	movs	r2, #3
 804068a:	490c      	ldr	r1, [pc, #48]	; (80406bc <main+0x58>)
 804068c:	480c      	ldr	r0, [pc, #48]	; (80406c0 <main+0x5c>)
 804068e:	f002 fbca 	bl	8042e26 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET );
 8040692:	2201      	movs	r2, #1
 8040694:	2180      	movs	r1, #128	; 0x80
 8040696:	480b      	ldr	r0, [pc, #44]	; (80406c4 <main+0x60>)
 8040698:	f001 fa1e 	bl	8041ad8 <HAL_GPIO_WritePin>
    HAL_Delay(2000);    //200ms delay
 804069c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80406a0:	f000 fbd0 	bl	8040e44 <HAL_Delay>
    HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_RESET );
 80406a4:	2200      	movs	r2, #0
 80406a6:	2180      	movs	r1, #128	; 0x80
 80406a8:	4806      	ldr	r0, [pc, #24]	; (80406c4 <main+0x60>)
 80406aa:	f001 fa15 	bl	8041ad8 <HAL_GPIO_WritePin>
    HAL_Delay(2000);	  //200ms delay
 80406ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80406b2:	f000 fbc7 	bl	8040e44 <HAL_Delay>
    HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET );
 80406b6:	e7ec      	b.n	8040692 <main+0x2e>
 80406b8:	08044e68 	.word	0x08044e68
 80406bc:	2000011c 	.word	0x2000011c
 80406c0:	20000120 	.word	0x20000120
 80406c4:	40020400 	.word	0x40020400

080406c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80406c8:	b580      	push	{r7, lr}
 80406ca:	b0b8      	sub	sp, #224	; 0xe0
 80406cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80406ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80406d2:	2234      	movs	r2, #52	; 0x34
 80406d4:	2100      	movs	r1, #0
 80406d6:	4618      	mov	r0, r3
 80406d8:	f003 fbba 	bl	8043e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80406dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80406e0:	2200      	movs	r2, #0
 80406e2:	601a      	str	r2, [r3, #0]
 80406e4:	605a      	str	r2, [r3, #4]
 80406e6:	609a      	str	r2, [r3, #8]
 80406e8:	60da      	str	r2, [r3, #12]
 80406ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80406ec:	f107 0308 	add.w	r3, r7, #8
 80406f0:	2290      	movs	r2, #144	; 0x90
 80406f2:	2100      	movs	r1, #0
 80406f4:	4618      	mov	r0, r3
 80406f6:	f003 fbab 	bl	8043e50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80406fa:	4b2f      	ldr	r3, [pc, #188]	; (80407b8 <SystemClock_Config+0xf0>)
 80406fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80406fe:	4a2e      	ldr	r2, [pc, #184]	; (80407b8 <SystemClock_Config+0xf0>)
 8040700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040704:	6413      	str	r3, [r2, #64]	; 0x40
 8040706:	4b2c      	ldr	r3, [pc, #176]	; (80407b8 <SystemClock_Config+0xf0>)
 8040708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804070e:	607b      	str	r3, [r7, #4]
 8040710:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040712:	4b2a      	ldr	r3, [pc, #168]	; (80407bc <SystemClock_Config+0xf4>)
 8040714:	681b      	ldr	r3, [r3, #0]
 8040716:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 804071a:	4a28      	ldr	r2, [pc, #160]	; (80407bc <SystemClock_Config+0xf4>)
 804071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040720:	6013      	str	r3, [r2, #0]
 8040722:	4b26      	ldr	r3, [pc, #152]	; (80407bc <SystemClock_Config+0xf4>)
 8040724:	681b      	ldr	r3, [r3, #0]
 8040726:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 804072a:	603b      	str	r3, [r7, #0]
 804072c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804072e:	2302      	movs	r3, #2
 8040730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040734:	2301      	movs	r3, #1
 8040736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804073a:	2310      	movs	r3, #16
 804073c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8040740:	2300      	movs	r3, #0
 8040742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804074a:	4618      	mov	r0, r3
 804074c:	f001 f9de 	bl	8041b0c <HAL_RCC_OscConfig>
 8040750:	4603      	mov	r3, r0
 8040752:	2b00      	cmp	r3, #0
 8040754:	d001      	beq.n	804075a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8040756:	f000 f95b 	bl	8040a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804075a:	230f      	movs	r3, #15
 804075c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8040760:	2300      	movs	r3, #0
 8040762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040766:	2300      	movs	r3, #0
 8040768:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804076c:	2300      	movs	r3, #0
 804076e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040772:	2300      	movs	r3, #0
 8040774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8040778:	f107 0398 	add.w	r3, r7, #152	; 0x98
 804077c:	2100      	movs	r1, #0
 804077e:	4618      	mov	r0, r3
 8040780:	f001 fc72 	bl	8042068 <HAL_RCC_ClockConfig>
 8040784:	4603      	mov	r3, r0
 8040786:	2b00      	cmp	r3, #0
 8040788:	d001      	beq.n	804078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 804078a:	f000 f941 	bl	8040a10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 804078e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8040792:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8040794:	2300      	movs	r3, #0
 8040796:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8040798:	2300      	movs	r3, #0
 804079a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804079c:	f107 0308 	add.w	r3, r7, #8
 80407a0:	4618      	mov	r0, r3
 80407a2:	f001 fe37 	bl	8042414 <HAL_RCCEx_PeriphCLKConfig>
 80407a6:	4603      	mov	r3, r0
 80407a8:	2b00      	cmp	r3, #0
 80407aa:	d001      	beq.n	80407b0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80407ac:	f000 f930 	bl	8040a10 <Error_Handler>
  }
}
 80407b0:	bf00      	nop
 80407b2:	37e0      	adds	r7, #224	; 0xe0
 80407b4:	46bd      	mov	sp, r7
 80407b6:	bd80      	pop	{r7, pc}
 80407b8:	40023800 	.word	0x40023800
 80407bc:	40007000 	.word	0x40007000

080407c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80407c0:	b580      	push	{r7, lr}
 80407c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80407c4:	4b14      	ldr	r3, [pc, #80]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407c6:	4a15      	ldr	r2, [pc, #84]	; (804081c <MX_USART2_UART_Init+0x5c>)
 80407c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80407ca:	4b13      	ldr	r3, [pc, #76]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80407d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80407d2:	4b11      	ldr	r3, [pc, #68]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407d4:	2200      	movs	r2, #0
 80407d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80407d8:	4b0f      	ldr	r3, [pc, #60]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407da:	2200      	movs	r2, #0
 80407dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80407de:	4b0e      	ldr	r3, [pc, #56]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407e0:	2200      	movs	r2, #0
 80407e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80407e4:	4b0c      	ldr	r3, [pc, #48]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407e6:	220c      	movs	r2, #12
 80407e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80407ea:	4b0b      	ldr	r3, [pc, #44]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407ec:	2200      	movs	r2, #0
 80407ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80407f0:	4b09      	ldr	r3, [pc, #36]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407f2:	2200      	movs	r2, #0
 80407f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80407f6:	4b08      	ldr	r3, [pc, #32]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407f8:	2200      	movs	r2, #0
 80407fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80407fc:	4b06      	ldr	r3, [pc, #24]	; (8040818 <MX_USART2_UART_Init+0x58>)
 80407fe:	2200      	movs	r2, #0
 8040800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8040802:	4805      	ldr	r0, [pc, #20]	; (8040818 <MX_USART2_UART_Init+0x58>)
 8040804:	f002 fa2e 	bl	8042c64 <HAL_UART_Init>
 8040808:	4603      	mov	r3, r0
 804080a:	2b00      	cmp	r3, #0
 804080c:	d001      	beq.n	8040812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 804080e:	f000 f8ff 	bl	8040a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8040812:	bf00      	nop
 8040814:	bd80      	pop	{r7, pc}
 8040816:	bf00      	nop
 8040818:	20000120 	.word	0x20000120
 804081c:	40004400 	.word	0x40004400

08040820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8040820:	b580      	push	{r7, lr}
 8040822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040824:	4b14      	ldr	r3, [pc, #80]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040826:	4a15      	ldr	r2, [pc, #84]	; (804087c <MX_USART3_UART_Init+0x5c>)
 8040828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 804082a:	4b13      	ldr	r3, [pc, #76]	; (8040878 <MX_USART3_UART_Init+0x58>)
 804082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8040832:	4b11      	ldr	r3, [pc, #68]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040834:	2200      	movs	r2, #0
 8040836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040838:	4b0f      	ldr	r3, [pc, #60]	; (8040878 <MX_USART3_UART_Init+0x58>)
 804083a:	2200      	movs	r2, #0
 804083c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 804083e:	4b0e      	ldr	r3, [pc, #56]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040840:	2200      	movs	r2, #0
 8040842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040844:	4b0c      	ldr	r3, [pc, #48]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040846:	220c      	movs	r2, #12
 8040848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804084a:	4b0b      	ldr	r3, [pc, #44]	; (8040878 <MX_USART3_UART_Init+0x58>)
 804084c:	2200      	movs	r2, #0
 804084e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8040850:	4b09      	ldr	r3, [pc, #36]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040852:	2200      	movs	r2, #0
 8040854:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040856:	4b08      	ldr	r3, [pc, #32]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040858:	2200      	movs	r2, #0
 804085a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 804085c:	4b06      	ldr	r3, [pc, #24]	; (8040878 <MX_USART3_UART_Init+0x58>)
 804085e:	2200      	movs	r2, #0
 8040860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8040862:	4805      	ldr	r0, [pc, #20]	; (8040878 <MX_USART3_UART_Init+0x58>)
 8040864:	f002 f9fe 	bl	8042c64 <HAL_UART_Init>
 8040868:	4603      	mov	r3, r0
 804086a:	2b00      	cmp	r3, #0
 804086c:	d001      	beq.n	8040872 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 804086e:	f000 f8cf 	bl	8040a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8040872:	bf00      	nop
 8040874:	bd80      	pop	{r7, pc}
 8040876:	bf00      	nop
 8040878:	20000098 	.word	0x20000098
 804087c:	40004800 	.word	0x40004800

08040880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040880:	b580      	push	{r7, lr}
 8040882:	b088      	sub	sp, #32
 8040884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040886:	f107 030c 	add.w	r3, r7, #12
 804088a:	2200      	movs	r2, #0
 804088c:	601a      	str	r2, [r3, #0]
 804088e:	605a      	str	r2, [r3, #4]
 8040890:	609a      	str	r2, [r3, #8]
 8040892:	60da      	str	r2, [r3, #12]
 8040894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040896:	4b17      	ldr	r3, [pc, #92]	; (80408f4 <MX_GPIO_Init+0x74>)
 8040898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804089a:	4a16      	ldr	r2, [pc, #88]	; (80408f4 <MX_GPIO_Init+0x74>)
 804089c:	f043 0308 	orr.w	r3, r3, #8
 80408a0:	6313      	str	r3, [r2, #48]	; 0x30
 80408a2:	4b14      	ldr	r3, [pc, #80]	; (80408f4 <MX_GPIO_Init+0x74>)
 80408a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408a6:	f003 0308 	and.w	r3, r3, #8
 80408aa:	60bb      	str	r3, [r7, #8]
 80408ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80408ae:	4b11      	ldr	r3, [pc, #68]	; (80408f4 <MX_GPIO_Init+0x74>)
 80408b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408b2:	4a10      	ldr	r2, [pc, #64]	; (80408f4 <MX_GPIO_Init+0x74>)
 80408b4:	f043 0302 	orr.w	r3, r3, #2
 80408b8:	6313      	str	r3, [r2, #48]	; 0x30
 80408ba:	4b0e      	ldr	r3, [pc, #56]	; (80408f4 <MX_GPIO_Init+0x74>)
 80408bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408be:	f003 0302 	and.w	r3, r3, #2
 80408c2:	607b      	str	r3, [r7, #4]
 80408c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80408c6:	2200      	movs	r2, #0
 80408c8:	2180      	movs	r1, #128	; 0x80
 80408ca:	480b      	ldr	r0, [pc, #44]	; (80408f8 <MX_GPIO_Init+0x78>)
 80408cc:	f001 f904 	bl	8041ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80408d0:	2380      	movs	r3, #128	; 0x80
 80408d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80408d4:	2301      	movs	r3, #1
 80408d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408d8:	2300      	movs	r3, #0
 80408da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80408dc:	2300      	movs	r3, #0
 80408de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80408e0:	f107 030c 	add.w	r3, r7, #12
 80408e4:	4619      	mov	r1, r3
 80408e6:	4804      	ldr	r0, [pc, #16]	; (80408f8 <MX_GPIO_Init+0x78>)
 80408e8:	f000 ff4a 	bl	8041780 <HAL_GPIO_Init>

}
 80408ec:	bf00      	nop
 80408ee:	3720      	adds	r7, #32
 80408f0:	46bd      	mov	sp, r7
 80408f2:	bd80      	pop	{r7, pc}
 80408f4:	40023800 	.word	0x40023800
 80408f8:	40020400 	.word	0x40020400

080408fc <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80408fc:	b580      	push	{r7, lr}
 80408fe:	b082      	sub	sp, #8
 8040900:	af00      	add	r7, sp, #0
 8040902:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040904:	1d39      	adds	r1, r7, #4
 8040906:	f04f 33ff 	mov.w	r3, #4294967295
 804090a:	2201      	movs	r2, #1
 804090c:	4803      	ldr	r0, [pc, #12]	; (804091c <__io_putchar+0x20>)
 804090e:	f002 f9f7 	bl	8042d00 <HAL_UART_Transmit>

  return ch;
 8040912:	687b      	ldr	r3, [r7, #4]
}
 8040914:	4618      	mov	r0, r3
 8040916:	3708      	adds	r7, #8
 8040918:	46bd      	mov	sp, r7
 804091a:	bd80      	pop	{r7, pc}
 804091c:	20000098 	.word	0x20000098

08040920 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( ETX_GNRL_CFG_ *cfg )
{
 8040920:	b580      	push	{r7, lr}
 8040922:	b08c      	sub	sp, #48	; 0x30
 8040924:	af00      	add	r7, sp, #0
 8040926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;

  do
  {
    if( cfg == NULL )
 8040928:	687b      	ldr	r3, [r7, #4]
 804092a:	2b00      	cmp	r3, #0
 804092c:	d103      	bne.n	8040936 <write_cfg_to_flash+0x16>
    {
      ret = HAL_ERROR;
 804092e:	2301      	movs	r3, #1
 8040930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8040934:	e05f      	b.n	80409f6 <write_cfg_to_flash+0xd6>
    }

    ret = HAL_FLASH_Unlock();
 8040936:	f000 fcc3 	bl	80412c0 <HAL_FLASH_Unlock>
 804093a:	4603      	mov	r3, r0
 804093c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 8040940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8040944:	2b00      	cmp	r3, #0
 8040946:	d151      	bne.n	80409ec <write_cfg_to_flash+0xcc>
    {
      break;
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8040948:	f04f 30ff 	mov.w	r0, #4294967295
 804094c:	f000 fcea 	bl	8041324 <FLASH_WaitForLastOperation>

    //Erase the Flash
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8040950:	2300      	movs	r3, #0
 8040952:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector        = FLASH_SECTOR_4;
 8040954:	2304      	movs	r3, #4
 8040956:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors     = 1;                    //erase only sector 4
 8040958:	2301      	movs	r3, #1
 804095a:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 804095c:	2302      	movs	r3, #2
 804095e:	623b      	str	r3, [r7, #32]

    // clear all flags before you write it to flash
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8040960:	4b28      	ldr	r3, [pc, #160]	; (8040a04 <write_cfg_to_flash+0xe4>)
 8040962:	2273      	movs	r2, #115	; 0x73
 8040964:	60da      	str	r2, [r3, #12]
                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8040966:	f107 020c 	add.w	r2, r7, #12
 804096a:	f107 0310 	add.w	r3, r7, #16
 804096e:	4611      	mov	r1, r2
 8040970:	4618      	mov	r0, r3
 8040972:	f000 fe07 	bl	8041584 <HAL_FLASHEx_Erase>
 8040976:	4603      	mov	r3, r0
 8040978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 804097c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8040980:	2b00      	cmp	r3, #0
 8040982:	d135      	bne.n	80409f0 <write_cfg_to_flash+0xd0>
    {
      break;
    }

    //write the configuration
    uint8_t *data = (uint8_t *) cfg;
 8040984:	687b      	ldr	r3, [r7, #4]
 8040986:	627b      	str	r3, [r7, #36]	; 0x24
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 8040988:	2300      	movs	r3, #0
 804098a:	62bb      	str	r3, [r7, #40]	; 0x28
 804098c:	e01a      	b.n	80409c4 <write_cfg_to_flash+0xa4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 804098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8040990:	491d      	ldr	r1, [pc, #116]	; (8040a08 <write_cfg_to_flash+0xe8>)
 8040992:	4419      	add	r1, r3
                               ETX_CONFIG_FLASH_ADDR + i,
                               data[i]
 8040994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8040996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8040998:	4413      	add	r3, r2
 804099a:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 804099c:	b2da      	uxtb	r2, r3
 804099e:	f04f 0300 	mov.w	r3, #0
 80409a2:	2000      	movs	r0, #0
 80409a4:	f000 fc30 	bl	8041208 <HAL_FLASH_Program>
 80409a8:	4603      	mov	r3, r0
 80409aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                             );
      if( ret != HAL_OK )
 80409ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80409b2:	2b00      	cmp	r3, #0
 80409b4:	d003      	beq.n	80409be <write_cfg_to_flash+0x9e>
      {
        printf("Slot table Flash Write Error\r\n");
 80409b6:	4815      	ldr	r0, [pc, #84]	; (8040a0c <write_cfg_to_flash+0xec>)
 80409b8:	f003 fad8 	bl	8043f6c <puts>
        break;
 80409bc:	e005      	b.n	80409ca <write_cfg_to_flash+0xaa>
    for( uint32_t i = 0u; i < sizeof(ETX_GNRL_CFG_); i++ )
 80409be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80409c0:	3301      	adds	r3, #1
 80409c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80409c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80409c6:	2b31      	cmp	r3, #49	; 0x31
 80409c8:	d9e1      	bls.n	804098e <write_cfg_to_flash+0x6e>
      }
    }

    //Check if the FLASH_FLAG_BSY.
    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80409ca:	f04f 30ff 	mov.w	r0, #4294967295
 80409ce:	f000 fca9 	bl	8041324 <FLASH_WaitForLastOperation>

    if( ret != HAL_OK )
 80409d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80409d6:	2b00      	cmp	r3, #0
 80409d8:	d10c      	bne.n	80409f4 <write_cfg_to_flash+0xd4>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 80409da:	f000 fc93 	bl	8041304 <HAL_FLASH_Lock>
 80409de:	4603      	mov	r3, r0
 80409e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( ret != HAL_OK )
 80409e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80409e8:	2b00      	cmp	r3, #0
 80409ea:	e004      	b.n	80409f6 <write_cfg_to_flash+0xd6>
      break;
 80409ec:	bf00      	nop
 80409ee:	e002      	b.n	80409f6 <write_cfg_to_flash+0xd6>
      break;
 80409f0:	bf00      	nop
 80409f2:	e000      	b.n	80409f6 <write_cfg_to_flash+0xd6>
      break;
 80409f4:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 80409f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80409fa:	4618      	mov	r0, r3
 80409fc:	3730      	adds	r7, #48	; 0x30
 80409fe:	46bd      	mov	sp, r7
 8040a00:	bd80      	pop	{r7, pc}
 8040a02:	bf00      	nop
 8040a04:	40023c00 	.word	0x40023c00
 8040a08:	08020000 	.word	0x08020000
 8040a0c:	08044e88 	.word	0x08044e88

08040a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040a10:	b480      	push	{r7}
 8040a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040a14:	b672      	cpsid	i
}
 8040a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040a18:	e7fe      	b.n	8040a18 <Error_Handler+0x8>
	...

08040a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040a1c:	b480      	push	{r7}
 8040a1e:	b083      	sub	sp, #12
 8040a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8040a22:	4b0f      	ldr	r3, [pc, #60]	; (8040a60 <HAL_MspInit+0x44>)
 8040a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040a26:	4a0e      	ldr	r2, [pc, #56]	; (8040a60 <HAL_MspInit+0x44>)
 8040a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8040a2e:	4b0c      	ldr	r3, [pc, #48]	; (8040a60 <HAL_MspInit+0x44>)
 8040a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a36:	607b      	str	r3, [r7, #4]
 8040a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040a3a:	4b09      	ldr	r3, [pc, #36]	; (8040a60 <HAL_MspInit+0x44>)
 8040a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040a3e:	4a08      	ldr	r2, [pc, #32]	; (8040a60 <HAL_MspInit+0x44>)
 8040a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040a44:	6453      	str	r3, [r2, #68]	; 0x44
 8040a46:	4b06      	ldr	r3, [pc, #24]	; (8040a60 <HAL_MspInit+0x44>)
 8040a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040a4e:	603b      	str	r3, [r7, #0]
 8040a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040a52:	bf00      	nop
 8040a54:	370c      	adds	r7, #12
 8040a56:	46bd      	mov	sp, r7
 8040a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a5c:	4770      	bx	lr
 8040a5e:	bf00      	nop
 8040a60:	40023800 	.word	0x40023800

08040a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040a64:	b580      	push	{r7, lr}
 8040a66:	b08c      	sub	sp, #48	; 0x30
 8040a68:	af00      	add	r7, sp, #0
 8040a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a6c:	f107 031c 	add.w	r3, r7, #28
 8040a70:	2200      	movs	r2, #0
 8040a72:	601a      	str	r2, [r3, #0]
 8040a74:	605a      	str	r2, [r3, #4]
 8040a76:	609a      	str	r2, [r3, #8]
 8040a78:	60da      	str	r2, [r3, #12]
 8040a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8040a7c:	687b      	ldr	r3, [r7, #4]
 8040a7e:	681b      	ldr	r3, [r3, #0]
 8040a80:	4a32      	ldr	r2, [pc, #200]	; (8040b4c <HAL_UART_MspInit+0xe8>)
 8040a82:	4293      	cmp	r3, r2
 8040a84:	d130      	bne.n	8040ae8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8040a86:	4b32      	ldr	r3, [pc, #200]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040a8a:	4a31      	ldr	r2, [pc, #196]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040a90:	6413      	str	r3, [r2, #64]	; 0x40
 8040a92:	4b2f      	ldr	r3, [pc, #188]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040a9a:	61bb      	str	r3, [r7, #24]
 8040a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040a9e:	4b2c      	ldr	r3, [pc, #176]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040aa2:	4a2b      	ldr	r2, [pc, #172]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040aa4:	f043 0308 	orr.w	r3, r3, #8
 8040aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8040aaa:	4b29      	ldr	r3, [pc, #164]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040aae:	f003 0308 	and.w	r3, r3, #8
 8040ab2:	617b      	str	r3, [r7, #20]
 8040ab4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8040ab6:	2360      	movs	r3, #96	; 0x60
 8040ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040aba:	2302      	movs	r3, #2
 8040abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040abe:	2300      	movs	r3, #0
 8040ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040ac2:	2303      	movs	r3, #3
 8040ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8040ac6:	2307      	movs	r3, #7
 8040ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040aca:	f107 031c 	add.w	r3, r7, #28
 8040ace:	4619      	mov	r1, r3
 8040ad0:	4820      	ldr	r0, [pc, #128]	; (8040b54 <HAL_UART_MspInit+0xf0>)
 8040ad2:	f000 fe55 	bl	8041780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8040ad6:	2200      	movs	r2, #0
 8040ad8:	2100      	movs	r1, #0
 8040ada:	2026      	movs	r0, #38	; 0x26
 8040adc:	f000 fac7 	bl	804106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8040ae0:	2026      	movs	r0, #38	; 0x26
 8040ae2:	f000 fae0 	bl	80410a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8040ae6:	e02d      	b.n	8040b44 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8040ae8:	687b      	ldr	r3, [r7, #4]
 8040aea:	681b      	ldr	r3, [r3, #0]
 8040aec:	4a1a      	ldr	r2, [pc, #104]	; (8040b58 <HAL_UART_MspInit+0xf4>)
 8040aee:	4293      	cmp	r3, r2
 8040af0:	d128      	bne.n	8040b44 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8040af2:	4b17      	ldr	r3, [pc, #92]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040af6:	4a16      	ldr	r2, [pc, #88]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040afc:	6413      	str	r3, [r2, #64]	; 0x40
 8040afe:	4b14      	ldr	r3, [pc, #80]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8040b06:	613b      	str	r3, [r7, #16]
 8040b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040b0a:	4b11      	ldr	r3, [pc, #68]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040b0e:	4a10      	ldr	r2, [pc, #64]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040b10:	f043 0308 	orr.w	r3, r3, #8
 8040b14:	6313      	str	r3, [r2, #48]	; 0x30
 8040b16:	4b0e      	ldr	r3, [pc, #56]	; (8040b50 <HAL_UART_MspInit+0xec>)
 8040b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040b1a:	f003 0308 	and.w	r3, r3, #8
 8040b1e:	60fb      	str	r3, [r7, #12]
 8040b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8040b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8040b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040b28:	2302      	movs	r3, #2
 8040b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b2c:	2300      	movs	r3, #0
 8040b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040b30:	2303      	movs	r3, #3
 8040b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8040b34:	2307      	movs	r3, #7
 8040b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040b38:	f107 031c 	add.w	r3, r7, #28
 8040b3c:	4619      	mov	r1, r3
 8040b3e:	4805      	ldr	r0, [pc, #20]	; (8040b54 <HAL_UART_MspInit+0xf0>)
 8040b40:	f000 fe1e 	bl	8041780 <HAL_GPIO_Init>
}
 8040b44:	bf00      	nop
 8040b46:	3730      	adds	r7, #48	; 0x30
 8040b48:	46bd      	mov	sp, r7
 8040b4a:	bd80      	pop	{r7, pc}
 8040b4c:	40004400 	.word	0x40004400
 8040b50:	40023800 	.word	0x40023800
 8040b54:	40020c00 	.word	0x40020c00
 8040b58:	40004800 	.word	0x40004800

08040b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040b5c:	b480      	push	{r7}
 8040b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040b60:	e7fe      	b.n	8040b60 <NMI_Handler+0x4>

08040b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040b62:	b480      	push	{r7}
 8040b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040b66:	e7fe      	b.n	8040b66 <HardFault_Handler+0x4>

08040b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040b68:	b480      	push	{r7}
 8040b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040b6c:	e7fe      	b.n	8040b6c <MemManage_Handler+0x4>

08040b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040b6e:	b480      	push	{r7}
 8040b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040b72:	e7fe      	b.n	8040b72 <BusFault_Handler+0x4>

08040b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040b74:	b480      	push	{r7}
 8040b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040b78:	e7fe      	b.n	8040b78 <UsageFault_Handler+0x4>

08040b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040b7a:	b480      	push	{r7}
 8040b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040b7e:	bf00      	nop
 8040b80:	46bd      	mov	sp, r7
 8040b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b86:	4770      	bx	lr

08040b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040b88:	b480      	push	{r7}
 8040b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040b8c:	bf00      	nop
 8040b8e:	46bd      	mov	sp, r7
 8040b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b94:	4770      	bx	lr

08040b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040b96:	b480      	push	{r7}
 8040b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040b9a:	bf00      	nop
 8040b9c:	46bd      	mov	sp, r7
 8040b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ba2:	4770      	bx	lr

08040ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040ba4:	b580      	push	{r7, lr}
 8040ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040ba8:	f000 f92c 	bl	8040e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040bac:	bf00      	nop
 8040bae:	bd80      	pop	{r7, pc}

08040bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8040bb0:	b580      	push	{r7, lr}
 8040bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8040bb4:	4802      	ldr	r0, [pc, #8]	; (8040bc0 <USART2_IRQHandler+0x10>)
 8040bb6:	f002 f973 	bl	8042ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8040bba:	bf00      	nop
 8040bbc:	bd80      	pop	{r7, pc}
 8040bbe:	bf00      	nop
 8040bc0:	20000120 	.word	0x20000120

08040bc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040bc4:	b580      	push	{r7, lr}
 8040bc6:	b086      	sub	sp, #24
 8040bc8:	af00      	add	r7, sp, #0
 8040bca:	60f8      	str	r0, [r7, #12]
 8040bcc:	60b9      	str	r1, [r7, #8]
 8040bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040bd0:	2300      	movs	r3, #0
 8040bd2:	617b      	str	r3, [r7, #20]
 8040bd4:	e00a      	b.n	8040bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8040bd6:	f3af 8000 	nop.w
 8040bda:	4601      	mov	r1, r0
 8040bdc:	68bb      	ldr	r3, [r7, #8]
 8040bde:	1c5a      	adds	r2, r3, #1
 8040be0:	60ba      	str	r2, [r7, #8]
 8040be2:	b2ca      	uxtb	r2, r1
 8040be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040be6:	697b      	ldr	r3, [r7, #20]
 8040be8:	3301      	adds	r3, #1
 8040bea:	617b      	str	r3, [r7, #20]
 8040bec:	697a      	ldr	r2, [r7, #20]
 8040bee:	687b      	ldr	r3, [r7, #4]
 8040bf0:	429a      	cmp	r2, r3
 8040bf2:	dbf0      	blt.n	8040bd6 <_read+0x12>
	}

return len;
 8040bf4:	687b      	ldr	r3, [r7, #4]
}
 8040bf6:	4618      	mov	r0, r3
 8040bf8:	3718      	adds	r7, #24
 8040bfa:	46bd      	mov	sp, r7
 8040bfc:	bd80      	pop	{r7, pc}

08040bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040bfe:	b580      	push	{r7, lr}
 8040c00:	b086      	sub	sp, #24
 8040c02:	af00      	add	r7, sp, #0
 8040c04:	60f8      	str	r0, [r7, #12]
 8040c06:	60b9      	str	r1, [r7, #8]
 8040c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040c0a:	2300      	movs	r3, #0
 8040c0c:	617b      	str	r3, [r7, #20]
 8040c0e:	e009      	b.n	8040c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8040c10:	68bb      	ldr	r3, [r7, #8]
 8040c12:	1c5a      	adds	r2, r3, #1
 8040c14:	60ba      	str	r2, [r7, #8]
 8040c16:	781b      	ldrb	r3, [r3, #0]
 8040c18:	4618      	mov	r0, r3
 8040c1a:	f7ff fe6f 	bl	80408fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040c1e:	697b      	ldr	r3, [r7, #20]
 8040c20:	3301      	adds	r3, #1
 8040c22:	617b      	str	r3, [r7, #20]
 8040c24:	697a      	ldr	r2, [r7, #20]
 8040c26:	687b      	ldr	r3, [r7, #4]
 8040c28:	429a      	cmp	r2, r3
 8040c2a:	dbf1      	blt.n	8040c10 <_write+0x12>
	}
	return len;
 8040c2c:	687b      	ldr	r3, [r7, #4]
}
 8040c2e:	4618      	mov	r0, r3
 8040c30:	3718      	adds	r7, #24
 8040c32:	46bd      	mov	sp, r7
 8040c34:	bd80      	pop	{r7, pc}

08040c36 <_close>:

int _close(int file)
{
 8040c36:	b480      	push	{r7}
 8040c38:	b083      	sub	sp, #12
 8040c3a:	af00      	add	r7, sp, #0
 8040c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8040c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040c42:	4618      	mov	r0, r3
 8040c44:	370c      	adds	r7, #12
 8040c46:	46bd      	mov	sp, r7
 8040c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c4c:	4770      	bx	lr

08040c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040c4e:	b480      	push	{r7}
 8040c50:	b083      	sub	sp, #12
 8040c52:	af00      	add	r7, sp, #0
 8040c54:	6078      	str	r0, [r7, #4]
 8040c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8040c58:	683b      	ldr	r3, [r7, #0]
 8040c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8040c60:	2300      	movs	r3, #0
}
 8040c62:	4618      	mov	r0, r3
 8040c64:	370c      	adds	r7, #12
 8040c66:	46bd      	mov	sp, r7
 8040c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c6c:	4770      	bx	lr

08040c6e <_isatty>:

int _isatty(int file)
{
 8040c6e:	b480      	push	{r7}
 8040c70:	b083      	sub	sp, #12
 8040c72:	af00      	add	r7, sp, #0
 8040c74:	6078      	str	r0, [r7, #4]
	return 1;
 8040c76:	2301      	movs	r3, #1
}
 8040c78:	4618      	mov	r0, r3
 8040c7a:	370c      	adds	r7, #12
 8040c7c:	46bd      	mov	sp, r7
 8040c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c82:	4770      	bx	lr

08040c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040c84:	b480      	push	{r7}
 8040c86:	b085      	sub	sp, #20
 8040c88:	af00      	add	r7, sp, #0
 8040c8a:	60f8      	str	r0, [r7, #12]
 8040c8c:	60b9      	str	r1, [r7, #8]
 8040c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8040c90:	2300      	movs	r3, #0
}
 8040c92:	4618      	mov	r0, r3
 8040c94:	3714      	adds	r7, #20
 8040c96:	46bd      	mov	sp, r7
 8040c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c9c:	4770      	bx	lr
	...

08040ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040ca0:	b580      	push	{r7, lr}
 8040ca2:	b086      	sub	sp, #24
 8040ca4:	af00      	add	r7, sp, #0
 8040ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040ca8:	4a14      	ldr	r2, [pc, #80]	; (8040cfc <_sbrk+0x5c>)
 8040caa:	4b15      	ldr	r3, [pc, #84]	; (8040d00 <_sbrk+0x60>)
 8040cac:	1ad3      	subs	r3, r2, r3
 8040cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040cb0:	697b      	ldr	r3, [r7, #20]
 8040cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040cb4:	4b13      	ldr	r3, [pc, #76]	; (8040d04 <_sbrk+0x64>)
 8040cb6:	681b      	ldr	r3, [r3, #0]
 8040cb8:	2b00      	cmp	r3, #0
 8040cba:	d102      	bne.n	8040cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040cbc:	4b11      	ldr	r3, [pc, #68]	; (8040d04 <_sbrk+0x64>)
 8040cbe:	4a12      	ldr	r2, [pc, #72]	; (8040d08 <_sbrk+0x68>)
 8040cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040cc2:	4b10      	ldr	r3, [pc, #64]	; (8040d04 <_sbrk+0x64>)
 8040cc4:	681a      	ldr	r2, [r3, #0]
 8040cc6:	687b      	ldr	r3, [r7, #4]
 8040cc8:	4413      	add	r3, r2
 8040cca:	693a      	ldr	r2, [r7, #16]
 8040ccc:	429a      	cmp	r2, r3
 8040cce:	d207      	bcs.n	8040ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040cd0:	f003 f894 	bl	8043dfc <__errno>
 8040cd4:	4603      	mov	r3, r0
 8040cd6:	220c      	movs	r2, #12
 8040cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040cda:	f04f 33ff 	mov.w	r3, #4294967295
 8040cde:	e009      	b.n	8040cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040ce0:	4b08      	ldr	r3, [pc, #32]	; (8040d04 <_sbrk+0x64>)
 8040ce2:	681b      	ldr	r3, [r3, #0]
 8040ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040ce6:	4b07      	ldr	r3, [pc, #28]	; (8040d04 <_sbrk+0x64>)
 8040ce8:	681a      	ldr	r2, [r3, #0]
 8040cea:	687b      	ldr	r3, [r7, #4]
 8040cec:	4413      	add	r3, r2
 8040cee:	4a05      	ldr	r2, [pc, #20]	; (8040d04 <_sbrk+0x64>)
 8040cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040cf2:	68fb      	ldr	r3, [r7, #12]
}
 8040cf4:	4618      	mov	r0, r3
 8040cf6:	3718      	adds	r7, #24
 8040cf8:	46bd      	mov	sp, r7
 8040cfa:	bd80      	pop	{r7, pc}
 8040cfc:	20080000 	.word	0x20080000
 8040d00:	00000400 	.word	0x00000400
 8040d04:	2000008c 	.word	0x2000008c
 8040d08:	200001d8 	.word	0x200001d8

08040d0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040d0c:	b480      	push	{r7}
 8040d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040d10:	4b07      	ldr	r3, [pc, #28]	; (8040d30 <SystemInit+0x24>)
 8040d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040d16:	4a06      	ldr	r2, [pc, #24]	; (8040d30 <SystemInit+0x24>)
 8040d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040d20:	4b03      	ldr	r3, [pc, #12]	; (8040d30 <SystemInit+0x24>)
 8040d22:	4a04      	ldr	r2, [pc, #16]	; (8040d34 <SystemInit+0x28>)
 8040d24:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040d26:	bf00      	nop
 8040d28:	46bd      	mov	sp, r7
 8040d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d2e:	4770      	bx	lr
 8040d30:	e000ed00 	.word	0xe000ed00
 8040d34:	08040000 	.word	0x08040000

08040d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040d3c:	480d      	ldr	r0, [pc, #52]	; (8040d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040d3e:	490e      	ldr	r1, [pc, #56]	; (8040d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040d40:	4a0e      	ldr	r2, [pc, #56]	; (8040d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040d44:	e002      	b.n	8040d4c <LoopCopyDataInit>

08040d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040d4a:	3304      	adds	r3, #4

08040d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040d50:	d3f9      	bcc.n	8040d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040d52:	4a0b      	ldr	r2, [pc, #44]	; (8040d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040d54:	4c0b      	ldr	r4, [pc, #44]	; (8040d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8040d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040d58:	e001      	b.n	8040d5e <LoopFillZerobss>

08040d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040d5c:	3204      	adds	r2, #4

08040d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040d60:	d3fb      	bcc.n	8040d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040d62:	f7ff ffd3 	bl	8040d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040d66:	f003 f84f 	bl	8043e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040d6a:	f7ff fc7b 	bl	8040664 <main>
  bx  lr    
 8040d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040d70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040d78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8040d7c:	08044f68 	.word	0x08044f68
  ldr r2, =_sbss
 8040d80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8040d84:	200001d4 	.word	0x200001d4

08040d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040d88:	e7fe      	b.n	8040d88 <ADC_IRQHandler>

08040d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040d8a:	b580      	push	{r7, lr}
 8040d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040d8e:	2003      	movs	r0, #3
 8040d90:	f000 f962 	bl	8041058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040d94:	2000      	movs	r0, #0
 8040d96:	f000 f805 	bl	8040da4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8040d9a:	f7ff fe3f 	bl	8040a1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8040d9e:	2300      	movs	r3, #0
}
 8040da0:	4618      	mov	r0, r3
 8040da2:	bd80      	pop	{r7, pc}

08040da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040da4:	b580      	push	{r7, lr}
 8040da6:	b082      	sub	sp, #8
 8040da8:	af00      	add	r7, sp, #0
 8040daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040dac:	4b12      	ldr	r3, [pc, #72]	; (8040df8 <HAL_InitTick+0x54>)
 8040dae:	681a      	ldr	r2, [r3, #0]
 8040db0:	4b12      	ldr	r3, [pc, #72]	; (8040dfc <HAL_InitTick+0x58>)
 8040db2:	781b      	ldrb	r3, [r3, #0]
 8040db4:	4619      	mov	r1, r3
 8040db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8040dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8040dc2:	4618      	mov	r0, r3
 8040dc4:	f000 f981 	bl	80410ca <HAL_SYSTICK_Config>
 8040dc8:	4603      	mov	r3, r0
 8040dca:	2b00      	cmp	r3, #0
 8040dcc:	d001      	beq.n	8040dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040dce:	2301      	movs	r3, #1
 8040dd0:	e00e      	b.n	8040df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040dd2:	687b      	ldr	r3, [r7, #4]
 8040dd4:	2b0f      	cmp	r3, #15
 8040dd6:	d80a      	bhi.n	8040dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040dd8:	2200      	movs	r2, #0
 8040dda:	6879      	ldr	r1, [r7, #4]
 8040ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8040de0:	f000 f945 	bl	804106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040de4:	4a06      	ldr	r2, [pc, #24]	; (8040e00 <HAL_InitTick+0x5c>)
 8040de6:	687b      	ldr	r3, [r7, #4]
 8040de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040dea:	2300      	movs	r3, #0
 8040dec:	e000      	b.n	8040df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040dee:	2301      	movs	r3, #1
}
 8040df0:	4618      	mov	r0, r3
 8040df2:	3708      	adds	r7, #8
 8040df4:	46bd      	mov	sp, r7
 8040df6:	bd80      	pop	{r7, pc}
 8040df8:	20000000 	.word	0x20000000
 8040dfc:	20000008 	.word	0x20000008
 8040e00:	20000004 	.word	0x20000004

08040e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040e04:	b480      	push	{r7}
 8040e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040e08:	4b06      	ldr	r3, [pc, #24]	; (8040e24 <HAL_IncTick+0x20>)
 8040e0a:	781b      	ldrb	r3, [r3, #0]
 8040e0c:	461a      	mov	r2, r3
 8040e0e:	4b06      	ldr	r3, [pc, #24]	; (8040e28 <HAL_IncTick+0x24>)
 8040e10:	681b      	ldr	r3, [r3, #0]
 8040e12:	4413      	add	r3, r2
 8040e14:	4a04      	ldr	r2, [pc, #16]	; (8040e28 <HAL_IncTick+0x24>)
 8040e16:	6013      	str	r3, [r2, #0]
}
 8040e18:	bf00      	nop
 8040e1a:	46bd      	mov	sp, r7
 8040e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e20:	4770      	bx	lr
 8040e22:	bf00      	nop
 8040e24:	20000008 	.word	0x20000008
 8040e28:	200001a4 	.word	0x200001a4

08040e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040e2c:	b480      	push	{r7}
 8040e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8040e30:	4b03      	ldr	r3, [pc, #12]	; (8040e40 <HAL_GetTick+0x14>)
 8040e32:	681b      	ldr	r3, [r3, #0]
}
 8040e34:	4618      	mov	r0, r3
 8040e36:	46bd      	mov	sp, r7
 8040e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e3c:	4770      	bx	lr
 8040e3e:	bf00      	nop
 8040e40:	200001a4 	.word	0x200001a4

08040e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040e44:	b580      	push	{r7, lr}
 8040e46:	b084      	sub	sp, #16
 8040e48:	af00      	add	r7, sp, #0
 8040e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040e4c:	f7ff ffee 	bl	8040e2c <HAL_GetTick>
 8040e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040e52:	687b      	ldr	r3, [r7, #4]
 8040e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040e56:	68fb      	ldr	r3, [r7, #12]
 8040e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040e5c:	d005      	beq.n	8040e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040e5e:	4b0a      	ldr	r3, [pc, #40]	; (8040e88 <HAL_Delay+0x44>)
 8040e60:	781b      	ldrb	r3, [r3, #0]
 8040e62:	461a      	mov	r2, r3
 8040e64:	68fb      	ldr	r3, [r7, #12]
 8040e66:	4413      	add	r3, r2
 8040e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040e6a:	bf00      	nop
 8040e6c:	f7ff ffde 	bl	8040e2c <HAL_GetTick>
 8040e70:	4602      	mov	r2, r0
 8040e72:	68bb      	ldr	r3, [r7, #8]
 8040e74:	1ad3      	subs	r3, r2, r3
 8040e76:	68fa      	ldr	r2, [r7, #12]
 8040e78:	429a      	cmp	r2, r3
 8040e7a:	d8f7      	bhi.n	8040e6c <HAL_Delay+0x28>
  {
  }
}
 8040e7c:	bf00      	nop
 8040e7e:	bf00      	nop
 8040e80:	3710      	adds	r7, #16
 8040e82:	46bd      	mov	sp, r7
 8040e84:	bd80      	pop	{r7, pc}
 8040e86:	bf00      	nop
 8040e88:	20000008 	.word	0x20000008

08040e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040e8c:	b480      	push	{r7}
 8040e8e:	b085      	sub	sp, #20
 8040e90:	af00      	add	r7, sp, #0
 8040e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040e94:	687b      	ldr	r3, [r7, #4]
 8040e96:	f003 0307 	and.w	r3, r3, #7
 8040e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040e9c:	4b0b      	ldr	r3, [pc, #44]	; (8040ecc <__NVIC_SetPriorityGrouping+0x40>)
 8040e9e:	68db      	ldr	r3, [r3, #12]
 8040ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040ea2:	68ba      	ldr	r2, [r7, #8]
 8040ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040ea8:	4013      	ands	r3, r2
 8040eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040eac:	68fb      	ldr	r3, [r7, #12]
 8040eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040eb0:	68bb      	ldr	r3, [r7, #8]
 8040eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040eb4:	4b06      	ldr	r3, [pc, #24]	; (8040ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8040eb6:	4313      	orrs	r3, r2
 8040eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040eba:	4a04      	ldr	r2, [pc, #16]	; (8040ecc <__NVIC_SetPriorityGrouping+0x40>)
 8040ebc:	68bb      	ldr	r3, [r7, #8]
 8040ebe:	60d3      	str	r3, [r2, #12]
}
 8040ec0:	bf00      	nop
 8040ec2:	3714      	adds	r7, #20
 8040ec4:	46bd      	mov	sp, r7
 8040ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eca:	4770      	bx	lr
 8040ecc:	e000ed00 	.word	0xe000ed00
 8040ed0:	05fa0000 	.word	0x05fa0000

08040ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040ed4:	b480      	push	{r7}
 8040ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040ed8:	4b04      	ldr	r3, [pc, #16]	; (8040eec <__NVIC_GetPriorityGrouping+0x18>)
 8040eda:	68db      	ldr	r3, [r3, #12]
 8040edc:	0a1b      	lsrs	r3, r3, #8
 8040ede:	f003 0307 	and.w	r3, r3, #7
}
 8040ee2:	4618      	mov	r0, r3
 8040ee4:	46bd      	mov	sp, r7
 8040ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eea:	4770      	bx	lr
 8040eec:	e000ed00 	.word	0xe000ed00

08040ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040ef0:	b480      	push	{r7}
 8040ef2:	b083      	sub	sp, #12
 8040ef4:	af00      	add	r7, sp, #0
 8040ef6:	4603      	mov	r3, r0
 8040ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040efe:	2b00      	cmp	r3, #0
 8040f00:	db0b      	blt.n	8040f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040f02:	79fb      	ldrb	r3, [r7, #7]
 8040f04:	f003 021f 	and.w	r2, r3, #31
 8040f08:	4907      	ldr	r1, [pc, #28]	; (8040f28 <__NVIC_EnableIRQ+0x38>)
 8040f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f0e:	095b      	lsrs	r3, r3, #5
 8040f10:	2001      	movs	r0, #1
 8040f12:	fa00 f202 	lsl.w	r2, r0, r2
 8040f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8040f1a:	bf00      	nop
 8040f1c:	370c      	adds	r7, #12
 8040f1e:	46bd      	mov	sp, r7
 8040f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f24:	4770      	bx	lr
 8040f26:	bf00      	nop
 8040f28:	e000e100 	.word	0xe000e100

08040f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040f2c:	b480      	push	{r7}
 8040f2e:	b083      	sub	sp, #12
 8040f30:	af00      	add	r7, sp, #0
 8040f32:	4603      	mov	r3, r0
 8040f34:	6039      	str	r1, [r7, #0]
 8040f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f3c:	2b00      	cmp	r3, #0
 8040f3e:	db0a      	blt.n	8040f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040f40:	683b      	ldr	r3, [r7, #0]
 8040f42:	b2da      	uxtb	r2, r3
 8040f44:	490c      	ldr	r1, [pc, #48]	; (8040f78 <__NVIC_SetPriority+0x4c>)
 8040f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f4a:	0112      	lsls	r2, r2, #4
 8040f4c:	b2d2      	uxtb	r2, r2
 8040f4e:	440b      	add	r3, r1
 8040f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040f54:	e00a      	b.n	8040f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040f56:	683b      	ldr	r3, [r7, #0]
 8040f58:	b2da      	uxtb	r2, r3
 8040f5a:	4908      	ldr	r1, [pc, #32]	; (8040f7c <__NVIC_SetPriority+0x50>)
 8040f5c:	79fb      	ldrb	r3, [r7, #7]
 8040f5e:	f003 030f 	and.w	r3, r3, #15
 8040f62:	3b04      	subs	r3, #4
 8040f64:	0112      	lsls	r2, r2, #4
 8040f66:	b2d2      	uxtb	r2, r2
 8040f68:	440b      	add	r3, r1
 8040f6a:	761a      	strb	r2, [r3, #24]
}
 8040f6c:	bf00      	nop
 8040f6e:	370c      	adds	r7, #12
 8040f70:	46bd      	mov	sp, r7
 8040f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f76:	4770      	bx	lr
 8040f78:	e000e100 	.word	0xe000e100
 8040f7c:	e000ed00 	.word	0xe000ed00

08040f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f80:	b480      	push	{r7}
 8040f82:	b089      	sub	sp, #36	; 0x24
 8040f84:	af00      	add	r7, sp, #0
 8040f86:	60f8      	str	r0, [r7, #12]
 8040f88:	60b9      	str	r1, [r7, #8]
 8040f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040f8c:	68fb      	ldr	r3, [r7, #12]
 8040f8e:	f003 0307 	and.w	r3, r3, #7
 8040f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040f94:	69fb      	ldr	r3, [r7, #28]
 8040f96:	f1c3 0307 	rsb	r3, r3, #7
 8040f9a:	2b04      	cmp	r3, #4
 8040f9c:	bf28      	it	cs
 8040f9e:	2304      	movcs	r3, #4
 8040fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040fa2:	69fb      	ldr	r3, [r7, #28]
 8040fa4:	3304      	adds	r3, #4
 8040fa6:	2b06      	cmp	r3, #6
 8040fa8:	d902      	bls.n	8040fb0 <NVIC_EncodePriority+0x30>
 8040faa:	69fb      	ldr	r3, [r7, #28]
 8040fac:	3b03      	subs	r3, #3
 8040fae:	e000      	b.n	8040fb2 <NVIC_EncodePriority+0x32>
 8040fb0:	2300      	movs	r3, #0
 8040fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8040fb8:	69bb      	ldr	r3, [r7, #24]
 8040fba:	fa02 f303 	lsl.w	r3, r2, r3
 8040fbe:	43da      	mvns	r2, r3
 8040fc0:	68bb      	ldr	r3, [r7, #8]
 8040fc2:	401a      	ands	r2, r3
 8040fc4:	697b      	ldr	r3, [r7, #20]
 8040fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8040fcc:	697b      	ldr	r3, [r7, #20]
 8040fce:	fa01 f303 	lsl.w	r3, r1, r3
 8040fd2:	43d9      	mvns	r1, r3
 8040fd4:	687b      	ldr	r3, [r7, #4]
 8040fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040fd8:	4313      	orrs	r3, r2
         );
}
 8040fda:	4618      	mov	r0, r3
 8040fdc:	3724      	adds	r7, #36	; 0x24
 8040fde:	46bd      	mov	sp, r7
 8040fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fe4:	4770      	bx	lr
	...

08040fe8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8040fe8:	b480      	push	{r7}
 8040fea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8040fec:	f3bf 8f4f 	dsb	sy
}
 8040ff0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8040ff2:	4b06      	ldr	r3, [pc, #24]	; (804100c <__NVIC_SystemReset+0x24>)
 8040ff4:	68db      	ldr	r3, [r3, #12]
 8040ff6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8040ffa:	4904      	ldr	r1, [pc, #16]	; (804100c <__NVIC_SystemReset+0x24>)
 8040ffc:	4b04      	ldr	r3, [pc, #16]	; (8041010 <__NVIC_SystemReset+0x28>)
 8040ffe:	4313      	orrs	r3, r2
 8041000:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8041002:	f3bf 8f4f 	dsb	sy
}
 8041006:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8041008:	bf00      	nop
 804100a:	e7fd      	b.n	8041008 <__NVIC_SystemReset+0x20>
 804100c:	e000ed00 	.word	0xe000ed00
 8041010:	05fa0004 	.word	0x05fa0004

08041014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8041014:	b580      	push	{r7, lr}
 8041016:	b082      	sub	sp, #8
 8041018:	af00      	add	r7, sp, #0
 804101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 804101c:	687b      	ldr	r3, [r7, #4]
 804101e:	3b01      	subs	r3, #1
 8041020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041024:	d301      	bcc.n	804102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8041026:	2301      	movs	r3, #1
 8041028:	e00f      	b.n	804104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 804102a:	4a0a      	ldr	r2, [pc, #40]	; (8041054 <SysTick_Config+0x40>)
 804102c:	687b      	ldr	r3, [r7, #4]
 804102e:	3b01      	subs	r3, #1
 8041030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8041032:	210f      	movs	r1, #15
 8041034:	f04f 30ff 	mov.w	r0, #4294967295
 8041038:	f7ff ff78 	bl	8040f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 804103c:	4b05      	ldr	r3, [pc, #20]	; (8041054 <SysTick_Config+0x40>)
 804103e:	2200      	movs	r2, #0
 8041040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041042:	4b04      	ldr	r3, [pc, #16]	; (8041054 <SysTick_Config+0x40>)
 8041044:	2207      	movs	r2, #7
 8041046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8041048:	2300      	movs	r3, #0
}
 804104a:	4618      	mov	r0, r3
 804104c:	3708      	adds	r7, #8
 804104e:	46bd      	mov	sp, r7
 8041050:	bd80      	pop	{r7, pc}
 8041052:	bf00      	nop
 8041054:	e000e010 	.word	0xe000e010

08041058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041058:	b580      	push	{r7, lr}
 804105a:	b082      	sub	sp, #8
 804105c:	af00      	add	r7, sp, #0
 804105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041060:	6878      	ldr	r0, [r7, #4]
 8041062:	f7ff ff13 	bl	8040e8c <__NVIC_SetPriorityGrouping>
}
 8041066:	bf00      	nop
 8041068:	3708      	adds	r7, #8
 804106a:	46bd      	mov	sp, r7
 804106c:	bd80      	pop	{r7, pc}

0804106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 804106e:	b580      	push	{r7, lr}
 8041070:	b086      	sub	sp, #24
 8041072:	af00      	add	r7, sp, #0
 8041074:	4603      	mov	r3, r0
 8041076:	60b9      	str	r1, [r7, #8]
 8041078:	607a      	str	r2, [r7, #4]
 804107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 804107c:	2300      	movs	r3, #0
 804107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8041080:	f7ff ff28 	bl	8040ed4 <__NVIC_GetPriorityGrouping>
 8041084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041086:	687a      	ldr	r2, [r7, #4]
 8041088:	68b9      	ldr	r1, [r7, #8]
 804108a:	6978      	ldr	r0, [r7, #20]
 804108c:	f7ff ff78 	bl	8040f80 <NVIC_EncodePriority>
 8041090:	4602      	mov	r2, r0
 8041092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041096:	4611      	mov	r1, r2
 8041098:	4618      	mov	r0, r3
 804109a:	f7ff ff47 	bl	8040f2c <__NVIC_SetPriority>
}
 804109e:	bf00      	nop
 80410a0:	3718      	adds	r7, #24
 80410a2:	46bd      	mov	sp, r7
 80410a4:	bd80      	pop	{r7, pc}

080410a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80410a6:	b580      	push	{r7, lr}
 80410a8:	b082      	sub	sp, #8
 80410aa:	af00      	add	r7, sp, #0
 80410ac:	4603      	mov	r3, r0
 80410ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80410b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80410b4:	4618      	mov	r0, r3
 80410b6:	f7ff ff1b 	bl	8040ef0 <__NVIC_EnableIRQ>
}
 80410ba:	bf00      	nop
 80410bc:	3708      	adds	r7, #8
 80410be:	46bd      	mov	sp, r7
 80410c0:	bd80      	pop	{r7, pc}

080410c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80410c2:	b580      	push	{r7, lr}
 80410c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80410c6:	f7ff ff8f 	bl	8040fe8 <__NVIC_SystemReset>

080410ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80410ca:	b580      	push	{r7, lr}
 80410cc:	b082      	sub	sp, #8
 80410ce:	af00      	add	r7, sp, #0
 80410d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80410d2:	6878      	ldr	r0, [r7, #4]
 80410d4:	f7ff ff9e 	bl	8041014 <SysTick_Config>
 80410d8:	4603      	mov	r3, r0
}
 80410da:	4618      	mov	r0, r3
 80410dc:	3708      	adds	r7, #8
 80410de:	46bd      	mov	sp, r7
 80410e0:	bd80      	pop	{r7, pc}

080410e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80410e2:	b580      	push	{r7, lr}
 80410e4:	b084      	sub	sp, #16
 80410e6:	af00      	add	r7, sp, #0
 80410e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80410ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80410f0:	f7ff fe9c 	bl	8040e2c <HAL_GetTick>
 80410f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80410f6:	687b      	ldr	r3, [r7, #4]
 80410f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80410fc:	b2db      	uxtb	r3, r3
 80410fe:	2b02      	cmp	r3, #2
 8041100:	d008      	beq.n	8041114 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041102:	687b      	ldr	r3, [r7, #4]
 8041104:	2280      	movs	r2, #128	; 0x80
 8041106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041108:	687b      	ldr	r3, [r7, #4]
 804110a:	2200      	movs	r2, #0
 804110c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8041110:	2301      	movs	r3, #1
 8041112:	e052      	b.n	80411ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8041114:	687b      	ldr	r3, [r7, #4]
 8041116:	681b      	ldr	r3, [r3, #0]
 8041118:	681a      	ldr	r2, [r3, #0]
 804111a:	687b      	ldr	r3, [r7, #4]
 804111c:	681b      	ldr	r3, [r3, #0]
 804111e:	f022 0216 	bic.w	r2, r2, #22
 8041122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8041124:	687b      	ldr	r3, [r7, #4]
 8041126:	681b      	ldr	r3, [r3, #0]
 8041128:	695a      	ldr	r2, [r3, #20]
 804112a:	687b      	ldr	r3, [r7, #4]
 804112c:	681b      	ldr	r3, [r3, #0]
 804112e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8041132:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8041134:	687b      	ldr	r3, [r7, #4]
 8041136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041138:	2b00      	cmp	r3, #0
 804113a:	d103      	bne.n	8041144 <HAL_DMA_Abort+0x62>
 804113c:	687b      	ldr	r3, [r7, #4]
 804113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041140:	2b00      	cmp	r3, #0
 8041142:	d007      	beq.n	8041154 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041144:	687b      	ldr	r3, [r7, #4]
 8041146:	681b      	ldr	r3, [r3, #0]
 8041148:	681a      	ldr	r2, [r3, #0]
 804114a:	687b      	ldr	r3, [r7, #4]
 804114c:	681b      	ldr	r3, [r3, #0]
 804114e:	f022 0208 	bic.w	r2, r2, #8
 8041152:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8041154:	687b      	ldr	r3, [r7, #4]
 8041156:	681b      	ldr	r3, [r3, #0]
 8041158:	681a      	ldr	r2, [r3, #0]
 804115a:	687b      	ldr	r3, [r7, #4]
 804115c:	681b      	ldr	r3, [r3, #0]
 804115e:	f022 0201 	bic.w	r2, r2, #1
 8041162:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041164:	e013      	b.n	804118e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8041166:	f7ff fe61 	bl	8040e2c <HAL_GetTick>
 804116a:	4602      	mov	r2, r0
 804116c:	68bb      	ldr	r3, [r7, #8]
 804116e:	1ad3      	subs	r3, r2, r3
 8041170:	2b05      	cmp	r3, #5
 8041172:	d90c      	bls.n	804118e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041174:	687b      	ldr	r3, [r7, #4]
 8041176:	2220      	movs	r2, #32
 8041178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 804117a:	687b      	ldr	r3, [r7, #4]
 804117c:	2200      	movs	r2, #0
 804117e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041182:	687b      	ldr	r3, [r7, #4]
 8041184:	2203      	movs	r2, #3
 8041186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 804118a:	2303      	movs	r3, #3
 804118c:	e015      	b.n	80411ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	681b      	ldr	r3, [r3, #0]
 8041192:	681b      	ldr	r3, [r3, #0]
 8041194:	f003 0301 	and.w	r3, r3, #1
 8041198:	2b00      	cmp	r3, #0
 804119a:	d1e4      	bne.n	8041166 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 804119c:	687b      	ldr	r3, [r7, #4]
 804119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411a0:	223f      	movs	r2, #63	; 0x3f
 80411a2:	409a      	lsls	r2, r3
 80411a4:	68fb      	ldr	r3, [r7, #12]
 80411a6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80411a8:	687b      	ldr	r3, [r7, #4]
 80411aa:	2200      	movs	r2, #0
 80411ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80411b0:	687b      	ldr	r3, [r7, #4]
 80411b2:	2201      	movs	r2, #1
 80411b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80411b8:	2300      	movs	r3, #0
}
 80411ba:	4618      	mov	r0, r3
 80411bc:	3710      	adds	r7, #16
 80411be:	46bd      	mov	sp, r7
 80411c0:	bd80      	pop	{r7, pc}

080411c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80411c2:	b480      	push	{r7}
 80411c4:	b083      	sub	sp, #12
 80411c6:	af00      	add	r7, sp, #0
 80411c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80411ca:	687b      	ldr	r3, [r7, #4]
 80411cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80411d0:	b2db      	uxtb	r3, r3
 80411d2:	2b02      	cmp	r3, #2
 80411d4:	d004      	beq.n	80411e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80411d6:	687b      	ldr	r3, [r7, #4]
 80411d8:	2280      	movs	r2, #128	; 0x80
 80411da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80411dc:	2301      	movs	r3, #1
 80411de:	e00c      	b.n	80411fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80411e0:	687b      	ldr	r3, [r7, #4]
 80411e2:	2205      	movs	r2, #5
 80411e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80411e8:	687b      	ldr	r3, [r7, #4]
 80411ea:	681b      	ldr	r3, [r3, #0]
 80411ec:	681a      	ldr	r2, [r3, #0]
 80411ee:	687b      	ldr	r3, [r7, #4]
 80411f0:	681b      	ldr	r3, [r3, #0]
 80411f2:	f022 0201 	bic.w	r2, r2, #1
 80411f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80411f8:	2300      	movs	r3, #0
}
 80411fa:	4618      	mov	r0, r3
 80411fc:	370c      	adds	r7, #12
 80411fe:	46bd      	mov	sp, r7
 8041200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041204:	4770      	bx	lr
	...

08041208 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8041208:	b580      	push	{r7, lr}
 804120a:	b086      	sub	sp, #24
 804120c:	af00      	add	r7, sp, #0
 804120e:	60f8      	str	r0, [r7, #12]
 8041210:	60b9      	str	r1, [r7, #8]
 8041212:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8041216:	2301      	movs	r3, #1
 8041218:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 804121a:	4b27      	ldr	r3, [pc, #156]	; (80412b8 <HAL_FLASH_Program+0xb0>)
 804121c:	7d1b      	ldrb	r3, [r3, #20]
 804121e:	2b01      	cmp	r3, #1
 8041220:	d101      	bne.n	8041226 <HAL_FLASH_Program+0x1e>
 8041222:	2302      	movs	r3, #2
 8041224:	e043      	b.n	80412ae <HAL_FLASH_Program+0xa6>
 8041226:	4b24      	ldr	r3, [pc, #144]	; (80412b8 <HAL_FLASH_Program+0xb0>)
 8041228:	2201      	movs	r2, #1
 804122a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804122c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8041230:	f000 f878 	bl	8041324 <FLASH_WaitForLastOperation>
 8041234:	4603      	mov	r3, r0
 8041236:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8041238:	7dfb      	ldrb	r3, [r7, #23]
 804123a:	2b00      	cmp	r3, #0
 804123c:	d133      	bne.n	80412a6 <HAL_FLASH_Program+0x9e>
 804123e:	68fb      	ldr	r3, [r7, #12]
 8041240:	2b03      	cmp	r3, #3
 8041242:	d823      	bhi.n	804128c <HAL_FLASH_Program+0x84>
 8041244:	a201      	add	r2, pc, #4	; (adr r2, 804124c <HAL_FLASH_Program+0x44>)
 8041246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804124a:	bf00      	nop
 804124c:	0804125d 	.word	0x0804125d
 8041250:	08041269 	.word	0x08041269
 8041254:	08041275 	.word	0x08041275
 8041258:	08041281 	.word	0x08041281
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 804125c:	783b      	ldrb	r3, [r7, #0]
 804125e:	4619      	mov	r1, r3
 8041260:	68b8      	ldr	r0, [r7, #8]
 8041262:	f000 f921 	bl	80414a8 <FLASH_Program_Byte>
        break;
 8041266:	e012      	b.n	804128e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8041268:	883b      	ldrh	r3, [r7, #0]
 804126a:	4619      	mov	r1, r3
 804126c:	68b8      	ldr	r0, [r7, #8]
 804126e:	f000 f8f5 	bl	804145c <FLASH_Program_HalfWord>
        break;
 8041272:	e00c      	b.n	804128e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8041274:	683b      	ldr	r3, [r7, #0]
 8041276:	4619      	mov	r1, r3
 8041278:	68b8      	ldr	r0, [r7, #8]
 804127a:	f000 f8c9 	bl	8041410 <FLASH_Program_Word>
        break;
 804127e:	e006      	b.n	804128e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8041280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8041284:	68b8      	ldr	r0, [r7, #8]
 8041286:	f000 f88d 	bl	80413a4 <FLASH_Program_DoubleWord>
        break;
 804128a:	e000      	b.n	804128e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 804128c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804128e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8041292:	f000 f847 	bl	8041324 <FLASH_WaitForLastOperation>
 8041296:	4603      	mov	r3, r0
 8041298:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 804129a:	4b08      	ldr	r3, [pc, #32]	; (80412bc <HAL_FLASH_Program+0xb4>)
 804129c:	691b      	ldr	r3, [r3, #16]
 804129e:	4a07      	ldr	r2, [pc, #28]	; (80412bc <HAL_FLASH_Program+0xb4>)
 80412a0:	f023 0301 	bic.w	r3, r3, #1
 80412a4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80412a6:	4b04      	ldr	r3, [pc, #16]	; (80412b8 <HAL_FLASH_Program+0xb0>)
 80412a8:	2200      	movs	r2, #0
 80412aa:	751a      	strb	r2, [r3, #20]

  return status;
 80412ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80412ae:	4618      	mov	r0, r3
 80412b0:	3718      	adds	r7, #24
 80412b2:	46bd      	mov	sp, r7
 80412b4:	bd80      	pop	{r7, pc}
 80412b6:	bf00      	nop
 80412b8:	200001a8 	.word	0x200001a8
 80412bc:	40023c00 	.word	0x40023c00

080412c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80412c0:	b480      	push	{r7}
 80412c2:	b083      	sub	sp, #12
 80412c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80412c6:	2300      	movs	r3, #0
 80412c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80412ca:	4b0b      	ldr	r3, [pc, #44]	; (80412f8 <HAL_FLASH_Unlock+0x38>)
 80412cc:	691b      	ldr	r3, [r3, #16]
 80412ce:	2b00      	cmp	r3, #0
 80412d0:	da0b      	bge.n	80412ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80412d2:	4b09      	ldr	r3, [pc, #36]	; (80412f8 <HAL_FLASH_Unlock+0x38>)
 80412d4:	4a09      	ldr	r2, [pc, #36]	; (80412fc <HAL_FLASH_Unlock+0x3c>)
 80412d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80412d8:	4b07      	ldr	r3, [pc, #28]	; (80412f8 <HAL_FLASH_Unlock+0x38>)
 80412da:	4a09      	ldr	r2, [pc, #36]	; (8041300 <HAL_FLASH_Unlock+0x40>)
 80412dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80412de:	4b06      	ldr	r3, [pc, #24]	; (80412f8 <HAL_FLASH_Unlock+0x38>)
 80412e0:	691b      	ldr	r3, [r3, #16]
 80412e2:	2b00      	cmp	r3, #0
 80412e4:	da01      	bge.n	80412ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80412e6:	2301      	movs	r3, #1
 80412e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80412ea:	79fb      	ldrb	r3, [r7, #7]
}
 80412ec:	4618      	mov	r0, r3
 80412ee:	370c      	adds	r7, #12
 80412f0:	46bd      	mov	sp, r7
 80412f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412f6:	4770      	bx	lr
 80412f8:	40023c00 	.word	0x40023c00
 80412fc:	45670123 	.word	0x45670123
 8041300:	cdef89ab 	.word	0xcdef89ab

08041304 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8041304:	b480      	push	{r7}
 8041306:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8041308:	4b05      	ldr	r3, [pc, #20]	; (8041320 <HAL_FLASH_Lock+0x1c>)
 804130a:	691b      	ldr	r3, [r3, #16]
 804130c:	4a04      	ldr	r2, [pc, #16]	; (8041320 <HAL_FLASH_Lock+0x1c>)
 804130e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8041312:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8041314:	2300      	movs	r3, #0
}
 8041316:	4618      	mov	r0, r3
 8041318:	46bd      	mov	sp, r7
 804131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804131e:	4770      	bx	lr
 8041320:	40023c00 	.word	0x40023c00

08041324 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8041324:	b580      	push	{r7, lr}
 8041326:	b084      	sub	sp, #16
 8041328:	af00      	add	r7, sp, #0
 804132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 804132c:	2300      	movs	r3, #0
 804132e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8041330:	4b1a      	ldr	r3, [pc, #104]	; (804139c <FLASH_WaitForLastOperation+0x78>)
 8041332:	2200      	movs	r2, #0
 8041334:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8041336:	f7ff fd79 	bl	8040e2c <HAL_GetTick>
 804133a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 804133c:	e010      	b.n	8041360 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 804133e:	687b      	ldr	r3, [r7, #4]
 8041340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041344:	d00c      	beq.n	8041360 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8041346:	687b      	ldr	r3, [r7, #4]
 8041348:	2b00      	cmp	r3, #0
 804134a:	d007      	beq.n	804135c <FLASH_WaitForLastOperation+0x38>
 804134c:	f7ff fd6e 	bl	8040e2c <HAL_GetTick>
 8041350:	4602      	mov	r2, r0
 8041352:	68fb      	ldr	r3, [r7, #12]
 8041354:	1ad3      	subs	r3, r2, r3
 8041356:	687a      	ldr	r2, [r7, #4]
 8041358:	429a      	cmp	r2, r3
 804135a:	d201      	bcs.n	8041360 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 804135c:	2303      	movs	r3, #3
 804135e:	e019      	b.n	8041394 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8041360:	4b0f      	ldr	r3, [pc, #60]	; (80413a0 <FLASH_WaitForLastOperation+0x7c>)
 8041362:	68db      	ldr	r3, [r3, #12]
 8041364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041368:	2b00      	cmp	r3, #0
 804136a:	d1e8      	bne.n	804133e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 804136c:	4b0c      	ldr	r3, [pc, #48]	; (80413a0 <FLASH_WaitForLastOperation+0x7c>)
 804136e:	68db      	ldr	r3, [r3, #12]
 8041370:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8041374:	2b00      	cmp	r3, #0
 8041376:	d003      	beq.n	8041380 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8041378:	f000 f8ba 	bl	80414f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 804137c:	2301      	movs	r3, #1
 804137e:	e009      	b.n	8041394 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8041380:	4b07      	ldr	r3, [pc, #28]	; (80413a0 <FLASH_WaitForLastOperation+0x7c>)
 8041382:	68db      	ldr	r3, [r3, #12]
 8041384:	f003 0301 	and.w	r3, r3, #1
 8041388:	2b00      	cmp	r3, #0
 804138a:	d002      	beq.n	8041392 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 804138c:	4b04      	ldr	r3, [pc, #16]	; (80413a0 <FLASH_WaitForLastOperation+0x7c>)
 804138e:	2201      	movs	r2, #1
 8041390:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8041392:	2300      	movs	r3, #0
  
}  
 8041394:	4618      	mov	r0, r3
 8041396:	3710      	adds	r7, #16
 8041398:	46bd      	mov	sp, r7
 804139a:	bd80      	pop	{r7, pc}
 804139c:	200001a8 	.word	0x200001a8
 80413a0:	40023c00 	.word	0x40023c00

080413a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80413a4:	b480      	push	{r7}
 80413a6:	b085      	sub	sp, #20
 80413a8:	af00      	add	r7, sp, #0
 80413aa:	60f8      	str	r0, [r7, #12]
 80413ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80413b0:	4b16      	ldr	r3, [pc, #88]	; (804140c <FLASH_Program_DoubleWord+0x68>)
 80413b2:	691b      	ldr	r3, [r3, #16]
 80413b4:	4a15      	ldr	r2, [pc, #84]	; (804140c <FLASH_Program_DoubleWord+0x68>)
 80413b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80413ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80413bc:	4b13      	ldr	r3, [pc, #76]	; (804140c <FLASH_Program_DoubleWord+0x68>)
 80413be:	691b      	ldr	r3, [r3, #16]
 80413c0:	4a12      	ldr	r2, [pc, #72]	; (804140c <FLASH_Program_DoubleWord+0x68>)
 80413c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80413c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80413c8:	4b10      	ldr	r3, [pc, #64]	; (804140c <FLASH_Program_DoubleWord+0x68>)
 80413ca:	691b      	ldr	r3, [r3, #16]
 80413cc:	4a0f      	ldr	r2, [pc, #60]	; (804140c <FLASH_Program_DoubleWord+0x68>)
 80413ce:	f043 0301 	orr.w	r3, r3, #1
 80413d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80413d4:	68fb      	ldr	r3, [r7, #12]
 80413d6:	683a      	ldr	r2, [r7, #0]
 80413d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80413da:	f3bf 8f6f 	isb	sy
}
 80413de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80413e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80413e4:	f04f 0200 	mov.w	r2, #0
 80413e8:	f04f 0300 	mov.w	r3, #0
 80413ec:	000a      	movs	r2, r1
 80413ee:	2300      	movs	r3, #0
 80413f0:	68f9      	ldr	r1, [r7, #12]
 80413f2:	3104      	adds	r1, #4
 80413f4:	4613      	mov	r3, r2
 80413f6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80413f8:	f3bf 8f4f 	dsb	sy
}
 80413fc:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80413fe:	bf00      	nop
 8041400:	3714      	adds	r7, #20
 8041402:	46bd      	mov	sp, r7
 8041404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041408:	4770      	bx	lr
 804140a:	bf00      	nop
 804140c:	40023c00 	.word	0x40023c00

08041410 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8041410:	b480      	push	{r7}
 8041412:	b083      	sub	sp, #12
 8041414:	af00      	add	r7, sp, #0
 8041416:	6078      	str	r0, [r7, #4]
 8041418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 804141a:	4b0f      	ldr	r3, [pc, #60]	; (8041458 <FLASH_Program_Word+0x48>)
 804141c:	691b      	ldr	r3, [r3, #16]
 804141e:	4a0e      	ldr	r2, [pc, #56]	; (8041458 <FLASH_Program_Word+0x48>)
 8041420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8041426:	4b0c      	ldr	r3, [pc, #48]	; (8041458 <FLASH_Program_Word+0x48>)
 8041428:	691b      	ldr	r3, [r3, #16]
 804142a:	4a0b      	ldr	r2, [pc, #44]	; (8041458 <FLASH_Program_Word+0x48>)
 804142c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8041432:	4b09      	ldr	r3, [pc, #36]	; (8041458 <FLASH_Program_Word+0x48>)
 8041434:	691b      	ldr	r3, [r3, #16]
 8041436:	4a08      	ldr	r2, [pc, #32]	; (8041458 <FLASH_Program_Word+0x48>)
 8041438:	f043 0301 	orr.w	r3, r3, #1
 804143c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 804143e:	687b      	ldr	r3, [r7, #4]
 8041440:	683a      	ldr	r2, [r7, #0]
 8041442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8041444:	f3bf 8f4f 	dsb	sy
}
 8041448:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 804144a:	bf00      	nop
 804144c:	370c      	adds	r7, #12
 804144e:	46bd      	mov	sp, r7
 8041450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041454:	4770      	bx	lr
 8041456:	bf00      	nop
 8041458:	40023c00 	.word	0x40023c00

0804145c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 804145c:	b480      	push	{r7}
 804145e:	b083      	sub	sp, #12
 8041460:	af00      	add	r7, sp, #0
 8041462:	6078      	str	r0, [r7, #4]
 8041464:	460b      	mov	r3, r1
 8041466:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8041468:	4b0e      	ldr	r3, [pc, #56]	; (80414a4 <FLASH_Program_HalfWord+0x48>)
 804146a:	691b      	ldr	r3, [r3, #16]
 804146c:	4a0d      	ldr	r2, [pc, #52]	; (80414a4 <FLASH_Program_HalfWord+0x48>)
 804146e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8041474:	4b0b      	ldr	r3, [pc, #44]	; (80414a4 <FLASH_Program_HalfWord+0x48>)
 8041476:	691b      	ldr	r3, [r3, #16]
 8041478:	4a0a      	ldr	r2, [pc, #40]	; (80414a4 <FLASH_Program_HalfWord+0x48>)
 804147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804147e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8041480:	4b08      	ldr	r3, [pc, #32]	; (80414a4 <FLASH_Program_HalfWord+0x48>)
 8041482:	691b      	ldr	r3, [r3, #16]
 8041484:	4a07      	ldr	r2, [pc, #28]	; (80414a4 <FLASH_Program_HalfWord+0x48>)
 8041486:	f043 0301 	orr.w	r3, r3, #1
 804148a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 804148c:	687b      	ldr	r3, [r7, #4]
 804148e:	887a      	ldrh	r2, [r7, #2]
 8041490:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8041492:	f3bf 8f4f 	dsb	sy
}
 8041496:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8041498:	bf00      	nop
 804149a:	370c      	adds	r7, #12
 804149c:	46bd      	mov	sp, r7
 804149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414a2:	4770      	bx	lr
 80414a4:	40023c00 	.word	0x40023c00

080414a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80414a8:	b480      	push	{r7}
 80414aa:	b083      	sub	sp, #12
 80414ac:	af00      	add	r7, sp, #0
 80414ae:	6078      	str	r0, [r7, #4]
 80414b0:	460b      	mov	r3, r1
 80414b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80414b4:	4b0d      	ldr	r3, [pc, #52]	; (80414ec <FLASH_Program_Byte+0x44>)
 80414b6:	691b      	ldr	r3, [r3, #16]
 80414b8:	4a0c      	ldr	r2, [pc, #48]	; (80414ec <FLASH_Program_Byte+0x44>)
 80414ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80414be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80414c0:	4b0a      	ldr	r3, [pc, #40]	; (80414ec <FLASH_Program_Byte+0x44>)
 80414c2:	4a0a      	ldr	r2, [pc, #40]	; (80414ec <FLASH_Program_Byte+0x44>)
 80414c4:	691b      	ldr	r3, [r3, #16]
 80414c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80414c8:	4b08      	ldr	r3, [pc, #32]	; (80414ec <FLASH_Program_Byte+0x44>)
 80414ca:	691b      	ldr	r3, [r3, #16]
 80414cc:	4a07      	ldr	r2, [pc, #28]	; (80414ec <FLASH_Program_Byte+0x44>)
 80414ce:	f043 0301 	orr.w	r3, r3, #1
 80414d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80414d4:	687b      	ldr	r3, [r7, #4]
 80414d6:	78fa      	ldrb	r2, [r7, #3]
 80414d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80414da:	f3bf 8f4f 	dsb	sy
}
 80414de:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80414e0:	bf00      	nop
 80414e2:	370c      	adds	r7, #12
 80414e4:	46bd      	mov	sp, r7
 80414e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414ea:	4770      	bx	lr
 80414ec:	40023c00 	.word	0x40023c00

080414f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80414f0:	b480      	push	{r7}
 80414f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80414f4:	4b21      	ldr	r3, [pc, #132]	; (804157c <FLASH_SetErrorCode+0x8c>)
 80414f6:	68db      	ldr	r3, [r3, #12]
 80414f8:	f003 0302 	and.w	r3, r3, #2
 80414fc:	2b00      	cmp	r3, #0
 80414fe:	d005      	beq.n	804150c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8041500:	4b1f      	ldr	r3, [pc, #124]	; (8041580 <FLASH_SetErrorCode+0x90>)
 8041502:	699b      	ldr	r3, [r3, #24]
 8041504:	f043 0320 	orr.w	r3, r3, #32
 8041508:	4a1d      	ldr	r2, [pc, #116]	; (8041580 <FLASH_SetErrorCode+0x90>)
 804150a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 804150c:	4b1b      	ldr	r3, [pc, #108]	; (804157c <FLASH_SetErrorCode+0x8c>)
 804150e:	68db      	ldr	r3, [r3, #12]
 8041510:	f003 0310 	and.w	r3, r3, #16
 8041514:	2b00      	cmp	r3, #0
 8041516:	d005      	beq.n	8041524 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8041518:	4b19      	ldr	r3, [pc, #100]	; (8041580 <FLASH_SetErrorCode+0x90>)
 804151a:	699b      	ldr	r3, [r3, #24]
 804151c:	f043 0310 	orr.w	r3, r3, #16
 8041520:	4a17      	ldr	r2, [pc, #92]	; (8041580 <FLASH_SetErrorCode+0x90>)
 8041522:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8041524:	4b15      	ldr	r3, [pc, #84]	; (804157c <FLASH_SetErrorCode+0x8c>)
 8041526:	68db      	ldr	r3, [r3, #12]
 8041528:	f003 0320 	and.w	r3, r3, #32
 804152c:	2b00      	cmp	r3, #0
 804152e:	d005      	beq.n	804153c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8041530:	4b13      	ldr	r3, [pc, #76]	; (8041580 <FLASH_SetErrorCode+0x90>)
 8041532:	699b      	ldr	r3, [r3, #24]
 8041534:	f043 0308 	orr.w	r3, r3, #8
 8041538:	4a11      	ldr	r2, [pc, #68]	; (8041580 <FLASH_SetErrorCode+0x90>)
 804153a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 804153c:	4b0f      	ldr	r3, [pc, #60]	; (804157c <FLASH_SetErrorCode+0x8c>)
 804153e:	68db      	ldr	r3, [r3, #12]
 8041540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041544:	2b00      	cmp	r3, #0
 8041546:	d005      	beq.n	8041554 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8041548:	4b0d      	ldr	r3, [pc, #52]	; (8041580 <FLASH_SetErrorCode+0x90>)
 804154a:	699b      	ldr	r3, [r3, #24]
 804154c:	f043 0304 	orr.w	r3, r3, #4
 8041550:	4a0b      	ldr	r2, [pc, #44]	; (8041580 <FLASH_SetErrorCode+0x90>)
 8041552:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8041554:	4b09      	ldr	r3, [pc, #36]	; (804157c <FLASH_SetErrorCode+0x8c>)
 8041556:	68db      	ldr	r3, [r3, #12]
 8041558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804155c:	2b00      	cmp	r3, #0
 804155e:	d005      	beq.n	804156c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8041560:	4b07      	ldr	r3, [pc, #28]	; (8041580 <FLASH_SetErrorCode+0x90>)
 8041562:	699b      	ldr	r3, [r3, #24]
 8041564:	f043 0302 	orr.w	r3, r3, #2
 8041568:	4a05      	ldr	r2, [pc, #20]	; (8041580 <FLASH_SetErrorCode+0x90>)
 804156a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 804156c:	4b03      	ldr	r3, [pc, #12]	; (804157c <FLASH_SetErrorCode+0x8c>)
 804156e:	22f2      	movs	r2, #242	; 0xf2
 8041570:	60da      	str	r2, [r3, #12]
}
 8041572:	bf00      	nop
 8041574:	46bd      	mov	sp, r7
 8041576:	f85d 7b04 	ldr.w	r7, [sp], #4
 804157a:	4770      	bx	lr
 804157c:	40023c00 	.word	0x40023c00
 8041580:	200001a8 	.word	0x200001a8

08041584 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8041584:	b580      	push	{r7, lr}
 8041586:	b084      	sub	sp, #16
 8041588:	af00      	add	r7, sp, #0
 804158a:	6078      	str	r0, [r7, #4]
 804158c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 804158e:	2301      	movs	r3, #1
 8041590:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8041592:	2300      	movs	r3, #0
 8041594:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8041596:	4b30      	ldr	r3, [pc, #192]	; (8041658 <HAL_FLASHEx_Erase+0xd4>)
 8041598:	7d1b      	ldrb	r3, [r3, #20]
 804159a:	2b01      	cmp	r3, #1
 804159c:	d101      	bne.n	80415a2 <HAL_FLASHEx_Erase+0x1e>
 804159e:	2302      	movs	r3, #2
 80415a0:	e056      	b.n	8041650 <HAL_FLASHEx_Erase+0xcc>
 80415a2:	4b2d      	ldr	r3, [pc, #180]	; (8041658 <HAL_FLASHEx_Erase+0xd4>)
 80415a4:	2201      	movs	r2, #1
 80415a6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80415a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80415ac:	f7ff feba 	bl	8041324 <FLASH_WaitForLastOperation>
 80415b0:	4603      	mov	r3, r0
 80415b2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80415b4:	7bfb      	ldrb	r3, [r7, #15]
 80415b6:	2b00      	cmp	r3, #0
 80415b8:	d146      	bne.n	8041648 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80415ba:	683b      	ldr	r3, [r7, #0]
 80415bc:	f04f 32ff 	mov.w	r2, #4294967295
 80415c0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80415c2:	687b      	ldr	r3, [r7, #4]
 80415c4:	681b      	ldr	r3, [r3, #0]
 80415c6:	2b01      	cmp	r3, #1
 80415c8:	d115      	bne.n	80415f6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80415ca:	687b      	ldr	r3, [r7, #4]
 80415cc:	691b      	ldr	r3, [r3, #16]
 80415ce:	b2da      	uxtb	r2, r3
 80415d0:	687b      	ldr	r3, [r7, #4]
 80415d2:	685b      	ldr	r3, [r3, #4]
 80415d4:	4619      	mov	r1, r3
 80415d6:	4610      	mov	r0, r2
 80415d8:	f000 f844 	bl	8041664 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80415dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80415e0:	f7ff fea0 	bl	8041324 <FLASH_WaitForLastOperation>
 80415e4:	4603      	mov	r3, r0
 80415e6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80415e8:	4b1c      	ldr	r3, [pc, #112]	; (804165c <HAL_FLASHEx_Erase+0xd8>)
 80415ea:	691a      	ldr	r2, [r3, #16]
 80415ec:	491b      	ldr	r1, [pc, #108]	; (804165c <HAL_FLASHEx_Erase+0xd8>)
 80415ee:	4b1c      	ldr	r3, [pc, #112]	; (8041660 <HAL_FLASHEx_Erase+0xdc>)
 80415f0:	4013      	ands	r3, r2
 80415f2:	610b      	str	r3, [r1, #16]
 80415f4:	e028      	b.n	8041648 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80415f6:	687b      	ldr	r3, [r7, #4]
 80415f8:	689b      	ldr	r3, [r3, #8]
 80415fa:	60bb      	str	r3, [r7, #8]
 80415fc:	e01c      	b.n	8041638 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80415fe:	687b      	ldr	r3, [r7, #4]
 8041600:	691b      	ldr	r3, [r3, #16]
 8041602:	b2db      	uxtb	r3, r3
 8041604:	4619      	mov	r1, r3
 8041606:	68b8      	ldr	r0, [r7, #8]
 8041608:	f000 f868 	bl	80416dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8041610:	f7ff fe88 	bl	8041324 <FLASH_WaitForLastOperation>
 8041614:	4603      	mov	r3, r0
 8041616:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8041618:	4b10      	ldr	r3, [pc, #64]	; (804165c <HAL_FLASHEx_Erase+0xd8>)
 804161a:	691b      	ldr	r3, [r3, #16]
 804161c:	4a0f      	ldr	r2, [pc, #60]	; (804165c <HAL_FLASHEx_Erase+0xd8>)
 804161e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8041622:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8041624:	7bfb      	ldrb	r3, [r7, #15]
 8041626:	2b00      	cmp	r3, #0
 8041628:	d003      	beq.n	8041632 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 804162a:	683b      	ldr	r3, [r7, #0]
 804162c:	68ba      	ldr	r2, [r7, #8]
 804162e:	601a      	str	r2, [r3, #0]
          break;
 8041630:	e00a      	b.n	8041648 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8041632:	68bb      	ldr	r3, [r7, #8]
 8041634:	3301      	adds	r3, #1
 8041636:	60bb      	str	r3, [r7, #8]
 8041638:	687b      	ldr	r3, [r7, #4]
 804163a:	68da      	ldr	r2, [r3, #12]
 804163c:	687b      	ldr	r3, [r7, #4]
 804163e:	689b      	ldr	r3, [r3, #8]
 8041640:	4413      	add	r3, r2
 8041642:	68ba      	ldr	r2, [r7, #8]
 8041644:	429a      	cmp	r2, r3
 8041646:	d3da      	bcc.n	80415fe <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8041648:	4b03      	ldr	r3, [pc, #12]	; (8041658 <HAL_FLASHEx_Erase+0xd4>)
 804164a:	2200      	movs	r2, #0
 804164c:	751a      	strb	r2, [r3, #20]

  return status;
 804164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8041650:	4618      	mov	r0, r3
 8041652:	3710      	adds	r7, #16
 8041654:	46bd      	mov	sp, r7
 8041656:	bd80      	pop	{r7, pc}
 8041658:	200001a8 	.word	0x200001a8
 804165c:	40023c00 	.word	0x40023c00
 8041660:	ffff7ffb 	.word	0xffff7ffb

08041664 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8041664:	b480      	push	{r7}
 8041666:	b083      	sub	sp, #12
 8041668:	af00      	add	r7, sp, #0
 804166a:	4603      	mov	r3, r0
 804166c:	6039      	str	r1, [r7, #0]
 804166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8041670:	4b19      	ldr	r3, [pc, #100]	; (80416d8 <FLASH_MassErase+0x74>)
 8041672:	691b      	ldr	r3, [r3, #16]
 8041674:	4a18      	ldr	r2, [pc, #96]	; (80416d8 <FLASH_MassErase+0x74>)
 8041676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804167a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 804167c:	683b      	ldr	r3, [r7, #0]
 804167e:	2b03      	cmp	r3, #3
 8041680:	d107      	bne.n	8041692 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8041682:	4b15      	ldr	r3, [pc, #84]	; (80416d8 <FLASH_MassErase+0x74>)
 8041684:	691a      	ldr	r2, [r3, #16]
 8041686:	4914      	ldr	r1, [pc, #80]	; (80416d8 <FLASH_MassErase+0x74>)
 8041688:	f248 0304 	movw	r3, #32772	; 0x8004
 804168c:	4313      	orrs	r3, r2
 804168e:	610b      	str	r3, [r1, #16]
 8041690:	e00f      	b.n	80416b2 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8041692:	683b      	ldr	r3, [r7, #0]
 8041694:	2b02      	cmp	r3, #2
 8041696:	d106      	bne.n	80416a6 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8041698:	4b0f      	ldr	r3, [pc, #60]	; (80416d8 <FLASH_MassErase+0x74>)
 804169a:	691b      	ldr	r3, [r3, #16]
 804169c:	4a0e      	ldr	r2, [pc, #56]	; (80416d8 <FLASH_MassErase+0x74>)
 804169e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80416a2:	6113      	str	r3, [r2, #16]
 80416a4:	e005      	b.n	80416b2 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80416a6:	4b0c      	ldr	r3, [pc, #48]	; (80416d8 <FLASH_MassErase+0x74>)
 80416a8:	691b      	ldr	r3, [r3, #16]
 80416aa:	4a0b      	ldr	r2, [pc, #44]	; (80416d8 <FLASH_MassErase+0x74>)
 80416ac:	f043 0304 	orr.w	r3, r3, #4
 80416b0:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80416b2:	4b09      	ldr	r3, [pc, #36]	; (80416d8 <FLASH_MassErase+0x74>)
 80416b4:	691a      	ldr	r2, [r3, #16]
 80416b6:	79fb      	ldrb	r3, [r7, #7]
 80416b8:	021b      	lsls	r3, r3, #8
 80416ba:	4313      	orrs	r3, r2
 80416bc:	4a06      	ldr	r2, [pc, #24]	; (80416d8 <FLASH_MassErase+0x74>)
 80416be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80416c2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80416c4:	f3bf 8f4f 	dsb	sy
}
 80416c8:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80416ca:	bf00      	nop
 80416cc:	370c      	adds	r7, #12
 80416ce:	46bd      	mov	sp, r7
 80416d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416d4:	4770      	bx	lr
 80416d6:	bf00      	nop
 80416d8:	40023c00 	.word	0x40023c00

080416dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80416dc:	b480      	push	{r7}
 80416de:	b085      	sub	sp, #20
 80416e0:	af00      	add	r7, sp, #0
 80416e2:	6078      	str	r0, [r7, #4]
 80416e4:	460b      	mov	r3, r1
 80416e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80416e8:	2300      	movs	r3, #0
 80416ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80416ec:	78fb      	ldrb	r3, [r7, #3]
 80416ee:	2b00      	cmp	r3, #0
 80416f0:	d102      	bne.n	80416f8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80416f2:	2300      	movs	r3, #0
 80416f4:	60fb      	str	r3, [r7, #12]
 80416f6:	e010      	b.n	804171a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80416f8:	78fb      	ldrb	r3, [r7, #3]
 80416fa:	2b01      	cmp	r3, #1
 80416fc:	d103      	bne.n	8041706 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80416fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041702:	60fb      	str	r3, [r7, #12]
 8041704:	e009      	b.n	804171a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8041706:	78fb      	ldrb	r3, [r7, #3]
 8041708:	2b02      	cmp	r3, #2
 804170a:	d103      	bne.n	8041714 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 804170c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8041710:	60fb      	str	r3, [r7, #12]
 8041712:	e002      	b.n	804171a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8041714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8041718:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 804171a:	687b      	ldr	r3, [r7, #4]
 804171c:	2b0b      	cmp	r3, #11
 804171e:	d902      	bls.n	8041726 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8041720:	687b      	ldr	r3, [r7, #4]
 8041722:	3304      	adds	r3, #4
 8041724:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8041726:	4b15      	ldr	r3, [pc, #84]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041728:	691b      	ldr	r3, [r3, #16]
 804172a:	4a14      	ldr	r2, [pc, #80]	; (804177c <FLASH_Erase_Sector+0xa0>)
 804172c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041730:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8041732:	4b12      	ldr	r3, [pc, #72]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041734:	691a      	ldr	r2, [r3, #16]
 8041736:	4911      	ldr	r1, [pc, #68]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041738:	68fb      	ldr	r3, [r7, #12]
 804173a:	4313      	orrs	r3, r2
 804173c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 804173e:	4b0f      	ldr	r3, [pc, #60]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041740:	691b      	ldr	r3, [r3, #16]
 8041742:	4a0e      	ldr	r2, [pc, #56]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041744:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8041748:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 804174a:	4b0c      	ldr	r3, [pc, #48]	; (804177c <FLASH_Erase_Sector+0xa0>)
 804174c:	691a      	ldr	r2, [r3, #16]
 804174e:	687b      	ldr	r3, [r7, #4]
 8041750:	00db      	lsls	r3, r3, #3
 8041752:	4313      	orrs	r3, r2
 8041754:	4a09      	ldr	r2, [pc, #36]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041756:	f043 0302 	orr.w	r3, r3, #2
 804175a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 804175c:	4b07      	ldr	r3, [pc, #28]	; (804177c <FLASH_Erase_Sector+0xa0>)
 804175e:	691b      	ldr	r3, [r3, #16]
 8041760:	4a06      	ldr	r2, [pc, #24]	; (804177c <FLASH_Erase_Sector+0xa0>)
 8041762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041766:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8041768:	f3bf 8f4f 	dsb	sy
}
 804176c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 804176e:	bf00      	nop
 8041770:	3714      	adds	r7, #20
 8041772:	46bd      	mov	sp, r7
 8041774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041778:	4770      	bx	lr
 804177a:	bf00      	nop
 804177c:	40023c00 	.word	0x40023c00

08041780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041780:	b480      	push	{r7}
 8041782:	b089      	sub	sp, #36	; 0x24
 8041784:	af00      	add	r7, sp, #0
 8041786:	6078      	str	r0, [r7, #4]
 8041788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 804178a:	2300      	movs	r3, #0
 804178c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 804178e:	2300      	movs	r3, #0
 8041790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8041792:	2300      	movs	r3, #0
 8041794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8041796:	2300      	movs	r3, #0
 8041798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 804179a:	2300      	movs	r3, #0
 804179c:	61fb      	str	r3, [r7, #28]
 804179e:	e175      	b.n	8041a8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80417a0:	2201      	movs	r2, #1
 80417a2:	69fb      	ldr	r3, [r7, #28]
 80417a4:	fa02 f303 	lsl.w	r3, r2, r3
 80417a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80417aa:	683b      	ldr	r3, [r7, #0]
 80417ac:	681b      	ldr	r3, [r3, #0]
 80417ae:	697a      	ldr	r2, [r7, #20]
 80417b0:	4013      	ands	r3, r2
 80417b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80417b4:	693a      	ldr	r2, [r7, #16]
 80417b6:	697b      	ldr	r3, [r7, #20]
 80417b8:	429a      	cmp	r2, r3
 80417ba:	f040 8164 	bne.w	8041a86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80417be:	683b      	ldr	r3, [r7, #0]
 80417c0:	685b      	ldr	r3, [r3, #4]
 80417c2:	2b01      	cmp	r3, #1
 80417c4:	d00b      	beq.n	80417de <HAL_GPIO_Init+0x5e>
 80417c6:	683b      	ldr	r3, [r7, #0]
 80417c8:	685b      	ldr	r3, [r3, #4]
 80417ca:	2b02      	cmp	r3, #2
 80417cc:	d007      	beq.n	80417de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80417ce:	683b      	ldr	r3, [r7, #0]
 80417d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80417d2:	2b11      	cmp	r3, #17
 80417d4:	d003      	beq.n	80417de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80417d6:	683b      	ldr	r3, [r7, #0]
 80417d8:	685b      	ldr	r3, [r3, #4]
 80417da:	2b12      	cmp	r3, #18
 80417dc:	d130      	bne.n	8041840 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80417de:	687b      	ldr	r3, [r7, #4]
 80417e0:	689b      	ldr	r3, [r3, #8]
 80417e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80417e4:	69fb      	ldr	r3, [r7, #28]
 80417e6:	005b      	lsls	r3, r3, #1
 80417e8:	2203      	movs	r2, #3
 80417ea:	fa02 f303 	lsl.w	r3, r2, r3
 80417ee:	43db      	mvns	r3, r3
 80417f0:	69ba      	ldr	r2, [r7, #24]
 80417f2:	4013      	ands	r3, r2
 80417f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80417f6:	683b      	ldr	r3, [r7, #0]
 80417f8:	68da      	ldr	r2, [r3, #12]
 80417fa:	69fb      	ldr	r3, [r7, #28]
 80417fc:	005b      	lsls	r3, r3, #1
 80417fe:	fa02 f303 	lsl.w	r3, r2, r3
 8041802:	69ba      	ldr	r2, [r7, #24]
 8041804:	4313      	orrs	r3, r2
 8041806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041808:	687b      	ldr	r3, [r7, #4]
 804180a:	69ba      	ldr	r2, [r7, #24]
 804180c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 804180e:	687b      	ldr	r3, [r7, #4]
 8041810:	685b      	ldr	r3, [r3, #4]
 8041812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041814:	2201      	movs	r2, #1
 8041816:	69fb      	ldr	r3, [r7, #28]
 8041818:	fa02 f303 	lsl.w	r3, r2, r3
 804181c:	43db      	mvns	r3, r3
 804181e:	69ba      	ldr	r2, [r7, #24]
 8041820:	4013      	ands	r3, r2
 8041822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8041824:	683b      	ldr	r3, [r7, #0]
 8041826:	685b      	ldr	r3, [r3, #4]
 8041828:	091b      	lsrs	r3, r3, #4
 804182a:	f003 0201 	and.w	r2, r3, #1
 804182e:	69fb      	ldr	r3, [r7, #28]
 8041830:	fa02 f303 	lsl.w	r3, r2, r3
 8041834:	69ba      	ldr	r2, [r7, #24]
 8041836:	4313      	orrs	r3, r2
 8041838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 804183a:	687b      	ldr	r3, [r7, #4]
 804183c:	69ba      	ldr	r2, [r7, #24]
 804183e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041840:	687b      	ldr	r3, [r7, #4]
 8041842:	68db      	ldr	r3, [r3, #12]
 8041844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8041846:	69fb      	ldr	r3, [r7, #28]
 8041848:	005b      	lsls	r3, r3, #1
 804184a:	2203      	movs	r2, #3
 804184c:	fa02 f303 	lsl.w	r3, r2, r3
 8041850:	43db      	mvns	r3, r3
 8041852:	69ba      	ldr	r2, [r7, #24]
 8041854:	4013      	ands	r3, r2
 8041856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8041858:	683b      	ldr	r3, [r7, #0]
 804185a:	689a      	ldr	r2, [r3, #8]
 804185c:	69fb      	ldr	r3, [r7, #28]
 804185e:	005b      	lsls	r3, r3, #1
 8041860:	fa02 f303 	lsl.w	r3, r2, r3
 8041864:	69ba      	ldr	r2, [r7, #24]
 8041866:	4313      	orrs	r3, r2
 8041868:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 804186a:	687b      	ldr	r3, [r7, #4]
 804186c:	69ba      	ldr	r2, [r7, #24]
 804186e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041870:	683b      	ldr	r3, [r7, #0]
 8041872:	685b      	ldr	r3, [r3, #4]
 8041874:	2b02      	cmp	r3, #2
 8041876:	d003      	beq.n	8041880 <HAL_GPIO_Init+0x100>
 8041878:	683b      	ldr	r3, [r7, #0]
 804187a:	685b      	ldr	r3, [r3, #4]
 804187c:	2b12      	cmp	r3, #18
 804187e:	d123      	bne.n	80418c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8041880:	69fb      	ldr	r3, [r7, #28]
 8041882:	08da      	lsrs	r2, r3, #3
 8041884:	687b      	ldr	r3, [r7, #4]
 8041886:	3208      	adds	r2, #8
 8041888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 804188e:	69fb      	ldr	r3, [r7, #28]
 8041890:	f003 0307 	and.w	r3, r3, #7
 8041894:	009b      	lsls	r3, r3, #2
 8041896:	220f      	movs	r2, #15
 8041898:	fa02 f303 	lsl.w	r3, r2, r3
 804189c:	43db      	mvns	r3, r3
 804189e:	69ba      	ldr	r2, [r7, #24]
 80418a0:	4013      	ands	r3, r2
 80418a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80418a4:	683b      	ldr	r3, [r7, #0]
 80418a6:	691a      	ldr	r2, [r3, #16]
 80418a8:	69fb      	ldr	r3, [r7, #28]
 80418aa:	f003 0307 	and.w	r3, r3, #7
 80418ae:	009b      	lsls	r3, r3, #2
 80418b0:	fa02 f303 	lsl.w	r3, r2, r3
 80418b4:	69ba      	ldr	r2, [r7, #24]
 80418b6:	4313      	orrs	r3, r2
 80418b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80418ba:	69fb      	ldr	r3, [r7, #28]
 80418bc:	08da      	lsrs	r2, r3, #3
 80418be:	687b      	ldr	r3, [r7, #4]
 80418c0:	3208      	adds	r2, #8
 80418c2:	69b9      	ldr	r1, [r7, #24]
 80418c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80418c8:	687b      	ldr	r3, [r7, #4]
 80418ca:	681b      	ldr	r3, [r3, #0]
 80418cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80418ce:	69fb      	ldr	r3, [r7, #28]
 80418d0:	005b      	lsls	r3, r3, #1
 80418d2:	2203      	movs	r2, #3
 80418d4:	fa02 f303 	lsl.w	r3, r2, r3
 80418d8:	43db      	mvns	r3, r3
 80418da:	69ba      	ldr	r2, [r7, #24]
 80418dc:	4013      	ands	r3, r2
 80418de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80418e0:	683b      	ldr	r3, [r7, #0]
 80418e2:	685b      	ldr	r3, [r3, #4]
 80418e4:	f003 0203 	and.w	r2, r3, #3
 80418e8:	69fb      	ldr	r3, [r7, #28]
 80418ea:	005b      	lsls	r3, r3, #1
 80418ec:	fa02 f303 	lsl.w	r3, r2, r3
 80418f0:	69ba      	ldr	r2, [r7, #24]
 80418f2:	4313      	orrs	r3, r2
 80418f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80418f6:	687b      	ldr	r3, [r7, #4]
 80418f8:	69ba      	ldr	r2, [r7, #24]
 80418fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80418fc:	683b      	ldr	r3, [r7, #0]
 80418fe:	685b      	ldr	r3, [r3, #4]
 8041900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041904:	2b00      	cmp	r3, #0
 8041906:	f000 80be 	beq.w	8041a86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804190a:	4b66      	ldr	r3, [pc, #408]	; (8041aa4 <HAL_GPIO_Init+0x324>)
 804190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804190e:	4a65      	ldr	r2, [pc, #404]	; (8041aa4 <HAL_GPIO_Init+0x324>)
 8041910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041914:	6453      	str	r3, [r2, #68]	; 0x44
 8041916:	4b63      	ldr	r3, [pc, #396]	; (8041aa4 <HAL_GPIO_Init+0x324>)
 8041918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804191e:	60fb      	str	r3, [r7, #12]
 8041920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8041922:	4a61      	ldr	r2, [pc, #388]	; (8041aa8 <HAL_GPIO_Init+0x328>)
 8041924:	69fb      	ldr	r3, [r7, #28]
 8041926:	089b      	lsrs	r3, r3, #2
 8041928:	3302      	adds	r3, #2
 804192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8041930:	69fb      	ldr	r3, [r7, #28]
 8041932:	f003 0303 	and.w	r3, r3, #3
 8041936:	009b      	lsls	r3, r3, #2
 8041938:	220f      	movs	r2, #15
 804193a:	fa02 f303 	lsl.w	r3, r2, r3
 804193e:	43db      	mvns	r3, r3
 8041940:	69ba      	ldr	r2, [r7, #24]
 8041942:	4013      	ands	r3, r2
 8041944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8041946:	687b      	ldr	r3, [r7, #4]
 8041948:	4a58      	ldr	r2, [pc, #352]	; (8041aac <HAL_GPIO_Init+0x32c>)
 804194a:	4293      	cmp	r3, r2
 804194c:	d037      	beq.n	80419be <HAL_GPIO_Init+0x23e>
 804194e:	687b      	ldr	r3, [r7, #4]
 8041950:	4a57      	ldr	r2, [pc, #348]	; (8041ab0 <HAL_GPIO_Init+0x330>)
 8041952:	4293      	cmp	r3, r2
 8041954:	d031      	beq.n	80419ba <HAL_GPIO_Init+0x23a>
 8041956:	687b      	ldr	r3, [r7, #4]
 8041958:	4a56      	ldr	r2, [pc, #344]	; (8041ab4 <HAL_GPIO_Init+0x334>)
 804195a:	4293      	cmp	r3, r2
 804195c:	d02b      	beq.n	80419b6 <HAL_GPIO_Init+0x236>
 804195e:	687b      	ldr	r3, [r7, #4]
 8041960:	4a55      	ldr	r2, [pc, #340]	; (8041ab8 <HAL_GPIO_Init+0x338>)
 8041962:	4293      	cmp	r3, r2
 8041964:	d025      	beq.n	80419b2 <HAL_GPIO_Init+0x232>
 8041966:	687b      	ldr	r3, [r7, #4]
 8041968:	4a54      	ldr	r2, [pc, #336]	; (8041abc <HAL_GPIO_Init+0x33c>)
 804196a:	4293      	cmp	r3, r2
 804196c:	d01f      	beq.n	80419ae <HAL_GPIO_Init+0x22e>
 804196e:	687b      	ldr	r3, [r7, #4]
 8041970:	4a53      	ldr	r2, [pc, #332]	; (8041ac0 <HAL_GPIO_Init+0x340>)
 8041972:	4293      	cmp	r3, r2
 8041974:	d019      	beq.n	80419aa <HAL_GPIO_Init+0x22a>
 8041976:	687b      	ldr	r3, [r7, #4]
 8041978:	4a52      	ldr	r2, [pc, #328]	; (8041ac4 <HAL_GPIO_Init+0x344>)
 804197a:	4293      	cmp	r3, r2
 804197c:	d013      	beq.n	80419a6 <HAL_GPIO_Init+0x226>
 804197e:	687b      	ldr	r3, [r7, #4]
 8041980:	4a51      	ldr	r2, [pc, #324]	; (8041ac8 <HAL_GPIO_Init+0x348>)
 8041982:	4293      	cmp	r3, r2
 8041984:	d00d      	beq.n	80419a2 <HAL_GPIO_Init+0x222>
 8041986:	687b      	ldr	r3, [r7, #4]
 8041988:	4a50      	ldr	r2, [pc, #320]	; (8041acc <HAL_GPIO_Init+0x34c>)
 804198a:	4293      	cmp	r3, r2
 804198c:	d007      	beq.n	804199e <HAL_GPIO_Init+0x21e>
 804198e:	687b      	ldr	r3, [r7, #4]
 8041990:	4a4f      	ldr	r2, [pc, #316]	; (8041ad0 <HAL_GPIO_Init+0x350>)
 8041992:	4293      	cmp	r3, r2
 8041994:	d101      	bne.n	804199a <HAL_GPIO_Init+0x21a>
 8041996:	2309      	movs	r3, #9
 8041998:	e012      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 804199a:	230a      	movs	r3, #10
 804199c:	e010      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 804199e:	2308      	movs	r3, #8
 80419a0:	e00e      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419a2:	2307      	movs	r3, #7
 80419a4:	e00c      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419a6:	2306      	movs	r3, #6
 80419a8:	e00a      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419aa:	2305      	movs	r3, #5
 80419ac:	e008      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419ae:	2304      	movs	r3, #4
 80419b0:	e006      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419b2:	2303      	movs	r3, #3
 80419b4:	e004      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419b6:	2302      	movs	r3, #2
 80419b8:	e002      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419ba:	2301      	movs	r3, #1
 80419bc:	e000      	b.n	80419c0 <HAL_GPIO_Init+0x240>
 80419be:	2300      	movs	r3, #0
 80419c0:	69fa      	ldr	r2, [r7, #28]
 80419c2:	f002 0203 	and.w	r2, r2, #3
 80419c6:	0092      	lsls	r2, r2, #2
 80419c8:	4093      	lsls	r3, r2
 80419ca:	69ba      	ldr	r2, [r7, #24]
 80419cc:	4313      	orrs	r3, r2
 80419ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80419d0:	4935      	ldr	r1, [pc, #212]	; (8041aa8 <HAL_GPIO_Init+0x328>)
 80419d2:	69fb      	ldr	r3, [r7, #28]
 80419d4:	089b      	lsrs	r3, r3, #2
 80419d6:	3302      	adds	r3, #2
 80419d8:	69ba      	ldr	r2, [r7, #24]
 80419da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80419de:	4b3d      	ldr	r3, [pc, #244]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 80419e0:	681b      	ldr	r3, [r3, #0]
 80419e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80419e4:	693b      	ldr	r3, [r7, #16]
 80419e6:	43db      	mvns	r3, r3
 80419e8:	69ba      	ldr	r2, [r7, #24]
 80419ea:	4013      	ands	r3, r2
 80419ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80419ee:	683b      	ldr	r3, [r7, #0]
 80419f0:	685b      	ldr	r3, [r3, #4]
 80419f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80419f6:	2b00      	cmp	r3, #0
 80419f8:	d003      	beq.n	8041a02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80419fa:	69ba      	ldr	r2, [r7, #24]
 80419fc:	693b      	ldr	r3, [r7, #16]
 80419fe:	4313      	orrs	r3, r2
 8041a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041a02:	4a34      	ldr	r2, [pc, #208]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a04:	69bb      	ldr	r3, [r7, #24]
 8041a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8041a08:	4b32      	ldr	r3, [pc, #200]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a0a:	685b      	ldr	r3, [r3, #4]
 8041a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041a0e:	693b      	ldr	r3, [r7, #16]
 8041a10:	43db      	mvns	r3, r3
 8041a12:	69ba      	ldr	r2, [r7, #24]
 8041a14:	4013      	ands	r3, r2
 8041a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041a18:	683b      	ldr	r3, [r7, #0]
 8041a1a:	685b      	ldr	r3, [r3, #4]
 8041a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041a20:	2b00      	cmp	r3, #0
 8041a22:	d003      	beq.n	8041a2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041a24:	69ba      	ldr	r2, [r7, #24]
 8041a26:	693b      	ldr	r3, [r7, #16]
 8041a28:	4313      	orrs	r3, r2
 8041a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041a2c:	4a29      	ldr	r2, [pc, #164]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a2e:	69bb      	ldr	r3, [r7, #24]
 8041a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041a32:	4b28      	ldr	r3, [pc, #160]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a34:	689b      	ldr	r3, [r3, #8]
 8041a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041a38:	693b      	ldr	r3, [r7, #16]
 8041a3a:	43db      	mvns	r3, r3
 8041a3c:	69ba      	ldr	r2, [r7, #24]
 8041a3e:	4013      	ands	r3, r2
 8041a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041a42:	683b      	ldr	r3, [r7, #0]
 8041a44:	685b      	ldr	r3, [r3, #4]
 8041a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041a4a:	2b00      	cmp	r3, #0
 8041a4c:	d003      	beq.n	8041a56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8041a4e:	69ba      	ldr	r2, [r7, #24]
 8041a50:	693b      	ldr	r3, [r7, #16]
 8041a52:	4313      	orrs	r3, r2
 8041a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041a56:	4a1f      	ldr	r2, [pc, #124]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a58:	69bb      	ldr	r3, [r7, #24]
 8041a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041a5c:	4b1d      	ldr	r3, [pc, #116]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a5e:	68db      	ldr	r3, [r3, #12]
 8041a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041a62:	693b      	ldr	r3, [r7, #16]
 8041a64:	43db      	mvns	r3, r3
 8041a66:	69ba      	ldr	r2, [r7, #24]
 8041a68:	4013      	ands	r3, r2
 8041a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041a6c:	683b      	ldr	r3, [r7, #0]
 8041a6e:	685b      	ldr	r3, [r3, #4]
 8041a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041a74:	2b00      	cmp	r3, #0
 8041a76:	d003      	beq.n	8041a80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8041a78:	69ba      	ldr	r2, [r7, #24]
 8041a7a:	693b      	ldr	r3, [r7, #16]
 8041a7c:	4313      	orrs	r3, r2
 8041a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8041a80:	4a14      	ldr	r2, [pc, #80]	; (8041ad4 <HAL_GPIO_Init+0x354>)
 8041a82:	69bb      	ldr	r3, [r7, #24]
 8041a84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8041a86:	69fb      	ldr	r3, [r7, #28]
 8041a88:	3301      	adds	r3, #1
 8041a8a:	61fb      	str	r3, [r7, #28]
 8041a8c:	69fb      	ldr	r3, [r7, #28]
 8041a8e:	2b0f      	cmp	r3, #15
 8041a90:	f67f ae86 	bls.w	80417a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8041a94:	bf00      	nop
 8041a96:	bf00      	nop
 8041a98:	3724      	adds	r7, #36	; 0x24
 8041a9a:	46bd      	mov	sp, r7
 8041a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041aa0:	4770      	bx	lr
 8041aa2:	bf00      	nop
 8041aa4:	40023800 	.word	0x40023800
 8041aa8:	40013800 	.word	0x40013800
 8041aac:	40020000 	.word	0x40020000
 8041ab0:	40020400 	.word	0x40020400
 8041ab4:	40020800 	.word	0x40020800
 8041ab8:	40020c00 	.word	0x40020c00
 8041abc:	40021000 	.word	0x40021000
 8041ac0:	40021400 	.word	0x40021400
 8041ac4:	40021800 	.word	0x40021800
 8041ac8:	40021c00 	.word	0x40021c00
 8041acc:	40022000 	.word	0x40022000
 8041ad0:	40022400 	.word	0x40022400
 8041ad4:	40013c00 	.word	0x40013c00

08041ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041ad8:	b480      	push	{r7}
 8041ada:	b083      	sub	sp, #12
 8041adc:	af00      	add	r7, sp, #0
 8041ade:	6078      	str	r0, [r7, #4]
 8041ae0:	460b      	mov	r3, r1
 8041ae2:	807b      	strh	r3, [r7, #2]
 8041ae4:	4613      	mov	r3, r2
 8041ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041ae8:	787b      	ldrb	r3, [r7, #1]
 8041aea:	2b00      	cmp	r3, #0
 8041aec:	d003      	beq.n	8041af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041aee:	887a      	ldrh	r2, [r7, #2]
 8041af0:	687b      	ldr	r3, [r7, #4]
 8041af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041af4:	e003      	b.n	8041afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8041af6:	887b      	ldrh	r3, [r7, #2]
 8041af8:	041a      	lsls	r2, r3, #16
 8041afa:	687b      	ldr	r3, [r7, #4]
 8041afc:	619a      	str	r2, [r3, #24]
}
 8041afe:	bf00      	nop
 8041b00:	370c      	adds	r7, #12
 8041b02:	46bd      	mov	sp, r7
 8041b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b08:	4770      	bx	lr
	...

08041b0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041b0c:	b580      	push	{r7, lr}
 8041b0e:	b086      	sub	sp, #24
 8041b10:	af00      	add	r7, sp, #0
 8041b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8041b14:	2300      	movs	r3, #0
 8041b16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041b18:	687b      	ldr	r3, [r7, #4]
 8041b1a:	2b00      	cmp	r3, #0
 8041b1c:	d101      	bne.n	8041b22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8041b1e:	2301      	movs	r3, #1
 8041b20:	e29b      	b.n	804205a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041b22:	687b      	ldr	r3, [r7, #4]
 8041b24:	681b      	ldr	r3, [r3, #0]
 8041b26:	f003 0301 	and.w	r3, r3, #1
 8041b2a:	2b00      	cmp	r3, #0
 8041b2c:	f000 8087 	beq.w	8041c3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041b30:	4b96      	ldr	r3, [pc, #600]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b32:	689b      	ldr	r3, [r3, #8]
 8041b34:	f003 030c 	and.w	r3, r3, #12
 8041b38:	2b04      	cmp	r3, #4
 8041b3a:	d00c      	beq.n	8041b56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041b3c:	4b93      	ldr	r3, [pc, #588]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b3e:	689b      	ldr	r3, [r3, #8]
 8041b40:	f003 030c 	and.w	r3, r3, #12
 8041b44:	2b08      	cmp	r3, #8
 8041b46:	d112      	bne.n	8041b6e <HAL_RCC_OscConfig+0x62>
 8041b48:	4b90      	ldr	r3, [pc, #576]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b4a:	685b      	ldr	r3, [r3, #4]
 8041b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041b54:	d10b      	bne.n	8041b6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041b56:	4b8d      	ldr	r3, [pc, #564]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b58:	681b      	ldr	r3, [r3, #0]
 8041b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041b5e:	2b00      	cmp	r3, #0
 8041b60:	d06c      	beq.n	8041c3c <HAL_RCC_OscConfig+0x130>
 8041b62:	687b      	ldr	r3, [r7, #4]
 8041b64:	685b      	ldr	r3, [r3, #4]
 8041b66:	2b00      	cmp	r3, #0
 8041b68:	d168      	bne.n	8041c3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8041b6a:	2301      	movs	r3, #1
 8041b6c:	e275      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041b6e:	687b      	ldr	r3, [r7, #4]
 8041b70:	685b      	ldr	r3, [r3, #4]
 8041b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041b76:	d106      	bne.n	8041b86 <HAL_RCC_OscConfig+0x7a>
 8041b78:	4b84      	ldr	r3, [pc, #528]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b7a:	681b      	ldr	r3, [r3, #0]
 8041b7c:	4a83      	ldr	r2, [pc, #524]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041b82:	6013      	str	r3, [r2, #0]
 8041b84:	e02e      	b.n	8041be4 <HAL_RCC_OscConfig+0xd8>
 8041b86:	687b      	ldr	r3, [r7, #4]
 8041b88:	685b      	ldr	r3, [r3, #4]
 8041b8a:	2b00      	cmp	r3, #0
 8041b8c:	d10c      	bne.n	8041ba8 <HAL_RCC_OscConfig+0x9c>
 8041b8e:	4b7f      	ldr	r3, [pc, #508]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b90:	681b      	ldr	r3, [r3, #0]
 8041b92:	4a7e      	ldr	r2, [pc, #504]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041b98:	6013      	str	r3, [r2, #0]
 8041b9a:	4b7c      	ldr	r3, [pc, #496]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041b9c:	681b      	ldr	r3, [r3, #0]
 8041b9e:	4a7b      	ldr	r2, [pc, #492]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041ba4:	6013      	str	r3, [r2, #0]
 8041ba6:	e01d      	b.n	8041be4 <HAL_RCC_OscConfig+0xd8>
 8041ba8:	687b      	ldr	r3, [r7, #4]
 8041baa:	685b      	ldr	r3, [r3, #4]
 8041bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041bb0:	d10c      	bne.n	8041bcc <HAL_RCC_OscConfig+0xc0>
 8041bb2:	4b76      	ldr	r3, [pc, #472]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bb4:	681b      	ldr	r3, [r3, #0]
 8041bb6:	4a75      	ldr	r2, [pc, #468]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041bbc:	6013      	str	r3, [r2, #0]
 8041bbe:	4b73      	ldr	r3, [pc, #460]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bc0:	681b      	ldr	r3, [r3, #0]
 8041bc2:	4a72      	ldr	r2, [pc, #456]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041bc8:	6013      	str	r3, [r2, #0]
 8041bca:	e00b      	b.n	8041be4 <HAL_RCC_OscConfig+0xd8>
 8041bcc:	4b6f      	ldr	r3, [pc, #444]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bce:	681b      	ldr	r3, [r3, #0]
 8041bd0:	4a6e      	ldr	r2, [pc, #440]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041bd6:	6013      	str	r3, [r2, #0]
 8041bd8:	4b6c      	ldr	r3, [pc, #432]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bda:	681b      	ldr	r3, [r3, #0]
 8041bdc:	4a6b      	ldr	r2, [pc, #428]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041be4:	687b      	ldr	r3, [r7, #4]
 8041be6:	685b      	ldr	r3, [r3, #4]
 8041be8:	2b00      	cmp	r3, #0
 8041bea:	d013      	beq.n	8041c14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041bec:	f7ff f91e 	bl	8040e2c <HAL_GetTick>
 8041bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041bf2:	e008      	b.n	8041c06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041bf4:	f7ff f91a 	bl	8040e2c <HAL_GetTick>
 8041bf8:	4602      	mov	r2, r0
 8041bfa:	693b      	ldr	r3, [r7, #16]
 8041bfc:	1ad3      	subs	r3, r2, r3
 8041bfe:	2b64      	cmp	r3, #100	; 0x64
 8041c00:	d901      	bls.n	8041c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041c02:	2303      	movs	r3, #3
 8041c04:	e229      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041c06:	4b61      	ldr	r3, [pc, #388]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c08:	681b      	ldr	r3, [r3, #0]
 8041c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c0e:	2b00      	cmp	r3, #0
 8041c10:	d0f0      	beq.n	8041bf4 <HAL_RCC_OscConfig+0xe8>
 8041c12:	e014      	b.n	8041c3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c14:	f7ff f90a 	bl	8040e2c <HAL_GetTick>
 8041c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041c1a:	e008      	b.n	8041c2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041c1c:	f7ff f906 	bl	8040e2c <HAL_GetTick>
 8041c20:	4602      	mov	r2, r0
 8041c22:	693b      	ldr	r3, [r7, #16]
 8041c24:	1ad3      	subs	r3, r2, r3
 8041c26:	2b64      	cmp	r3, #100	; 0x64
 8041c28:	d901      	bls.n	8041c2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8041c2a:	2303      	movs	r3, #3
 8041c2c:	e215      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041c2e:	4b57      	ldr	r3, [pc, #348]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c30:	681b      	ldr	r3, [r3, #0]
 8041c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c36:	2b00      	cmp	r3, #0
 8041c38:	d1f0      	bne.n	8041c1c <HAL_RCC_OscConfig+0x110>
 8041c3a:	e000      	b.n	8041c3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041c3e:	687b      	ldr	r3, [r7, #4]
 8041c40:	681b      	ldr	r3, [r3, #0]
 8041c42:	f003 0302 	and.w	r3, r3, #2
 8041c46:	2b00      	cmp	r3, #0
 8041c48:	d069      	beq.n	8041d1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8041c4a:	4b50      	ldr	r3, [pc, #320]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c4c:	689b      	ldr	r3, [r3, #8]
 8041c4e:	f003 030c 	and.w	r3, r3, #12
 8041c52:	2b00      	cmp	r3, #0
 8041c54:	d00b      	beq.n	8041c6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8041c56:	4b4d      	ldr	r3, [pc, #308]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c58:	689b      	ldr	r3, [r3, #8]
 8041c5a:	f003 030c 	and.w	r3, r3, #12
 8041c5e:	2b08      	cmp	r3, #8
 8041c60:	d11c      	bne.n	8041c9c <HAL_RCC_OscConfig+0x190>
 8041c62:	4b4a      	ldr	r3, [pc, #296]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c64:	685b      	ldr	r3, [r3, #4]
 8041c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041c6a:	2b00      	cmp	r3, #0
 8041c6c:	d116      	bne.n	8041c9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041c6e:	4b47      	ldr	r3, [pc, #284]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c70:	681b      	ldr	r3, [r3, #0]
 8041c72:	f003 0302 	and.w	r3, r3, #2
 8041c76:	2b00      	cmp	r3, #0
 8041c78:	d005      	beq.n	8041c86 <HAL_RCC_OscConfig+0x17a>
 8041c7a:	687b      	ldr	r3, [r7, #4]
 8041c7c:	68db      	ldr	r3, [r3, #12]
 8041c7e:	2b01      	cmp	r3, #1
 8041c80:	d001      	beq.n	8041c86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8041c82:	2301      	movs	r3, #1
 8041c84:	e1e9      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041c86:	4b41      	ldr	r3, [pc, #260]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c88:	681b      	ldr	r3, [r3, #0]
 8041c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041c8e:	687b      	ldr	r3, [r7, #4]
 8041c90:	691b      	ldr	r3, [r3, #16]
 8041c92:	00db      	lsls	r3, r3, #3
 8041c94:	493d      	ldr	r1, [pc, #244]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041c96:	4313      	orrs	r3, r2
 8041c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041c9a:	e040      	b.n	8041d1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8041c9c:	687b      	ldr	r3, [r7, #4]
 8041c9e:	68db      	ldr	r3, [r3, #12]
 8041ca0:	2b00      	cmp	r3, #0
 8041ca2:	d023      	beq.n	8041cec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041ca4:	4b39      	ldr	r3, [pc, #228]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041ca6:	681b      	ldr	r3, [r3, #0]
 8041ca8:	4a38      	ldr	r2, [pc, #224]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041caa:	f043 0301 	orr.w	r3, r3, #1
 8041cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041cb0:	f7ff f8bc 	bl	8040e2c <HAL_GetTick>
 8041cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041cb6:	e008      	b.n	8041cca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041cb8:	f7ff f8b8 	bl	8040e2c <HAL_GetTick>
 8041cbc:	4602      	mov	r2, r0
 8041cbe:	693b      	ldr	r3, [r7, #16]
 8041cc0:	1ad3      	subs	r3, r2, r3
 8041cc2:	2b02      	cmp	r3, #2
 8041cc4:	d901      	bls.n	8041cca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8041cc6:	2303      	movs	r3, #3
 8041cc8:	e1c7      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041cca:	4b30      	ldr	r3, [pc, #192]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041ccc:	681b      	ldr	r3, [r3, #0]
 8041cce:	f003 0302 	and.w	r3, r3, #2
 8041cd2:	2b00      	cmp	r3, #0
 8041cd4:	d0f0      	beq.n	8041cb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041cd6:	4b2d      	ldr	r3, [pc, #180]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041cd8:	681b      	ldr	r3, [r3, #0]
 8041cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041cde:	687b      	ldr	r3, [r7, #4]
 8041ce0:	691b      	ldr	r3, [r3, #16]
 8041ce2:	00db      	lsls	r3, r3, #3
 8041ce4:	4929      	ldr	r1, [pc, #164]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041ce6:	4313      	orrs	r3, r2
 8041ce8:	600b      	str	r3, [r1, #0]
 8041cea:	e018      	b.n	8041d1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041cec:	4b27      	ldr	r3, [pc, #156]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041cee:	681b      	ldr	r3, [r3, #0]
 8041cf0:	4a26      	ldr	r2, [pc, #152]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041cf2:	f023 0301 	bic.w	r3, r3, #1
 8041cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041cf8:	f7ff f898 	bl	8040e2c <HAL_GetTick>
 8041cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041cfe:	e008      	b.n	8041d12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041d00:	f7ff f894 	bl	8040e2c <HAL_GetTick>
 8041d04:	4602      	mov	r2, r0
 8041d06:	693b      	ldr	r3, [r7, #16]
 8041d08:	1ad3      	subs	r3, r2, r3
 8041d0a:	2b02      	cmp	r3, #2
 8041d0c:	d901      	bls.n	8041d12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8041d0e:	2303      	movs	r3, #3
 8041d10:	e1a3      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041d12:	4b1e      	ldr	r3, [pc, #120]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041d14:	681b      	ldr	r3, [r3, #0]
 8041d16:	f003 0302 	and.w	r3, r3, #2
 8041d1a:	2b00      	cmp	r3, #0
 8041d1c:	d1f0      	bne.n	8041d00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041d1e:	687b      	ldr	r3, [r7, #4]
 8041d20:	681b      	ldr	r3, [r3, #0]
 8041d22:	f003 0308 	and.w	r3, r3, #8
 8041d26:	2b00      	cmp	r3, #0
 8041d28:	d038      	beq.n	8041d9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8041d2a:	687b      	ldr	r3, [r7, #4]
 8041d2c:	695b      	ldr	r3, [r3, #20]
 8041d2e:	2b00      	cmp	r3, #0
 8041d30:	d019      	beq.n	8041d66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041d32:	4b16      	ldr	r3, [pc, #88]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041d36:	4a15      	ldr	r2, [pc, #84]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041d38:	f043 0301 	orr.w	r3, r3, #1
 8041d3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041d3e:	f7ff f875 	bl	8040e2c <HAL_GetTick>
 8041d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041d44:	e008      	b.n	8041d58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041d46:	f7ff f871 	bl	8040e2c <HAL_GetTick>
 8041d4a:	4602      	mov	r2, r0
 8041d4c:	693b      	ldr	r3, [r7, #16]
 8041d4e:	1ad3      	subs	r3, r2, r3
 8041d50:	2b02      	cmp	r3, #2
 8041d52:	d901      	bls.n	8041d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8041d54:	2303      	movs	r3, #3
 8041d56:	e180      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041d58:	4b0c      	ldr	r3, [pc, #48]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041d5c:	f003 0302 	and.w	r3, r3, #2
 8041d60:	2b00      	cmp	r3, #0
 8041d62:	d0f0      	beq.n	8041d46 <HAL_RCC_OscConfig+0x23a>
 8041d64:	e01a      	b.n	8041d9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041d66:	4b09      	ldr	r3, [pc, #36]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041d6a:	4a08      	ldr	r2, [pc, #32]	; (8041d8c <HAL_RCC_OscConfig+0x280>)
 8041d6c:	f023 0301 	bic.w	r3, r3, #1
 8041d70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041d72:	f7ff f85b 	bl	8040e2c <HAL_GetTick>
 8041d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041d78:	e00a      	b.n	8041d90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041d7a:	f7ff f857 	bl	8040e2c <HAL_GetTick>
 8041d7e:	4602      	mov	r2, r0
 8041d80:	693b      	ldr	r3, [r7, #16]
 8041d82:	1ad3      	subs	r3, r2, r3
 8041d84:	2b02      	cmp	r3, #2
 8041d86:	d903      	bls.n	8041d90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8041d88:	2303      	movs	r3, #3
 8041d8a:	e166      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
 8041d8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041d90:	4b92      	ldr	r3, [pc, #584]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041d94:	f003 0302 	and.w	r3, r3, #2
 8041d98:	2b00      	cmp	r3, #0
 8041d9a:	d1ee      	bne.n	8041d7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	681b      	ldr	r3, [r3, #0]
 8041da0:	f003 0304 	and.w	r3, r3, #4
 8041da4:	2b00      	cmp	r3, #0
 8041da6:	f000 80a4 	beq.w	8041ef2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041daa:	4b8c      	ldr	r3, [pc, #560]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041db2:	2b00      	cmp	r3, #0
 8041db4:	d10d      	bne.n	8041dd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8041db6:	4b89      	ldr	r3, [pc, #548]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041dba:	4a88      	ldr	r2, [pc, #544]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8041dc2:	4b86      	ldr	r3, [pc, #536]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041dca:	60bb      	str	r3, [r7, #8]
 8041dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041dce:	2301      	movs	r3, #1
 8041dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041dd2:	4b83      	ldr	r3, [pc, #524]	; (8041fe0 <HAL_RCC_OscConfig+0x4d4>)
 8041dd4:	681b      	ldr	r3, [r3, #0]
 8041dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041dda:	2b00      	cmp	r3, #0
 8041ddc:	d118      	bne.n	8041e10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8041dde:	4b80      	ldr	r3, [pc, #512]	; (8041fe0 <HAL_RCC_OscConfig+0x4d4>)
 8041de0:	681b      	ldr	r3, [r3, #0]
 8041de2:	4a7f      	ldr	r2, [pc, #508]	; (8041fe0 <HAL_RCC_OscConfig+0x4d4>)
 8041de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041dea:	f7ff f81f 	bl	8040e2c <HAL_GetTick>
 8041dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041df0:	e008      	b.n	8041e04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041df2:	f7ff f81b 	bl	8040e2c <HAL_GetTick>
 8041df6:	4602      	mov	r2, r0
 8041df8:	693b      	ldr	r3, [r7, #16]
 8041dfa:	1ad3      	subs	r3, r2, r3
 8041dfc:	2b64      	cmp	r3, #100	; 0x64
 8041dfe:	d901      	bls.n	8041e04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8041e00:	2303      	movs	r3, #3
 8041e02:	e12a      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041e04:	4b76      	ldr	r3, [pc, #472]	; (8041fe0 <HAL_RCC_OscConfig+0x4d4>)
 8041e06:	681b      	ldr	r3, [r3, #0]
 8041e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e0c:	2b00      	cmp	r3, #0
 8041e0e:	d0f0      	beq.n	8041df2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041e10:	687b      	ldr	r3, [r7, #4]
 8041e12:	689b      	ldr	r3, [r3, #8]
 8041e14:	2b01      	cmp	r3, #1
 8041e16:	d106      	bne.n	8041e26 <HAL_RCC_OscConfig+0x31a>
 8041e18:	4b70      	ldr	r3, [pc, #448]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e1c:	4a6f      	ldr	r2, [pc, #444]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e1e:	f043 0301 	orr.w	r3, r3, #1
 8041e22:	6713      	str	r3, [r2, #112]	; 0x70
 8041e24:	e02d      	b.n	8041e82 <HAL_RCC_OscConfig+0x376>
 8041e26:	687b      	ldr	r3, [r7, #4]
 8041e28:	689b      	ldr	r3, [r3, #8]
 8041e2a:	2b00      	cmp	r3, #0
 8041e2c:	d10c      	bne.n	8041e48 <HAL_RCC_OscConfig+0x33c>
 8041e2e:	4b6b      	ldr	r3, [pc, #428]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e32:	4a6a      	ldr	r2, [pc, #424]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e34:	f023 0301 	bic.w	r3, r3, #1
 8041e38:	6713      	str	r3, [r2, #112]	; 0x70
 8041e3a:	4b68      	ldr	r3, [pc, #416]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e3e:	4a67      	ldr	r2, [pc, #412]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e40:	f023 0304 	bic.w	r3, r3, #4
 8041e44:	6713      	str	r3, [r2, #112]	; 0x70
 8041e46:	e01c      	b.n	8041e82 <HAL_RCC_OscConfig+0x376>
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	689b      	ldr	r3, [r3, #8]
 8041e4c:	2b05      	cmp	r3, #5
 8041e4e:	d10c      	bne.n	8041e6a <HAL_RCC_OscConfig+0x35e>
 8041e50:	4b62      	ldr	r3, [pc, #392]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e54:	4a61      	ldr	r2, [pc, #388]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e56:	f043 0304 	orr.w	r3, r3, #4
 8041e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8041e5c:	4b5f      	ldr	r3, [pc, #380]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e60:	4a5e      	ldr	r2, [pc, #376]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e62:	f043 0301 	orr.w	r3, r3, #1
 8041e66:	6713      	str	r3, [r2, #112]	; 0x70
 8041e68:	e00b      	b.n	8041e82 <HAL_RCC_OscConfig+0x376>
 8041e6a:	4b5c      	ldr	r3, [pc, #368]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e6e:	4a5b      	ldr	r2, [pc, #364]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e70:	f023 0301 	bic.w	r3, r3, #1
 8041e74:	6713      	str	r3, [r2, #112]	; 0x70
 8041e76:	4b59      	ldr	r3, [pc, #356]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041e7a:	4a58      	ldr	r2, [pc, #352]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041e7c:	f023 0304 	bic.w	r3, r3, #4
 8041e80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	689b      	ldr	r3, [r3, #8]
 8041e86:	2b00      	cmp	r3, #0
 8041e88:	d015      	beq.n	8041eb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041e8a:	f7fe ffcf 	bl	8040e2c <HAL_GetTick>
 8041e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041e90:	e00a      	b.n	8041ea8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041e92:	f7fe ffcb 	bl	8040e2c <HAL_GetTick>
 8041e96:	4602      	mov	r2, r0
 8041e98:	693b      	ldr	r3, [r7, #16]
 8041e9a:	1ad3      	subs	r3, r2, r3
 8041e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8041ea0:	4293      	cmp	r3, r2
 8041ea2:	d901      	bls.n	8041ea8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8041ea4:	2303      	movs	r3, #3
 8041ea6:	e0d8      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041ea8:	4b4c      	ldr	r3, [pc, #304]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041eac:	f003 0302 	and.w	r3, r3, #2
 8041eb0:	2b00      	cmp	r3, #0
 8041eb2:	d0ee      	beq.n	8041e92 <HAL_RCC_OscConfig+0x386>
 8041eb4:	e014      	b.n	8041ee0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041eb6:	f7fe ffb9 	bl	8040e2c <HAL_GetTick>
 8041eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041ebc:	e00a      	b.n	8041ed4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041ebe:	f7fe ffb5 	bl	8040e2c <HAL_GetTick>
 8041ec2:	4602      	mov	r2, r0
 8041ec4:	693b      	ldr	r3, [r7, #16]
 8041ec6:	1ad3      	subs	r3, r2, r3
 8041ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8041ecc:	4293      	cmp	r3, r2
 8041ece:	d901      	bls.n	8041ed4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8041ed0:	2303      	movs	r3, #3
 8041ed2:	e0c2      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041ed4:	4b41      	ldr	r3, [pc, #260]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041ed8:	f003 0302 	and.w	r3, r3, #2
 8041edc:	2b00      	cmp	r3, #0
 8041ede:	d1ee      	bne.n	8041ebe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041ee0:	7dfb      	ldrb	r3, [r7, #23]
 8041ee2:	2b01      	cmp	r3, #1
 8041ee4:	d105      	bne.n	8041ef2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041ee6:	4b3d      	ldr	r3, [pc, #244]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041eea:	4a3c      	ldr	r2, [pc, #240]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041ef0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041ef2:	687b      	ldr	r3, [r7, #4]
 8041ef4:	699b      	ldr	r3, [r3, #24]
 8041ef6:	2b00      	cmp	r3, #0
 8041ef8:	f000 80ae 	beq.w	8042058 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041efc:	4b37      	ldr	r3, [pc, #220]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041efe:	689b      	ldr	r3, [r3, #8]
 8041f00:	f003 030c 	and.w	r3, r3, #12
 8041f04:	2b08      	cmp	r3, #8
 8041f06:	d06d      	beq.n	8041fe4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	699b      	ldr	r3, [r3, #24]
 8041f0c:	2b02      	cmp	r3, #2
 8041f0e:	d14b      	bne.n	8041fa8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041f10:	4b32      	ldr	r3, [pc, #200]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f12:	681b      	ldr	r3, [r3, #0]
 8041f14:	4a31      	ldr	r2, [pc, #196]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041f1c:	f7fe ff86 	bl	8040e2c <HAL_GetTick>
 8041f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041f22:	e008      	b.n	8041f36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041f24:	f7fe ff82 	bl	8040e2c <HAL_GetTick>
 8041f28:	4602      	mov	r2, r0
 8041f2a:	693b      	ldr	r3, [r7, #16]
 8041f2c:	1ad3      	subs	r3, r2, r3
 8041f2e:	2b02      	cmp	r3, #2
 8041f30:	d901      	bls.n	8041f36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8041f32:	2303      	movs	r3, #3
 8041f34:	e091      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041f36:	4b29      	ldr	r3, [pc, #164]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f38:	681b      	ldr	r3, [r3, #0]
 8041f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041f3e:	2b00      	cmp	r3, #0
 8041f40:	d1f0      	bne.n	8041f24 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041f42:	687b      	ldr	r3, [r7, #4]
 8041f44:	69da      	ldr	r2, [r3, #28]
 8041f46:	687b      	ldr	r3, [r7, #4]
 8041f48:	6a1b      	ldr	r3, [r3, #32]
 8041f4a:	431a      	orrs	r2, r3
 8041f4c:	687b      	ldr	r3, [r7, #4]
 8041f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041f50:	019b      	lsls	r3, r3, #6
 8041f52:	431a      	orrs	r2, r3
 8041f54:	687b      	ldr	r3, [r7, #4]
 8041f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041f58:	085b      	lsrs	r3, r3, #1
 8041f5a:	3b01      	subs	r3, #1
 8041f5c:	041b      	lsls	r3, r3, #16
 8041f5e:	431a      	orrs	r2, r3
 8041f60:	687b      	ldr	r3, [r7, #4]
 8041f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041f64:	061b      	lsls	r3, r3, #24
 8041f66:	431a      	orrs	r2, r3
 8041f68:	687b      	ldr	r3, [r7, #4]
 8041f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041f6c:	071b      	lsls	r3, r3, #28
 8041f6e:	491b      	ldr	r1, [pc, #108]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f70:	4313      	orrs	r3, r2
 8041f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041f74:	4b19      	ldr	r3, [pc, #100]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f76:	681b      	ldr	r3, [r3, #0]
 8041f78:	4a18      	ldr	r2, [pc, #96]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041f80:	f7fe ff54 	bl	8040e2c <HAL_GetTick>
 8041f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041f86:	e008      	b.n	8041f9a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041f88:	f7fe ff50 	bl	8040e2c <HAL_GetTick>
 8041f8c:	4602      	mov	r2, r0
 8041f8e:	693b      	ldr	r3, [r7, #16]
 8041f90:	1ad3      	subs	r3, r2, r3
 8041f92:	2b02      	cmp	r3, #2
 8041f94:	d901      	bls.n	8041f9a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8041f96:	2303      	movs	r3, #3
 8041f98:	e05f      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041f9a:	4b10      	ldr	r3, [pc, #64]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041f9c:	681b      	ldr	r3, [r3, #0]
 8041f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041fa2:	2b00      	cmp	r3, #0
 8041fa4:	d0f0      	beq.n	8041f88 <HAL_RCC_OscConfig+0x47c>
 8041fa6:	e057      	b.n	8042058 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041fa8:	4b0c      	ldr	r3, [pc, #48]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041faa:	681b      	ldr	r3, [r3, #0]
 8041fac:	4a0b      	ldr	r2, [pc, #44]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041fb4:	f7fe ff3a 	bl	8040e2c <HAL_GetTick>
 8041fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041fba:	e008      	b.n	8041fce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041fbc:	f7fe ff36 	bl	8040e2c <HAL_GetTick>
 8041fc0:	4602      	mov	r2, r0
 8041fc2:	693b      	ldr	r3, [r7, #16]
 8041fc4:	1ad3      	subs	r3, r2, r3
 8041fc6:	2b02      	cmp	r3, #2
 8041fc8:	d901      	bls.n	8041fce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8041fca:	2303      	movs	r3, #3
 8041fcc:	e045      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041fce:	4b03      	ldr	r3, [pc, #12]	; (8041fdc <HAL_RCC_OscConfig+0x4d0>)
 8041fd0:	681b      	ldr	r3, [r3, #0]
 8041fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041fd6:	2b00      	cmp	r3, #0
 8041fd8:	d1f0      	bne.n	8041fbc <HAL_RCC_OscConfig+0x4b0>
 8041fda:	e03d      	b.n	8042058 <HAL_RCC_OscConfig+0x54c>
 8041fdc:	40023800 	.word	0x40023800
 8041fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8041fe4:	4b1f      	ldr	r3, [pc, #124]	; (8042064 <HAL_RCC_OscConfig+0x558>)
 8041fe6:	685b      	ldr	r3, [r3, #4]
 8041fe8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041fea:	687b      	ldr	r3, [r7, #4]
 8041fec:	699b      	ldr	r3, [r3, #24]
 8041fee:	2b01      	cmp	r3, #1
 8041ff0:	d030      	beq.n	8042054 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041ff2:	68fb      	ldr	r3, [r7, #12]
 8041ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8041ff8:	687b      	ldr	r3, [r7, #4]
 8041ffa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041ffc:	429a      	cmp	r2, r3
 8041ffe:	d129      	bne.n	8042054 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8042000:	68fb      	ldr	r3, [r7, #12]
 8042002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8042006:	687b      	ldr	r3, [r7, #4]
 8042008:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804200a:	429a      	cmp	r2, r3
 804200c:	d122      	bne.n	8042054 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804200e:	68fa      	ldr	r2, [r7, #12]
 8042010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8042014:	4013      	ands	r3, r2
 8042016:	687a      	ldr	r2, [r7, #4]
 8042018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804201a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804201c:	4293      	cmp	r3, r2
 804201e:	d119      	bne.n	8042054 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8042020:	68fb      	ldr	r3, [r7, #12]
 8042022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8042026:	687b      	ldr	r3, [r7, #4]
 8042028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804202a:	085b      	lsrs	r3, r3, #1
 804202c:	3b01      	subs	r3, #1
 804202e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8042030:	429a      	cmp	r2, r3
 8042032:	d10f      	bne.n	8042054 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042034:	68fb      	ldr	r3, [r7, #12]
 8042036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 804203a:	687b      	ldr	r3, [r7, #4]
 804203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804203e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8042040:	429a      	cmp	r2, r3
 8042042:	d107      	bne.n	8042054 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8042044:	68fb      	ldr	r3, [r7, #12]
 8042046:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 804204a:	687b      	ldr	r3, [r7, #4]
 804204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804204e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042050:	429a      	cmp	r2, r3
 8042052:	d001      	beq.n	8042058 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8042054:	2301      	movs	r3, #1
 8042056:	e000      	b.n	804205a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8042058:	2300      	movs	r3, #0
}
 804205a:	4618      	mov	r0, r3
 804205c:	3718      	adds	r7, #24
 804205e:	46bd      	mov	sp, r7
 8042060:	bd80      	pop	{r7, pc}
 8042062:	bf00      	nop
 8042064:	40023800 	.word	0x40023800

08042068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042068:	b580      	push	{r7, lr}
 804206a:	b084      	sub	sp, #16
 804206c:	af00      	add	r7, sp, #0
 804206e:	6078      	str	r0, [r7, #4]
 8042070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8042072:	2300      	movs	r3, #0
 8042074:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8042076:	687b      	ldr	r3, [r7, #4]
 8042078:	2b00      	cmp	r3, #0
 804207a:	d101      	bne.n	8042080 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 804207c:	2301      	movs	r3, #1
 804207e:	e0d0      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8042080:	4b6a      	ldr	r3, [pc, #424]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 8042082:	681b      	ldr	r3, [r3, #0]
 8042084:	f003 030f 	and.w	r3, r3, #15
 8042088:	683a      	ldr	r2, [r7, #0]
 804208a:	429a      	cmp	r2, r3
 804208c:	d910      	bls.n	80420b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804208e:	4b67      	ldr	r3, [pc, #412]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 8042090:	681b      	ldr	r3, [r3, #0]
 8042092:	f023 020f 	bic.w	r2, r3, #15
 8042096:	4965      	ldr	r1, [pc, #404]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 8042098:	683b      	ldr	r3, [r7, #0]
 804209a:	4313      	orrs	r3, r2
 804209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804209e:	4b63      	ldr	r3, [pc, #396]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 80420a0:	681b      	ldr	r3, [r3, #0]
 80420a2:	f003 030f 	and.w	r3, r3, #15
 80420a6:	683a      	ldr	r2, [r7, #0]
 80420a8:	429a      	cmp	r2, r3
 80420aa:	d001      	beq.n	80420b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80420ac:	2301      	movs	r3, #1
 80420ae:	e0b8      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80420b0:	687b      	ldr	r3, [r7, #4]
 80420b2:	681b      	ldr	r3, [r3, #0]
 80420b4:	f003 0302 	and.w	r3, r3, #2
 80420b8:	2b00      	cmp	r3, #0
 80420ba:	d020      	beq.n	80420fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80420bc:	687b      	ldr	r3, [r7, #4]
 80420be:	681b      	ldr	r3, [r3, #0]
 80420c0:	f003 0304 	and.w	r3, r3, #4
 80420c4:	2b00      	cmp	r3, #0
 80420c6:	d005      	beq.n	80420d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80420c8:	4b59      	ldr	r3, [pc, #356]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80420ca:	689b      	ldr	r3, [r3, #8]
 80420cc:	4a58      	ldr	r2, [pc, #352]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80420ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80420d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80420d4:	687b      	ldr	r3, [r7, #4]
 80420d6:	681b      	ldr	r3, [r3, #0]
 80420d8:	f003 0308 	and.w	r3, r3, #8
 80420dc:	2b00      	cmp	r3, #0
 80420de:	d005      	beq.n	80420ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80420e0:	4b53      	ldr	r3, [pc, #332]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80420e2:	689b      	ldr	r3, [r3, #8]
 80420e4:	4a52      	ldr	r2, [pc, #328]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80420e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80420ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80420ec:	4b50      	ldr	r3, [pc, #320]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80420ee:	689b      	ldr	r3, [r3, #8]
 80420f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80420f4:	687b      	ldr	r3, [r7, #4]
 80420f6:	689b      	ldr	r3, [r3, #8]
 80420f8:	494d      	ldr	r1, [pc, #308]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80420fa:	4313      	orrs	r3, r2
 80420fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80420fe:	687b      	ldr	r3, [r7, #4]
 8042100:	681b      	ldr	r3, [r3, #0]
 8042102:	f003 0301 	and.w	r3, r3, #1
 8042106:	2b00      	cmp	r3, #0
 8042108:	d040      	beq.n	804218c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804210a:	687b      	ldr	r3, [r7, #4]
 804210c:	685b      	ldr	r3, [r3, #4]
 804210e:	2b01      	cmp	r3, #1
 8042110:	d107      	bne.n	8042122 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042112:	4b47      	ldr	r3, [pc, #284]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 8042114:	681b      	ldr	r3, [r3, #0]
 8042116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804211a:	2b00      	cmp	r3, #0
 804211c:	d115      	bne.n	804214a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804211e:	2301      	movs	r3, #1
 8042120:	e07f      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	685b      	ldr	r3, [r3, #4]
 8042126:	2b02      	cmp	r3, #2
 8042128:	d107      	bne.n	804213a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804212a:	4b41      	ldr	r3, [pc, #260]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 804212c:	681b      	ldr	r3, [r3, #0]
 804212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042132:	2b00      	cmp	r3, #0
 8042134:	d109      	bne.n	804214a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8042136:	2301      	movs	r3, #1
 8042138:	e073      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804213a:	4b3d      	ldr	r3, [pc, #244]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 804213c:	681b      	ldr	r3, [r3, #0]
 804213e:	f003 0302 	and.w	r3, r3, #2
 8042142:	2b00      	cmp	r3, #0
 8042144:	d101      	bne.n	804214a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8042146:	2301      	movs	r3, #1
 8042148:	e06b      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804214a:	4b39      	ldr	r3, [pc, #228]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 804214c:	689b      	ldr	r3, [r3, #8]
 804214e:	f023 0203 	bic.w	r2, r3, #3
 8042152:	687b      	ldr	r3, [r7, #4]
 8042154:	685b      	ldr	r3, [r3, #4]
 8042156:	4936      	ldr	r1, [pc, #216]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 8042158:	4313      	orrs	r3, r2
 804215a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804215c:	f7fe fe66 	bl	8040e2c <HAL_GetTick>
 8042160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042162:	e00a      	b.n	804217a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8042164:	f7fe fe62 	bl	8040e2c <HAL_GetTick>
 8042168:	4602      	mov	r2, r0
 804216a:	68fb      	ldr	r3, [r7, #12]
 804216c:	1ad3      	subs	r3, r2, r3
 804216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8042172:	4293      	cmp	r3, r2
 8042174:	d901      	bls.n	804217a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8042176:	2303      	movs	r3, #3
 8042178:	e053      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804217a:	4b2d      	ldr	r3, [pc, #180]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 804217c:	689b      	ldr	r3, [r3, #8]
 804217e:	f003 020c 	and.w	r2, r3, #12
 8042182:	687b      	ldr	r3, [r7, #4]
 8042184:	685b      	ldr	r3, [r3, #4]
 8042186:	009b      	lsls	r3, r3, #2
 8042188:	429a      	cmp	r2, r3
 804218a:	d1eb      	bne.n	8042164 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 804218c:	4b27      	ldr	r3, [pc, #156]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 804218e:	681b      	ldr	r3, [r3, #0]
 8042190:	f003 030f 	and.w	r3, r3, #15
 8042194:	683a      	ldr	r2, [r7, #0]
 8042196:	429a      	cmp	r2, r3
 8042198:	d210      	bcs.n	80421bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804219a:	4b24      	ldr	r3, [pc, #144]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 804219c:	681b      	ldr	r3, [r3, #0]
 804219e:	f023 020f 	bic.w	r2, r3, #15
 80421a2:	4922      	ldr	r1, [pc, #136]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 80421a4:	683b      	ldr	r3, [r7, #0]
 80421a6:	4313      	orrs	r3, r2
 80421a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80421aa:	4b20      	ldr	r3, [pc, #128]	; (804222c <HAL_RCC_ClockConfig+0x1c4>)
 80421ac:	681b      	ldr	r3, [r3, #0]
 80421ae:	f003 030f 	and.w	r3, r3, #15
 80421b2:	683a      	ldr	r2, [r7, #0]
 80421b4:	429a      	cmp	r2, r3
 80421b6:	d001      	beq.n	80421bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80421b8:	2301      	movs	r3, #1
 80421ba:	e032      	b.n	8042222 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80421bc:	687b      	ldr	r3, [r7, #4]
 80421be:	681b      	ldr	r3, [r3, #0]
 80421c0:	f003 0304 	and.w	r3, r3, #4
 80421c4:	2b00      	cmp	r3, #0
 80421c6:	d008      	beq.n	80421da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80421c8:	4b19      	ldr	r3, [pc, #100]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80421ca:	689b      	ldr	r3, [r3, #8]
 80421cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80421d0:	687b      	ldr	r3, [r7, #4]
 80421d2:	68db      	ldr	r3, [r3, #12]
 80421d4:	4916      	ldr	r1, [pc, #88]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80421d6:	4313      	orrs	r3, r2
 80421d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80421da:	687b      	ldr	r3, [r7, #4]
 80421dc:	681b      	ldr	r3, [r3, #0]
 80421de:	f003 0308 	and.w	r3, r3, #8
 80421e2:	2b00      	cmp	r3, #0
 80421e4:	d009      	beq.n	80421fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80421e6:	4b12      	ldr	r3, [pc, #72]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80421e8:	689b      	ldr	r3, [r3, #8]
 80421ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80421ee:	687b      	ldr	r3, [r7, #4]
 80421f0:	691b      	ldr	r3, [r3, #16]
 80421f2:	00db      	lsls	r3, r3, #3
 80421f4:	490e      	ldr	r1, [pc, #56]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 80421f6:	4313      	orrs	r3, r2
 80421f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80421fa:	f000 f821 	bl	8042240 <HAL_RCC_GetSysClockFreq>
 80421fe:	4602      	mov	r2, r0
 8042200:	4b0b      	ldr	r3, [pc, #44]	; (8042230 <HAL_RCC_ClockConfig+0x1c8>)
 8042202:	689b      	ldr	r3, [r3, #8]
 8042204:	091b      	lsrs	r3, r3, #4
 8042206:	f003 030f 	and.w	r3, r3, #15
 804220a:	490a      	ldr	r1, [pc, #40]	; (8042234 <HAL_RCC_ClockConfig+0x1cc>)
 804220c:	5ccb      	ldrb	r3, [r1, r3]
 804220e:	fa22 f303 	lsr.w	r3, r2, r3
 8042212:	4a09      	ldr	r2, [pc, #36]	; (8042238 <HAL_RCC_ClockConfig+0x1d0>)
 8042214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8042216:	4b09      	ldr	r3, [pc, #36]	; (804223c <HAL_RCC_ClockConfig+0x1d4>)
 8042218:	681b      	ldr	r3, [r3, #0]
 804221a:	4618      	mov	r0, r3
 804221c:	f7fe fdc2 	bl	8040da4 <HAL_InitTick>

  return HAL_OK;
 8042220:	2300      	movs	r3, #0
}
 8042222:	4618      	mov	r0, r3
 8042224:	3710      	adds	r7, #16
 8042226:	46bd      	mov	sp, r7
 8042228:	bd80      	pop	{r7, pc}
 804222a:	bf00      	nop
 804222c:	40023c00 	.word	0x40023c00
 8042230:	40023800 	.word	0x40023800
 8042234:	08044ea8 	.word	0x08044ea8
 8042238:	20000000 	.word	0x20000000
 804223c:	20000004 	.word	0x20000004

08042240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042240:	b5b0      	push	{r4, r5, r7, lr}
 8042242:	b084      	sub	sp, #16
 8042244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8042246:	2100      	movs	r1, #0
 8042248:	6079      	str	r1, [r7, #4]
 804224a:	2100      	movs	r1, #0
 804224c:	60f9      	str	r1, [r7, #12]
 804224e:	2100      	movs	r1, #0
 8042250:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8042252:	2100      	movs	r1, #0
 8042254:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042256:	4952      	ldr	r1, [pc, #328]	; (80423a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8042258:	6889      	ldr	r1, [r1, #8]
 804225a:	f001 010c 	and.w	r1, r1, #12
 804225e:	2908      	cmp	r1, #8
 8042260:	d00d      	beq.n	804227e <HAL_RCC_GetSysClockFreq+0x3e>
 8042262:	2908      	cmp	r1, #8
 8042264:	f200 8094 	bhi.w	8042390 <HAL_RCC_GetSysClockFreq+0x150>
 8042268:	2900      	cmp	r1, #0
 804226a:	d002      	beq.n	8042272 <HAL_RCC_GetSysClockFreq+0x32>
 804226c:	2904      	cmp	r1, #4
 804226e:	d003      	beq.n	8042278 <HAL_RCC_GetSysClockFreq+0x38>
 8042270:	e08e      	b.n	8042390 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8042272:	4b4c      	ldr	r3, [pc, #304]	; (80423a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8042274:	60bb      	str	r3, [r7, #8]
      break;
 8042276:	e08e      	b.n	8042396 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8042278:	4b4b      	ldr	r3, [pc, #300]	; (80423a8 <HAL_RCC_GetSysClockFreq+0x168>)
 804227a:	60bb      	str	r3, [r7, #8]
      break;
 804227c:	e08b      	b.n	8042396 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804227e:	4948      	ldr	r1, [pc, #288]	; (80423a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8042280:	6849      	ldr	r1, [r1, #4]
 8042282:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8042286:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8042288:	4945      	ldr	r1, [pc, #276]	; (80423a0 <HAL_RCC_GetSysClockFreq+0x160>)
 804228a:	6849      	ldr	r1, [r1, #4]
 804228c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8042290:	2900      	cmp	r1, #0
 8042292:	d024      	beq.n	80422de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042294:	4942      	ldr	r1, [pc, #264]	; (80423a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8042296:	6849      	ldr	r1, [r1, #4]
 8042298:	0989      	lsrs	r1, r1, #6
 804229a:	4608      	mov	r0, r1
 804229c:	f04f 0100 	mov.w	r1, #0
 80422a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80422a4:	f04f 0500 	mov.w	r5, #0
 80422a8:	ea00 0204 	and.w	r2, r0, r4
 80422ac:	ea01 0305 	and.w	r3, r1, r5
 80422b0:	493d      	ldr	r1, [pc, #244]	; (80423a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80422b2:	fb01 f003 	mul.w	r0, r1, r3
 80422b6:	2100      	movs	r1, #0
 80422b8:	fb01 f102 	mul.w	r1, r1, r2
 80422bc:	1844      	adds	r4, r0, r1
 80422be:	493a      	ldr	r1, [pc, #232]	; (80423a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80422c0:	fba2 0101 	umull	r0, r1, r2, r1
 80422c4:	1863      	adds	r3, r4, r1
 80422c6:	4619      	mov	r1, r3
 80422c8:	687b      	ldr	r3, [r7, #4]
 80422ca:	461a      	mov	r2, r3
 80422cc:	f04f 0300 	mov.w	r3, #0
 80422d0:	f7fe f806 	bl	80402e0 <__aeabi_uldivmod>
 80422d4:	4602      	mov	r2, r0
 80422d6:	460b      	mov	r3, r1
 80422d8:	4613      	mov	r3, r2
 80422da:	60fb      	str	r3, [r7, #12]
 80422dc:	e04a      	b.n	8042374 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80422de:	4b30      	ldr	r3, [pc, #192]	; (80423a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80422e0:	685b      	ldr	r3, [r3, #4]
 80422e2:	099b      	lsrs	r3, r3, #6
 80422e4:	461a      	mov	r2, r3
 80422e6:	f04f 0300 	mov.w	r3, #0
 80422ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80422ee:	f04f 0100 	mov.w	r1, #0
 80422f2:	ea02 0400 	and.w	r4, r2, r0
 80422f6:	ea03 0501 	and.w	r5, r3, r1
 80422fa:	4620      	mov	r0, r4
 80422fc:	4629      	mov	r1, r5
 80422fe:	f04f 0200 	mov.w	r2, #0
 8042302:	f04f 0300 	mov.w	r3, #0
 8042306:	014b      	lsls	r3, r1, #5
 8042308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 804230c:	0142      	lsls	r2, r0, #5
 804230e:	4610      	mov	r0, r2
 8042310:	4619      	mov	r1, r3
 8042312:	1b00      	subs	r0, r0, r4
 8042314:	eb61 0105 	sbc.w	r1, r1, r5
 8042318:	f04f 0200 	mov.w	r2, #0
 804231c:	f04f 0300 	mov.w	r3, #0
 8042320:	018b      	lsls	r3, r1, #6
 8042322:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8042326:	0182      	lsls	r2, r0, #6
 8042328:	1a12      	subs	r2, r2, r0
 804232a:	eb63 0301 	sbc.w	r3, r3, r1
 804232e:	f04f 0000 	mov.w	r0, #0
 8042332:	f04f 0100 	mov.w	r1, #0
 8042336:	00d9      	lsls	r1, r3, #3
 8042338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 804233c:	00d0      	lsls	r0, r2, #3
 804233e:	4602      	mov	r2, r0
 8042340:	460b      	mov	r3, r1
 8042342:	1912      	adds	r2, r2, r4
 8042344:	eb45 0303 	adc.w	r3, r5, r3
 8042348:	f04f 0000 	mov.w	r0, #0
 804234c:	f04f 0100 	mov.w	r1, #0
 8042350:	0299      	lsls	r1, r3, #10
 8042352:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8042356:	0290      	lsls	r0, r2, #10
 8042358:	4602      	mov	r2, r0
 804235a:	460b      	mov	r3, r1
 804235c:	4610      	mov	r0, r2
 804235e:	4619      	mov	r1, r3
 8042360:	687b      	ldr	r3, [r7, #4]
 8042362:	461a      	mov	r2, r3
 8042364:	f04f 0300 	mov.w	r3, #0
 8042368:	f7fd ffba 	bl	80402e0 <__aeabi_uldivmod>
 804236c:	4602      	mov	r2, r0
 804236e:	460b      	mov	r3, r1
 8042370:	4613      	mov	r3, r2
 8042372:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8042374:	4b0a      	ldr	r3, [pc, #40]	; (80423a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8042376:	685b      	ldr	r3, [r3, #4]
 8042378:	0c1b      	lsrs	r3, r3, #16
 804237a:	f003 0303 	and.w	r3, r3, #3
 804237e:	3301      	adds	r3, #1
 8042380:	005b      	lsls	r3, r3, #1
 8042382:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8042384:	68fa      	ldr	r2, [r7, #12]
 8042386:	683b      	ldr	r3, [r7, #0]
 8042388:	fbb2 f3f3 	udiv	r3, r2, r3
 804238c:	60bb      	str	r3, [r7, #8]
      break;
 804238e:	e002      	b.n	8042396 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8042390:	4b04      	ldr	r3, [pc, #16]	; (80423a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8042392:	60bb      	str	r3, [r7, #8]
      break;
 8042394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8042396:	68bb      	ldr	r3, [r7, #8]
}
 8042398:	4618      	mov	r0, r3
 804239a:	3710      	adds	r7, #16
 804239c:	46bd      	mov	sp, r7
 804239e:	bdb0      	pop	{r4, r5, r7, pc}
 80423a0:	40023800 	.word	0x40023800
 80423a4:	00f42400 	.word	0x00f42400
 80423a8:	017d7840 	.word	0x017d7840

080423ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80423ac:	b480      	push	{r7}
 80423ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80423b0:	4b03      	ldr	r3, [pc, #12]	; (80423c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80423b2:	681b      	ldr	r3, [r3, #0]
}
 80423b4:	4618      	mov	r0, r3
 80423b6:	46bd      	mov	sp, r7
 80423b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423bc:	4770      	bx	lr
 80423be:	bf00      	nop
 80423c0:	20000000 	.word	0x20000000

080423c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80423c4:	b580      	push	{r7, lr}
 80423c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80423c8:	f7ff fff0 	bl	80423ac <HAL_RCC_GetHCLKFreq>
 80423cc:	4602      	mov	r2, r0
 80423ce:	4b05      	ldr	r3, [pc, #20]	; (80423e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80423d0:	689b      	ldr	r3, [r3, #8]
 80423d2:	0a9b      	lsrs	r3, r3, #10
 80423d4:	f003 0307 	and.w	r3, r3, #7
 80423d8:	4903      	ldr	r1, [pc, #12]	; (80423e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80423da:	5ccb      	ldrb	r3, [r1, r3]
 80423dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80423e0:	4618      	mov	r0, r3
 80423e2:	bd80      	pop	{r7, pc}
 80423e4:	40023800 	.word	0x40023800
 80423e8:	08044eb8 	.word	0x08044eb8

080423ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80423ec:	b580      	push	{r7, lr}
 80423ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80423f0:	f7ff ffdc 	bl	80423ac <HAL_RCC_GetHCLKFreq>
 80423f4:	4602      	mov	r2, r0
 80423f6:	4b05      	ldr	r3, [pc, #20]	; (804240c <HAL_RCC_GetPCLK2Freq+0x20>)
 80423f8:	689b      	ldr	r3, [r3, #8]
 80423fa:	0b5b      	lsrs	r3, r3, #13
 80423fc:	f003 0307 	and.w	r3, r3, #7
 8042400:	4903      	ldr	r1, [pc, #12]	; (8042410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8042402:	5ccb      	ldrb	r3, [r1, r3]
 8042404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042408:	4618      	mov	r0, r3
 804240a:	bd80      	pop	{r7, pc}
 804240c:	40023800 	.word	0x40023800
 8042410:	08044eb8 	.word	0x08044eb8

08042414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042414:	b580      	push	{r7, lr}
 8042416:	b088      	sub	sp, #32
 8042418:	af00      	add	r7, sp, #0
 804241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 804241c:	2300      	movs	r3, #0
 804241e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8042420:	2300      	movs	r3, #0
 8042422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8042424:	2300      	movs	r3, #0
 8042426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8042428:	2300      	movs	r3, #0
 804242a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 804242c:	2300      	movs	r3, #0
 804242e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8042430:	687b      	ldr	r3, [r7, #4]
 8042432:	681b      	ldr	r3, [r3, #0]
 8042434:	f003 0301 	and.w	r3, r3, #1
 8042438:	2b00      	cmp	r3, #0
 804243a:	d012      	beq.n	8042462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 804243c:	4b69      	ldr	r3, [pc, #420]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804243e:	689b      	ldr	r3, [r3, #8]
 8042440:	4a68      	ldr	r2, [pc, #416]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042442:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8042446:	6093      	str	r3, [r2, #8]
 8042448:	4b66      	ldr	r3, [pc, #408]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804244a:	689a      	ldr	r2, [r3, #8]
 804244c:	687b      	ldr	r3, [r7, #4]
 804244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042450:	4964      	ldr	r1, [pc, #400]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042452:	4313      	orrs	r3, r2
 8042454:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8042456:	687b      	ldr	r3, [r7, #4]
 8042458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804245a:	2b00      	cmp	r3, #0
 804245c:	d101      	bne.n	8042462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 804245e:	2301      	movs	r3, #1
 8042460:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8042462:	687b      	ldr	r3, [r7, #4]
 8042464:	681b      	ldr	r3, [r3, #0]
 8042466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804246a:	2b00      	cmp	r3, #0
 804246c:	d017      	beq.n	804249e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804246e:	4b5d      	ldr	r3, [pc, #372]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042478:	687b      	ldr	r3, [r7, #4]
 804247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804247c:	4959      	ldr	r1, [pc, #356]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804247e:	4313      	orrs	r3, r2
 8042480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8042484:	687b      	ldr	r3, [r7, #4]
 8042486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804248c:	d101      	bne.n	8042492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 804248e:	2301      	movs	r3, #1
 8042490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8042492:	687b      	ldr	r3, [r7, #4]
 8042494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042496:	2b00      	cmp	r3, #0
 8042498:	d101      	bne.n	804249e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 804249a:	2301      	movs	r3, #1
 804249c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 804249e:	687b      	ldr	r3, [r7, #4]
 80424a0:	681b      	ldr	r3, [r3, #0]
 80424a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80424a6:	2b00      	cmp	r3, #0
 80424a8:	d017      	beq.n	80424da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80424aa:	4b4e      	ldr	r3, [pc, #312]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80424ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80424b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80424b4:	687b      	ldr	r3, [r7, #4]
 80424b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80424b8:	494a      	ldr	r1, [pc, #296]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80424ba:	4313      	orrs	r3, r2
 80424bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80424c0:	687b      	ldr	r3, [r7, #4]
 80424c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80424c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80424c8:	d101      	bne.n	80424ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80424ca:	2301      	movs	r3, #1
 80424cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80424d2:	2b00      	cmp	r3, #0
 80424d4:	d101      	bne.n	80424da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80424d6:	2301      	movs	r3, #1
 80424d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80424da:	687b      	ldr	r3, [r7, #4]
 80424dc:	681b      	ldr	r3, [r3, #0]
 80424de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80424e2:	2b00      	cmp	r3, #0
 80424e4:	d001      	beq.n	80424ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80424e6:	2301      	movs	r3, #1
 80424e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80424ea:	687b      	ldr	r3, [r7, #4]
 80424ec:	681b      	ldr	r3, [r3, #0]
 80424ee:	f003 0320 	and.w	r3, r3, #32
 80424f2:	2b00      	cmp	r3, #0
 80424f4:	f000 808b 	beq.w	804260e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80424f8:	4b3a      	ldr	r3, [pc, #232]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80424fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80424fc:	4a39      	ldr	r2, [pc, #228]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80424fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042502:	6413      	str	r3, [r2, #64]	; 0x40
 8042504:	4b37      	ldr	r3, [pc, #220]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804250c:	60bb      	str	r3, [r7, #8]
 804250e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8042510:	4b35      	ldr	r3, [pc, #212]	; (80425e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8042512:	681b      	ldr	r3, [r3, #0]
 8042514:	4a34      	ldr	r2, [pc, #208]	; (80425e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8042516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804251a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804251c:	f7fe fc86 	bl	8040e2c <HAL_GetTick>
 8042520:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8042522:	e008      	b.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042524:	f7fe fc82 	bl	8040e2c <HAL_GetTick>
 8042528:	4602      	mov	r2, r0
 804252a:	697b      	ldr	r3, [r7, #20]
 804252c:	1ad3      	subs	r3, r2, r3
 804252e:	2b64      	cmp	r3, #100	; 0x64
 8042530:	d901      	bls.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8042532:	2303      	movs	r3, #3
 8042534:	e38f      	b.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8042536:	4b2c      	ldr	r3, [pc, #176]	; (80425e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8042538:	681b      	ldr	r3, [r3, #0]
 804253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804253e:	2b00      	cmp	r3, #0
 8042540:	d0f0      	beq.n	8042524 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8042542:	4b28      	ldr	r3, [pc, #160]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804254a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 804254c:	693b      	ldr	r3, [r7, #16]
 804254e:	2b00      	cmp	r3, #0
 8042550:	d035      	beq.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8042552:	687b      	ldr	r3, [r7, #4]
 8042554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804255a:	693a      	ldr	r2, [r7, #16]
 804255c:	429a      	cmp	r2, r3
 804255e:	d02e      	beq.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042560:	4b20      	ldr	r3, [pc, #128]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042568:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 804256a:	4b1e      	ldr	r3, [pc, #120]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804256e:	4a1d      	ldr	r2, [pc, #116]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042574:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8042576:	4b1b      	ldr	r3, [pc, #108]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804257a:	4a1a      	ldr	r2, [pc, #104]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042580:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8042582:	4a18      	ldr	r2, [pc, #96]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042584:	693b      	ldr	r3, [r7, #16]
 8042586:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8042588:	4b16      	ldr	r3, [pc, #88]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804258c:	f003 0301 	and.w	r3, r3, #1
 8042590:	2b01      	cmp	r3, #1
 8042592:	d114      	bne.n	80425be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042594:	f7fe fc4a 	bl	8040e2c <HAL_GetTick>
 8042598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804259a:	e00a      	b.n	80425b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804259c:	f7fe fc46 	bl	8040e2c <HAL_GetTick>
 80425a0:	4602      	mov	r2, r0
 80425a2:	697b      	ldr	r3, [r7, #20]
 80425a4:	1ad3      	subs	r3, r2, r3
 80425a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80425aa:	4293      	cmp	r3, r2
 80425ac:	d901      	bls.n	80425b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80425ae:	2303      	movs	r3, #3
 80425b0:	e351      	b.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80425b2:	4b0c      	ldr	r3, [pc, #48]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80425b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80425b6:	f003 0302 	and.w	r3, r3, #2
 80425ba:	2b00      	cmp	r3, #0
 80425bc:	d0ee      	beq.n	804259c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80425be:	687b      	ldr	r3, [r7, #4]
 80425c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80425c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80425ca:	d111      	bne.n	80425f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80425cc:	4b05      	ldr	r3, [pc, #20]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80425ce:	689b      	ldr	r3, [r3, #8]
 80425d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80425d4:	687b      	ldr	r3, [r7, #4]
 80425d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80425d8:	4b04      	ldr	r3, [pc, #16]	; (80425ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80425da:	400b      	ands	r3, r1
 80425dc:	4901      	ldr	r1, [pc, #4]	; (80425e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80425de:	4313      	orrs	r3, r2
 80425e0:	608b      	str	r3, [r1, #8]
 80425e2:	e00b      	b.n	80425fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80425e4:	40023800 	.word	0x40023800
 80425e8:	40007000 	.word	0x40007000
 80425ec:	0ffffcff 	.word	0x0ffffcff
 80425f0:	4bb3      	ldr	r3, [pc, #716]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80425f2:	689b      	ldr	r3, [r3, #8]
 80425f4:	4ab2      	ldr	r2, [pc, #712]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80425f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80425fa:	6093      	str	r3, [r2, #8]
 80425fc:	4bb0      	ldr	r3, [pc, #704]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80425fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8042600:	687b      	ldr	r3, [r7, #4]
 8042602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042608:	49ad      	ldr	r1, [pc, #692]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804260a:	4313      	orrs	r3, r2
 804260c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 804260e:	687b      	ldr	r3, [r7, #4]
 8042610:	681b      	ldr	r3, [r3, #0]
 8042612:	f003 0310 	and.w	r3, r3, #16
 8042616:	2b00      	cmp	r3, #0
 8042618:	d010      	beq.n	804263c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804261a:	4ba9      	ldr	r3, [pc, #676]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042620:	4aa7      	ldr	r2, [pc, #668]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8042626:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 804262a:	4ba5      	ldr	r3, [pc, #660]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804262c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8042630:	687b      	ldr	r3, [r7, #4]
 8042632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042634:	49a2      	ldr	r1, [pc, #648]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042636:	4313      	orrs	r3, r2
 8042638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804263c:	687b      	ldr	r3, [r7, #4]
 804263e:	681b      	ldr	r3, [r3, #0]
 8042640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042644:	2b00      	cmp	r3, #0
 8042646:	d00a      	beq.n	804265e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8042648:	4b9d      	ldr	r3, [pc, #628]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804264e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042652:	687b      	ldr	r3, [r7, #4]
 8042654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042656:	499a      	ldr	r1, [pc, #616]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042658:	4313      	orrs	r3, r2
 804265a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804265e:	687b      	ldr	r3, [r7, #4]
 8042660:	681b      	ldr	r3, [r3, #0]
 8042662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8042666:	2b00      	cmp	r3, #0
 8042668:	d00a      	beq.n	8042680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804266a:	4b95      	ldr	r3, [pc, #596]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042674:	687b      	ldr	r3, [r7, #4]
 8042676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042678:	4991      	ldr	r1, [pc, #580]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804267a:	4313      	orrs	r3, r2
 804267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042680:	687b      	ldr	r3, [r7, #4]
 8042682:	681b      	ldr	r3, [r3, #0]
 8042684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042688:	2b00      	cmp	r3, #0
 804268a:	d00a      	beq.n	80426a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804268c:	4b8c      	ldr	r3, [pc, #560]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042696:	687b      	ldr	r3, [r7, #4]
 8042698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804269a:	4989      	ldr	r1, [pc, #548]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804269c:	4313      	orrs	r3, r2
 804269e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80426a2:	687b      	ldr	r3, [r7, #4]
 80426a4:	681b      	ldr	r3, [r3, #0]
 80426a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80426aa:	2b00      	cmp	r3, #0
 80426ac:	d00a      	beq.n	80426c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80426ae:	4b84      	ldr	r3, [pc, #528]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80426b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80426b8:	687b      	ldr	r3, [r7, #4]
 80426ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80426bc:	4980      	ldr	r1, [pc, #512]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80426be:	4313      	orrs	r3, r2
 80426c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80426c4:	687b      	ldr	r3, [r7, #4]
 80426c6:	681b      	ldr	r3, [r3, #0]
 80426c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80426cc:	2b00      	cmp	r3, #0
 80426ce:	d00a      	beq.n	80426e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80426d0:	4b7b      	ldr	r3, [pc, #492]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80426d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426d6:	f023 0203 	bic.w	r2, r3, #3
 80426da:	687b      	ldr	r3, [r7, #4]
 80426dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80426de:	4978      	ldr	r1, [pc, #480]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80426e0:	4313      	orrs	r3, r2
 80426e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80426e6:	687b      	ldr	r3, [r7, #4]
 80426e8:	681b      	ldr	r3, [r3, #0]
 80426ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80426ee:	2b00      	cmp	r3, #0
 80426f0:	d00a      	beq.n	8042708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80426f2:	4b73      	ldr	r3, [pc, #460]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80426f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426f8:	f023 020c 	bic.w	r2, r3, #12
 80426fc:	687b      	ldr	r3, [r7, #4]
 80426fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042700:	496f      	ldr	r1, [pc, #444]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042702:	4313      	orrs	r3, r2
 8042704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042708:	687b      	ldr	r3, [r7, #4]
 804270a:	681b      	ldr	r3, [r3, #0]
 804270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042710:	2b00      	cmp	r3, #0
 8042712:	d00a      	beq.n	804272a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8042714:	4b6a      	ldr	r3, [pc, #424]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804271a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 804271e:	687b      	ldr	r3, [r7, #4]
 8042720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042722:	4967      	ldr	r1, [pc, #412]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042724:	4313      	orrs	r3, r2
 8042726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804272a:	687b      	ldr	r3, [r7, #4]
 804272c:	681b      	ldr	r3, [r3, #0]
 804272e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042732:	2b00      	cmp	r3, #0
 8042734:	d00a      	beq.n	804274c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042736:	4b62      	ldr	r3, [pc, #392]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804273c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8042740:	687b      	ldr	r3, [r7, #4]
 8042742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042744:	495e      	ldr	r1, [pc, #376]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042746:	4313      	orrs	r3, r2
 8042748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804274c:	687b      	ldr	r3, [r7, #4]
 804274e:	681b      	ldr	r3, [r3, #0]
 8042750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042754:	2b00      	cmp	r3, #0
 8042756:	d00a      	beq.n	804276e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042758:	4b59      	ldr	r3, [pc, #356]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804275e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8042762:	687b      	ldr	r3, [r7, #4]
 8042764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8042766:	4956      	ldr	r1, [pc, #344]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042768:	4313      	orrs	r3, r2
 804276a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 804276e:	687b      	ldr	r3, [r7, #4]
 8042770:	681b      	ldr	r3, [r3, #0]
 8042772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042776:	2b00      	cmp	r3, #0
 8042778:	d00a      	beq.n	8042790 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 804277a:	4b51      	ldr	r3, [pc, #324]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042780:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8042784:	687b      	ldr	r3, [r7, #4]
 8042786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042788:	494d      	ldr	r1, [pc, #308]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804278a:	4313      	orrs	r3, r2
 804278c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8042790:	687b      	ldr	r3, [r7, #4]
 8042792:	681b      	ldr	r3, [r3, #0]
 8042794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042798:	2b00      	cmp	r3, #0
 804279a:	d00a      	beq.n	80427b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 804279c:	4b48      	ldr	r3, [pc, #288]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80427a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80427a6:	687b      	ldr	r3, [r7, #4]
 80427a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80427aa:	4945      	ldr	r1, [pc, #276]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80427ac:	4313      	orrs	r3, r2
 80427ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80427b2:	687b      	ldr	r3, [r7, #4]
 80427b4:	681b      	ldr	r3, [r3, #0]
 80427b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80427ba:	2b00      	cmp	r3, #0
 80427bc:	d00a      	beq.n	80427d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80427be:	4b40      	ldr	r3, [pc, #256]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80427c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80427c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80427c8:	687b      	ldr	r3, [r7, #4]
 80427ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80427cc:	493c      	ldr	r1, [pc, #240]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80427ce:	4313      	orrs	r3, r2
 80427d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80427d4:	687b      	ldr	r3, [r7, #4]
 80427d6:	681b      	ldr	r3, [r3, #0]
 80427d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80427dc:	2b00      	cmp	r3, #0
 80427de:	d00a      	beq.n	80427f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80427e0:	4b37      	ldr	r3, [pc, #220]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80427e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80427e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80427ea:	687b      	ldr	r3, [r7, #4]
 80427ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80427ee:	4934      	ldr	r1, [pc, #208]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80427f0:	4313      	orrs	r3, r2
 80427f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80427f6:	687b      	ldr	r3, [r7, #4]
 80427f8:	681b      	ldr	r3, [r3, #0]
 80427fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80427fe:	2b00      	cmp	r3, #0
 8042800:	d011      	beq.n	8042826 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8042802:	4b2f      	ldr	r3, [pc, #188]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042808:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 804280c:	687b      	ldr	r3, [r7, #4]
 804280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042810:	492b      	ldr	r1, [pc, #172]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042812:	4313      	orrs	r3, r2
 8042814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8042818:	687b      	ldr	r3, [r7, #4]
 804281a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804281c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042820:	d101      	bne.n	8042826 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8042822:	2301      	movs	r3, #1
 8042824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8042826:	687b      	ldr	r3, [r7, #4]
 8042828:	681b      	ldr	r3, [r3, #0]
 804282a:	f003 0308 	and.w	r3, r3, #8
 804282e:	2b00      	cmp	r3, #0
 8042830:	d001      	beq.n	8042836 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8042832:	2301      	movs	r3, #1
 8042834:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8042836:	687b      	ldr	r3, [r7, #4]
 8042838:	681b      	ldr	r3, [r3, #0]
 804283a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804283e:	2b00      	cmp	r3, #0
 8042840:	d00a      	beq.n	8042858 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8042842:	4b1f      	ldr	r3, [pc, #124]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042848:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804284c:	687b      	ldr	r3, [r7, #4]
 804284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042850:	491b      	ldr	r1, [pc, #108]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042852:	4313      	orrs	r3, r2
 8042854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8042858:	687b      	ldr	r3, [r7, #4]
 804285a:	681b      	ldr	r3, [r3, #0]
 804285c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042860:	2b00      	cmp	r3, #0
 8042862:	d00b      	beq.n	804287c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042864:	4b16      	ldr	r3, [pc, #88]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804286a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 804286e:	687b      	ldr	r3, [r7, #4]
 8042870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042874:	4912      	ldr	r1, [pc, #72]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8042876:	4313      	orrs	r3, r2
 8042878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 804287c:	687b      	ldr	r3, [r7, #4]
 804287e:	681b      	ldr	r3, [r3, #0]
 8042880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042884:	2b00      	cmp	r3, #0
 8042886:	d00b      	beq.n	80428a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8042888:	4b0d      	ldr	r3, [pc, #52]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804288e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8042892:	687b      	ldr	r3, [r7, #4]
 8042894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042898:	4909      	ldr	r1, [pc, #36]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 804289a:	4313      	orrs	r3, r2
 804289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80428a0:	687b      	ldr	r3, [r7, #4]
 80428a2:	681b      	ldr	r3, [r3, #0]
 80428a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80428a8:	2b00      	cmp	r3, #0
 80428aa:	d00f      	beq.n	80428cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80428ac:	4b04      	ldr	r3, [pc, #16]	; (80428c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80428ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80428b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80428b6:	687b      	ldr	r3, [r7, #4]
 80428b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80428bc:	e002      	b.n	80428c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80428be:	bf00      	nop
 80428c0:	40023800 	.word	0x40023800
 80428c4:	4986      	ldr	r1, [pc, #536]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80428c6:	4313      	orrs	r3, r2
 80428c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80428cc:	687b      	ldr	r3, [r7, #4]
 80428ce:	681b      	ldr	r3, [r3, #0]
 80428d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80428d4:	2b00      	cmp	r3, #0
 80428d6:	d00b      	beq.n	80428f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80428d8:	4b81      	ldr	r3, [pc, #516]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80428da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80428de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80428e2:	687b      	ldr	r3, [r7, #4]
 80428e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80428e8:	497d      	ldr	r1, [pc, #500]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80428ea:	4313      	orrs	r3, r2
 80428ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80428f0:	69fb      	ldr	r3, [r7, #28]
 80428f2:	2b01      	cmp	r3, #1
 80428f4:	d006      	beq.n	8042904 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80428f6:	687b      	ldr	r3, [r7, #4]
 80428f8:	681b      	ldr	r3, [r3, #0]
 80428fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80428fe:	2b00      	cmp	r3, #0
 8042900:	f000 80d6 	beq.w	8042ab0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8042904:	4b76      	ldr	r3, [pc, #472]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042906:	681b      	ldr	r3, [r3, #0]
 8042908:	4a75      	ldr	r2, [pc, #468]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804290a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804290e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042910:	f7fe fa8c 	bl	8040e2c <HAL_GetTick>
 8042914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8042916:	e008      	b.n	804292a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8042918:	f7fe fa88 	bl	8040e2c <HAL_GetTick>
 804291c:	4602      	mov	r2, r0
 804291e:	697b      	ldr	r3, [r7, #20]
 8042920:	1ad3      	subs	r3, r2, r3
 8042922:	2b64      	cmp	r3, #100	; 0x64
 8042924:	d901      	bls.n	804292a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042926:	2303      	movs	r3, #3
 8042928:	e195      	b.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804292a:	4b6d      	ldr	r3, [pc, #436]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804292c:	681b      	ldr	r3, [r3, #0]
 804292e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042932:	2b00      	cmp	r3, #0
 8042934:	d1f0      	bne.n	8042918 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8042936:	687b      	ldr	r3, [r7, #4]
 8042938:	681b      	ldr	r3, [r3, #0]
 804293a:	f003 0301 	and.w	r3, r3, #1
 804293e:	2b00      	cmp	r3, #0
 8042940:	d021      	beq.n	8042986 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8042942:	687b      	ldr	r3, [r7, #4]
 8042944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042946:	2b00      	cmp	r3, #0
 8042948:	d11d      	bne.n	8042986 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 804294a:	4b65      	ldr	r3, [pc, #404]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042950:	0c1b      	lsrs	r3, r3, #16
 8042952:	f003 0303 	and.w	r3, r3, #3
 8042956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042958:	4b61      	ldr	r3, [pc, #388]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804295e:	0e1b      	lsrs	r3, r3, #24
 8042960:	f003 030f 	and.w	r3, r3, #15
 8042964:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8042966:	687b      	ldr	r3, [r7, #4]
 8042968:	685b      	ldr	r3, [r3, #4]
 804296a:	019a      	lsls	r2, r3, #6
 804296c:	693b      	ldr	r3, [r7, #16]
 804296e:	041b      	lsls	r3, r3, #16
 8042970:	431a      	orrs	r2, r3
 8042972:	68fb      	ldr	r3, [r7, #12]
 8042974:	061b      	lsls	r3, r3, #24
 8042976:	431a      	orrs	r2, r3
 8042978:	687b      	ldr	r3, [r7, #4]
 804297a:	689b      	ldr	r3, [r3, #8]
 804297c:	071b      	lsls	r3, r3, #28
 804297e:	4958      	ldr	r1, [pc, #352]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042980:	4313      	orrs	r3, r2
 8042982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042986:	687b      	ldr	r3, [r7, #4]
 8042988:	681b      	ldr	r3, [r3, #0]
 804298a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804298e:	2b00      	cmp	r3, #0
 8042990:	d004      	beq.n	804299c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8042992:	687b      	ldr	r3, [r7, #4]
 8042994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804299a:	d00a      	beq.n	80429b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 804299c:	687b      	ldr	r3, [r7, #4]
 804299e:	681b      	ldr	r3, [r3, #0]
 80429a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80429a4:	2b00      	cmp	r3, #0
 80429a6:	d02e      	beq.n	8042a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80429a8:	687b      	ldr	r3, [r7, #4]
 80429aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80429ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80429b0:	d129      	bne.n	8042a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80429b2:	4b4b      	ldr	r3, [pc, #300]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80429b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80429b8:	0c1b      	lsrs	r3, r3, #16
 80429ba:	f003 0303 	and.w	r3, r3, #3
 80429be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80429c0:	4b47      	ldr	r3, [pc, #284]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80429c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80429c6:	0f1b      	lsrs	r3, r3, #28
 80429c8:	f003 0307 	and.w	r3, r3, #7
 80429cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80429ce:	687b      	ldr	r3, [r7, #4]
 80429d0:	685b      	ldr	r3, [r3, #4]
 80429d2:	019a      	lsls	r2, r3, #6
 80429d4:	693b      	ldr	r3, [r7, #16]
 80429d6:	041b      	lsls	r3, r3, #16
 80429d8:	431a      	orrs	r2, r3
 80429da:	687b      	ldr	r3, [r7, #4]
 80429dc:	68db      	ldr	r3, [r3, #12]
 80429de:	061b      	lsls	r3, r3, #24
 80429e0:	431a      	orrs	r2, r3
 80429e2:	68fb      	ldr	r3, [r7, #12]
 80429e4:	071b      	lsls	r3, r3, #28
 80429e6:	493e      	ldr	r1, [pc, #248]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80429e8:	4313      	orrs	r3, r2
 80429ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80429ee:	4b3c      	ldr	r3, [pc, #240]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80429f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80429f4:	f023 021f 	bic.w	r2, r3, #31
 80429f8:	687b      	ldr	r3, [r7, #4]
 80429fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429fc:	3b01      	subs	r3, #1
 80429fe:	4938      	ldr	r1, [pc, #224]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a00:	4313      	orrs	r3, r2
 8042a02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042a06:	687b      	ldr	r3, [r7, #4]
 8042a08:	681b      	ldr	r3, [r3, #0]
 8042a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042a0e:	2b00      	cmp	r3, #0
 8042a10:	d01d      	beq.n	8042a4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042a12:	4b33      	ldr	r3, [pc, #204]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042a18:	0e1b      	lsrs	r3, r3, #24
 8042a1a:	f003 030f 	and.w	r3, r3, #15
 8042a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042a20:	4b2f      	ldr	r3, [pc, #188]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042a26:	0f1b      	lsrs	r3, r3, #28
 8042a28:	f003 0307 	and.w	r3, r3, #7
 8042a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8042a2e:	687b      	ldr	r3, [r7, #4]
 8042a30:	685b      	ldr	r3, [r3, #4]
 8042a32:	019a      	lsls	r2, r3, #6
 8042a34:	687b      	ldr	r3, [r7, #4]
 8042a36:	691b      	ldr	r3, [r3, #16]
 8042a38:	041b      	lsls	r3, r3, #16
 8042a3a:	431a      	orrs	r2, r3
 8042a3c:	693b      	ldr	r3, [r7, #16]
 8042a3e:	061b      	lsls	r3, r3, #24
 8042a40:	431a      	orrs	r2, r3
 8042a42:	68fb      	ldr	r3, [r7, #12]
 8042a44:	071b      	lsls	r3, r3, #28
 8042a46:	4926      	ldr	r1, [pc, #152]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a48:	4313      	orrs	r3, r2
 8042a4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8042a4e:	687b      	ldr	r3, [r7, #4]
 8042a50:	681b      	ldr	r3, [r3, #0]
 8042a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042a56:	2b00      	cmp	r3, #0
 8042a58:	d011      	beq.n	8042a7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8042a5a:	687b      	ldr	r3, [r7, #4]
 8042a5c:	685b      	ldr	r3, [r3, #4]
 8042a5e:	019a      	lsls	r2, r3, #6
 8042a60:	687b      	ldr	r3, [r7, #4]
 8042a62:	691b      	ldr	r3, [r3, #16]
 8042a64:	041b      	lsls	r3, r3, #16
 8042a66:	431a      	orrs	r2, r3
 8042a68:	687b      	ldr	r3, [r7, #4]
 8042a6a:	68db      	ldr	r3, [r3, #12]
 8042a6c:	061b      	lsls	r3, r3, #24
 8042a6e:	431a      	orrs	r2, r3
 8042a70:	687b      	ldr	r3, [r7, #4]
 8042a72:	689b      	ldr	r3, [r3, #8]
 8042a74:	071b      	lsls	r3, r3, #28
 8042a76:	491a      	ldr	r1, [pc, #104]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a78:	4313      	orrs	r3, r2
 8042a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8042a7e:	4b18      	ldr	r3, [pc, #96]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a80:	681b      	ldr	r3, [r3, #0]
 8042a82:	4a17      	ldr	r2, [pc, #92]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042a8a:	f7fe f9cf 	bl	8040e2c <HAL_GetTick>
 8042a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042a90:	e008      	b.n	8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8042a92:	f7fe f9cb 	bl	8040e2c <HAL_GetTick>
 8042a96:	4602      	mov	r2, r0
 8042a98:	697b      	ldr	r3, [r7, #20]
 8042a9a:	1ad3      	subs	r3, r2, r3
 8042a9c:	2b64      	cmp	r3, #100	; 0x64
 8042a9e:	d901      	bls.n	8042aa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042aa0:	2303      	movs	r3, #3
 8042aa2:	e0d8      	b.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042aa4:	4b0e      	ldr	r3, [pc, #56]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042aa6:	681b      	ldr	r3, [r3, #0]
 8042aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042aac:	2b00      	cmp	r3, #0
 8042aae:	d0f0      	beq.n	8042a92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8042ab0:	69bb      	ldr	r3, [r7, #24]
 8042ab2:	2b01      	cmp	r3, #1
 8042ab4:	f040 80ce 	bne.w	8042c54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042ab8:	4b09      	ldr	r3, [pc, #36]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042aba:	681b      	ldr	r3, [r3, #0]
 8042abc:	4a08      	ldr	r2, [pc, #32]	; (8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042ac4:	f7fe f9b2 	bl	8040e2c <HAL_GetTick>
 8042ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042aca:	e00b      	b.n	8042ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042acc:	f7fe f9ae 	bl	8040e2c <HAL_GetTick>
 8042ad0:	4602      	mov	r2, r0
 8042ad2:	697b      	ldr	r3, [r7, #20]
 8042ad4:	1ad3      	subs	r3, r2, r3
 8042ad6:	2b64      	cmp	r3, #100	; 0x64
 8042ad8:	d904      	bls.n	8042ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042ada:	2303      	movs	r3, #3
 8042adc:	e0bb      	b.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8042ade:	bf00      	nop
 8042ae0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042ae4:	4b5e      	ldr	r3, [pc, #376]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042ae6:	681b      	ldr	r3, [r3, #0]
 8042ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042af0:	d0ec      	beq.n	8042acc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8042af2:	687b      	ldr	r3, [r7, #4]
 8042af4:	681b      	ldr	r3, [r3, #0]
 8042af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042afa:	2b00      	cmp	r3, #0
 8042afc:	d003      	beq.n	8042b06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8042afe:	687b      	ldr	r3, [r7, #4]
 8042b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042b02:	2b00      	cmp	r3, #0
 8042b04:	d009      	beq.n	8042b1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	681b      	ldr	r3, [r3, #0]
 8042b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8042b0e:	2b00      	cmp	r3, #0
 8042b10:	d02e      	beq.n	8042b70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042b12:	687b      	ldr	r3, [r7, #4]
 8042b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042b16:	2b00      	cmp	r3, #0
 8042b18:	d12a      	bne.n	8042b70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8042b1a:	4b51      	ldr	r3, [pc, #324]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b20:	0c1b      	lsrs	r3, r3, #16
 8042b22:	f003 0303 	and.w	r3, r3, #3
 8042b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8042b28:	4b4d      	ldr	r3, [pc, #308]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b2e:	0f1b      	lsrs	r3, r3, #28
 8042b30:	f003 0307 	and.w	r3, r3, #7
 8042b34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8042b36:	687b      	ldr	r3, [r7, #4]
 8042b38:	695b      	ldr	r3, [r3, #20]
 8042b3a:	019a      	lsls	r2, r3, #6
 8042b3c:	693b      	ldr	r3, [r7, #16]
 8042b3e:	041b      	lsls	r3, r3, #16
 8042b40:	431a      	orrs	r2, r3
 8042b42:	687b      	ldr	r3, [r7, #4]
 8042b44:	699b      	ldr	r3, [r3, #24]
 8042b46:	061b      	lsls	r3, r3, #24
 8042b48:	431a      	orrs	r2, r3
 8042b4a:	68fb      	ldr	r3, [r7, #12]
 8042b4c:	071b      	lsls	r3, r3, #28
 8042b4e:	4944      	ldr	r1, [pc, #272]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b50:	4313      	orrs	r3, r2
 8042b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8042b56:	4b42      	ldr	r3, [pc, #264]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8042b60:	687b      	ldr	r3, [r7, #4]
 8042b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042b64:	3b01      	subs	r3, #1
 8042b66:	021b      	lsls	r3, r3, #8
 8042b68:	493d      	ldr	r1, [pc, #244]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b6a:	4313      	orrs	r3, r2
 8042b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8042b70:	687b      	ldr	r3, [r7, #4]
 8042b72:	681b      	ldr	r3, [r3, #0]
 8042b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042b78:	2b00      	cmp	r3, #0
 8042b7a:	d022      	beq.n	8042bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8042b7c:	687b      	ldr	r3, [r7, #4]
 8042b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042b84:	d11d      	bne.n	8042bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8042b86:	4b36      	ldr	r3, [pc, #216]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b8c:	0e1b      	lsrs	r3, r3, #24
 8042b8e:	f003 030f 	and.w	r3, r3, #15
 8042b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8042b94:	4b32      	ldr	r3, [pc, #200]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b9a:	0f1b      	lsrs	r3, r3, #28
 8042b9c:	f003 0307 	and.w	r3, r3, #7
 8042ba0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8042ba2:	687b      	ldr	r3, [r7, #4]
 8042ba4:	695b      	ldr	r3, [r3, #20]
 8042ba6:	019a      	lsls	r2, r3, #6
 8042ba8:	687b      	ldr	r3, [r7, #4]
 8042baa:	6a1b      	ldr	r3, [r3, #32]
 8042bac:	041b      	lsls	r3, r3, #16
 8042bae:	431a      	orrs	r2, r3
 8042bb0:	693b      	ldr	r3, [r7, #16]
 8042bb2:	061b      	lsls	r3, r3, #24
 8042bb4:	431a      	orrs	r2, r3
 8042bb6:	68fb      	ldr	r3, [r7, #12]
 8042bb8:	071b      	lsls	r3, r3, #28
 8042bba:	4929      	ldr	r1, [pc, #164]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042bbc:	4313      	orrs	r3, r2
 8042bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8042bc2:	687b      	ldr	r3, [r7, #4]
 8042bc4:	681b      	ldr	r3, [r3, #0]
 8042bc6:	f003 0308 	and.w	r3, r3, #8
 8042bca:	2b00      	cmp	r3, #0
 8042bcc:	d028      	beq.n	8042c20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8042bce:	4b24      	ldr	r3, [pc, #144]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042bd4:	0e1b      	lsrs	r3, r3, #24
 8042bd6:	f003 030f 	and.w	r3, r3, #15
 8042bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8042bdc:	4b20      	ldr	r3, [pc, #128]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042be2:	0c1b      	lsrs	r3, r3, #16
 8042be4:	f003 0303 	and.w	r3, r3, #3
 8042be8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8042bea:	687b      	ldr	r3, [r7, #4]
 8042bec:	695b      	ldr	r3, [r3, #20]
 8042bee:	019a      	lsls	r2, r3, #6
 8042bf0:	68fb      	ldr	r3, [r7, #12]
 8042bf2:	041b      	lsls	r3, r3, #16
 8042bf4:	431a      	orrs	r2, r3
 8042bf6:	693b      	ldr	r3, [r7, #16]
 8042bf8:	061b      	lsls	r3, r3, #24
 8042bfa:	431a      	orrs	r2, r3
 8042bfc:	687b      	ldr	r3, [r7, #4]
 8042bfe:	69db      	ldr	r3, [r3, #28]
 8042c00:	071b      	lsls	r3, r3, #28
 8042c02:	4917      	ldr	r1, [pc, #92]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042c04:	4313      	orrs	r3, r2
 8042c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8042c0a:	4b15      	ldr	r3, [pc, #84]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042c18:	4911      	ldr	r1, [pc, #68]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042c1a:	4313      	orrs	r3, r2
 8042c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8042c20:	4b0f      	ldr	r3, [pc, #60]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042c22:	681b      	ldr	r3, [r3, #0]
 8042c24:	4a0e      	ldr	r2, [pc, #56]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042c2c:	f7fe f8fe 	bl	8040e2c <HAL_GetTick>
 8042c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8042c32:	e008      	b.n	8042c46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042c34:	f7fe f8fa 	bl	8040e2c <HAL_GetTick>
 8042c38:	4602      	mov	r2, r0
 8042c3a:	697b      	ldr	r3, [r7, #20]
 8042c3c:	1ad3      	subs	r3, r2, r3
 8042c3e:	2b64      	cmp	r3, #100	; 0x64
 8042c40:	d901      	bls.n	8042c46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042c42:	2303      	movs	r3, #3
 8042c44:	e007      	b.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8042c46:	4b06      	ldr	r3, [pc, #24]	; (8042c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042c48:	681b      	ldr	r3, [r3, #0]
 8042c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042c52:	d1ef      	bne.n	8042c34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8042c54:	2300      	movs	r3, #0
}
 8042c56:	4618      	mov	r0, r3
 8042c58:	3720      	adds	r7, #32
 8042c5a:	46bd      	mov	sp, r7
 8042c5c:	bd80      	pop	{r7, pc}
 8042c5e:	bf00      	nop
 8042c60:	40023800 	.word	0x40023800

08042c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042c64:	b580      	push	{r7, lr}
 8042c66:	b082      	sub	sp, #8
 8042c68:	af00      	add	r7, sp, #0
 8042c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042c6c:	687b      	ldr	r3, [r7, #4]
 8042c6e:	2b00      	cmp	r3, #0
 8042c70:	d101      	bne.n	8042c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042c72:	2301      	movs	r3, #1
 8042c74:	e040      	b.n	8042cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042c76:	687b      	ldr	r3, [r7, #4]
 8042c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042c7a:	2b00      	cmp	r3, #0
 8042c7c:	d106      	bne.n	8042c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042c7e:	687b      	ldr	r3, [r7, #4]
 8042c80:	2200      	movs	r2, #0
 8042c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042c86:	6878      	ldr	r0, [r7, #4]
 8042c88:	f7fd feec 	bl	8040a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042c8c:	687b      	ldr	r3, [r7, #4]
 8042c8e:	2224      	movs	r2, #36	; 0x24
 8042c90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8042c92:	687b      	ldr	r3, [r7, #4]
 8042c94:	681b      	ldr	r3, [r3, #0]
 8042c96:	681a      	ldr	r2, [r3, #0]
 8042c98:	687b      	ldr	r3, [r7, #4]
 8042c9a:	681b      	ldr	r3, [r3, #0]
 8042c9c:	f022 0201 	bic.w	r2, r2, #1
 8042ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042ca2:	6878      	ldr	r0, [r7, #4]
 8042ca4:	f000 fb26 	bl	80432f4 <UART_SetConfig>
 8042ca8:	4603      	mov	r3, r0
 8042caa:	2b01      	cmp	r3, #1
 8042cac:	d101      	bne.n	8042cb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8042cae:	2301      	movs	r3, #1
 8042cb0:	e022      	b.n	8042cf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042cb2:	687b      	ldr	r3, [r7, #4]
 8042cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042cb6:	2b00      	cmp	r3, #0
 8042cb8:	d002      	beq.n	8042cc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8042cba:	6878      	ldr	r0, [r7, #4]
 8042cbc:	f000 fd7c 	bl	80437b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042cc0:	687b      	ldr	r3, [r7, #4]
 8042cc2:	681b      	ldr	r3, [r3, #0]
 8042cc4:	685a      	ldr	r2, [r3, #4]
 8042cc6:	687b      	ldr	r3, [r7, #4]
 8042cc8:	681b      	ldr	r3, [r3, #0]
 8042cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8042cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042cd0:	687b      	ldr	r3, [r7, #4]
 8042cd2:	681b      	ldr	r3, [r3, #0]
 8042cd4:	689a      	ldr	r2, [r3, #8]
 8042cd6:	687b      	ldr	r3, [r7, #4]
 8042cd8:	681b      	ldr	r3, [r3, #0]
 8042cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8042cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042ce0:	687b      	ldr	r3, [r7, #4]
 8042ce2:	681b      	ldr	r3, [r3, #0]
 8042ce4:	681a      	ldr	r2, [r3, #0]
 8042ce6:	687b      	ldr	r3, [r7, #4]
 8042ce8:	681b      	ldr	r3, [r3, #0]
 8042cea:	f042 0201 	orr.w	r2, r2, #1
 8042cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042cf0:	6878      	ldr	r0, [r7, #4]
 8042cf2:	f000 fe03 	bl	80438fc <UART_CheckIdleState>
 8042cf6:	4603      	mov	r3, r0
}
 8042cf8:	4618      	mov	r0, r3
 8042cfa:	3708      	adds	r7, #8
 8042cfc:	46bd      	mov	sp, r7
 8042cfe:	bd80      	pop	{r7, pc}

08042d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8042d00:	b580      	push	{r7, lr}
 8042d02:	b08a      	sub	sp, #40	; 0x28
 8042d04:	af02      	add	r7, sp, #8
 8042d06:	60f8      	str	r0, [r7, #12]
 8042d08:	60b9      	str	r1, [r7, #8]
 8042d0a:	603b      	str	r3, [r7, #0]
 8042d0c:	4613      	mov	r3, r2
 8042d0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8042d10:	68fb      	ldr	r3, [r7, #12]
 8042d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042d14:	2b20      	cmp	r3, #32
 8042d16:	f040 8081 	bne.w	8042e1c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8042d1a:	68bb      	ldr	r3, [r7, #8]
 8042d1c:	2b00      	cmp	r3, #0
 8042d1e:	d002      	beq.n	8042d26 <HAL_UART_Transmit+0x26>
 8042d20:	88fb      	ldrh	r3, [r7, #6]
 8042d22:	2b00      	cmp	r3, #0
 8042d24:	d101      	bne.n	8042d2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8042d26:	2301      	movs	r3, #1
 8042d28:	e079      	b.n	8042e1e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8042d2a:	68fb      	ldr	r3, [r7, #12]
 8042d2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8042d30:	2b01      	cmp	r3, #1
 8042d32:	d101      	bne.n	8042d38 <HAL_UART_Transmit+0x38>
 8042d34:	2302      	movs	r3, #2
 8042d36:	e072      	b.n	8042e1e <HAL_UART_Transmit+0x11e>
 8042d38:	68fb      	ldr	r3, [r7, #12]
 8042d3a:	2201      	movs	r2, #1
 8042d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042d40:	68fb      	ldr	r3, [r7, #12]
 8042d42:	2200      	movs	r2, #0
 8042d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042d48:	68fb      	ldr	r3, [r7, #12]
 8042d4a:	2221      	movs	r2, #33	; 0x21
 8042d4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8042d4e:	f7fe f86d 	bl	8040e2c <HAL_GetTick>
 8042d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8042d54:	68fb      	ldr	r3, [r7, #12]
 8042d56:	88fa      	ldrh	r2, [r7, #6]
 8042d58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8042d5c:	68fb      	ldr	r3, [r7, #12]
 8042d5e:	88fa      	ldrh	r2, [r7, #6]
 8042d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042d64:	68fb      	ldr	r3, [r7, #12]
 8042d66:	689b      	ldr	r3, [r3, #8]
 8042d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042d6c:	d108      	bne.n	8042d80 <HAL_UART_Transmit+0x80>
 8042d6e:	68fb      	ldr	r3, [r7, #12]
 8042d70:	691b      	ldr	r3, [r3, #16]
 8042d72:	2b00      	cmp	r3, #0
 8042d74:	d104      	bne.n	8042d80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8042d76:	2300      	movs	r3, #0
 8042d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8042d7a:	68bb      	ldr	r3, [r7, #8]
 8042d7c:	61bb      	str	r3, [r7, #24]
 8042d7e:	e003      	b.n	8042d88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8042d80:	68bb      	ldr	r3, [r7, #8]
 8042d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042d84:	2300      	movs	r3, #0
 8042d86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8042d88:	68fb      	ldr	r3, [r7, #12]
 8042d8a:	2200      	movs	r2, #0
 8042d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8042d90:	e02c      	b.n	8042dec <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8042d92:	683b      	ldr	r3, [r7, #0]
 8042d94:	9300      	str	r3, [sp, #0]
 8042d96:	697b      	ldr	r3, [r7, #20]
 8042d98:	2200      	movs	r2, #0
 8042d9a:	2180      	movs	r1, #128	; 0x80
 8042d9c:	68f8      	ldr	r0, [r7, #12]
 8042d9e:	f000 fdf6 	bl	804398e <UART_WaitOnFlagUntilTimeout>
 8042da2:	4603      	mov	r3, r0
 8042da4:	2b00      	cmp	r3, #0
 8042da6:	d001      	beq.n	8042dac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8042da8:	2303      	movs	r3, #3
 8042daa:	e038      	b.n	8042e1e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8042dac:	69fb      	ldr	r3, [r7, #28]
 8042dae:	2b00      	cmp	r3, #0
 8042db0:	d10b      	bne.n	8042dca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8042db2:	69bb      	ldr	r3, [r7, #24]
 8042db4:	881b      	ldrh	r3, [r3, #0]
 8042db6:	461a      	mov	r2, r3
 8042db8:	68fb      	ldr	r3, [r7, #12]
 8042dba:	681b      	ldr	r3, [r3, #0]
 8042dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8042dc2:	69bb      	ldr	r3, [r7, #24]
 8042dc4:	3302      	adds	r3, #2
 8042dc6:	61bb      	str	r3, [r7, #24]
 8042dc8:	e007      	b.n	8042dda <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042dca:	69fb      	ldr	r3, [r7, #28]
 8042dcc:	781a      	ldrb	r2, [r3, #0]
 8042dce:	68fb      	ldr	r3, [r7, #12]
 8042dd0:	681b      	ldr	r3, [r3, #0]
 8042dd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8042dd4:	69fb      	ldr	r3, [r7, #28]
 8042dd6:	3301      	adds	r3, #1
 8042dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042dda:	68fb      	ldr	r3, [r7, #12]
 8042ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8042de0:	b29b      	uxth	r3, r3
 8042de2:	3b01      	subs	r3, #1
 8042de4:	b29a      	uxth	r2, r3
 8042de6:	68fb      	ldr	r3, [r7, #12]
 8042de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8042dec:	68fb      	ldr	r3, [r7, #12]
 8042dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8042df2:	b29b      	uxth	r3, r3
 8042df4:	2b00      	cmp	r3, #0
 8042df6:	d1cc      	bne.n	8042d92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8042df8:	683b      	ldr	r3, [r7, #0]
 8042dfa:	9300      	str	r3, [sp, #0]
 8042dfc:	697b      	ldr	r3, [r7, #20]
 8042dfe:	2200      	movs	r2, #0
 8042e00:	2140      	movs	r1, #64	; 0x40
 8042e02:	68f8      	ldr	r0, [r7, #12]
 8042e04:	f000 fdc3 	bl	804398e <UART_WaitOnFlagUntilTimeout>
 8042e08:	4603      	mov	r3, r0
 8042e0a:	2b00      	cmp	r3, #0
 8042e0c:	d001      	beq.n	8042e12 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8042e0e:	2303      	movs	r3, #3
 8042e10:	e005      	b.n	8042e1e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8042e12:	68fb      	ldr	r3, [r7, #12]
 8042e14:	2220      	movs	r2, #32
 8042e16:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8042e18:	2300      	movs	r3, #0
 8042e1a:	e000      	b.n	8042e1e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8042e1c:	2302      	movs	r3, #2
  }
}
 8042e1e:	4618      	mov	r0, r3
 8042e20:	3720      	adds	r7, #32
 8042e22:	46bd      	mov	sp, r7
 8042e24:	bd80      	pop	{r7, pc}

08042e26 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8042e26:	b580      	push	{r7, lr}
 8042e28:	b084      	sub	sp, #16
 8042e2a:	af00      	add	r7, sp, #0
 8042e2c:	60f8      	str	r0, [r7, #12]
 8042e2e:	60b9      	str	r1, [r7, #8]
 8042e30:	4613      	mov	r3, r2
 8042e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8042e34:	68fb      	ldr	r3, [r7, #12]
 8042e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042e38:	2b20      	cmp	r3, #32
 8042e3a:	d12c      	bne.n	8042e96 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8042e3c:	68bb      	ldr	r3, [r7, #8]
 8042e3e:	2b00      	cmp	r3, #0
 8042e40:	d002      	beq.n	8042e48 <HAL_UART_Receive_IT+0x22>
 8042e42:	88fb      	ldrh	r3, [r7, #6]
 8042e44:	2b00      	cmp	r3, #0
 8042e46:	d101      	bne.n	8042e4c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8042e48:	2301      	movs	r3, #1
 8042e4a:	e025      	b.n	8042e98 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8042e4c:	68fb      	ldr	r3, [r7, #12]
 8042e4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8042e52:	2b01      	cmp	r3, #1
 8042e54:	d101      	bne.n	8042e5a <HAL_UART_Receive_IT+0x34>
 8042e56:	2302      	movs	r3, #2
 8042e58:	e01e      	b.n	8042e98 <HAL_UART_Receive_IT+0x72>
 8042e5a:	68fb      	ldr	r3, [r7, #12]
 8042e5c:	2201      	movs	r2, #1
 8042e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042e62:	68fb      	ldr	r3, [r7, #12]
 8042e64:	2200      	movs	r2, #0
 8042e66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8042e68:	68fb      	ldr	r3, [r7, #12]
 8042e6a:	681b      	ldr	r3, [r3, #0]
 8042e6c:	685b      	ldr	r3, [r3, #4]
 8042e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042e72:	2b00      	cmp	r3, #0
 8042e74:	d007      	beq.n	8042e86 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8042e76:	68fb      	ldr	r3, [r7, #12]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	681a      	ldr	r2, [r3, #0]
 8042e7c:	68fb      	ldr	r3, [r7, #12]
 8042e7e:	681b      	ldr	r3, [r3, #0]
 8042e80:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8042e84:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8042e86:	88fb      	ldrh	r3, [r7, #6]
 8042e88:	461a      	mov	r2, r3
 8042e8a:	68b9      	ldr	r1, [r7, #8]
 8042e8c:	68f8      	ldr	r0, [r7, #12]
 8042e8e:	f000 fdfb 	bl	8043a88 <UART_Start_Receive_IT>
 8042e92:	4603      	mov	r3, r0
 8042e94:	e000      	b.n	8042e98 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8042e96:	2302      	movs	r3, #2
  }
}
 8042e98:	4618      	mov	r0, r3
 8042e9a:	3710      	adds	r7, #16
 8042e9c:	46bd      	mov	sp, r7
 8042e9e:	bd80      	pop	{r7, pc}

08042ea0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8042ea0:	b580      	push	{r7, lr}
 8042ea2:	b088      	sub	sp, #32
 8042ea4:	af00      	add	r7, sp, #0
 8042ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8042ea8:	687b      	ldr	r3, [r7, #4]
 8042eaa:	681b      	ldr	r3, [r3, #0]
 8042eac:	69db      	ldr	r3, [r3, #28]
 8042eae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8042eb0:	687b      	ldr	r3, [r7, #4]
 8042eb2:	681b      	ldr	r3, [r3, #0]
 8042eb4:	681b      	ldr	r3, [r3, #0]
 8042eb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8042eb8:	687b      	ldr	r3, [r7, #4]
 8042eba:	681b      	ldr	r3, [r3, #0]
 8042ebc:	689b      	ldr	r3, [r3, #8]
 8042ebe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8042ec0:	69fa      	ldr	r2, [r7, #28]
 8042ec2:	f640 030f 	movw	r3, #2063	; 0x80f
 8042ec6:	4013      	ands	r3, r2
 8042ec8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8042eca:	693b      	ldr	r3, [r7, #16]
 8042ecc:	2b00      	cmp	r3, #0
 8042ece:	d113      	bne.n	8042ef8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8042ed0:	69fb      	ldr	r3, [r7, #28]
 8042ed2:	f003 0320 	and.w	r3, r3, #32
 8042ed6:	2b00      	cmp	r3, #0
 8042ed8:	d00e      	beq.n	8042ef8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8042eda:	69bb      	ldr	r3, [r7, #24]
 8042edc:	f003 0320 	and.w	r3, r3, #32
 8042ee0:	2b00      	cmp	r3, #0
 8042ee2:	d009      	beq.n	8042ef8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8042ee4:	687b      	ldr	r3, [r7, #4]
 8042ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042ee8:	2b00      	cmp	r3, #0
 8042eea:	f000 81cc 	beq.w	8043286 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8042eee:	687b      	ldr	r3, [r7, #4]
 8042ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042ef2:	6878      	ldr	r0, [r7, #4]
 8042ef4:	4798      	blx	r3
      }
      return;
 8042ef6:	e1c6      	b.n	8043286 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8042ef8:	693b      	ldr	r3, [r7, #16]
 8042efa:	2b00      	cmp	r3, #0
 8042efc:	f000 80e3 	beq.w	80430c6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8042f00:	697b      	ldr	r3, [r7, #20]
 8042f02:	f003 0301 	and.w	r3, r3, #1
 8042f06:	2b00      	cmp	r3, #0
 8042f08:	d105      	bne.n	8042f16 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8042f0a:	69ba      	ldr	r2, [r7, #24]
 8042f0c:	4ba5      	ldr	r3, [pc, #660]	; (80431a4 <HAL_UART_IRQHandler+0x304>)
 8042f0e:	4013      	ands	r3, r2
 8042f10:	2b00      	cmp	r3, #0
 8042f12:	f000 80d8 	beq.w	80430c6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8042f16:	69fb      	ldr	r3, [r7, #28]
 8042f18:	f003 0301 	and.w	r3, r3, #1
 8042f1c:	2b00      	cmp	r3, #0
 8042f1e:	d010      	beq.n	8042f42 <HAL_UART_IRQHandler+0xa2>
 8042f20:	69bb      	ldr	r3, [r7, #24]
 8042f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042f26:	2b00      	cmp	r3, #0
 8042f28:	d00b      	beq.n	8042f42 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8042f2a:	687b      	ldr	r3, [r7, #4]
 8042f2c:	681b      	ldr	r3, [r3, #0]
 8042f2e:	2201      	movs	r2, #1
 8042f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042f32:	687b      	ldr	r3, [r7, #4]
 8042f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042f38:	f043 0201 	orr.w	r2, r3, #1
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042f42:	69fb      	ldr	r3, [r7, #28]
 8042f44:	f003 0302 	and.w	r3, r3, #2
 8042f48:	2b00      	cmp	r3, #0
 8042f4a:	d010      	beq.n	8042f6e <HAL_UART_IRQHandler+0xce>
 8042f4c:	697b      	ldr	r3, [r7, #20]
 8042f4e:	f003 0301 	and.w	r3, r3, #1
 8042f52:	2b00      	cmp	r3, #0
 8042f54:	d00b      	beq.n	8042f6e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8042f56:	687b      	ldr	r3, [r7, #4]
 8042f58:	681b      	ldr	r3, [r3, #0]
 8042f5a:	2202      	movs	r2, #2
 8042f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8042f5e:	687b      	ldr	r3, [r7, #4]
 8042f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042f64:	f043 0204 	orr.w	r2, r3, #4
 8042f68:	687b      	ldr	r3, [r7, #4]
 8042f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042f6e:	69fb      	ldr	r3, [r7, #28]
 8042f70:	f003 0304 	and.w	r3, r3, #4
 8042f74:	2b00      	cmp	r3, #0
 8042f76:	d010      	beq.n	8042f9a <HAL_UART_IRQHandler+0xfa>
 8042f78:	697b      	ldr	r3, [r7, #20]
 8042f7a:	f003 0301 	and.w	r3, r3, #1
 8042f7e:	2b00      	cmp	r3, #0
 8042f80:	d00b      	beq.n	8042f9a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8042f82:	687b      	ldr	r3, [r7, #4]
 8042f84:	681b      	ldr	r3, [r3, #0]
 8042f86:	2204      	movs	r2, #4
 8042f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8042f8a:	687b      	ldr	r3, [r7, #4]
 8042f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042f90:	f043 0202 	orr.w	r2, r3, #2
 8042f94:	687b      	ldr	r3, [r7, #4]
 8042f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8042f9a:	69fb      	ldr	r3, [r7, #28]
 8042f9c:	f003 0308 	and.w	r3, r3, #8
 8042fa0:	2b00      	cmp	r3, #0
 8042fa2:	d015      	beq.n	8042fd0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8042fa4:	69bb      	ldr	r3, [r7, #24]
 8042fa6:	f003 0320 	and.w	r3, r3, #32
 8042faa:	2b00      	cmp	r3, #0
 8042fac:	d104      	bne.n	8042fb8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8042fae:	697b      	ldr	r3, [r7, #20]
 8042fb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8042fb4:	2b00      	cmp	r3, #0
 8042fb6:	d00b      	beq.n	8042fd0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042fb8:	687b      	ldr	r3, [r7, #4]
 8042fba:	681b      	ldr	r3, [r3, #0]
 8042fbc:	2208      	movs	r2, #8
 8042fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8042fc0:	687b      	ldr	r3, [r7, #4]
 8042fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042fc6:	f043 0208 	orr.w	r2, r3, #8
 8042fca:	687b      	ldr	r3, [r7, #4]
 8042fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8042fd0:	69fb      	ldr	r3, [r7, #28]
 8042fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042fd6:	2b00      	cmp	r3, #0
 8042fd8:	d011      	beq.n	8042ffe <HAL_UART_IRQHandler+0x15e>
 8042fda:	69bb      	ldr	r3, [r7, #24]
 8042fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042fe0:	2b00      	cmp	r3, #0
 8042fe2:	d00c      	beq.n	8042ffe <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042fe4:	687b      	ldr	r3, [r7, #4]
 8042fe6:	681b      	ldr	r3, [r3, #0]
 8042fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8042fee:	687b      	ldr	r3, [r7, #4]
 8042ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042ff4:	f043 0220 	orr.w	r2, r3, #32
 8042ff8:	687b      	ldr	r3, [r7, #4]
 8042ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8042ffe:	687b      	ldr	r3, [r7, #4]
 8043000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043004:	2b00      	cmp	r3, #0
 8043006:	f000 8140 	beq.w	804328a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 804300a:	69fb      	ldr	r3, [r7, #28]
 804300c:	f003 0320 	and.w	r3, r3, #32
 8043010:	2b00      	cmp	r3, #0
 8043012:	d00c      	beq.n	804302e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8043014:	69bb      	ldr	r3, [r7, #24]
 8043016:	f003 0320 	and.w	r3, r3, #32
 804301a:	2b00      	cmp	r3, #0
 804301c:	d007      	beq.n	804302e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 804301e:	687b      	ldr	r3, [r7, #4]
 8043020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043022:	2b00      	cmp	r3, #0
 8043024:	d003      	beq.n	804302e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8043026:	687b      	ldr	r3, [r7, #4]
 8043028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804302a:	6878      	ldr	r0, [r7, #4]
 804302c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 804302e:	687b      	ldr	r3, [r7, #4]
 8043030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043034:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8043036:	687b      	ldr	r3, [r7, #4]
 8043038:	681b      	ldr	r3, [r3, #0]
 804303a:	689b      	ldr	r3, [r3, #8]
 804303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043040:	2b40      	cmp	r3, #64	; 0x40
 8043042:	d004      	beq.n	804304e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8043044:	68fb      	ldr	r3, [r7, #12]
 8043046:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804304a:	2b00      	cmp	r3, #0
 804304c:	d031      	beq.n	80430b2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 804304e:	6878      	ldr	r0, [r7, #4]
 8043050:	f000 fda2 	bl	8043b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043054:	687b      	ldr	r3, [r7, #4]
 8043056:	681b      	ldr	r3, [r3, #0]
 8043058:	689b      	ldr	r3, [r3, #8]
 804305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804305e:	2b40      	cmp	r3, #64	; 0x40
 8043060:	d123      	bne.n	80430aa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8043062:	687b      	ldr	r3, [r7, #4]
 8043064:	681b      	ldr	r3, [r3, #0]
 8043066:	689a      	ldr	r2, [r3, #8]
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	681b      	ldr	r3, [r3, #0]
 804306c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043070:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8043072:	687b      	ldr	r3, [r7, #4]
 8043074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043076:	2b00      	cmp	r3, #0
 8043078:	d013      	beq.n	80430a2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804307a:	687b      	ldr	r3, [r7, #4]
 804307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804307e:	4a4a      	ldr	r2, [pc, #296]	; (80431a8 <HAL_UART_IRQHandler+0x308>)
 8043080:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8043082:	687b      	ldr	r3, [r7, #4]
 8043084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043086:	4618      	mov	r0, r3
 8043088:	f7fe f89b 	bl	80411c2 <HAL_DMA_Abort_IT>
 804308c:	4603      	mov	r3, r0
 804308e:	2b00      	cmp	r3, #0
 8043090:	d017      	beq.n	80430c2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8043092:	687b      	ldr	r3, [r7, #4]
 8043094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043098:	687a      	ldr	r2, [r7, #4]
 804309a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 804309c:	4610      	mov	r0, r2
 804309e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80430a0:	e00f      	b.n	80430c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80430a2:	6878      	ldr	r0, [r7, #4]
 80430a4:	f000 f906 	bl	80432b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80430a8:	e00b      	b.n	80430c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80430aa:	6878      	ldr	r0, [r7, #4]
 80430ac:	f000 f902 	bl	80432b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80430b0:	e007      	b.n	80430c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80430b2:	6878      	ldr	r0, [r7, #4]
 80430b4:	f000 f8fe 	bl	80432b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80430b8:	687b      	ldr	r3, [r7, #4]
 80430ba:	2200      	movs	r2, #0
 80430bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80430c0:	e0e3      	b.n	804328a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80430c2:	bf00      	nop
    return;
 80430c4:	e0e1      	b.n	804328a <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80430c6:	687b      	ldr	r3, [r7, #4]
 80430c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80430ca:	2b01      	cmp	r3, #1
 80430cc:	f040 80a7 	bne.w	804321e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80430d0:	69fb      	ldr	r3, [r7, #28]
 80430d2:	f003 0310 	and.w	r3, r3, #16
 80430d6:	2b00      	cmp	r3, #0
 80430d8:	f000 80a1 	beq.w	804321e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80430dc:	69bb      	ldr	r3, [r7, #24]
 80430de:	f003 0310 	and.w	r3, r3, #16
 80430e2:	2b00      	cmp	r3, #0
 80430e4:	f000 809b 	beq.w	804321e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80430e8:	687b      	ldr	r3, [r7, #4]
 80430ea:	681b      	ldr	r3, [r3, #0]
 80430ec:	2210      	movs	r2, #16
 80430ee:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80430f0:	687b      	ldr	r3, [r7, #4]
 80430f2:	681b      	ldr	r3, [r3, #0]
 80430f4:	689b      	ldr	r3, [r3, #8]
 80430f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80430fa:	2b40      	cmp	r3, #64	; 0x40
 80430fc:	d156      	bne.n	80431ac <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80430fe:	687b      	ldr	r3, [r7, #4]
 8043100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043102:	681b      	ldr	r3, [r3, #0]
 8043104:	685b      	ldr	r3, [r3, #4]
 8043106:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8043108:	893b      	ldrh	r3, [r7, #8]
 804310a:	2b00      	cmp	r3, #0
 804310c:	f000 80bf 	beq.w	804328e <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8043110:	687b      	ldr	r3, [r7, #4]
 8043112:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8043116:	893a      	ldrh	r2, [r7, #8]
 8043118:	429a      	cmp	r2, r3
 804311a:	f080 80b8 	bcs.w	804328e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 804311e:	687b      	ldr	r3, [r7, #4]
 8043120:	893a      	ldrh	r2, [r7, #8]
 8043122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8043126:	687b      	ldr	r3, [r7, #4]
 8043128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804312a:	69db      	ldr	r3, [r3, #28]
 804312c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043130:	d02a      	beq.n	8043188 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8043132:	687b      	ldr	r3, [r7, #4]
 8043134:	681b      	ldr	r3, [r3, #0]
 8043136:	681a      	ldr	r2, [r3, #0]
 8043138:	687b      	ldr	r3, [r7, #4]
 804313a:	681b      	ldr	r3, [r3, #0]
 804313c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043140:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043142:	687b      	ldr	r3, [r7, #4]
 8043144:	681b      	ldr	r3, [r3, #0]
 8043146:	689a      	ldr	r2, [r3, #8]
 8043148:	687b      	ldr	r3, [r7, #4]
 804314a:	681b      	ldr	r3, [r3, #0]
 804314c:	f022 0201 	bic.w	r2, r2, #1
 8043150:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8043152:	687b      	ldr	r3, [r7, #4]
 8043154:	681b      	ldr	r3, [r3, #0]
 8043156:	689a      	ldr	r2, [r3, #8]
 8043158:	687b      	ldr	r3, [r7, #4]
 804315a:	681b      	ldr	r3, [r3, #0]
 804315c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043160:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8043162:	687b      	ldr	r3, [r7, #4]
 8043164:	2220      	movs	r2, #32
 8043166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043168:	687b      	ldr	r3, [r7, #4]
 804316a:	2200      	movs	r2, #0
 804316c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804316e:	687b      	ldr	r3, [r7, #4]
 8043170:	681b      	ldr	r3, [r3, #0]
 8043172:	681a      	ldr	r2, [r3, #0]
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	681b      	ldr	r3, [r3, #0]
 8043178:	f022 0210 	bic.w	r2, r2, #16
 804317c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804317e:	687b      	ldr	r3, [r7, #4]
 8043180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043182:	4618      	mov	r0, r3
 8043184:	f7fd ffad 	bl	80410e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8043188:	687b      	ldr	r3, [r7, #4]
 804318a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 804318e:	687b      	ldr	r3, [r7, #4]
 8043190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043194:	b29b      	uxth	r3, r3
 8043196:	1ad3      	subs	r3, r2, r3
 8043198:	b29b      	uxth	r3, r3
 804319a:	4619      	mov	r1, r3
 804319c:	6878      	ldr	r0, [r7, #4]
 804319e:	f000 f893 	bl	80432c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80431a2:	e074      	b.n	804328e <HAL_UART_IRQHandler+0x3ee>
 80431a4:	04000120 	.word	0x04000120
 80431a8:	08043bf7 	.word	0x08043bf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80431ac:	687b      	ldr	r3, [r7, #4]
 80431ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80431b2:	687b      	ldr	r3, [r7, #4]
 80431b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80431b8:	b29b      	uxth	r3, r3
 80431ba:	1ad3      	subs	r3, r2, r3
 80431bc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80431c4:	b29b      	uxth	r3, r3
 80431c6:	2b00      	cmp	r3, #0
 80431c8:	d063      	beq.n	8043292 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80431ca:	897b      	ldrh	r3, [r7, #10]
 80431cc:	2b00      	cmp	r3, #0
 80431ce:	d060      	beq.n	8043292 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80431d0:	687b      	ldr	r3, [r7, #4]
 80431d2:	681b      	ldr	r3, [r3, #0]
 80431d4:	681a      	ldr	r2, [r3, #0]
 80431d6:	687b      	ldr	r3, [r7, #4]
 80431d8:	681b      	ldr	r3, [r3, #0]
 80431da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80431de:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80431e0:	687b      	ldr	r3, [r7, #4]
 80431e2:	681b      	ldr	r3, [r3, #0]
 80431e4:	689a      	ldr	r2, [r3, #8]
 80431e6:	687b      	ldr	r3, [r7, #4]
 80431e8:	681b      	ldr	r3, [r3, #0]
 80431ea:	f022 0201 	bic.w	r2, r2, #1
 80431ee:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80431f0:	687b      	ldr	r3, [r7, #4]
 80431f2:	2220      	movs	r2, #32
 80431f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80431f6:	687b      	ldr	r3, [r7, #4]
 80431f8:	2200      	movs	r2, #0
 80431fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80431fc:	687b      	ldr	r3, [r7, #4]
 80431fe:	2200      	movs	r2, #0
 8043200:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	681b      	ldr	r3, [r3, #0]
 8043206:	681a      	ldr	r2, [r3, #0]
 8043208:	687b      	ldr	r3, [r7, #4]
 804320a:	681b      	ldr	r3, [r3, #0]
 804320c:	f022 0210 	bic.w	r2, r2, #16
 8043210:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8043212:	897b      	ldrh	r3, [r7, #10]
 8043214:	4619      	mov	r1, r3
 8043216:	6878      	ldr	r0, [r7, #4]
 8043218:	f000 f856 	bl	80432c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 804321c:	e039      	b.n	8043292 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 804321e:	69fb      	ldr	r3, [r7, #28]
 8043220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043224:	2b00      	cmp	r3, #0
 8043226:	d00d      	beq.n	8043244 <HAL_UART_IRQHandler+0x3a4>
 8043228:	697b      	ldr	r3, [r7, #20]
 804322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804322e:	2b00      	cmp	r3, #0
 8043230:	d008      	beq.n	8043244 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8043232:	687b      	ldr	r3, [r7, #4]
 8043234:	681b      	ldr	r3, [r3, #0]
 8043236:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804323a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 804323c:	6878      	ldr	r0, [r7, #4]
 804323e:	f000 f84f 	bl	80432e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043242:	e029      	b.n	8043298 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8043244:	69fb      	ldr	r3, [r7, #28]
 8043246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804324a:	2b00      	cmp	r3, #0
 804324c:	d00d      	beq.n	804326a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 804324e:	69bb      	ldr	r3, [r7, #24]
 8043250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043254:	2b00      	cmp	r3, #0
 8043256:	d008      	beq.n	804326a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8043258:	687b      	ldr	r3, [r7, #4]
 804325a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804325c:	2b00      	cmp	r3, #0
 804325e:	d01a      	beq.n	8043296 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8043260:	687b      	ldr	r3, [r7, #4]
 8043262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8043264:	6878      	ldr	r0, [r7, #4]
 8043266:	4798      	blx	r3
    }
    return;
 8043268:	e015      	b.n	8043296 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 804326a:	69fb      	ldr	r3, [r7, #28]
 804326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043270:	2b00      	cmp	r3, #0
 8043272:	d011      	beq.n	8043298 <HAL_UART_IRQHandler+0x3f8>
 8043274:	69bb      	ldr	r3, [r7, #24]
 8043276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804327a:	2b00      	cmp	r3, #0
 804327c:	d00c      	beq.n	8043298 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 804327e:	6878      	ldr	r0, [r7, #4]
 8043280:	f000 fccf 	bl	8043c22 <UART_EndTransmit_IT>
    return;
 8043284:	e008      	b.n	8043298 <HAL_UART_IRQHandler+0x3f8>
      return;
 8043286:	bf00      	nop
 8043288:	e006      	b.n	8043298 <HAL_UART_IRQHandler+0x3f8>
    return;
 804328a:	bf00      	nop
 804328c:	e004      	b.n	8043298 <HAL_UART_IRQHandler+0x3f8>
      return;
 804328e:	bf00      	nop
 8043290:	e002      	b.n	8043298 <HAL_UART_IRQHandler+0x3f8>
      return;
 8043292:	bf00      	nop
 8043294:	e000      	b.n	8043298 <HAL_UART_IRQHandler+0x3f8>
    return;
 8043296:	bf00      	nop
  }

}
 8043298:	3720      	adds	r7, #32
 804329a:	46bd      	mov	sp, r7
 804329c:	bd80      	pop	{r7, pc}
 804329e:	bf00      	nop

080432a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80432a0:	b480      	push	{r7}
 80432a2:	b083      	sub	sp, #12
 80432a4:	af00      	add	r7, sp, #0
 80432a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80432a8:	bf00      	nop
 80432aa:	370c      	adds	r7, #12
 80432ac:	46bd      	mov	sp, r7
 80432ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432b2:	4770      	bx	lr

080432b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80432b4:	b480      	push	{r7}
 80432b6:	b083      	sub	sp, #12
 80432b8:	af00      	add	r7, sp, #0
 80432ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80432bc:	bf00      	nop
 80432be:	370c      	adds	r7, #12
 80432c0:	46bd      	mov	sp, r7
 80432c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432c6:	4770      	bx	lr

080432c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80432c8:	b480      	push	{r7}
 80432ca:	b083      	sub	sp, #12
 80432cc:	af00      	add	r7, sp, #0
 80432ce:	6078      	str	r0, [r7, #4]
 80432d0:	460b      	mov	r3, r1
 80432d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80432d4:	bf00      	nop
 80432d6:	370c      	adds	r7, #12
 80432d8:	46bd      	mov	sp, r7
 80432da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432de:	4770      	bx	lr

080432e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80432e0:	b480      	push	{r7}
 80432e2:	b083      	sub	sp, #12
 80432e4:	af00      	add	r7, sp, #0
 80432e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80432e8:	bf00      	nop
 80432ea:	370c      	adds	r7, #12
 80432ec:	46bd      	mov	sp, r7
 80432ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432f2:	4770      	bx	lr

080432f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80432f4:	b580      	push	{r7, lr}
 80432f6:	b088      	sub	sp, #32
 80432f8:	af00      	add	r7, sp, #0
 80432fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80432fc:	2300      	movs	r3, #0
 80432fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8043300:	687b      	ldr	r3, [r7, #4]
 8043302:	689a      	ldr	r2, [r3, #8]
 8043304:	687b      	ldr	r3, [r7, #4]
 8043306:	691b      	ldr	r3, [r3, #16]
 8043308:	431a      	orrs	r2, r3
 804330a:	687b      	ldr	r3, [r7, #4]
 804330c:	695b      	ldr	r3, [r3, #20]
 804330e:	431a      	orrs	r2, r3
 8043310:	687b      	ldr	r3, [r7, #4]
 8043312:	69db      	ldr	r3, [r3, #28]
 8043314:	4313      	orrs	r3, r2
 8043316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8043318:	687b      	ldr	r3, [r7, #4]
 804331a:	681b      	ldr	r3, [r3, #0]
 804331c:	681a      	ldr	r2, [r3, #0]
 804331e:	4ba7      	ldr	r3, [pc, #668]	; (80435bc <UART_SetConfig+0x2c8>)
 8043320:	4013      	ands	r3, r2
 8043322:	687a      	ldr	r2, [r7, #4]
 8043324:	6812      	ldr	r2, [r2, #0]
 8043326:	6979      	ldr	r1, [r7, #20]
 8043328:	430b      	orrs	r3, r1
 804332a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804332c:	687b      	ldr	r3, [r7, #4]
 804332e:	681b      	ldr	r3, [r3, #0]
 8043330:	685b      	ldr	r3, [r3, #4]
 8043332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043336:	687b      	ldr	r3, [r7, #4]
 8043338:	68da      	ldr	r2, [r3, #12]
 804333a:	687b      	ldr	r3, [r7, #4]
 804333c:	681b      	ldr	r3, [r3, #0]
 804333e:	430a      	orrs	r2, r1
 8043340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043342:	687b      	ldr	r3, [r7, #4]
 8043344:	699b      	ldr	r3, [r3, #24]
 8043346:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8043348:	687b      	ldr	r3, [r7, #4]
 804334a:	6a1b      	ldr	r3, [r3, #32]
 804334c:	697a      	ldr	r2, [r7, #20]
 804334e:	4313      	orrs	r3, r2
 8043350:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8043352:	687b      	ldr	r3, [r7, #4]
 8043354:	681b      	ldr	r3, [r3, #0]
 8043356:	689b      	ldr	r3, [r3, #8]
 8043358:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 804335c:	687b      	ldr	r3, [r7, #4]
 804335e:	681b      	ldr	r3, [r3, #0]
 8043360:	697a      	ldr	r2, [r7, #20]
 8043362:	430a      	orrs	r2, r1
 8043364:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8043366:	687b      	ldr	r3, [r7, #4]
 8043368:	681b      	ldr	r3, [r3, #0]
 804336a:	4a95      	ldr	r2, [pc, #596]	; (80435c0 <UART_SetConfig+0x2cc>)
 804336c:	4293      	cmp	r3, r2
 804336e:	d120      	bne.n	80433b2 <UART_SetConfig+0xbe>
 8043370:	4b94      	ldr	r3, [pc, #592]	; (80435c4 <UART_SetConfig+0x2d0>)
 8043372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043376:	f003 0303 	and.w	r3, r3, #3
 804337a:	2b03      	cmp	r3, #3
 804337c:	d816      	bhi.n	80433ac <UART_SetConfig+0xb8>
 804337e:	a201      	add	r2, pc, #4	; (adr r2, 8043384 <UART_SetConfig+0x90>)
 8043380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043384:	08043395 	.word	0x08043395
 8043388:	080433a1 	.word	0x080433a1
 804338c:	0804339b 	.word	0x0804339b
 8043390:	080433a7 	.word	0x080433a7
 8043394:	2301      	movs	r3, #1
 8043396:	77fb      	strb	r3, [r7, #31]
 8043398:	e14f      	b.n	804363a <UART_SetConfig+0x346>
 804339a:	2302      	movs	r3, #2
 804339c:	77fb      	strb	r3, [r7, #31]
 804339e:	e14c      	b.n	804363a <UART_SetConfig+0x346>
 80433a0:	2304      	movs	r3, #4
 80433a2:	77fb      	strb	r3, [r7, #31]
 80433a4:	e149      	b.n	804363a <UART_SetConfig+0x346>
 80433a6:	2308      	movs	r3, #8
 80433a8:	77fb      	strb	r3, [r7, #31]
 80433aa:	e146      	b.n	804363a <UART_SetConfig+0x346>
 80433ac:	2310      	movs	r3, #16
 80433ae:	77fb      	strb	r3, [r7, #31]
 80433b0:	e143      	b.n	804363a <UART_SetConfig+0x346>
 80433b2:	687b      	ldr	r3, [r7, #4]
 80433b4:	681b      	ldr	r3, [r3, #0]
 80433b6:	4a84      	ldr	r2, [pc, #528]	; (80435c8 <UART_SetConfig+0x2d4>)
 80433b8:	4293      	cmp	r3, r2
 80433ba:	d132      	bne.n	8043422 <UART_SetConfig+0x12e>
 80433bc:	4b81      	ldr	r3, [pc, #516]	; (80435c4 <UART_SetConfig+0x2d0>)
 80433be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80433c2:	f003 030c 	and.w	r3, r3, #12
 80433c6:	2b0c      	cmp	r3, #12
 80433c8:	d828      	bhi.n	804341c <UART_SetConfig+0x128>
 80433ca:	a201      	add	r2, pc, #4	; (adr r2, 80433d0 <UART_SetConfig+0xdc>)
 80433cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80433d0:	08043405 	.word	0x08043405
 80433d4:	0804341d 	.word	0x0804341d
 80433d8:	0804341d 	.word	0x0804341d
 80433dc:	0804341d 	.word	0x0804341d
 80433e0:	08043411 	.word	0x08043411
 80433e4:	0804341d 	.word	0x0804341d
 80433e8:	0804341d 	.word	0x0804341d
 80433ec:	0804341d 	.word	0x0804341d
 80433f0:	0804340b 	.word	0x0804340b
 80433f4:	0804341d 	.word	0x0804341d
 80433f8:	0804341d 	.word	0x0804341d
 80433fc:	0804341d 	.word	0x0804341d
 8043400:	08043417 	.word	0x08043417
 8043404:	2300      	movs	r3, #0
 8043406:	77fb      	strb	r3, [r7, #31]
 8043408:	e117      	b.n	804363a <UART_SetConfig+0x346>
 804340a:	2302      	movs	r3, #2
 804340c:	77fb      	strb	r3, [r7, #31]
 804340e:	e114      	b.n	804363a <UART_SetConfig+0x346>
 8043410:	2304      	movs	r3, #4
 8043412:	77fb      	strb	r3, [r7, #31]
 8043414:	e111      	b.n	804363a <UART_SetConfig+0x346>
 8043416:	2308      	movs	r3, #8
 8043418:	77fb      	strb	r3, [r7, #31]
 804341a:	e10e      	b.n	804363a <UART_SetConfig+0x346>
 804341c:	2310      	movs	r3, #16
 804341e:	77fb      	strb	r3, [r7, #31]
 8043420:	e10b      	b.n	804363a <UART_SetConfig+0x346>
 8043422:	687b      	ldr	r3, [r7, #4]
 8043424:	681b      	ldr	r3, [r3, #0]
 8043426:	4a69      	ldr	r2, [pc, #420]	; (80435cc <UART_SetConfig+0x2d8>)
 8043428:	4293      	cmp	r3, r2
 804342a:	d120      	bne.n	804346e <UART_SetConfig+0x17a>
 804342c:	4b65      	ldr	r3, [pc, #404]	; (80435c4 <UART_SetConfig+0x2d0>)
 804342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043432:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8043436:	2b30      	cmp	r3, #48	; 0x30
 8043438:	d013      	beq.n	8043462 <UART_SetConfig+0x16e>
 804343a:	2b30      	cmp	r3, #48	; 0x30
 804343c:	d814      	bhi.n	8043468 <UART_SetConfig+0x174>
 804343e:	2b20      	cmp	r3, #32
 8043440:	d009      	beq.n	8043456 <UART_SetConfig+0x162>
 8043442:	2b20      	cmp	r3, #32
 8043444:	d810      	bhi.n	8043468 <UART_SetConfig+0x174>
 8043446:	2b00      	cmp	r3, #0
 8043448:	d002      	beq.n	8043450 <UART_SetConfig+0x15c>
 804344a:	2b10      	cmp	r3, #16
 804344c:	d006      	beq.n	804345c <UART_SetConfig+0x168>
 804344e:	e00b      	b.n	8043468 <UART_SetConfig+0x174>
 8043450:	2300      	movs	r3, #0
 8043452:	77fb      	strb	r3, [r7, #31]
 8043454:	e0f1      	b.n	804363a <UART_SetConfig+0x346>
 8043456:	2302      	movs	r3, #2
 8043458:	77fb      	strb	r3, [r7, #31]
 804345a:	e0ee      	b.n	804363a <UART_SetConfig+0x346>
 804345c:	2304      	movs	r3, #4
 804345e:	77fb      	strb	r3, [r7, #31]
 8043460:	e0eb      	b.n	804363a <UART_SetConfig+0x346>
 8043462:	2308      	movs	r3, #8
 8043464:	77fb      	strb	r3, [r7, #31]
 8043466:	e0e8      	b.n	804363a <UART_SetConfig+0x346>
 8043468:	2310      	movs	r3, #16
 804346a:	77fb      	strb	r3, [r7, #31]
 804346c:	e0e5      	b.n	804363a <UART_SetConfig+0x346>
 804346e:	687b      	ldr	r3, [r7, #4]
 8043470:	681b      	ldr	r3, [r3, #0]
 8043472:	4a57      	ldr	r2, [pc, #348]	; (80435d0 <UART_SetConfig+0x2dc>)
 8043474:	4293      	cmp	r3, r2
 8043476:	d120      	bne.n	80434ba <UART_SetConfig+0x1c6>
 8043478:	4b52      	ldr	r3, [pc, #328]	; (80435c4 <UART_SetConfig+0x2d0>)
 804347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804347e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8043482:	2bc0      	cmp	r3, #192	; 0xc0
 8043484:	d013      	beq.n	80434ae <UART_SetConfig+0x1ba>
 8043486:	2bc0      	cmp	r3, #192	; 0xc0
 8043488:	d814      	bhi.n	80434b4 <UART_SetConfig+0x1c0>
 804348a:	2b80      	cmp	r3, #128	; 0x80
 804348c:	d009      	beq.n	80434a2 <UART_SetConfig+0x1ae>
 804348e:	2b80      	cmp	r3, #128	; 0x80
 8043490:	d810      	bhi.n	80434b4 <UART_SetConfig+0x1c0>
 8043492:	2b00      	cmp	r3, #0
 8043494:	d002      	beq.n	804349c <UART_SetConfig+0x1a8>
 8043496:	2b40      	cmp	r3, #64	; 0x40
 8043498:	d006      	beq.n	80434a8 <UART_SetConfig+0x1b4>
 804349a:	e00b      	b.n	80434b4 <UART_SetConfig+0x1c0>
 804349c:	2300      	movs	r3, #0
 804349e:	77fb      	strb	r3, [r7, #31]
 80434a0:	e0cb      	b.n	804363a <UART_SetConfig+0x346>
 80434a2:	2302      	movs	r3, #2
 80434a4:	77fb      	strb	r3, [r7, #31]
 80434a6:	e0c8      	b.n	804363a <UART_SetConfig+0x346>
 80434a8:	2304      	movs	r3, #4
 80434aa:	77fb      	strb	r3, [r7, #31]
 80434ac:	e0c5      	b.n	804363a <UART_SetConfig+0x346>
 80434ae:	2308      	movs	r3, #8
 80434b0:	77fb      	strb	r3, [r7, #31]
 80434b2:	e0c2      	b.n	804363a <UART_SetConfig+0x346>
 80434b4:	2310      	movs	r3, #16
 80434b6:	77fb      	strb	r3, [r7, #31]
 80434b8:	e0bf      	b.n	804363a <UART_SetConfig+0x346>
 80434ba:	687b      	ldr	r3, [r7, #4]
 80434bc:	681b      	ldr	r3, [r3, #0]
 80434be:	4a45      	ldr	r2, [pc, #276]	; (80435d4 <UART_SetConfig+0x2e0>)
 80434c0:	4293      	cmp	r3, r2
 80434c2:	d125      	bne.n	8043510 <UART_SetConfig+0x21c>
 80434c4:	4b3f      	ldr	r3, [pc, #252]	; (80435c4 <UART_SetConfig+0x2d0>)
 80434c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80434ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80434ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80434d2:	d017      	beq.n	8043504 <UART_SetConfig+0x210>
 80434d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80434d8:	d817      	bhi.n	804350a <UART_SetConfig+0x216>
 80434da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80434de:	d00b      	beq.n	80434f8 <UART_SetConfig+0x204>
 80434e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80434e4:	d811      	bhi.n	804350a <UART_SetConfig+0x216>
 80434e6:	2b00      	cmp	r3, #0
 80434e8:	d003      	beq.n	80434f2 <UART_SetConfig+0x1fe>
 80434ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80434ee:	d006      	beq.n	80434fe <UART_SetConfig+0x20a>
 80434f0:	e00b      	b.n	804350a <UART_SetConfig+0x216>
 80434f2:	2300      	movs	r3, #0
 80434f4:	77fb      	strb	r3, [r7, #31]
 80434f6:	e0a0      	b.n	804363a <UART_SetConfig+0x346>
 80434f8:	2302      	movs	r3, #2
 80434fa:	77fb      	strb	r3, [r7, #31]
 80434fc:	e09d      	b.n	804363a <UART_SetConfig+0x346>
 80434fe:	2304      	movs	r3, #4
 8043500:	77fb      	strb	r3, [r7, #31]
 8043502:	e09a      	b.n	804363a <UART_SetConfig+0x346>
 8043504:	2308      	movs	r3, #8
 8043506:	77fb      	strb	r3, [r7, #31]
 8043508:	e097      	b.n	804363a <UART_SetConfig+0x346>
 804350a:	2310      	movs	r3, #16
 804350c:	77fb      	strb	r3, [r7, #31]
 804350e:	e094      	b.n	804363a <UART_SetConfig+0x346>
 8043510:	687b      	ldr	r3, [r7, #4]
 8043512:	681b      	ldr	r3, [r3, #0]
 8043514:	4a30      	ldr	r2, [pc, #192]	; (80435d8 <UART_SetConfig+0x2e4>)
 8043516:	4293      	cmp	r3, r2
 8043518:	d125      	bne.n	8043566 <UART_SetConfig+0x272>
 804351a:	4b2a      	ldr	r3, [pc, #168]	; (80435c4 <UART_SetConfig+0x2d0>)
 804351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8043524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043528:	d017      	beq.n	804355a <UART_SetConfig+0x266>
 804352a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804352e:	d817      	bhi.n	8043560 <UART_SetConfig+0x26c>
 8043530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043534:	d00b      	beq.n	804354e <UART_SetConfig+0x25a>
 8043536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804353a:	d811      	bhi.n	8043560 <UART_SetConfig+0x26c>
 804353c:	2b00      	cmp	r3, #0
 804353e:	d003      	beq.n	8043548 <UART_SetConfig+0x254>
 8043540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043544:	d006      	beq.n	8043554 <UART_SetConfig+0x260>
 8043546:	e00b      	b.n	8043560 <UART_SetConfig+0x26c>
 8043548:	2301      	movs	r3, #1
 804354a:	77fb      	strb	r3, [r7, #31]
 804354c:	e075      	b.n	804363a <UART_SetConfig+0x346>
 804354e:	2302      	movs	r3, #2
 8043550:	77fb      	strb	r3, [r7, #31]
 8043552:	e072      	b.n	804363a <UART_SetConfig+0x346>
 8043554:	2304      	movs	r3, #4
 8043556:	77fb      	strb	r3, [r7, #31]
 8043558:	e06f      	b.n	804363a <UART_SetConfig+0x346>
 804355a:	2308      	movs	r3, #8
 804355c:	77fb      	strb	r3, [r7, #31]
 804355e:	e06c      	b.n	804363a <UART_SetConfig+0x346>
 8043560:	2310      	movs	r3, #16
 8043562:	77fb      	strb	r3, [r7, #31]
 8043564:	e069      	b.n	804363a <UART_SetConfig+0x346>
 8043566:	687b      	ldr	r3, [r7, #4]
 8043568:	681b      	ldr	r3, [r3, #0]
 804356a:	4a1c      	ldr	r2, [pc, #112]	; (80435dc <UART_SetConfig+0x2e8>)
 804356c:	4293      	cmp	r3, r2
 804356e:	d137      	bne.n	80435e0 <UART_SetConfig+0x2ec>
 8043570:	4b14      	ldr	r3, [pc, #80]	; (80435c4 <UART_SetConfig+0x2d0>)
 8043572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043576:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 804357a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 804357e:	d017      	beq.n	80435b0 <UART_SetConfig+0x2bc>
 8043580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8043584:	d817      	bhi.n	80435b6 <UART_SetConfig+0x2c2>
 8043586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804358a:	d00b      	beq.n	80435a4 <UART_SetConfig+0x2b0>
 804358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043590:	d811      	bhi.n	80435b6 <UART_SetConfig+0x2c2>
 8043592:	2b00      	cmp	r3, #0
 8043594:	d003      	beq.n	804359e <UART_SetConfig+0x2aa>
 8043596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804359a:	d006      	beq.n	80435aa <UART_SetConfig+0x2b6>
 804359c:	e00b      	b.n	80435b6 <UART_SetConfig+0x2c2>
 804359e:	2300      	movs	r3, #0
 80435a0:	77fb      	strb	r3, [r7, #31]
 80435a2:	e04a      	b.n	804363a <UART_SetConfig+0x346>
 80435a4:	2302      	movs	r3, #2
 80435a6:	77fb      	strb	r3, [r7, #31]
 80435a8:	e047      	b.n	804363a <UART_SetConfig+0x346>
 80435aa:	2304      	movs	r3, #4
 80435ac:	77fb      	strb	r3, [r7, #31]
 80435ae:	e044      	b.n	804363a <UART_SetConfig+0x346>
 80435b0:	2308      	movs	r3, #8
 80435b2:	77fb      	strb	r3, [r7, #31]
 80435b4:	e041      	b.n	804363a <UART_SetConfig+0x346>
 80435b6:	2310      	movs	r3, #16
 80435b8:	77fb      	strb	r3, [r7, #31]
 80435ba:	e03e      	b.n	804363a <UART_SetConfig+0x346>
 80435bc:	efff69f3 	.word	0xefff69f3
 80435c0:	40011000 	.word	0x40011000
 80435c4:	40023800 	.word	0x40023800
 80435c8:	40004400 	.word	0x40004400
 80435cc:	40004800 	.word	0x40004800
 80435d0:	40004c00 	.word	0x40004c00
 80435d4:	40005000 	.word	0x40005000
 80435d8:	40011400 	.word	0x40011400
 80435dc:	40007800 	.word	0x40007800
 80435e0:	687b      	ldr	r3, [r7, #4]
 80435e2:	681b      	ldr	r3, [r3, #0]
 80435e4:	4a71      	ldr	r2, [pc, #452]	; (80437ac <UART_SetConfig+0x4b8>)
 80435e6:	4293      	cmp	r3, r2
 80435e8:	d125      	bne.n	8043636 <UART_SetConfig+0x342>
 80435ea:	4b71      	ldr	r3, [pc, #452]	; (80437b0 <UART_SetConfig+0x4bc>)
 80435ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80435f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80435f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80435f8:	d017      	beq.n	804362a <UART_SetConfig+0x336>
 80435fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80435fe:	d817      	bhi.n	8043630 <UART_SetConfig+0x33c>
 8043600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043604:	d00b      	beq.n	804361e <UART_SetConfig+0x32a>
 8043606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804360a:	d811      	bhi.n	8043630 <UART_SetConfig+0x33c>
 804360c:	2b00      	cmp	r3, #0
 804360e:	d003      	beq.n	8043618 <UART_SetConfig+0x324>
 8043610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8043614:	d006      	beq.n	8043624 <UART_SetConfig+0x330>
 8043616:	e00b      	b.n	8043630 <UART_SetConfig+0x33c>
 8043618:	2300      	movs	r3, #0
 804361a:	77fb      	strb	r3, [r7, #31]
 804361c:	e00d      	b.n	804363a <UART_SetConfig+0x346>
 804361e:	2302      	movs	r3, #2
 8043620:	77fb      	strb	r3, [r7, #31]
 8043622:	e00a      	b.n	804363a <UART_SetConfig+0x346>
 8043624:	2304      	movs	r3, #4
 8043626:	77fb      	strb	r3, [r7, #31]
 8043628:	e007      	b.n	804363a <UART_SetConfig+0x346>
 804362a:	2308      	movs	r3, #8
 804362c:	77fb      	strb	r3, [r7, #31]
 804362e:	e004      	b.n	804363a <UART_SetConfig+0x346>
 8043630:	2310      	movs	r3, #16
 8043632:	77fb      	strb	r3, [r7, #31]
 8043634:	e001      	b.n	804363a <UART_SetConfig+0x346>
 8043636:	2310      	movs	r3, #16
 8043638:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804363a:	687b      	ldr	r3, [r7, #4]
 804363c:	69db      	ldr	r3, [r3, #28]
 804363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043642:	d15b      	bne.n	80436fc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8043644:	7ffb      	ldrb	r3, [r7, #31]
 8043646:	2b08      	cmp	r3, #8
 8043648:	d827      	bhi.n	804369a <UART_SetConfig+0x3a6>
 804364a:	a201      	add	r2, pc, #4	; (adr r2, 8043650 <UART_SetConfig+0x35c>)
 804364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043650:	08043675 	.word	0x08043675
 8043654:	0804367d 	.word	0x0804367d
 8043658:	08043685 	.word	0x08043685
 804365c:	0804369b 	.word	0x0804369b
 8043660:	0804368b 	.word	0x0804368b
 8043664:	0804369b 	.word	0x0804369b
 8043668:	0804369b 	.word	0x0804369b
 804366c:	0804369b 	.word	0x0804369b
 8043670:	08043693 	.word	0x08043693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043674:	f7fe fea6 	bl	80423c4 <HAL_RCC_GetPCLK1Freq>
 8043678:	61b8      	str	r0, [r7, #24]
        break;
 804367a:	e013      	b.n	80436a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804367c:	f7fe feb6 	bl	80423ec <HAL_RCC_GetPCLK2Freq>
 8043680:	61b8      	str	r0, [r7, #24]
        break;
 8043682:	e00f      	b.n	80436a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043684:	4b4b      	ldr	r3, [pc, #300]	; (80437b4 <UART_SetConfig+0x4c0>)
 8043686:	61bb      	str	r3, [r7, #24]
        break;
 8043688:	e00c      	b.n	80436a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804368a:	f7fe fdd9 	bl	8042240 <HAL_RCC_GetSysClockFreq>
 804368e:	61b8      	str	r0, [r7, #24]
        break;
 8043690:	e008      	b.n	80436a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043696:	61bb      	str	r3, [r7, #24]
        break;
 8043698:	e004      	b.n	80436a4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 804369a:	2300      	movs	r3, #0
 804369c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804369e:	2301      	movs	r3, #1
 80436a0:	77bb      	strb	r3, [r7, #30]
        break;
 80436a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80436a4:	69bb      	ldr	r3, [r7, #24]
 80436a6:	2b00      	cmp	r3, #0
 80436a8:	d074      	beq.n	8043794 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80436aa:	69bb      	ldr	r3, [r7, #24]
 80436ac:	005a      	lsls	r2, r3, #1
 80436ae:	687b      	ldr	r3, [r7, #4]
 80436b0:	685b      	ldr	r3, [r3, #4]
 80436b2:	085b      	lsrs	r3, r3, #1
 80436b4:	441a      	add	r2, r3
 80436b6:	687b      	ldr	r3, [r7, #4]
 80436b8:	685b      	ldr	r3, [r3, #4]
 80436ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80436be:	b29b      	uxth	r3, r3
 80436c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80436c2:	693b      	ldr	r3, [r7, #16]
 80436c4:	2b0f      	cmp	r3, #15
 80436c6:	d916      	bls.n	80436f6 <UART_SetConfig+0x402>
 80436c8:	693b      	ldr	r3, [r7, #16]
 80436ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80436ce:	d212      	bcs.n	80436f6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80436d0:	693b      	ldr	r3, [r7, #16]
 80436d2:	b29b      	uxth	r3, r3
 80436d4:	f023 030f 	bic.w	r3, r3, #15
 80436d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80436da:	693b      	ldr	r3, [r7, #16]
 80436dc:	085b      	lsrs	r3, r3, #1
 80436de:	b29b      	uxth	r3, r3
 80436e0:	f003 0307 	and.w	r3, r3, #7
 80436e4:	b29a      	uxth	r2, r3
 80436e6:	89fb      	ldrh	r3, [r7, #14]
 80436e8:	4313      	orrs	r3, r2
 80436ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80436ec:	687b      	ldr	r3, [r7, #4]
 80436ee:	681b      	ldr	r3, [r3, #0]
 80436f0:	89fa      	ldrh	r2, [r7, #14]
 80436f2:	60da      	str	r2, [r3, #12]
 80436f4:	e04e      	b.n	8043794 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80436f6:	2301      	movs	r3, #1
 80436f8:	77bb      	strb	r3, [r7, #30]
 80436fa:	e04b      	b.n	8043794 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80436fc:	7ffb      	ldrb	r3, [r7, #31]
 80436fe:	2b08      	cmp	r3, #8
 8043700:	d827      	bhi.n	8043752 <UART_SetConfig+0x45e>
 8043702:	a201      	add	r2, pc, #4	; (adr r2, 8043708 <UART_SetConfig+0x414>)
 8043704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043708:	0804372d 	.word	0x0804372d
 804370c:	08043735 	.word	0x08043735
 8043710:	0804373d 	.word	0x0804373d
 8043714:	08043753 	.word	0x08043753
 8043718:	08043743 	.word	0x08043743
 804371c:	08043753 	.word	0x08043753
 8043720:	08043753 	.word	0x08043753
 8043724:	08043753 	.word	0x08043753
 8043728:	0804374b 	.word	0x0804374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804372c:	f7fe fe4a 	bl	80423c4 <HAL_RCC_GetPCLK1Freq>
 8043730:	61b8      	str	r0, [r7, #24]
        break;
 8043732:	e013      	b.n	804375c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043734:	f7fe fe5a 	bl	80423ec <HAL_RCC_GetPCLK2Freq>
 8043738:	61b8      	str	r0, [r7, #24]
        break;
 804373a:	e00f      	b.n	804375c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804373c:	4b1d      	ldr	r3, [pc, #116]	; (80437b4 <UART_SetConfig+0x4c0>)
 804373e:	61bb      	str	r3, [r7, #24]
        break;
 8043740:	e00c      	b.n	804375c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043742:	f7fe fd7d 	bl	8042240 <HAL_RCC_GetSysClockFreq>
 8043746:	61b8      	str	r0, [r7, #24]
        break;
 8043748:	e008      	b.n	804375c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804374e:	61bb      	str	r3, [r7, #24]
        break;
 8043750:	e004      	b.n	804375c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8043752:	2300      	movs	r3, #0
 8043754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8043756:	2301      	movs	r3, #1
 8043758:	77bb      	strb	r3, [r7, #30]
        break;
 804375a:	bf00      	nop
    }

    if (pclk != 0U)
 804375c:	69bb      	ldr	r3, [r7, #24]
 804375e:	2b00      	cmp	r3, #0
 8043760:	d018      	beq.n	8043794 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8043762:	687b      	ldr	r3, [r7, #4]
 8043764:	685b      	ldr	r3, [r3, #4]
 8043766:	085a      	lsrs	r2, r3, #1
 8043768:	69bb      	ldr	r3, [r7, #24]
 804376a:	441a      	add	r2, r3
 804376c:	687b      	ldr	r3, [r7, #4]
 804376e:	685b      	ldr	r3, [r3, #4]
 8043770:	fbb2 f3f3 	udiv	r3, r2, r3
 8043774:	b29b      	uxth	r3, r3
 8043776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043778:	693b      	ldr	r3, [r7, #16]
 804377a:	2b0f      	cmp	r3, #15
 804377c:	d908      	bls.n	8043790 <UART_SetConfig+0x49c>
 804377e:	693b      	ldr	r3, [r7, #16]
 8043780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043784:	d204      	bcs.n	8043790 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8043786:	687b      	ldr	r3, [r7, #4]
 8043788:	681b      	ldr	r3, [r3, #0]
 804378a:	693a      	ldr	r2, [r7, #16]
 804378c:	60da      	str	r2, [r3, #12]
 804378e:	e001      	b.n	8043794 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8043790:	2301      	movs	r3, #1
 8043792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8043794:	687b      	ldr	r3, [r7, #4]
 8043796:	2200      	movs	r2, #0
 8043798:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 804379a:	687b      	ldr	r3, [r7, #4]
 804379c:	2200      	movs	r2, #0
 804379e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80437a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80437a2:	4618      	mov	r0, r3
 80437a4:	3720      	adds	r7, #32
 80437a6:	46bd      	mov	sp, r7
 80437a8:	bd80      	pop	{r7, pc}
 80437aa:	bf00      	nop
 80437ac:	40007c00 	.word	0x40007c00
 80437b0:	40023800 	.word	0x40023800
 80437b4:	00f42400 	.word	0x00f42400

080437b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80437b8:	b480      	push	{r7}
 80437ba:	b083      	sub	sp, #12
 80437bc:	af00      	add	r7, sp, #0
 80437be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80437c0:	687b      	ldr	r3, [r7, #4]
 80437c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80437c4:	f003 0301 	and.w	r3, r3, #1
 80437c8:	2b00      	cmp	r3, #0
 80437ca:	d00a      	beq.n	80437e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80437cc:	687b      	ldr	r3, [r7, #4]
 80437ce:	681b      	ldr	r3, [r3, #0]
 80437d0:	685b      	ldr	r3, [r3, #4]
 80437d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80437d6:	687b      	ldr	r3, [r7, #4]
 80437d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80437da:	687b      	ldr	r3, [r7, #4]
 80437dc:	681b      	ldr	r3, [r3, #0]
 80437de:	430a      	orrs	r2, r1
 80437e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80437e2:	687b      	ldr	r3, [r7, #4]
 80437e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80437e6:	f003 0302 	and.w	r3, r3, #2
 80437ea:	2b00      	cmp	r3, #0
 80437ec:	d00a      	beq.n	8043804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80437ee:	687b      	ldr	r3, [r7, #4]
 80437f0:	681b      	ldr	r3, [r3, #0]
 80437f2:	685b      	ldr	r3, [r3, #4]
 80437f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80437f8:	687b      	ldr	r3, [r7, #4]
 80437fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80437fc:	687b      	ldr	r3, [r7, #4]
 80437fe:	681b      	ldr	r3, [r3, #0]
 8043800:	430a      	orrs	r2, r1
 8043802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8043804:	687b      	ldr	r3, [r7, #4]
 8043806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043808:	f003 0304 	and.w	r3, r3, #4
 804380c:	2b00      	cmp	r3, #0
 804380e:	d00a      	beq.n	8043826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8043810:	687b      	ldr	r3, [r7, #4]
 8043812:	681b      	ldr	r3, [r3, #0]
 8043814:	685b      	ldr	r3, [r3, #4]
 8043816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804381a:	687b      	ldr	r3, [r7, #4]
 804381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804381e:	687b      	ldr	r3, [r7, #4]
 8043820:	681b      	ldr	r3, [r3, #0]
 8043822:	430a      	orrs	r2, r1
 8043824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8043826:	687b      	ldr	r3, [r7, #4]
 8043828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804382a:	f003 0308 	and.w	r3, r3, #8
 804382e:	2b00      	cmp	r3, #0
 8043830:	d00a      	beq.n	8043848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8043832:	687b      	ldr	r3, [r7, #4]
 8043834:	681b      	ldr	r3, [r3, #0]
 8043836:	685b      	ldr	r3, [r3, #4]
 8043838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 804383c:	687b      	ldr	r3, [r7, #4]
 804383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043840:	687b      	ldr	r3, [r7, #4]
 8043842:	681b      	ldr	r3, [r3, #0]
 8043844:	430a      	orrs	r2, r1
 8043846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043848:	687b      	ldr	r3, [r7, #4]
 804384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804384c:	f003 0310 	and.w	r3, r3, #16
 8043850:	2b00      	cmp	r3, #0
 8043852:	d00a      	beq.n	804386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8043854:	687b      	ldr	r3, [r7, #4]
 8043856:	681b      	ldr	r3, [r3, #0]
 8043858:	689b      	ldr	r3, [r3, #8]
 804385a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804385e:	687b      	ldr	r3, [r7, #4]
 8043860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043862:	687b      	ldr	r3, [r7, #4]
 8043864:	681b      	ldr	r3, [r3, #0]
 8043866:	430a      	orrs	r2, r1
 8043868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804386a:	687b      	ldr	r3, [r7, #4]
 804386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804386e:	f003 0320 	and.w	r3, r3, #32
 8043872:	2b00      	cmp	r3, #0
 8043874:	d00a      	beq.n	804388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8043876:	687b      	ldr	r3, [r7, #4]
 8043878:	681b      	ldr	r3, [r3, #0]
 804387a:	689b      	ldr	r3, [r3, #8]
 804387c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8043880:	687b      	ldr	r3, [r7, #4]
 8043882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043884:	687b      	ldr	r3, [r7, #4]
 8043886:	681b      	ldr	r3, [r3, #0]
 8043888:	430a      	orrs	r2, r1
 804388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804388c:	687b      	ldr	r3, [r7, #4]
 804388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043894:	2b00      	cmp	r3, #0
 8043896:	d01a      	beq.n	80438ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8043898:	687b      	ldr	r3, [r7, #4]
 804389a:	681b      	ldr	r3, [r3, #0]
 804389c:	685b      	ldr	r3, [r3, #4]
 804389e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80438a2:	687b      	ldr	r3, [r7, #4]
 80438a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80438a6:	687b      	ldr	r3, [r7, #4]
 80438a8:	681b      	ldr	r3, [r3, #0]
 80438aa:	430a      	orrs	r2, r1
 80438ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80438ae:	687b      	ldr	r3, [r7, #4]
 80438b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80438b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80438b6:	d10a      	bne.n	80438ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80438b8:	687b      	ldr	r3, [r7, #4]
 80438ba:	681b      	ldr	r3, [r3, #0]
 80438bc:	685b      	ldr	r3, [r3, #4]
 80438be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80438c2:	687b      	ldr	r3, [r7, #4]
 80438c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80438c6:	687b      	ldr	r3, [r7, #4]
 80438c8:	681b      	ldr	r3, [r3, #0]
 80438ca:	430a      	orrs	r2, r1
 80438cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80438ce:	687b      	ldr	r3, [r7, #4]
 80438d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80438d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80438d6:	2b00      	cmp	r3, #0
 80438d8:	d00a      	beq.n	80438f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80438da:	687b      	ldr	r3, [r7, #4]
 80438dc:	681b      	ldr	r3, [r3, #0]
 80438de:	685b      	ldr	r3, [r3, #4]
 80438e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80438e4:	687b      	ldr	r3, [r7, #4]
 80438e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80438e8:	687b      	ldr	r3, [r7, #4]
 80438ea:	681b      	ldr	r3, [r3, #0]
 80438ec:	430a      	orrs	r2, r1
 80438ee:	605a      	str	r2, [r3, #4]
  }
}
 80438f0:	bf00      	nop
 80438f2:	370c      	adds	r7, #12
 80438f4:	46bd      	mov	sp, r7
 80438f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438fa:	4770      	bx	lr

080438fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80438fc:	b580      	push	{r7, lr}
 80438fe:	b086      	sub	sp, #24
 8043900:	af02      	add	r7, sp, #8
 8043902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043904:	687b      	ldr	r3, [r7, #4]
 8043906:	2200      	movs	r2, #0
 8043908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804390c:	f7fd fa8e 	bl	8040e2c <HAL_GetTick>
 8043910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8043912:	687b      	ldr	r3, [r7, #4]
 8043914:	681b      	ldr	r3, [r3, #0]
 8043916:	681b      	ldr	r3, [r3, #0]
 8043918:	f003 0308 	and.w	r3, r3, #8
 804391c:	2b08      	cmp	r3, #8
 804391e:	d10e      	bne.n	804393e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043924:	9300      	str	r3, [sp, #0]
 8043926:	68fb      	ldr	r3, [r7, #12]
 8043928:	2200      	movs	r2, #0
 804392a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804392e:	6878      	ldr	r0, [r7, #4]
 8043930:	f000 f82d 	bl	804398e <UART_WaitOnFlagUntilTimeout>
 8043934:	4603      	mov	r3, r0
 8043936:	2b00      	cmp	r3, #0
 8043938:	d001      	beq.n	804393e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804393a:	2303      	movs	r3, #3
 804393c:	e023      	b.n	8043986 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804393e:	687b      	ldr	r3, [r7, #4]
 8043940:	681b      	ldr	r3, [r3, #0]
 8043942:	681b      	ldr	r3, [r3, #0]
 8043944:	f003 0304 	and.w	r3, r3, #4
 8043948:	2b04      	cmp	r3, #4
 804394a:	d10e      	bne.n	804396a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804394c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043950:	9300      	str	r3, [sp, #0]
 8043952:	68fb      	ldr	r3, [r7, #12]
 8043954:	2200      	movs	r2, #0
 8043956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804395a:	6878      	ldr	r0, [r7, #4]
 804395c:	f000 f817 	bl	804398e <UART_WaitOnFlagUntilTimeout>
 8043960:	4603      	mov	r3, r0
 8043962:	2b00      	cmp	r3, #0
 8043964:	d001      	beq.n	804396a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043966:	2303      	movs	r3, #3
 8043968:	e00d      	b.n	8043986 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 804396a:	687b      	ldr	r3, [r7, #4]
 804396c:	2220      	movs	r2, #32
 804396e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8043970:	687b      	ldr	r3, [r7, #4]
 8043972:	2220      	movs	r2, #32
 8043974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043976:	687b      	ldr	r3, [r7, #4]
 8043978:	2200      	movs	r2, #0
 804397a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 804397c:	687b      	ldr	r3, [r7, #4]
 804397e:	2200      	movs	r2, #0
 8043980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8043984:	2300      	movs	r3, #0
}
 8043986:	4618      	mov	r0, r3
 8043988:	3710      	adds	r7, #16
 804398a:	46bd      	mov	sp, r7
 804398c:	bd80      	pop	{r7, pc}

0804398e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804398e:	b580      	push	{r7, lr}
 8043990:	b084      	sub	sp, #16
 8043992:	af00      	add	r7, sp, #0
 8043994:	60f8      	str	r0, [r7, #12]
 8043996:	60b9      	str	r1, [r7, #8]
 8043998:	603b      	str	r3, [r7, #0]
 804399a:	4613      	mov	r3, r2
 804399c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804399e:	e05e      	b.n	8043a5e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80439a0:	69bb      	ldr	r3, [r7, #24]
 80439a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80439a6:	d05a      	beq.n	8043a5e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80439a8:	f7fd fa40 	bl	8040e2c <HAL_GetTick>
 80439ac:	4602      	mov	r2, r0
 80439ae:	683b      	ldr	r3, [r7, #0]
 80439b0:	1ad3      	subs	r3, r2, r3
 80439b2:	69ba      	ldr	r2, [r7, #24]
 80439b4:	429a      	cmp	r2, r3
 80439b6:	d302      	bcc.n	80439be <UART_WaitOnFlagUntilTimeout+0x30>
 80439b8:	69bb      	ldr	r3, [r7, #24]
 80439ba:	2b00      	cmp	r3, #0
 80439bc:	d11b      	bne.n	80439f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80439be:	68fb      	ldr	r3, [r7, #12]
 80439c0:	681b      	ldr	r3, [r3, #0]
 80439c2:	681a      	ldr	r2, [r3, #0]
 80439c4:	68fb      	ldr	r3, [r7, #12]
 80439c6:	681b      	ldr	r3, [r3, #0]
 80439c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80439cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80439ce:	68fb      	ldr	r3, [r7, #12]
 80439d0:	681b      	ldr	r3, [r3, #0]
 80439d2:	689a      	ldr	r2, [r3, #8]
 80439d4:	68fb      	ldr	r3, [r7, #12]
 80439d6:	681b      	ldr	r3, [r3, #0]
 80439d8:	f022 0201 	bic.w	r2, r2, #1
 80439dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80439de:	68fb      	ldr	r3, [r7, #12]
 80439e0:	2220      	movs	r2, #32
 80439e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80439e4:	68fb      	ldr	r3, [r7, #12]
 80439e6:	2220      	movs	r2, #32
 80439e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80439ea:	68fb      	ldr	r3, [r7, #12]
 80439ec:	2200      	movs	r2, #0
 80439ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80439f2:	2303      	movs	r3, #3
 80439f4:	e043      	b.n	8043a7e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80439f6:	68fb      	ldr	r3, [r7, #12]
 80439f8:	681b      	ldr	r3, [r3, #0]
 80439fa:	681b      	ldr	r3, [r3, #0]
 80439fc:	f003 0304 	and.w	r3, r3, #4
 8043a00:	2b00      	cmp	r3, #0
 8043a02:	d02c      	beq.n	8043a5e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8043a04:	68fb      	ldr	r3, [r7, #12]
 8043a06:	681b      	ldr	r3, [r3, #0]
 8043a08:	69db      	ldr	r3, [r3, #28]
 8043a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043a12:	d124      	bne.n	8043a5e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043a14:	68fb      	ldr	r3, [r7, #12]
 8043a16:	681b      	ldr	r3, [r3, #0]
 8043a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8043a1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8043a1e:	68fb      	ldr	r3, [r7, #12]
 8043a20:	681b      	ldr	r3, [r3, #0]
 8043a22:	681a      	ldr	r2, [r3, #0]
 8043a24:	68fb      	ldr	r3, [r7, #12]
 8043a26:	681b      	ldr	r3, [r3, #0]
 8043a28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043a2c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043a2e:	68fb      	ldr	r3, [r7, #12]
 8043a30:	681b      	ldr	r3, [r3, #0]
 8043a32:	689a      	ldr	r2, [r3, #8]
 8043a34:	68fb      	ldr	r3, [r7, #12]
 8043a36:	681b      	ldr	r3, [r3, #0]
 8043a38:	f022 0201 	bic.w	r2, r2, #1
 8043a3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8043a3e:	68fb      	ldr	r3, [r7, #12]
 8043a40:	2220      	movs	r2, #32
 8043a42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8043a44:	68fb      	ldr	r3, [r7, #12]
 8043a46:	2220      	movs	r2, #32
 8043a48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8043a4a:	68fb      	ldr	r3, [r7, #12]
 8043a4c:	2220      	movs	r2, #32
 8043a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8043a52:	68fb      	ldr	r3, [r7, #12]
 8043a54:	2200      	movs	r2, #0
 8043a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8043a5a:	2303      	movs	r3, #3
 8043a5c:	e00f      	b.n	8043a7e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043a5e:	68fb      	ldr	r3, [r7, #12]
 8043a60:	681b      	ldr	r3, [r3, #0]
 8043a62:	69da      	ldr	r2, [r3, #28]
 8043a64:	68bb      	ldr	r3, [r7, #8]
 8043a66:	4013      	ands	r3, r2
 8043a68:	68ba      	ldr	r2, [r7, #8]
 8043a6a:	429a      	cmp	r2, r3
 8043a6c:	bf0c      	ite	eq
 8043a6e:	2301      	moveq	r3, #1
 8043a70:	2300      	movne	r3, #0
 8043a72:	b2db      	uxtb	r3, r3
 8043a74:	461a      	mov	r2, r3
 8043a76:	79fb      	ldrb	r3, [r7, #7]
 8043a78:	429a      	cmp	r2, r3
 8043a7a:	d091      	beq.n	80439a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8043a7c:	2300      	movs	r3, #0
}
 8043a7e:	4618      	mov	r0, r3
 8043a80:	3710      	adds	r7, #16
 8043a82:	46bd      	mov	sp, r7
 8043a84:	bd80      	pop	{r7, pc}
	...

08043a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8043a88:	b480      	push	{r7}
 8043a8a:	b085      	sub	sp, #20
 8043a8c:	af00      	add	r7, sp, #0
 8043a8e:	60f8      	str	r0, [r7, #12]
 8043a90:	60b9      	str	r1, [r7, #8]
 8043a92:	4613      	mov	r3, r2
 8043a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8043a96:	68fb      	ldr	r3, [r7, #12]
 8043a98:	68ba      	ldr	r2, [r7, #8]
 8043a9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8043a9c:	68fb      	ldr	r3, [r7, #12]
 8043a9e:	88fa      	ldrh	r2, [r7, #6]
 8043aa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8043aa4:	68fb      	ldr	r3, [r7, #12]
 8043aa6:	88fa      	ldrh	r2, [r7, #6]
 8043aa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8043aac:	68fb      	ldr	r3, [r7, #12]
 8043aae:	2200      	movs	r2, #0
 8043ab0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8043ab2:	68fb      	ldr	r3, [r7, #12]
 8043ab4:	689b      	ldr	r3, [r3, #8]
 8043ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043aba:	d10e      	bne.n	8043ada <UART_Start_Receive_IT+0x52>
 8043abc:	68fb      	ldr	r3, [r7, #12]
 8043abe:	691b      	ldr	r3, [r3, #16]
 8043ac0:	2b00      	cmp	r3, #0
 8043ac2:	d105      	bne.n	8043ad0 <UART_Start_Receive_IT+0x48>
 8043ac4:	68fb      	ldr	r3, [r7, #12]
 8043ac6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8043aca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8043ace:	e02d      	b.n	8043b2c <UART_Start_Receive_IT+0xa4>
 8043ad0:	68fb      	ldr	r3, [r7, #12]
 8043ad2:	22ff      	movs	r2, #255	; 0xff
 8043ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8043ad8:	e028      	b.n	8043b2c <UART_Start_Receive_IT+0xa4>
 8043ada:	68fb      	ldr	r3, [r7, #12]
 8043adc:	689b      	ldr	r3, [r3, #8]
 8043ade:	2b00      	cmp	r3, #0
 8043ae0:	d10d      	bne.n	8043afe <UART_Start_Receive_IT+0x76>
 8043ae2:	68fb      	ldr	r3, [r7, #12]
 8043ae4:	691b      	ldr	r3, [r3, #16]
 8043ae6:	2b00      	cmp	r3, #0
 8043ae8:	d104      	bne.n	8043af4 <UART_Start_Receive_IT+0x6c>
 8043aea:	68fb      	ldr	r3, [r7, #12]
 8043aec:	22ff      	movs	r2, #255	; 0xff
 8043aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8043af2:	e01b      	b.n	8043b2c <UART_Start_Receive_IT+0xa4>
 8043af4:	68fb      	ldr	r3, [r7, #12]
 8043af6:	227f      	movs	r2, #127	; 0x7f
 8043af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8043afc:	e016      	b.n	8043b2c <UART_Start_Receive_IT+0xa4>
 8043afe:	68fb      	ldr	r3, [r7, #12]
 8043b00:	689b      	ldr	r3, [r3, #8]
 8043b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8043b06:	d10d      	bne.n	8043b24 <UART_Start_Receive_IT+0x9c>
 8043b08:	68fb      	ldr	r3, [r7, #12]
 8043b0a:	691b      	ldr	r3, [r3, #16]
 8043b0c:	2b00      	cmp	r3, #0
 8043b0e:	d104      	bne.n	8043b1a <UART_Start_Receive_IT+0x92>
 8043b10:	68fb      	ldr	r3, [r7, #12]
 8043b12:	227f      	movs	r2, #127	; 0x7f
 8043b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8043b18:	e008      	b.n	8043b2c <UART_Start_Receive_IT+0xa4>
 8043b1a:	68fb      	ldr	r3, [r7, #12]
 8043b1c:	223f      	movs	r2, #63	; 0x3f
 8043b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8043b22:	e003      	b.n	8043b2c <UART_Start_Receive_IT+0xa4>
 8043b24:	68fb      	ldr	r3, [r7, #12]
 8043b26:	2200      	movs	r2, #0
 8043b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043b2c:	68fb      	ldr	r3, [r7, #12]
 8043b2e:	2200      	movs	r2, #0
 8043b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8043b34:	68fb      	ldr	r3, [r7, #12]
 8043b36:	2222      	movs	r2, #34	; 0x22
 8043b38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043b3a:	68fb      	ldr	r3, [r7, #12]
 8043b3c:	681b      	ldr	r3, [r3, #0]
 8043b3e:	689a      	ldr	r2, [r3, #8]
 8043b40:	68fb      	ldr	r3, [r7, #12]
 8043b42:	681b      	ldr	r3, [r3, #0]
 8043b44:	f042 0201 	orr.w	r2, r2, #1
 8043b48:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8043b4a:	68fb      	ldr	r3, [r7, #12]
 8043b4c:	689b      	ldr	r3, [r3, #8]
 8043b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043b52:	d107      	bne.n	8043b64 <UART_Start_Receive_IT+0xdc>
 8043b54:	68fb      	ldr	r3, [r7, #12]
 8043b56:	691b      	ldr	r3, [r3, #16]
 8043b58:	2b00      	cmp	r3, #0
 8043b5a:	d103      	bne.n	8043b64 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8043b5c:	68fb      	ldr	r3, [r7, #12]
 8043b5e:	4a0c      	ldr	r2, [pc, #48]	; (8043b90 <UART_Start_Receive_IT+0x108>)
 8043b60:	665a      	str	r2, [r3, #100]	; 0x64
 8043b62:	e002      	b.n	8043b6a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8043b64:	68fb      	ldr	r3, [r7, #12]
 8043b66:	4a0b      	ldr	r2, [pc, #44]	; (8043b94 <UART_Start_Receive_IT+0x10c>)
 8043b68:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8043b6a:	68fb      	ldr	r3, [r7, #12]
 8043b6c:	2200      	movs	r2, #0
 8043b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8043b72:	68fb      	ldr	r3, [r7, #12]
 8043b74:	681b      	ldr	r3, [r3, #0]
 8043b76:	681a      	ldr	r2, [r3, #0]
 8043b78:	68fb      	ldr	r3, [r7, #12]
 8043b7a:	681b      	ldr	r3, [r3, #0]
 8043b7c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8043b80:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8043b82:	2300      	movs	r3, #0
}
 8043b84:	4618      	mov	r0, r3
 8043b86:	3714      	adds	r7, #20
 8043b88:	46bd      	mov	sp, r7
 8043b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b8e:	4770      	bx	lr
 8043b90:	08043d29 	.word	0x08043d29
 8043b94:	08043c55 	.word	0x08043c55

08043b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8043b98:	b480      	push	{r7}
 8043b9a:	b083      	sub	sp, #12
 8043b9c:	af00      	add	r7, sp, #0
 8043b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8043ba0:	687b      	ldr	r3, [r7, #4]
 8043ba2:	681b      	ldr	r3, [r3, #0]
 8043ba4:	681a      	ldr	r2, [r3, #0]
 8043ba6:	687b      	ldr	r3, [r7, #4]
 8043ba8:	681b      	ldr	r3, [r3, #0]
 8043baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8043bae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043bb0:	687b      	ldr	r3, [r7, #4]
 8043bb2:	681b      	ldr	r3, [r3, #0]
 8043bb4:	689a      	ldr	r2, [r3, #8]
 8043bb6:	687b      	ldr	r3, [r7, #4]
 8043bb8:	681b      	ldr	r3, [r3, #0]
 8043bba:	f022 0201 	bic.w	r2, r2, #1
 8043bbe:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043bc0:	687b      	ldr	r3, [r7, #4]
 8043bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043bc4:	2b01      	cmp	r3, #1
 8043bc6:	d107      	bne.n	8043bd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043bc8:	687b      	ldr	r3, [r7, #4]
 8043bca:	681b      	ldr	r3, [r3, #0]
 8043bcc:	681a      	ldr	r2, [r3, #0]
 8043bce:	687b      	ldr	r3, [r7, #4]
 8043bd0:	681b      	ldr	r3, [r3, #0]
 8043bd2:	f022 0210 	bic.w	r2, r2, #16
 8043bd6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8043bd8:	687b      	ldr	r3, [r7, #4]
 8043bda:	2220      	movs	r2, #32
 8043bdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	2200      	movs	r2, #0
 8043be2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8043be4:	687b      	ldr	r3, [r7, #4]
 8043be6:	2200      	movs	r2, #0
 8043be8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8043bea:	bf00      	nop
 8043bec:	370c      	adds	r7, #12
 8043bee:	46bd      	mov	sp, r7
 8043bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bf4:	4770      	bx	lr

08043bf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8043bf6:	b580      	push	{r7, lr}
 8043bf8:	b084      	sub	sp, #16
 8043bfa:	af00      	add	r7, sp, #0
 8043bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8043bfe:	687b      	ldr	r3, [r7, #4]
 8043c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8043c04:	68fb      	ldr	r3, [r7, #12]
 8043c06:	2200      	movs	r2, #0
 8043c08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8043c0c:	68fb      	ldr	r3, [r7, #12]
 8043c0e:	2200      	movs	r2, #0
 8043c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8043c14:	68f8      	ldr	r0, [r7, #12]
 8043c16:	f7ff fb4d 	bl	80432b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043c1a:	bf00      	nop
 8043c1c:	3710      	adds	r7, #16
 8043c1e:	46bd      	mov	sp, r7
 8043c20:	bd80      	pop	{r7, pc}

08043c22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8043c22:	b580      	push	{r7, lr}
 8043c24:	b082      	sub	sp, #8
 8043c26:	af00      	add	r7, sp, #0
 8043c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043c2a:	687b      	ldr	r3, [r7, #4]
 8043c2c:	681b      	ldr	r3, [r3, #0]
 8043c2e:	681a      	ldr	r2, [r3, #0]
 8043c30:	687b      	ldr	r3, [r7, #4]
 8043c32:	681b      	ldr	r3, [r3, #0]
 8043c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043c38:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8043c3a:	687b      	ldr	r3, [r7, #4]
 8043c3c:	2220      	movs	r2, #32
 8043c3e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8043c40:	687b      	ldr	r3, [r7, #4]
 8043c42:	2200      	movs	r2, #0
 8043c44:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8043c46:	6878      	ldr	r0, [r7, #4]
 8043c48:	f7ff fb2a 	bl	80432a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043c4c:	bf00      	nop
 8043c4e:	3708      	adds	r7, #8
 8043c50:	46bd      	mov	sp, r7
 8043c52:	bd80      	pop	{r7, pc}

08043c54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8043c54:	b580      	push	{r7, lr}
 8043c56:	b084      	sub	sp, #16
 8043c58:	af00      	add	r7, sp, #0
 8043c5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8043c5c:	687b      	ldr	r3, [r7, #4]
 8043c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8043c62:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8043c64:	687b      	ldr	r3, [r7, #4]
 8043c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043c68:	2b22      	cmp	r3, #34	; 0x22
 8043c6a:	d151      	bne.n	8043d10 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	681b      	ldr	r3, [r3, #0]
 8043c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043c72:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8043c74:	89bb      	ldrh	r3, [r7, #12]
 8043c76:	b2d9      	uxtb	r1, r3
 8043c78:	89fb      	ldrh	r3, [r7, #14]
 8043c7a:	b2da      	uxtb	r2, r3
 8043c7c:	687b      	ldr	r3, [r7, #4]
 8043c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043c80:	400a      	ands	r2, r1
 8043c82:	b2d2      	uxtb	r2, r2
 8043c84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8043c86:	687b      	ldr	r3, [r7, #4]
 8043c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043c8a:	1c5a      	adds	r2, r3, #1
 8043c8c:	687b      	ldr	r3, [r7, #4]
 8043c8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8043c90:	687b      	ldr	r3, [r7, #4]
 8043c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043c96:	b29b      	uxth	r3, r3
 8043c98:	3b01      	subs	r3, #1
 8043c9a:	b29a      	uxth	r2, r3
 8043c9c:	687b      	ldr	r3, [r7, #4]
 8043c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8043ca2:	687b      	ldr	r3, [r7, #4]
 8043ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043ca8:	b29b      	uxth	r3, r3
 8043caa:	2b00      	cmp	r3, #0
 8043cac:	d138      	bne.n	8043d20 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8043cae:	687b      	ldr	r3, [r7, #4]
 8043cb0:	681b      	ldr	r3, [r3, #0]
 8043cb2:	681a      	ldr	r2, [r3, #0]
 8043cb4:	687b      	ldr	r3, [r7, #4]
 8043cb6:	681b      	ldr	r3, [r3, #0]
 8043cb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8043cbc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043cbe:	687b      	ldr	r3, [r7, #4]
 8043cc0:	681b      	ldr	r3, [r3, #0]
 8043cc2:	689a      	ldr	r2, [r3, #8]
 8043cc4:	687b      	ldr	r3, [r7, #4]
 8043cc6:	681b      	ldr	r3, [r3, #0]
 8043cc8:	f022 0201 	bic.w	r2, r2, #1
 8043ccc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8043cce:	687b      	ldr	r3, [r7, #4]
 8043cd0:	2220      	movs	r2, #32
 8043cd2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8043cd4:	687b      	ldr	r3, [r7, #4]
 8043cd6:	2200      	movs	r2, #0
 8043cd8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043cda:	687b      	ldr	r3, [r7, #4]
 8043cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043cde:	2b01      	cmp	r3, #1
 8043ce0:	d10f      	bne.n	8043d02 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043ce2:	687b      	ldr	r3, [r7, #4]
 8043ce4:	681b      	ldr	r3, [r3, #0]
 8043ce6:	681a      	ldr	r2, [r3, #0]
 8043ce8:	687b      	ldr	r3, [r7, #4]
 8043cea:	681b      	ldr	r3, [r3, #0]
 8043cec:	f022 0210 	bic.w	r2, r2, #16
 8043cf0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8043cf2:	687b      	ldr	r3, [r7, #4]
 8043cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8043cf8:	4619      	mov	r1, r3
 8043cfa:	6878      	ldr	r0, [r7, #4]
 8043cfc:	f7ff fae4 	bl	80432c8 <HAL_UARTEx_RxEventCallback>
 8043d00:	e002      	b.n	8043d08 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8043d02:	6878      	ldr	r0, [r7, #4]
 8043d04:	f7fc fc68 	bl	80405d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043d08:	687b      	ldr	r3, [r7, #4]
 8043d0a:	2200      	movs	r2, #0
 8043d0c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8043d0e:	e007      	b.n	8043d20 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8043d10:	687b      	ldr	r3, [r7, #4]
 8043d12:	681b      	ldr	r3, [r3, #0]
 8043d14:	699a      	ldr	r2, [r3, #24]
 8043d16:	687b      	ldr	r3, [r7, #4]
 8043d18:	681b      	ldr	r3, [r3, #0]
 8043d1a:	f042 0208 	orr.w	r2, r2, #8
 8043d1e:	619a      	str	r2, [r3, #24]
}
 8043d20:	bf00      	nop
 8043d22:	3710      	adds	r7, #16
 8043d24:	46bd      	mov	sp, r7
 8043d26:	bd80      	pop	{r7, pc}

08043d28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8043d28:	b580      	push	{r7, lr}
 8043d2a:	b084      	sub	sp, #16
 8043d2c:	af00      	add	r7, sp, #0
 8043d2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8043d30:	687b      	ldr	r3, [r7, #4]
 8043d32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8043d36:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8043d38:	687b      	ldr	r3, [r7, #4]
 8043d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043d3c:	2b22      	cmp	r3, #34	; 0x22
 8043d3e:	d151      	bne.n	8043de4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8043d40:	687b      	ldr	r3, [r7, #4]
 8043d42:	681b      	ldr	r3, [r3, #0]
 8043d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043d46:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8043d48:	687b      	ldr	r3, [r7, #4]
 8043d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043d4c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8043d4e:	89ba      	ldrh	r2, [r7, #12]
 8043d50:	89fb      	ldrh	r3, [r7, #14]
 8043d52:	4013      	ands	r3, r2
 8043d54:	b29a      	uxth	r2, r3
 8043d56:	68bb      	ldr	r3, [r7, #8]
 8043d58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8043d5a:	687b      	ldr	r3, [r7, #4]
 8043d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043d5e:	1c9a      	adds	r2, r3, #2
 8043d60:	687b      	ldr	r3, [r7, #4]
 8043d62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8043d64:	687b      	ldr	r3, [r7, #4]
 8043d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043d6a:	b29b      	uxth	r3, r3
 8043d6c:	3b01      	subs	r3, #1
 8043d6e:	b29a      	uxth	r2, r3
 8043d70:	687b      	ldr	r3, [r7, #4]
 8043d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8043d76:	687b      	ldr	r3, [r7, #4]
 8043d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043d7c:	b29b      	uxth	r3, r3
 8043d7e:	2b00      	cmp	r3, #0
 8043d80:	d138      	bne.n	8043df4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8043d82:	687b      	ldr	r3, [r7, #4]
 8043d84:	681b      	ldr	r3, [r3, #0]
 8043d86:	681a      	ldr	r2, [r3, #0]
 8043d88:	687b      	ldr	r3, [r7, #4]
 8043d8a:	681b      	ldr	r3, [r3, #0]
 8043d8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8043d90:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043d92:	687b      	ldr	r3, [r7, #4]
 8043d94:	681b      	ldr	r3, [r3, #0]
 8043d96:	689a      	ldr	r2, [r3, #8]
 8043d98:	687b      	ldr	r3, [r7, #4]
 8043d9a:	681b      	ldr	r3, [r3, #0]
 8043d9c:	f022 0201 	bic.w	r2, r2, #1
 8043da0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8043da2:	687b      	ldr	r3, [r7, #4]
 8043da4:	2220      	movs	r2, #32
 8043da6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8043da8:	687b      	ldr	r3, [r7, #4]
 8043daa:	2200      	movs	r2, #0
 8043dac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043dae:	687b      	ldr	r3, [r7, #4]
 8043db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043db2:	2b01      	cmp	r3, #1
 8043db4:	d10f      	bne.n	8043dd6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043db6:	687b      	ldr	r3, [r7, #4]
 8043db8:	681b      	ldr	r3, [r3, #0]
 8043dba:	681a      	ldr	r2, [r3, #0]
 8043dbc:	687b      	ldr	r3, [r7, #4]
 8043dbe:	681b      	ldr	r3, [r3, #0]
 8043dc0:	f022 0210 	bic.w	r2, r2, #16
 8043dc4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8043dc6:	687b      	ldr	r3, [r7, #4]
 8043dc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8043dcc:	4619      	mov	r1, r3
 8043dce:	6878      	ldr	r0, [r7, #4]
 8043dd0:	f7ff fa7a 	bl	80432c8 <HAL_UARTEx_RxEventCallback>
 8043dd4:	e002      	b.n	8043ddc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8043dd6:	6878      	ldr	r0, [r7, #4]
 8043dd8:	f7fc fbfe 	bl	80405d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043ddc:	687b      	ldr	r3, [r7, #4]
 8043dde:	2200      	movs	r2, #0
 8043de0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8043de2:	e007      	b.n	8043df4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8043de4:	687b      	ldr	r3, [r7, #4]
 8043de6:	681b      	ldr	r3, [r3, #0]
 8043de8:	699a      	ldr	r2, [r3, #24]
 8043dea:	687b      	ldr	r3, [r7, #4]
 8043dec:	681b      	ldr	r3, [r3, #0]
 8043dee:	f042 0208 	orr.w	r2, r2, #8
 8043df2:	619a      	str	r2, [r3, #24]
}
 8043df4:	bf00      	nop
 8043df6:	3710      	adds	r7, #16
 8043df8:	46bd      	mov	sp, r7
 8043dfa:	bd80      	pop	{r7, pc}

08043dfc <__errno>:
 8043dfc:	4b01      	ldr	r3, [pc, #4]	; (8043e04 <__errno+0x8>)
 8043dfe:	6818      	ldr	r0, [r3, #0]
 8043e00:	4770      	bx	lr
 8043e02:	bf00      	nop
 8043e04:	2000000c 	.word	0x2000000c

08043e08 <__libc_init_array>:
 8043e08:	b570      	push	{r4, r5, r6, lr}
 8043e0a:	4d0d      	ldr	r5, [pc, #52]	; (8043e40 <__libc_init_array+0x38>)
 8043e0c:	4c0d      	ldr	r4, [pc, #52]	; (8043e44 <__libc_init_array+0x3c>)
 8043e0e:	1b64      	subs	r4, r4, r5
 8043e10:	10a4      	asrs	r4, r4, #2
 8043e12:	2600      	movs	r6, #0
 8043e14:	42a6      	cmp	r6, r4
 8043e16:	d109      	bne.n	8043e2c <__libc_init_array+0x24>
 8043e18:	4d0b      	ldr	r5, [pc, #44]	; (8043e48 <__libc_init_array+0x40>)
 8043e1a:	4c0c      	ldr	r4, [pc, #48]	; (8043e4c <__libc_init_array+0x44>)
 8043e1c:	f000 fffe 	bl	8044e1c <_init>
 8043e20:	1b64      	subs	r4, r4, r5
 8043e22:	10a4      	asrs	r4, r4, #2
 8043e24:	2600      	movs	r6, #0
 8043e26:	42a6      	cmp	r6, r4
 8043e28:	d105      	bne.n	8043e36 <__libc_init_array+0x2e>
 8043e2a:	bd70      	pop	{r4, r5, r6, pc}
 8043e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8043e30:	4798      	blx	r3
 8043e32:	3601      	adds	r6, #1
 8043e34:	e7ee      	b.n	8043e14 <__libc_init_array+0xc>
 8043e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8043e3a:	4798      	blx	r3
 8043e3c:	3601      	adds	r6, #1
 8043e3e:	e7f2      	b.n	8043e26 <__libc_init_array+0x1e>
 8043e40:	08044f60 	.word	0x08044f60
 8043e44:	08044f60 	.word	0x08044f60
 8043e48:	08044f60 	.word	0x08044f60
 8043e4c:	08044f64 	.word	0x08044f64

08043e50 <memset>:
 8043e50:	4402      	add	r2, r0
 8043e52:	4603      	mov	r3, r0
 8043e54:	4293      	cmp	r3, r2
 8043e56:	d100      	bne.n	8043e5a <memset+0xa>
 8043e58:	4770      	bx	lr
 8043e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8043e5e:	e7f9      	b.n	8043e54 <memset+0x4>

08043e60 <iprintf>:
 8043e60:	b40f      	push	{r0, r1, r2, r3}
 8043e62:	4b0a      	ldr	r3, [pc, #40]	; (8043e8c <iprintf+0x2c>)
 8043e64:	b513      	push	{r0, r1, r4, lr}
 8043e66:	681c      	ldr	r4, [r3, #0]
 8043e68:	b124      	cbz	r4, 8043e74 <iprintf+0x14>
 8043e6a:	69a3      	ldr	r3, [r4, #24]
 8043e6c:	b913      	cbnz	r3, 8043e74 <iprintf+0x14>
 8043e6e:	4620      	mov	r0, r4
 8043e70:	f000 fa70 	bl	8044354 <__sinit>
 8043e74:	ab05      	add	r3, sp, #20
 8043e76:	9a04      	ldr	r2, [sp, #16]
 8043e78:	68a1      	ldr	r1, [r4, #8]
 8043e7a:	9301      	str	r3, [sp, #4]
 8043e7c:	4620      	mov	r0, r4
 8043e7e:	f000 fc41 	bl	8044704 <_vfiprintf_r>
 8043e82:	b002      	add	sp, #8
 8043e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8043e88:	b004      	add	sp, #16
 8043e8a:	4770      	bx	lr
 8043e8c:	2000000c 	.word	0x2000000c

08043e90 <_puts_r>:
 8043e90:	b570      	push	{r4, r5, r6, lr}
 8043e92:	460e      	mov	r6, r1
 8043e94:	4605      	mov	r5, r0
 8043e96:	b118      	cbz	r0, 8043ea0 <_puts_r+0x10>
 8043e98:	6983      	ldr	r3, [r0, #24]
 8043e9a:	b90b      	cbnz	r3, 8043ea0 <_puts_r+0x10>
 8043e9c:	f000 fa5a 	bl	8044354 <__sinit>
 8043ea0:	69ab      	ldr	r3, [r5, #24]
 8043ea2:	68ac      	ldr	r4, [r5, #8]
 8043ea4:	b913      	cbnz	r3, 8043eac <_puts_r+0x1c>
 8043ea6:	4628      	mov	r0, r5
 8043ea8:	f000 fa54 	bl	8044354 <__sinit>
 8043eac:	4b2c      	ldr	r3, [pc, #176]	; (8043f60 <_puts_r+0xd0>)
 8043eae:	429c      	cmp	r4, r3
 8043eb0:	d120      	bne.n	8043ef4 <_puts_r+0x64>
 8043eb2:	686c      	ldr	r4, [r5, #4]
 8043eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043eb6:	07db      	lsls	r3, r3, #31
 8043eb8:	d405      	bmi.n	8043ec6 <_puts_r+0x36>
 8043eba:	89a3      	ldrh	r3, [r4, #12]
 8043ebc:	0598      	lsls	r0, r3, #22
 8043ebe:	d402      	bmi.n	8043ec6 <_puts_r+0x36>
 8043ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043ec2:	f000 fae5 	bl	8044490 <__retarget_lock_acquire_recursive>
 8043ec6:	89a3      	ldrh	r3, [r4, #12]
 8043ec8:	0719      	lsls	r1, r3, #28
 8043eca:	d51d      	bpl.n	8043f08 <_puts_r+0x78>
 8043ecc:	6923      	ldr	r3, [r4, #16]
 8043ece:	b1db      	cbz	r3, 8043f08 <_puts_r+0x78>
 8043ed0:	3e01      	subs	r6, #1
 8043ed2:	68a3      	ldr	r3, [r4, #8]
 8043ed4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8043ed8:	3b01      	subs	r3, #1
 8043eda:	60a3      	str	r3, [r4, #8]
 8043edc:	bb39      	cbnz	r1, 8043f2e <_puts_r+0x9e>
 8043ede:	2b00      	cmp	r3, #0
 8043ee0:	da38      	bge.n	8043f54 <_puts_r+0xc4>
 8043ee2:	4622      	mov	r2, r4
 8043ee4:	210a      	movs	r1, #10
 8043ee6:	4628      	mov	r0, r5
 8043ee8:	f000 f85a 	bl	8043fa0 <__swbuf_r>
 8043eec:	3001      	adds	r0, #1
 8043eee:	d011      	beq.n	8043f14 <_puts_r+0x84>
 8043ef0:	250a      	movs	r5, #10
 8043ef2:	e011      	b.n	8043f18 <_puts_r+0x88>
 8043ef4:	4b1b      	ldr	r3, [pc, #108]	; (8043f64 <_puts_r+0xd4>)
 8043ef6:	429c      	cmp	r4, r3
 8043ef8:	d101      	bne.n	8043efe <_puts_r+0x6e>
 8043efa:	68ac      	ldr	r4, [r5, #8]
 8043efc:	e7da      	b.n	8043eb4 <_puts_r+0x24>
 8043efe:	4b1a      	ldr	r3, [pc, #104]	; (8043f68 <_puts_r+0xd8>)
 8043f00:	429c      	cmp	r4, r3
 8043f02:	bf08      	it	eq
 8043f04:	68ec      	ldreq	r4, [r5, #12]
 8043f06:	e7d5      	b.n	8043eb4 <_puts_r+0x24>
 8043f08:	4621      	mov	r1, r4
 8043f0a:	4628      	mov	r0, r5
 8043f0c:	f000 f89a 	bl	8044044 <__swsetup_r>
 8043f10:	2800      	cmp	r0, #0
 8043f12:	d0dd      	beq.n	8043ed0 <_puts_r+0x40>
 8043f14:	f04f 35ff 	mov.w	r5, #4294967295
 8043f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043f1a:	07da      	lsls	r2, r3, #31
 8043f1c:	d405      	bmi.n	8043f2a <_puts_r+0x9a>
 8043f1e:	89a3      	ldrh	r3, [r4, #12]
 8043f20:	059b      	lsls	r3, r3, #22
 8043f22:	d402      	bmi.n	8043f2a <_puts_r+0x9a>
 8043f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043f26:	f000 fab4 	bl	8044492 <__retarget_lock_release_recursive>
 8043f2a:	4628      	mov	r0, r5
 8043f2c:	bd70      	pop	{r4, r5, r6, pc}
 8043f2e:	2b00      	cmp	r3, #0
 8043f30:	da04      	bge.n	8043f3c <_puts_r+0xac>
 8043f32:	69a2      	ldr	r2, [r4, #24]
 8043f34:	429a      	cmp	r2, r3
 8043f36:	dc06      	bgt.n	8043f46 <_puts_r+0xb6>
 8043f38:	290a      	cmp	r1, #10
 8043f3a:	d004      	beq.n	8043f46 <_puts_r+0xb6>
 8043f3c:	6823      	ldr	r3, [r4, #0]
 8043f3e:	1c5a      	adds	r2, r3, #1
 8043f40:	6022      	str	r2, [r4, #0]
 8043f42:	7019      	strb	r1, [r3, #0]
 8043f44:	e7c5      	b.n	8043ed2 <_puts_r+0x42>
 8043f46:	4622      	mov	r2, r4
 8043f48:	4628      	mov	r0, r5
 8043f4a:	f000 f829 	bl	8043fa0 <__swbuf_r>
 8043f4e:	3001      	adds	r0, #1
 8043f50:	d1bf      	bne.n	8043ed2 <_puts_r+0x42>
 8043f52:	e7df      	b.n	8043f14 <_puts_r+0x84>
 8043f54:	6823      	ldr	r3, [r4, #0]
 8043f56:	250a      	movs	r5, #10
 8043f58:	1c5a      	adds	r2, r3, #1
 8043f5a:	6022      	str	r2, [r4, #0]
 8043f5c:	701d      	strb	r5, [r3, #0]
 8043f5e:	e7db      	b.n	8043f18 <_puts_r+0x88>
 8043f60:	08044ee4 	.word	0x08044ee4
 8043f64:	08044f04 	.word	0x08044f04
 8043f68:	08044ec4 	.word	0x08044ec4

08043f6c <puts>:
 8043f6c:	4b02      	ldr	r3, [pc, #8]	; (8043f78 <puts+0xc>)
 8043f6e:	4601      	mov	r1, r0
 8043f70:	6818      	ldr	r0, [r3, #0]
 8043f72:	f7ff bf8d 	b.w	8043e90 <_puts_r>
 8043f76:	bf00      	nop
 8043f78:	2000000c 	.word	0x2000000c

08043f7c <strncmp>:
 8043f7c:	b510      	push	{r4, lr}
 8043f7e:	b16a      	cbz	r2, 8043f9c <strncmp+0x20>
 8043f80:	3901      	subs	r1, #1
 8043f82:	1884      	adds	r4, r0, r2
 8043f84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8043f88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8043f8c:	4293      	cmp	r3, r2
 8043f8e:	d103      	bne.n	8043f98 <strncmp+0x1c>
 8043f90:	42a0      	cmp	r0, r4
 8043f92:	d001      	beq.n	8043f98 <strncmp+0x1c>
 8043f94:	2b00      	cmp	r3, #0
 8043f96:	d1f5      	bne.n	8043f84 <strncmp+0x8>
 8043f98:	1a98      	subs	r0, r3, r2
 8043f9a:	bd10      	pop	{r4, pc}
 8043f9c:	4610      	mov	r0, r2
 8043f9e:	e7fc      	b.n	8043f9a <strncmp+0x1e>

08043fa0 <__swbuf_r>:
 8043fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043fa2:	460e      	mov	r6, r1
 8043fa4:	4614      	mov	r4, r2
 8043fa6:	4605      	mov	r5, r0
 8043fa8:	b118      	cbz	r0, 8043fb2 <__swbuf_r+0x12>
 8043faa:	6983      	ldr	r3, [r0, #24]
 8043fac:	b90b      	cbnz	r3, 8043fb2 <__swbuf_r+0x12>
 8043fae:	f000 f9d1 	bl	8044354 <__sinit>
 8043fb2:	4b21      	ldr	r3, [pc, #132]	; (8044038 <__swbuf_r+0x98>)
 8043fb4:	429c      	cmp	r4, r3
 8043fb6:	d12b      	bne.n	8044010 <__swbuf_r+0x70>
 8043fb8:	686c      	ldr	r4, [r5, #4]
 8043fba:	69a3      	ldr	r3, [r4, #24]
 8043fbc:	60a3      	str	r3, [r4, #8]
 8043fbe:	89a3      	ldrh	r3, [r4, #12]
 8043fc0:	071a      	lsls	r2, r3, #28
 8043fc2:	d52f      	bpl.n	8044024 <__swbuf_r+0x84>
 8043fc4:	6923      	ldr	r3, [r4, #16]
 8043fc6:	b36b      	cbz	r3, 8044024 <__swbuf_r+0x84>
 8043fc8:	6923      	ldr	r3, [r4, #16]
 8043fca:	6820      	ldr	r0, [r4, #0]
 8043fcc:	1ac0      	subs	r0, r0, r3
 8043fce:	6963      	ldr	r3, [r4, #20]
 8043fd0:	b2f6      	uxtb	r6, r6
 8043fd2:	4283      	cmp	r3, r0
 8043fd4:	4637      	mov	r7, r6
 8043fd6:	dc04      	bgt.n	8043fe2 <__swbuf_r+0x42>
 8043fd8:	4621      	mov	r1, r4
 8043fda:	4628      	mov	r0, r5
 8043fdc:	f000 f926 	bl	804422c <_fflush_r>
 8043fe0:	bb30      	cbnz	r0, 8044030 <__swbuf_r+0x90>
 8043fe2:	68a3      	ldr	r3, [r4, #8]
 8043fe4:	3b01      	subs	r3, #1
 8043fe6:	60a3      	str	r3, [r4, #8]
 8043fe8:	6823      	ldr	r3, [r4, #0]
 8043fea:	1c5a      	adds	r2, r3, #1
 8043fec:	6022      	str	r2, [r4, #0]
 8043fee:	701e      	strb	r6, [r3, #0]
 8043ff0:	6963      	ldr	r3, [r4, #20]
 8043ff2:	3001      	adds	r0, #1
 8043ff4:	4283      	cmp	r3, r0
 8043ff6:	d004      	beq.n	8044002 <__swbuf_r+0x62>
 8043ff8:	89a3      	ldrh	r3, [r4, #12]
 8043ffa:	07db      	lsls	r3, r3, #31
 8043ffc:	d506      	bpl.n	804400c <__swbuf_r+0x6c>
 8043ffe:	2e0a      	cmp	r6, #10
 8044000:	d104      	bne.n	804400c <__swbuf_r+0x6c>
 8044002:	4621      	mov	r1, r4
 8044004:	4628      	mov	r0, r5
 8044006:	f000 f911 	bl	804422c <_fflush_r>
 804400a:	b988      	cbnz	r0, 8044030 <__swbuf_r+0x90>
 804400c:	4638      	mov	r0, r7
 804400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8044010:	4b0a      	ldr	r3, [pc, #40]	; (804403c <__swbuf_r+0x9c>)
 8044012:	429c      	cmp	r4, r3
 8044014:	d101      	bne.n	804401a <__swbuf_r+0x7a>
 8044016:	68ac      	ldr	r4, [r5, #8]
 8044018:	e7cf      	b.n	8043fba <__swbuf_r+0x1a>
 804401a:	4b09      	ldr	r3, [pc, #36]	; (8044040 <__swbuf_r+0xa0>)
 804401c:	429c      	cmp	r4, r3
 804401e:	bf08      	it	eq
 8044020:	68ec      	ldreq	r4, [r5, #12]
 8044022:	e7ca      	b.n	8043fba <__swbuf_r+0x1a>
 8044024:	4621      	mov	r1, r4
 8044026:	4628      	mov	r0, r5
 8044028:	f000 f80c 	bl	8044044 <__swsetup_r>
 804402c:	2800      	cmp	r0, #0
 804402e:	d0cb      	beq.n	8043fc8 <__swbuf_r+0x28>
 8044030:	f04f 37ff 	mov.w	r7, #4294967295
 8044034:	e7ea      	b.n	804400c <__swbuf_r+0x6c>
 8044036:	bf00      	nop
 8044038:	08044ee4 	.word	0x08044ee4
 804403c:	08044f04 	.word	0x08044f04
 8044040:	08044ec4 	.word	0x08044ec4

08044044 <__swsetup_r>:
 8044044:	4b32      	ldr	r3, [pc, #200]	; (8044110 <__swsetup_r+0xcc>)
 8044046:	b570      	push	{r4, r5, r6, lr}
 8044048:	681d      	ldr	r5, [r3, #0]
 804404a:	4606      	mov	r6, r0
 804404c:	460c      	mov	r4, r1
 804404e:	b125      	cbz	r5, 804405a <__swsetup_r+0x16>
 8044050:	69ab      	ldr	r3, [r5, #24]
 8044052:	b913      	cbnz	r3, 804405a <__swsetup_r+0x16>
 8044054:	4628      	mov	r0, r5
 8044056:	f000 f97d 	bl	8044354 <__sinit>
 804405a:	4b2e      	ldr	r3, [pc, #184]	; (8044114 <__swsetup_r+0xd0>)
 804405c:	429c      	cmp	r4, r3
 804405e:	d10f      	bne.n	8044080 <__swsetup_r+0x3c>
 8044060:	686c      	ldr	r4, [r5, #4]
 8044062:	89a3      	ldrh	r3, [r4, #12]
 8044064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8044068:	0719      	lsls	r1, r3, #28
 804406a:	d42c      	bmi.n	80440c6 <__swsetup_r+0x82>
 804406c:	06dd      	lsls	r5, r3, #27
 804406e:	d411      	bmi.n	8044094 <__swsetup_r+0x50>
 8044070:	2309      	movs	r3, #9
 8044072:	6033      	str	r3, [r6, #0]
 8044074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8044078:	81a3      	strh	r3, [r4, #12]
 804407a:	f04f 30ff 	mov.w	r0, #4294967295
 804407e:	e03e      	b.n	80440fe <__swsetup_r+0xba>
 8044080:	4b25      	ldr	r3, [pc, #148]	; (8044118 <__swsetup_r+0xd4>)
 8044082:	429c      	cmp	r4, r3
 8044084:	d101      	bne.n	804408a <__swsetup_r+0x46>
 8044086:	68ac      	ldr	r4, [r5, #8]
 8044088:	e7eb      	b.n	8044062 <__swsetup_r+0x1e>
 804408a:	4b24      	ldr	r3, [pc, #144]	; (804411c <__swsetup_r+0xd8>)
 804408c:	429c      	cmp	r4, r3
 804408e:	bf08      	it	eq
 8044090:	68ec      	ldreq	r4, [r5, #12]
 8044092:	e7e6      	b.n	8044062 <__swsetup_r+0x1e>
 8044094:	0758      	lsls	r0, r3, #29
 8044096:	d512      	bpl.n	80440be <__swsetup_r+0x7a>
 8044098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804409a:	b141      	cbz	r1, 80440ae <__swsetup_r+0x6a>
 804409c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80440a0:	4299      	cmp	r1, r3
 80440a2:	d002      	beq.n	80440aa <__swsetup_r+0x66>
 80440a4:	4630      	mov	r0, r6
 80440a6:	f000 fa59 	bl	804455c <_free_r>
 80440aa:	2300      	movs	r3, #0
 80440ac:	6363      	str	r3, [r4, #52]	; 0x34
 80440ae:	89a3      	ldrh	r3, [r4, #12]
 80440b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80440b4:	81a3      	strh	r3, [r4, #12]
 80440b6:	2300      	movs	r3, #0
 80440b8:	6063      	str	r3, [r4, #4]
 80440ba:	6923      	ldr	r3, [r4, #16]
 80440bc:	6023      	str	r3, [r4, #0]
 80440be:	89a3      	ldrh	r3, [r4, #12]
 80440c0:	f043 0308 	orr.w	r3, r3, #8
 80440c4:	81a3      	strh	r3, [r4, #12]
 80440c6:	6923      	ldr	r3, [r4, #16]
 80440c8:	b94b      	cbnz	r3, 80440de <__swsetup_r+0x9a>
 80440ca:	89a3      	ldrh	r3, [r4, #12]
 80440cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80440d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80440d4:	d003      	beq.n	80440de <__swsetup_r+0x9a>
 80440d6:	4621      	mov	r1, r4
 80440d8:	4630      	mov	r0, r6
 80440da:	f000 f9ff 	bl	80444dc <__smakebuf_r>
 80440de:	89a0      	ldrh	r0, [r4, #12]
 80440e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80440e4:	f010 0301 	ands.w	r3, r0, #1
 80440e8:	d00a      	beq.n	8044100 <__swsetup_r+0xbc>
 80440ea:	2300      	movs	r3, #0
 80440ec:	60a3      	str	r3, [r4, #8]
 80440ee:	6963      	ldr	r3, [r4, #20]
 80440f0:	425b      	negs	r3, r3
 80440f2:	61a3      	str	r3, [r4, #24]
 80440f4:	6923      	ldr	r3, [r4, #16]
 80440f6:	b943      	cbnz	r3, 804410a <__swsetup_r+0xc6>
 80440f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80440fc:	d1ba      	bne.n	8044074 <__swsetup_r+0x30>
 80440fe:	bd70      	pop	{r4, r5, r6, pc}
 8044100:	0781      	lsls	r1, r0, #30
 8044102:	bf58      	it	pl
 8044104:	6963      	ldrpl	r3, [r4, #20]
 8044106:	60a3      	str	r3, [r4, #8]
 8044108:	e7f4      	b.n	80440f4 <__swsetup_r+0xb0>
 804410a:	2000      	movs	r0, #0
 804410c:	e7f7      	b.n	80440fe <__swsetup_r+0xba>
 804410e:	bf00      	nop
 8044110:	2000000c 	.word	0x2000000c
 8044114:	08044ee4 	.word	0x08044ee4
 8044118:	08044f04 	.word	0x08044f04
 804411c:	08044ec4 	.word	0x08044ec4

08044120 <__sflush_r>:
 8044120:	898a      	ldrh	r2, [r1, #12]
 8044122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044126:	4605      	mov	r5, r0
 8044128:	0710      	lsls	r0, r2, #28
 804412a:	460c      	mov	r4, r1
 804412c:	d458      	bmi.n	80441e0 <__sflush_r+0xc0>
 804412e:	684b      	ldr	r3, [r1, #4]
 8044130:	2b00      	cmp	r3, #0
 8044132:	dc05      	bgt.n	8044140 <__sflush_r+0x20>
 8044134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8044136:	2b00      	cmp	r3, #0
 8044138:	dc02      	bgt.n	8044140 <__sflush_r+0x20>
 804413a:	2000      	movs	r0, #0
 804413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8044142:	2e00      	cmp	r6, #0
 8044144:	d0f9      	beq.n	804413a <__sflush_r+0x1a>
 8044146:	2300      	movs	r3, #0
 8044148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804414c:	682f      	ldr	r7, [r5, #0]
 804414e:	602b      	str	r3, [r5, #0]
 8044150:	d032      	beq.n	80441b8 <__sflush_r+0x98>
 8044152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8044154:	89a3      	ldrh	r3, [r4, #12]
 8044156:	075a      	lsls	r2, r3, #29
 8044158:	d505      	bpl.n	8044166 <__sflush_r+0x46>
 804415a:	6863      	ldr	r3, [r4, #4]
 804415c:	1ac0      	subs	r0, r0, r3
 804415e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8044160:	b10b      	cbz	r3, 8044166 <__sflush_r+0x46>
 8044162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044164:	1ac0      	subs	r0, r0, r3
 8044166:	2300      	movs	r3, #0
 8044168:	4602      	mov	r2, r0
 804416a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804416c:	6a21      	ldr	r1, [r4, #32]
 804416e:	4628      	mov	r0, r5
 8044170:	47b0      	blx	r6
 8044172:	1c43      	adds	r3, r0, #1
 8044174:	89a3      	ldrh	r3, [r4, #12]
 8044176:	d106      	bne.n	8044186 <__sflush_r+0x66>
 8044178:	6829      	ldr	r1, [r5, #0]
 804417a:	291d      	cmp	r1, #29
 804417c:	d82c      	bhi.n	80441d8 <__sflush_r+0xb8>
 804417e:	4a2a      	ldr	r2, [pc, #168]	; (8044228 <__sflush_r+0x108>)
 8044180:	40ca      	lsrs	r2, r1
 8044182:	07d6      	lsls	r6, r2, #31
 8044184:	d528      	bpl.n	80441d8 <__sflush_r+0xb8>
 8044186:	2200      	movs	r2, #0
 8044188:	6062      	str	r2, [r4, #4]
 804418a:	04d9      	lsls	r1, r3, #19
 804418c:	6922      	ldr	r2, [r4, #16]
 804418e:	6022      	str	r2, [r4, #0]
 8044190:	d504      	bpl.n	804419c <__sflush_r+0x7c>
 8044192:	1c42      	adds	r2, r0, #1
 8044194:	d101      	bne.n	804419a <__sflush_r+0x7a>
 8044196:	682b      	ldr	r3, [r5, #0]
 8044198:	b903      	cbnz	r3, 804419c <__sflush_r+0x7c>
 804419a:	6560      	str	r0, [r4, #84]	; 0x54
 804419c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804419e:	602f      	str	r7, [r5, #0]
 80441a0:	2900      	cmp	r1, #0
 80441a2:	d0ca      	beq.n	804413a <__sflush_r+0x1a>
 80441a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80441a8:	4299      	cmp	r1, r3
 80441aa:	d002      	beq.n	80441b2 <__sflush_r+0x92>
 80441ac:	4628      	mov	r0, r5
 80441ae:	f000 f9d5 	bl	804455c <_free_r>
 80441b2:	2000      	movs	r0, #0
 80441b4:	6360      	str	r0, [r4, #52]	; 0x34
 80441b6:	e7c1      	b.n	804413c <__sflush_r+0x1c>
 80441b8:	6a21      	ldr	r1, [r4, #32]
 80441ba:	2301      	movs	r3, #1
 80441bc:	4628      	mov	r0, r5
 80441be:	47b0      	blx	r6
 80441c0:	1c41      	adds	r1, r0, #1
 80441c2:	d1c7      	bne.n	8044154 <__sflush_r+0x34>
 80441c4:	682b      	ldr	r3, [r5, #0]
 80441c6:	2b00      	cmp	r3, #0
 80441c8:	d0c4      	beq.n	8044154 <__sflush_r+0x34>
 80441ca:	2b1d      	cmp	r3, #29
 80441cc:	d001      	beq.n	80441d2 <__sflush_r+0xb2>
 80441ce:	2b16      	cmp	r3, #22
 80441d0:	d101      	bne.n	80441d6 <__sflush_r+0xb6>
 80441d2:	602f      	str	r7, [r5, #0]
 80441d4:	e7b1      	b.n	804413a <__sflush_r+0x1a>
 80441d6:	89a3      	ldrh	r3, [r4, #12]
 80441d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80441dc:	81a3      	strh	r3, [r4, #12]
 80441de:	e7ad      	b.n	804413c <__sflush_r+0x1c>
 80441e0:	690f      	ldr	r7, [r1, #16]
 80441e2:	2f00      	cmp	r7, #0
 80441e4:	d0a9      	beq.n	804413a <__sflush_r+0x1a>
 80441e6:	0793      	lsls	r3, r2, #30
 80441e8:	680e      	ldr	r6, [r1, #0]
 80441ea:	bf08      	it	eq
 80441ec:	694b      	ldreq	r3, [r1, #20]
 80441ee:	600f      	str	r7, [r1, #0]
 80441f0:	bf18      	it	ne
 80441f2:	2300      	movne	r3, #0
 80441f4:	eba6 0807 	sub.w	r8, r6, r7
 80441f8:	608b      	str	r3, [r1, #8]
 80441fa:	f1b8 0f00 	cmp.w	r8, #0
 80441fe:	dd9c      	ble.n	804413a <__sflush_r+0x1a>
 8044200:	6a21      	ldr	r1, [r4, #32]
 8044202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8044204:	4643      	mov	r3, r8
 8044206:	463a      	mov	r2, r7
 8044208:	4628      	mov	r0, r5
 804420a:	47b0      	blx	r6
 804420c:	2800      	cmp	r0, #0
 804420e:	dc06      	bgt.n	804421e <__sflush_r+0xfe>
 8044210:	89a3      	ldrh	r3, [r4, #12]
 8044212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8044216:	81a3      	strh	r3, [r4, #12]
 8044218:	f04f 30ff 	mov.w	r0, #4294967295
 804421c:	e78e      	b.n	804413c <__sflush_r+0x1c>
 804421e:	4407      	add	r7, r0
 8044220:	eba8 0800 	sub.w	r8, r8, r0
 8044224:	e7e9      	b.n	80441fa <__sflush_r+0xda>
 8044226:	bf00      	nop
 8044228:	20400001 	.word	0x20400001

0804422c <_fflush_r>:
 804422c:	b538      	push	{r3, r4, r5, lr}
 804422e:	690b      	ldr	r3, [r1, #16]
 8044230:	4605      	mov	r5, r0
 8044232:	460c      	mov	r4, r1
 8044234:	b913      	cbnz	r3, 804423c <_fflush_r+0x10>
 8044236:	2500      	movs	r5, #0
 8044238:	4628      	mov	r0, r5
 804423a:	bd38      	pop	{r3, r4, r5, pc}
 804423c:	b118      	cbz	r0, 8044246 <_fflush_r+0x1a>
 804423e:	6983      	ldr	r3, [r0, #24]
 8044240:	b90b      	cbnz	r3, 8044246 <_fflush_r+0x1a>
 8044242:	f000 f887 	bl	8044354 <__sinit>
 8044246:	4b14      	ldr	r3, [pc, #80]	; (8044298 <_fflush_r+0x6c>)
 8044248:	429c      	cmp	r4, r3
 804424a:	d11b      	bne.n	8044284 <_fflush_r+0x58>
 804424c:	686c      	ldr	r4, [r5, #4]
 804424e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8044252:	2b00      	cmp	r3, #0
 8044254:	d0ef      	beq.n	8044236 <_fflush_r+0xa>
 8044256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8044258:	07d0      	lsls	r0, r2, #31
 804425a:	d404      	bmi.n	8044266 <_fflush_r+0x3a>
 804425c:	0599      	lsls	r1, r3, #22
 804425e:	d402      	bmi.n	8044266 <_fflush_r+0x3a>
 8044260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8044262:	f000 f915 	bl	8044490 <__retarget_lock_acquire_recursive>
 8044266:	4628      	mov	r0, r5
 8044268:	4621      	mov	r1, r4
 804426a:	f7ff ff59 	bl	8044120 <__sflush_r>
 804426e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8044270:	07da      	lsls	r2, r3, #31
 8044272:	4605      	mov	r5, r0
 8044274:	d4e0      	bmi.n	8044238 <_fflush_r+0xc>
 8044276:	89a3      	ldrh	r3, [r4, #12]
 8044278:	059b      	lsls	r3, r3, #22
 804427a:	d4dd      	bmi.n	8044238 <_fflush_r+0xc>
 804427c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804427e:	f000 f908 	bl	8044492 <__retarget_lock_release_recursive>
 8044282:	e7d9      	b.n	8044238 <_fflush_r+0xc>
 8044284:	4b05      	ldr	r3, [pc, #20]	; (804429c <_fflush_r+0x70>)
 8044286:	429c      	cmp	r4, r3
 8044288:	d101      	bne.n	804428e <_fflush_r+0x62>
 804428a:	68ac      	ldr	r4, [r5, #8]
 804428c:	e7df      	b.n	804424e <_fflush_r+0x22>
 804428e:	4b04      	ldr	r3, [pc, #16]	; (80442a0 <_fflush_r+0x74>)
 8044290:	429c      	cmp	r4, r3
 8044292:	bf08      	it	eq
 8044294:	68ec      	ldreq	r4, [r5, #12]
 8044296:	e7da      	b.n	804424e <_fflush_r+0x22>
 8044298:	08044ee4 	.word	0x08044ee4
 804429c:	08044f04 	.word	0x08044f04
 80442a0:	08044ec4 	.word	0x08044ec4

080442a4 <std>:
 80442a4:	2300      	movs	r3, #0
 80442a6:	b510      	push	{r4, lr}
 80442a8:	4604      	mov	r4, r0
 80442aa:	e9c0 3300 	strd	r3, r3, [r0]
 80442ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80442b2:	6083      	str	r3, [r0, #8]
 80442b4:	8181      	strh	r1, [r0, #12]
 80442b6:	6643      	str	r3, [r0, #100]	; 0x64
 80442b8:	81c2      	strh	r2, [r0, #14]
 80442ba:	6183      	str	r3, [r0, #24]
 80442bc:	4619      	mov	r1, r3
 80442be:	2208      	movs	r2, #8
 80442c0:	305c      	adds	r0, #92	; 0x5c
 80442c2:	f7ff fdc5 	bl	8043e50 <memset>
 80442c6:	4b05      	ldr	r3, [pc, #20]	; (80442dc <std+0x38>)
 80442c8:	6263      	str	r3, [r4, #36]	; 0x24
 80442ca:	4b05      	ldr	r3, [pc, #20]	; (80442e0 <std+0x3c>)
 80442cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80442ce:	4b05      	ldr	r3, [pc, #20]	; (80442e4 <std+0x40>)
 80442d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80442d2:	4b05      	ldr	r3, [pc, #20]	; (80442e8 <std+0x44>)
 80442d4:	6224      	str	r4, [r4, #32]
 80442d6:	6323      	str	r3, [r4, #48]	; 0x30
 80442d8:	bd10      	pop	{r4, pc}
 80442da:	bf00      	nop
 80442dc:	08044cad 	.word	0x08044cad
 80442e0:	08044ccf 	.word	0x08044ccf
 80442e4:	08044d07 	.word	0x08044d07
 80442e8:	08044d2b 	.word	0x08044d2b

080442ec <_cleanup_r>:
 80442ec:	4901      	ldr	r1, [pc, #4]	; (80442f4 <_cleanup_r+0x8>)
 80442ee:	f000 b8af 	b.w	8044450 <_fwalk_reent>
 80442f2:	bf00      	nop
 80442f4:	0804422d 	.word	0x0804422d

080442f8 <__sfmoreglue>:
 80442f8:	b570      	push	{r4, r5, r6, lr}
 80442fa:	1e4a      	subs	r2, r1, #1
 80442fc:	2568      	movs	r5, #104	; 0x68
 80442fe:	4355      	muls	r5, r2
 8044300:	460e      	mov	r6, r1
 8044302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8044306:	f000 f979 	bl	80445fc <_malloc_r>
 804430a:	4604      	mov	r4, r0
 804430c:	b140      	cbz	r0, 8044320 <__sfmoreglue+0x28>
 804430e:	2100      	movs	r1, #0
 8044310:	e9c0 1600 	strd	r1, r6, [r0]
 8044314:	300c      	adds	r0, #12
 8044316:	60a0      	str	r0, [r4, #8]
 8044318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804431c:	f7ff fd98 	bl	8043e50 <memset>
 8044320:	4620      	mov	r0, r4
 8044322:	bd70      	pop	{r4, r5, r6, pc}

08044324 <__sfp_lock_acquire>:
 8044324:	4801      	ldr	r0, [pc, #4]	; (804432c <__sfp_lock_acquire+0x8>)
 8044326:	f000 b8b3 	b.w	8044490 <__retarget_lock_acquire_recursive>
 804432a:	bf00      	nop
 804432c:	200001cc 	.word	0x200001cc

08044330 <__sfp_lock_release>:
 8044330:	4801      	ldr	r0, [pc, #4]	; (8044338 <__sfp_lock_release+0x8>)
 8044332:	f000 b8ae 	b.w	8044492 <__retarget_lock_release_recursive>
 8044336:	bf00      	nop
 8044338:	200001cc 	.word	0x200001cc

0804433c <__sinit_lock_acquire>:
 804433c:	4801      	ldr	r0, [pc, #4]	; (8044344 <__sinit_lock_acquire+0x8>)
 804433e:	f000 b8a7 	b.w	8044490 <__retarget_lock_acquire_recursive>
 8044342:	bf00      	nop
 8044344:	200001c7 	.word	0x200001c7

08044348 <__sinit_lock_release>:
 8044348:	4801      	ldr	r0, [pc, #4]	; (8044350 <__sinit_lock_release+0x8>)
 804434a:	f000 b8a2 	b.w	8044492 <__retarget_lock_release_recursive>
 804434e:	bf00      	nop
 8044350:	200001c7 	.word	0x200001c7

08044354 <__sinit>:
 8044354:	b510      	push	{r4, lr}
 8044356:	4604      	mov	r4, r0
 8044358:	f7ff fff0 	bl	804433c <__sinit_lock_acquire>
 804435c:	69a3      	ldr	r3, [r4, #24]
 804435e:	b11b      	cbz	r3, 8044368 <__sinit+0x14>
 8044360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8044364:	f7ff bff0 	b.w	8044348 <__sinit_lock_release>
 8044368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804436c:	6523      	str	r3, [r4, #80]	; 0x50
 804436e:	4b13      	ldr	r3, [pc, #76]	; (80443bc <__sinit+0x68>)
 8044370:	4a13      	ldr	r2, [pc, #76]	; (80443c0 <__sinit+0x6c>)
 8044372:	681b      	ldr	r3, [r3, #0]
 8044374:	62a2      	str	r2, [r4, #40]	; 0x28
 8044376:	42a3      	cmp	r3, r4
 8044378:	bf04      	itt	eq
 804437a:	2301      	moveq	r3, #1
 804437c:	61a3      	streq	r3, [r4, #24]
 804437e:	4620      	mov	r0, r4
 8044380:	f000 f820 	bl	80443c4 <__sfp>
 8044384:	6060      	str	r0, [r4, #4]
 8044386:	4620      	mov	r0, r4
 8044388:	f000 f81c 	bl	80443c4 <__sfp>
 804438c:	60a0      	str	r0, [r4, #8]
 804438e:	4620      	mov	r0, r4
 8044390:	f000 f818 	bl	80443c4 <__sfp>
 8044394:	2200      	movs	r2, #0
 8044396:	60e0      	str	r0, [r4, #12]
 8044398:	2104      	movs	r1, #4
 804439a:	6860      	ldr	r0, [r4, #4]
 804439c:	f7ff ff82 	bl	80442a4 <std>
 80443a0:	68a0      	ldr	r0, [r4, #8]
 80443a2:	2201      	movs	r2, #1
 80443a4:	2109      	movs	r1, #9
 80443a6:	f7ff ff7d 	bl	80442a4 <std>
 80443aa:	68e0      	ldr	r0, [r4, #12]
 80443ac:	2202      	movs	r2, #2
 80443ae:	2112      	movs	r1, #18
 80443b0:	f7ff ff78 	bl	80442a4 <std>
 80443b4:	2301      	movs	r3, #1
 80443b6:	61a3      	str	r3, [r4, #24]
 80443b8:	e7d2      	b.n	8044360 <__sinit+0xc>
 80443ba:	bf00      	nop
 80443bc:	08044ec0 	.word	0x08044ec0
 80443c0:	080442ed 	.word	0x080442ed

080443c4 <__sfp>:
 80443c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80443c6:	4607      	mov	r7, r0
 80443c8:	f7ff ffac 	bl	8044324 <__sfp_lock_acquire>
 80443cc:	4b1e      	ldr	r3, [pc, #120]	; (8044448 <__sfp+0x84>)
 80443ce:	681e      	ldr	r6, [r3, #0]
 80443d0:	69b3      	ldr	r3, [r6, #24]
 80443d2:	b913      	cbnz	r3, 80443da <__sfp+0x16>
 80443d4:	4630      	mov	r0, r6
 80443d6:	f7ff ffbd 	bl	8044354 <__sinit>
 80443da:	3648      	adds	r6, #72	; 0x48
 80443dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80443e0:	3b01      	subs	r3, #1
 80443e2:	d503      	bpl.n	80443ec <__sfp+0x28>
 80443e4:	6833      	ldr	r3, [r6, #0]
 80443e6:	b30b      	cbz	r3, 804442c <__sfp+0x68>
 80443e8:	6836      	ldr	r6, [r6, #0]
 80443ea:	e7f7      	b.n	80443dc <__sfp+0x18>
 80443ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80443f0:	b9d5      	cbnz	r5, 8044428 <__sfp+0x64>
 80443f2:	4b16      	ldr	r3, [pc, #88]	; (804444c <__sfp+0x88>)
 80443f4:	60e3      	str	r3, [r4, #12]
 80443f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80443fa:	6665      	str	r5, [r4, #100]	; 0x64
 80443fc:	f000 f847 	bl	804448e <__retarget_lock_init_recursive>
 8044400:	f7ff ff96 	bl	8044330 <__sfp_lock_release>
 8044404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8044408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804440c:	6025      	str	r5, [r4, #0]
 804440e:	61a5      	str	r5, [r4, #24]
 8044410:	2208      	movs	r2, #8
 8044412:	4629      	mov	r1, r5
 8044414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8044418:	f7ff fd1a 	bl	8043e50 <memset>
 804441c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8044420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8044424:	4620      	mov	r0, r4
 8044426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8044428:	3468      	adds	r4, #104	; 0x68
 804442a:	e7d9      	b.n	80443e0 <__sfp+0x1c>
 804442c:	2104      	movs	r1, #4
 804442e:	4638      	mov	r0, r7
 8044430:	f7ff ff62 	bl	80442f8 <__sfmoreglue>
 8044434:	4604      	mov	r4, r0
 8044436:	6030      	str	r0, [r6, #0]
 8044438:	2800      	cmp	r0, #0
 804443a:	d1d5      	bne.n	80443e8 <__sfp+0x24>
 804443c:	f7ff ff78 	bl	8044330 <__sfp_lock_release>
 8044440:	230c      	movs	r3, #12
 8044442:	603b      	str	r3, [r7, #0]
 8044444:	e7ee      	b.n	8044424 <__sfp+0x60>
 8044446:	bf00      	nop
 8044448:	08044ec0 	.word	0x08044ec0
 804444c:	ffff0001 	.word	0xffff0001

08044450 <_fwalk_reent>:
 8044450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8044454:	4606      	mov	r6, r0
 8044456:	4688      	mov	r8, r1
 8044458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804445c:	2700      	movs	r7, #0
 804445e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8044462:	f1b9 0901 	subs.w	r9, r9, #1
 8044466:	d505      	bpl.n	8044474 <_fwalk_reent+0x24>
 8044468:	6824      	ldr	r4, [r4, #0]
 804446a:	2c00      	cmp	r4, #0
 804446c:	d1f7      	bne.n	804445e <_fwalk_reent+0xe>
 804446e:	4638      	mov	r0, r7
 8044470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8044474:	89ab      	ldrh	r3, [r5, #12]
 8044476:	2b01      	cmp	r3, #1
 8044478:	d907      	bls.n	804448a <_fwalk_reent+0x3a>
 804447a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804447e:	3301      	adds	r3, #1
 8044480:	d003      	beq.n	804448a <_fwalk_reent+0x3a>
 8044482:	4629      	mov	r1, r5
 8044484:	4630      	mov	r0, r6
 8044486:	47c0      	blx	r8
 8044488:	4307      	orrs	r7, r0
 804448a:	3568      	adds	r5, #104	; 0x68
 804448c:	e7e9      	b.n	8044462 <_fwalk_reent+0x12>

0804448e <__retarget_lock_init_recursive>:
 804448e:	4770      	bx	lr

08044490 <__retarget_lock_acquire_recursive>:
 8044490:	4770      	bx	lr

08044492 <__retarget_lock_release_recursive>:
 8044492:	4770      	bx	lr

08044494 <__swhatbuf_r>:
 8044494:	b570      	push	{r4, r5, r6, lr}
 8044496:	460e      	mov	r6, r1
 8044498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804449c:	2900      	cmp	r1, #0
 804449e:	b096      	sub	sp, #88	; 0x58
 80444a0:	4614      	mov	r4, r2
 80444a2:	461d      	mov	r5, r3
 80444a4:	da07      	bge.n	80444b6 <__swhatbuf_r+0x22>
 80444a6:	2300      	movs	r3, #0
 80444a8:	602b      	str	r3, [r5, #0]
 80444aa:	89b3      	ldrh	r3, [r6, #12]
 80444ac:	061a      	lsls	r2, r3, #24
 80444ae:	d410      	bmi.n	80444d2 <__swhatbuf_r+0x3e>
 80444b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80444b4:	e00e      	b.n	80444d4 <__swhatbuf_r+0x40>
 80444b6:	466a      	mov	r2, sp
 80444b8:	f000 fc5e 	bl	8044d78 <_fstat_r>
 80444bc:	2800      	cmp	r0, #0
 80444be:	dbf2      	blt.n	80444a6 <__swhatbuf_r+0x12>
 80444c0:	9a01      	ldr	r2, [sp, #4]
 80444c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80444c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80444ca:	425a      	negs	r2, r3
 80444cc:	415a      	adcs	r2, r3
 80444ce:	602a      	str	r2, [r5, #0]
 80444d0:	e7ee      	b.n	80444b0 <__swhatbuf_r+0x1c>
 80444d2:	2340      	movs	r3, #64	; 0x40
 80444d4:	2000      	movs	r0, #0
 80444d6:	6023      	str	r3, [r4, #0]
 80444d8:	b016      	add	sp, #88	; 0x58
 80444da:	bd70      	pop	{r4, r5, r6, pc}

080444dc <__smakebuf_r>:
 80444dc:	898b      	ldrh	r3, [r1, #12]
 80444de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80444e0:	079d      	lsls	r5, r3, #30
 80444e2:	4606      	mov	r6, r0
 80444e4:	460c      	mov	r4, r1
 80444e6:	d507      	bpl.n	80444f8 <__smakebuf_r+0x1c>
 80444e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80444ec:	6023      	str	r3, [r4, #0]
 80444ee:	6123      	str	r3, [r4, #16]
 80444f0:	2301      	movs	r3, #1
 80444f2:	6163      	str	r3, [r4, #20]
 80444f4:	b002      	add	sp, #8
 80444f6:	bd70      	pop	{r4, r5, r6, pc}
 80444f8:	ab01      	add	r3, sp, #4
 80444fa:	466a      	mov	r2, sp
 80444fc:	f7ff ffca 	bl	8044494 <__swhatbuf_r>
 8044500:	9900      	ldr	r1, [sp, #0]
 8044502:	4605      	mov	r5, r0
 8044504:	4630      	mov	r0, r6
 8044506:	f000 f879 	bl	80445fc <_malloc_r>
 804450a:	b948      	cbnz	r0, 8044520 <__smakebuf_r+0x44>
 804450c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8044510:	059a      	lsls	r2, r3, #22
 8044512:	d4ef      	bmi.n	80444f4 <__smakebuf_r+0x18>
 8044514:	f023 0303 	bic.w	r3, r3, #3
 8044518:	f043 0302 	orr.w	r3, r3, #2
 804451c:	81a3      	strh	r3, [r4, #12]
 804451e:	e7e3      	b.n	80444e8 <__smakebuf_r+0xc>
 8044520:	4b0d      	ldr	r3, [pc, #52]	; (8044558 <__smakebuf_r+0x7c>)
 8044522:	62b3      	str	r3, [r6, #40]	; 0x28
 8044524:	89a3      	ldrh	r3, [r4, #12]
 8044526:	6020      	str	r0, [r4, #0]
 8044528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804452c:	81a3      	strh	r3, [r4, #12]
 804452e:	9b00      	ldr	r3, [sp, #0]
 8044530:	6163      	str	r3, [r4, #20]
 8044532:	9b01      	ldr	r3, [sp, #4]
 8044534:	6120      	str	r0, [r4, #16]
 8044536:	b15b      	cbz	r3, 8044550 <__smakebuf_r+0x74>
 8044538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804453c:	4630      	mov	r0, r6
 804453e:	f000 fc2d 	bl	8044d9c <_isatty_r>
 8044542:	b128      	cbz	r0, 8044550 <__smakebuf_r+0x74>
 8044544:	89a3      	ldrh	r3, [r4, #12]
 8044546:	f023 0303 	bic.w	r3, r3, #3
 804454a:	f043 0301 	orr.w	r3, r3, #1
 804454e:	81a3      	strh	r3, [r4, #12]
 8044550:	89a0      	ldrh	r0, [r4, #12]
 8044552:	4305      	orrs	r5, r0
 8044554:	81a5      	strh	r5, [r4, #12]
 8044556:	e7cd      	b.n	80444f4 <__smakebuf_r+0x18>
 8044558:	080442ed 	.word	0x080442ed

0804455c <_free_r>:
 804455c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804455e:	2900      	cmp	r1, #0
 8044560:	d048      	beq.n	80445f4 <_free_r+0x98>
 8044562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8044566:	9001      	str	r0, [sp, #4]
 8044568:	2b00      	cmp	r3, #0
 804456a:	f1a1 0404 	sub.w	r4, r1, #4
 804456e:	bfb8      	it	lt
 8044570:	18e4      	addlt	r4, r4, r3
 8044572:	f000 fc35 	bl	8044de0 <__malloc_lock>
 8044576:	4a20      	ldr	r2, [pc, #128]	; (80445f8 <_free_r+0x9c>)
 8044578:	9801      	ldr	r0, [sp, #4]
 804457a:	6813      	ldr	r3, [r2, #0]
 804457c:	4615      	mov	r5, r2
 804457e:	b933      	cbnz	r3, 804458e <_free_r+0x32>
 8044580:	6063      	str	r3, [r4, #4]
 8044582:	6014      	str	r4, [r2, #0]
 8044584:	b003      	add	sp, #12
 8044586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804458a:	f000 bc2f 	b.w	8044dec <__malloc_unlock>
 804458e:	42a3      	cmp	r3, r4
 8044590:	d90b      	bls.n	80445aa <_free_r+0x4e>
 8044592:	6821      	ldr	r1, [r4, #0]
 8044594:	1862      	adds	r2, r4, r1
 8044596:	4293      	cmp	r3, r2
 8044598:	bf04      	itt	eq
 804459a:	681a      	ldreq	r2, [r3, #0]
 804459c:	685b      	ldreq	r3, [r3, #4]
 804459e:	6063      	str	r3, [r4, #4]
 80445a0:	bf04      	itt	eq
 80445a2:	1852      	addeq	r2, r2, r1
 80445a4:	6022      	streq	r2, [r4, #0]
 80445a6:	602c      	str	r4, [r5, #0]
 80445a8:	e7ec      	b.n	8044584 <_free_r+0x28>
 80445aa:	461a      	mov	r2, r3
 80445ac:	685b      	ldr	r3, [r3, #4]
 80445ae:	b10b      	cbz	r3, 80445b4 <_free_r+0x58>
 80445b0:	42a3      	cmp	r3, r4
 80445b2:	d9fa      	bls.n	80445aa <_free_r+0x4e>
 80445b4:	6811      	ldr	r1, [r2, #0]
 80445b6:	1855      	adds	r5, r2, r1
 80445b8:	42a5      	cmp	r5, r4
 80445ba:	d10b      	bne.n	80445d4 <_free_r+0x78>
 80445bc:	6824      	ldr	r4, [r4, #0]
 80445be:	4421      	add	r1, r4
 80445c0:	1854      	adds	r4, r2, r1
 80445c2:	42a3      	cmp	r3, r4
 80445c4:	6011      	str	r1, [r2, #0]
 80445c6:	d1dd      	bne.n	8044584 <_free_r+0x28>
 80445c8:	681c      	ldr	r4, [r3, #0]
 80445ca:	685b      	ldr	r3, [r3, #4]
 80445cc:	6053      	str	r3, [r2, #4]
 80445ce:	4421      	add	r1, r4
 80445d0:	6011      	str	r1, [r2, #0]
 80445d2:	e7d7      	b.n	8044584 <_free_r+0x28>
 80445d4:	d902      	bls.n	80445dc <_free_r+0x80>
 80445d6:	230c      	movs	r3, #12
 80445d8:	6003      	str	r3, [r0, #0]
 80445da:	e7d3      	b.n	8044584 <_free_r+0x28>
 80445dc:	6825      	ldr	r5, [r4, #0]
 80445de:	1961      	adds	r1, r4, r5
 80445e0:	428b      	cmp	r3, r1
 80445e2:	bf04      	itt	eq
 80445e4:	6819      	ldreq	r1, [r3, #0]
 80445e6:	685b      	ldreq	r3, [r3, #4]
 80445e8:	6063      	str	r3, [r4, #4]
 80445ea:	bf04      	itt	eq
 80445ec:	1949      	addeq	r1, r1, r5
 80445ee:	6021      	streq	r1, [r4, #0]
 80445f0:	6054      	str	r4, [r2, #4]
 80445f2:	e7c7      	b.n	8044584 <_free_r+0x28>
 80445f4:	b003      	add	sp, #12
 80445f6:	bd30      	pop	{r4, r5, pc}
 80445f8:	20000090 	.word	0x20000090

080445fc <_malloc_r>:
 80445fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80445fe:	1ccd      	adds	r5, r1, #3
 8044600:	f025 0503 	bic.w	r5, r5, #3
 8044604:	3508      	adds	r5, #8
 8044606:	2d0c      	cmp	r5, #12
 8044608:	bf38      	it	cc
 804460a:	250c      	movcc	r5, #12
 804460c:	2d00      	cmp	r5, #0
 804460e:	4606      	mov	r6, r0
 8044610:	db01      	blt.n	8044616 <_malloc_r+0x1a>
 8044612:	42a9      	cmp	r1, r5
 8044614:	d903      	bls.n	804461e <_malloc_r+0x22>
 8044616:	230c      	movs	r3, #12
 8044618:	6033      	str	r3, [r6, #0]
 804461a:	2000      	movs	r0, #0
 804461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804461e:	f000 fbdf 	bl	8044de0 <__malloc_lock>
 8044622:	4921      	ldr	r1, [pc, #132]	; (80446a8 <_malloc_r+0xac>)
 8044624:	680a      	ldr	r2, [r1, #0]
 8044626:	4614      	mov	r4, r2
 8044628:	b99c      	cbnz	r4, 8044652 <_malloc_r+0x56>
 804462a:	4f20      	ldr	r7, [pc, #128]	; (80446ac <_malloc_r+0xb0>)
 804462c:	683b      	ldr	r3, [r7, #0]
 804462e:	b923      	cbnz	r3, 804463a <_malloc_r+0x3e>
 8044630:	4621      	mov	r1, r4
 8044632:	4630      	mov	r0, r6
 8044634:	f000 fb2a 	bl	8044c8c <_sbrk_r>
 8044638:	6038      	str	r0, [r7, #0]
 804463a:	4629      	mov	r1, r5
 804463c:	4630      	mov	r0, r6
 804463e:	f000 fb25 	bl	8044c8c <_sbrk_r>
 8044642:	1c43      	adds	r3, r0, #1
 8044644:	d123      	bne.n	804468e <_malloc_r+0x92>
 8044646:	230c      	movs	r3, #12
 8044648:	6033      	str	r3, [r6, #0]
 804464a:	4630      	mov	r0, r6
 804464c:	f000 fbce 	bl	8044dec <__malloc_unlock>
 8044650:	e7e3      	b.n	804461a <_malloc_r+0x1e>
 8044652:	6823      	ldr	r3, [r4, #0]
 8044654:	1b5b      	subs	r3, r3, r5
 8044656:	d417      	bmi.n	8044688 <_malloc_r+0x8c>
 8044658:	2b0b      	cmp	r3, #11
 804465a:	d903      	bls.n	8044664 <_malloc_r+0x68>
 804465c:	6023      	str	r3, [r4, #0]
 804465e:	441c      	add	r4, r3
 8044660:	6025      	str	r5, [r4, #0]
 8044662:	e004      	b.n	804466e <_malloc_r+0x72>
 8044664:	6863      	ldr	r3, [r4, #4]
 8044666:	42a2      	cmp	r2, r4
 8044668:	bf0c      	ite	eq
 804466a:	600b      	streq	r3, [r1, #0]
 804466c:	6053      	strne	r3, [r2, #4]
 804466e:	4630      	mov	r0, r6
 8044670:	f000 fbbc 	bl	8044dec <__malloc_unlock>
 8044674:	f104 000b 	add.w	r0, r4, #11
 8044678:	1d23      	adds	r3, r4, #4
 804467a:	f020 0007 	bic.w	r0, r0, #7
 804467e:	1ac2      	subs	r2, r0, r3
 8044680:	d0cc      	beq.n	804461c <_malloc_r+0x20>
 8044682:	1a1b      	subs	r3, r3, r0
 8044684:	50a3      	str	r3, [r4, r2]
 8044686:	e7c9      	b.n	804461c <_malloc_r+0x20>
 8044688:	4622      	mov	r2, r4
 804468a:	6864      	ldr	r4, [r4, #4]
 804468c:	e7cc      	b.n	8044628 <_malloc_r+0x2c>
 804468e:	1cc4      	adds	r4, r0, #3
 8044690:	f024 0403 	bic.w	r4, r4, #3
 8044694:	42a0      	cmp	r0, r4
 8044696:	d0e3      	beq.n	8044660 <_malloc_r+0x64>
 8044698:	1a21      	subs	r1, r4, r0
 804469a:	4630      	mov	r0, r6
 804469c:	f000 faf6 	bl	8044c8c <_sbrk_r>
 80446a0:	3001      	adds	r0, #1
 80446a2:	d1dd      	bne.n	8044660 <_malloc_r+0x64>
 80446a4:	e7cf      	b.n	8044646 <_malloc_r+0x4a>
 80446a6:	bf00      	nop
 80446a8:	20000090 	.word	0x20000090
 80446ac:	20000094 	.word	0x20000094

080446b0 <__sfputc_r>:
 80446b0:	6893      	ldr	r3, [r2, #8]
 80446b2:	3b01      	subs	r3, #1
 80446b4:	2b00      	cmp	r3, #0
 80446b6:	b410      	push	{r4}
 80446b8:	6093      	str	r3, [r2, #8]
 80446ba:	da08      	bge.n	80446ce <__sfputc_r+0x1e>
 80446bc:	6994      	ldr	r4, [r2, #24]
 80446be:	42a3      	cmp	r3, r4
 80446c0:	db01      	blt.n	80446c6 <__sfputc_r+0x16>
 80446c2:	290a      	cmp	r1, #10
 80446c4:	d103      	bne.n	80446ce <__sfputc_r+0x1e>
 80446c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80446ca:	f7ff bc69 	b.w	8043fa0 <__swbuf_r>
 80446ce:	6813      	ldr	r3, [r2, #0]
 80446d0:	1c58      	adds	r0, r3, #1
 80446d2:	6010      	str	r0, [r2, #0]
 80446d4:	7019      	strb	r1, [r3, #0]
 80446d6:	4608      	mov	r0, r1
 80446d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80446dc:	4770      	bx	lr

080446de <__sfputs_r>:
 80446de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80446e0:	4606      	mov	r6, r0
 80446e2:	460f      	mov	r7, r1
 80446e4:	4614      	mov	r4, r2
 80446e6:	18d5      	adds	r5, r2, r3
 80446e8:	42ac      	cmp	r4, r5
 80446ea:	d101      	bne.n	80446f0 <__sfputs_r+0x12>
 80446ec:	2000      	movs	r0, #0
 80446ee:	e007      	b.n	8044700 <__sfputs_r+0x22>
 80446f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80446f4:	463a      	mov	r2, r7
 80446f6:	4630      	mov	r0, r6
 80446f8:	f7ff ffda 	bl	80446b0 <__sfputc_r>
 80446fc:	1c43      	adds	r3, r0, #1
 80446fe:	d1f3      	bne.n	80446e8 <__sfputs_r+0xa>
 8044700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08044704 <_vfiprintf_r>:
 8044704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044708:	460d      	mov	r5, r1
 804470a:	b09d      	sub	sp, #116	; 0x74
 804470c:	4614      	mov	r4, r2
 804470e:	4698      	mov	r8, r3
 8044710:	4606      	mov	r6, r0
 8044712:	b118      	cbz	r0, 804471c <_vfiprintf_r+0x18>
 8044714:	6983      	ldr	r3, [r0, #24]
 8044716:	b90b      	cbnz	r3, 804471c <_vfiprintf_r+0x18>
 8044718:	f7ff fe1c 	bl	8044354 <__sinit>
 804471c:	4b89      	ldr	r3, [pc, #548]	; (8044944 <_vfiprintf_r+0x240>)
 804471e:	429d      	cmp	r5, r3
 8044720:	d11b      	bne.n	804475a <_vfiprintf_r+0x56>
 8044722:	6875      	ldr	r5, [r6, #4]
 8044724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8044726:	07d9      	lsls	r1, r3, #31
 8044728:	d405      	bmi.n	8044736 <_vfiprintf_r+0x32>
 804472a:	89ab      	ldrh	r3, [r5, #12]
 804472c:	059a      	lsls	r2, r3, #22
 804472e:	d402      	bmi.n	8044736 <_vfiprintf_r+0x32>
 8044730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8044732:	f7ff fead 	bl	8044490 <__retarget_lock_acquire_recursive>
 8044736:	89ab      	ldrh	r3, [r5, #12]
 8044738:	071b      	lsls	r3, r3, #28
 804473a:	d501      	bpl.n	8044740 <_vfiprintf_r+0x3c>
 804473c:	692b      	ldr	r3, [r5, #16]
 804473e:	b9eb      	cbnz	r3, 804477c <_vfiprintf_r+0x78>
 8044740:	4629      	mov	r1, r5
 8044742:	4630      	mov	r0, r6
 8044744:	f7ff fc7e 	bl	8044044 <__swsetup_r>
 8044748:	b1c0      	cbz	r0, 804477c <_vfiprintf_r+0x78>
 804474a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804474c:	07dc      	lsls	r4, r3, #31
 804474e:	d50e      	bpl.n	804476e <_vfiprintf_r+0x6a>
 8044750:	f04f 30ff 	mov.w	r0, #4294967295
 8044754:	b01d      	add	sp, #116	; 0x74
 8044756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804475a:	4b7b      	ldr	r3, [pc, #492]	; (8044948 <_vfiprintf_r+0x244>)
 804475c:	429d      	cmp	r5, r3
 804475e:	d101      	bne.n	8044764 <_vfiprintf_r+0x60>
 8044760:	68b5      	ldr	r5, [r6, #8]
 8044762:	e7df      	b.n	8044724 <_vfiprintf_r+0x20>
 8044764:	4b79      	ldr	r3, [pc, #484]	; (804494c <_vfiprintf_r+0x248>)
 8044766:	429d      	cmp	r5, r3
 8044768:	bf08      	it	eq
 804476a:	68f5      	ldreq	r5, [r6, #12]
 804476c:	e7da      	b.n	8044724 <_vfiprintf_r+0x20>
 804476e:	89ab      	ldrh	r3, [r5, #12]
 8044770:	0598      	lsls	r0, r3, #22
 8044772:	d4ed      	bmi.n	8044750 <_vfiprintf_r+0x4c>
 8044774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8044776:	f7ff fe8c 	bl	8044492 <__retarget_lock_release_recursive>
 804477a:	e7e9      	b.n	8044750 <_vfiprintf_r+0x4c>
 804477c:	2300      	movs	r3, #0
 804477e:	9309      	str	r3, [sp, #36]	; 0x24
 8044780:	2320      	movs	r3, #32
 8044782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8044786:	f8cd 800c 	str.w	r8, [sp, #12]
 804478a:	2330      	movs	r3, #48	; 0x30
 804478c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8044950 <_vfiprintf_r+0x24c>
 8044790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8044794:	f04f 0901 	mov.w	r9, #1
 8044798:	4623      	mov	r3, r4
 804479a:	469a      	mov	sl, r3
 804479c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80447a0:	b10a      	cbz	r2, 80447a6 <_vfiprintf_r+0xa2>
 80447a2:	2a25      	cmp	r2, #37	; 0x25
 80447a4:	d1f9      	bne.n	804479a <_vfiprintf_r+0x96>
 80447a6:	ebba 0b04 	subs.w	fp, sl, r4
 80447aa:	d00b      	beq.n	80447c4 <_vfiprintf_r+0xc0>
 80447ac:	465b      	mov	r3, fp
 80447ae:	4622      	mov	r2, r4
 80447b0:	4629      	mov	r1, r5
 80447b2:	4630      	mov	r0, r6
 80447b4:	f7ff ff93 	bl	80446de <__sfputs_r>
 80447b8:	3001      	adds	r0, #1
 80447ba:	f000 80aa 	beq.w	8044912 <_vfiprintf_r+0x20e>
 80447be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80447c0:	445a      	add	r2, fp
 80447c2:	9209      	str	r2, [sp, #36]	; 0x24
 80447c4:	f89a 3000 	ldrb.w	r3, [sl]
 80447c8:	2b00      	cmp	r3, #0
 80447ca:	f000 80a2 	beq.w	8044912 <_vfiprintf_r+0x20e>
 80447ce:	2300      	movs	r3, #0
 80447d0:	f04f 32ff 	mov.w	r2, #4294967295
 80447d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80447d8:	f10a 0a01 	add.w	sl, sl, #1
 80447dc:	9304      	str	r3, [sp, #16]
 80447de:	9307      	str	r3, [sp, #28]
 80447e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80447e4:	931a      	str	r3, [sp, #104]	; 0x68
 80447e6:	4654      	mov	r4, sl
 80447e8:	2205      	movs	r2, #5
 80447ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80447ee:	4858      	ldr	r0, [pc, #352]	; (8044950 <_vfiprintf_r+0x24c>)
 80447f0:	f7fb fd26 	bl	8040240 <memchr>
 80447f4:	9a04      	ldr	r2, [sp, #16]
 80447f6:	b9d8      	cbnz	r0, 8044830 <_vfiprintf_r+0x12c>
 80447f8:	06d1      	lsls	r1, r2, #27
 80447fa:	bf44      	itt	mi
 80447fc:	2320      	movmi	r3, #32
 80447fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8044802:	0713      	lsls	r3, r2, #28
 8044804:	bf44      	itt	mi
 8044806:	232b      	movmi	r3, #43	; 0x2b
 8044808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804480c:	f89a 3000 	ldrb.w	r3, [sl]
 8044810:	2b2a      	cmp	r3, #42	; 0x2a
 8044812:	d015      	beq.n	8044840 <_vfiprintf_r+0x13c>
 8044814:	9a07      	ldr	r2, [sp, #28]
 8044816:	4654      	mov	r4, sl
 8044818:	2000      	movs	r0, #0
 804481a:	f04f 0c0a 	mov.w	ip, #10
 804481e:	4621      	mov	r1, r4
 8044820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8044824:	3b30      	subs	r3, #48	; 0x30
 8044826:	2b09      	cmp	r3, #9
 8044828:	d94e      	bls.n	80448c8 <_vfiprintf_r+0x1c4>
 804482a:	b1b0      	cbz	r0, 804485a <_vfiprintf_r+0x156>
 804482c:	9207      	str	r2, [sp, #28]
 804482e:	e014      	b.n	804485a <_vfiprintf_r+0x156>
 8044830:	eba0 0308 	sub.w	r3, r0, r8
 8044834:	fa09 f303 	lsl.w	r3, r9, r3
 8044838:	4313      	orrs	r3, r2
 804483a:	9304      	str	r3, [sp, #16]
 804483c:	46a2      	mov	sl, r4
 804483e:	e7d2      	b.n	80447e6 <_vfiprintf_r+0xe2>
 8044840:	9b03      	ldr	r3, [sp, #12]
 8044842:	1d19      	adds	r1, r3, #4
 8044844:	681b      	ldr	r3, [r3, #0]
 8044846:	9103      	str	r1, [sp, #12]
 8044848:	2b00      	cmp	r3, #0
 804484a:	bfbb      	ittet	lt
 804484c:	425b      	neglt	r3, r3
 804484e:	f042 0202 	orrlt.w	r2, r2, #2
 8044852:	9307      	strge	r3, [sp, #28]
 8044854:	9307      	strlt	r3, [sp, #28]
 8044856:	bfb8      	it	lt
 8044858:	9204      	strlt	r2, [sp, #16]
 804485a:	7823      	ldrb	r3, [r4, #0]
 804485c:	2b2e      	cmp	r3, #46	; 0x2e
 804485e:	d10c      	bne.n	804487a <_vfiprintf_r+0x176>
 8044860:	7863      	ldrb	r3, [r4, #1]
 8044862:	2b2a      	cmp	r3, #42	; 0x2a
 8044864:	d135      	bne.n	80448d2 <_vfiprintf_r+0x1ce>
 8044866:	9b03      	ldr	r3, [sp, #12]
 8044868:	1d1a      	adds	r2, r3, #4
 804486a:	681b      	ldr	r3, [r3, #0]
 804486c:	9203      	str	r2, [sp, #12]
 804486e:	2b00      	cmp	r3, #0
 8044870:	bfb8      	it	lt
 8044872:	f04f 33ff 	movlt.w	r3, #4294967295
 8044876:	3402      	adds	r4, #2
 8044878:	9305      	str	r3, [sp, #20]
 804487a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8044960 <_vfiprintf_r+0x25c>
 804487e:	7821      	ldrb	r1, [r4, #0]
 8044880:	2203      	movs	r2, #3
 8044882:	4650      	mov	r0, sl
 8044884:	f7fb fcdc 	bl	8040240 <memchr>
 8044888:	b140      	cbz	r0, 804489c <_vfiprintf_r+0x198>
 804488a:	2340      	movs	r3, #64	; 0x40
 804488c:	eba0 000a 	sub.w	r0, r0, sl
 8044890:	fa03 f000 	lsl.w	r0, r3, r0
 8044894:	9b04      	ldr	r3, [sp, #16]
 8044896:	4303      	orrs	r3, r0
 8044898:	3401      	adds	r4, #1
 804489a:	9304      	str	r3, [sp, #16]
 804489c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80448a0:	482c      	ldr	r0, [pc, #176]	; (8044954 <_vfiprintf_r+0x250>)
 80448a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80448a6:	2206      	movs	r2, #6
 80448a8:	f7fb fcca 	bl	8040240 <memchr>
 80448ac:	2800      	cmp	r0, #0
 80448ae:	d03f      	beq.n	8044930 <_vfiprintf_r+0x22c>
 80448b0:	4b29      	ldr	r3, [pc, #164]	; (8044958 <_vfiprintf_r+0x254>)
 80448b2:	bb1b      	cbnz	r3, 80448fc <_vfiprintf_r+0x1f8>
 80448b4:	9b03      	ldr	r3, [sp, #12]
 80448b6:	3307      	adds	r3, #7
 80448b8:	f023 0307 	bic.w	r3, r3, #7
 80448bc:	3308      	adds	r3, #8
 80448be:	9303      	str	r3, [sp, #12]
 80448c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80448c2:	443b      	add	r3, r7
 80448c4:	9309      	str	r3, [sp, #36]	; 0x24
 80448c6:	e767      	b.n	8044798 <_vfiprintf_r+0x94>
 80448c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80448cc:	460c      	mov	r4, r1
 80448ce:	2001      	movs	r0, #1
 80448d0:	e7a5      	b.n	804481e <_vfiprintf_r+0x11a>
 80448d2:	2300      	movs	r3, #0
 80448d4:	3401      	adds	r4, #1
 80448d6:	9305      	str	r3, [sp, #20]
 80448d8:	4619      	mov	r1, r3
 80448da:	f04f 0c0a 	mov.w	ip, #10
 80448de:	4620      	mov	r0, r4
 80448e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80448e4:	3a30      	subs	r2, #48	; 0x30
 80448e6:	2a09      	cmp	r2, #9
 80448e8:	d903      	bls.n	80448f2 <_vfiprintf_r+0x1ee>
 80448ea:	2b00      	cmp	r3, #0
 80448ec:	d0c5      	beq.n	804487a <_vfiprintf_r+0x176>
 80448ee:	9105      	str	r1, [sp, #20]
 80448f0:	e7c3      	b.n	804487a <_vfiprintf_r+0x176>
 80448f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80448f6:	4604      	mov	r4, r0
 80448f8:	2301      	movs	r3, #1
 80448fa:	e7f0      	b.n	80448de <_vfiprintf_r+0x1da>
 80448fc:	ab03      	add	r3, sp, #12
 80448fe:	9300      	str	r3, [sp, #0]
 8044900:	462a      	mov	r2, r5
 8044902:	4b16      	ldr	r3, [pc, #88]	; (804495c <_vfiprintf_r+0x258>)
 8044904:	a904      	add	r1, sp, #16
 8044906:	4630      	mov	r0, r6
 8044908:	f3af 8000 	nop.w
 804490c:	4607      	mov	r7, r0
 804490e:	1c78      	adds	r0, r7, #1
 8044910:	d1d6      	bne.n	80448c0 <_vfiprintf_r+0x1bc>
 8044912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8044914:	07d9      	lsls	r1, r3, #31
 8044916:	d405      	bmi.n	8044924 <_vfiprintf_r+0x220>
 8044918:	89ab      	ldrh	r3, [r5, #12]
 804491a:	059a      	lsls	r2, r3, #22
 804491c:	d402      	bmi.n	8044924 <_vfiprintf_r+0x220>
 804491e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8044920:	f7ff fdb7 	bl	8044492 <__retarget_lock_release_recursive>
 8044924:	89ab      	ldrh	r3, [r5, #12]
 8044926:	065b      	lsls	r3, r3, #25
 8044928:	f53f af12 	bmi.w	8044750 <_vfiprintf_r+0x4c>
 804492c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804492e:	e711      	b.n	8044754 <_vfiprintf_r+0x50>
 8044930:	ab03      	add	r3, sp, #12
 8044932:	9300      	str	r3, [sp, #0]
 8044934:	462a      	mov	r2, r5
 8044936:	4b09      	ldr	r3, [pc, #36]	; (804495c <_vfiprintf_r+0x258>)
 8044938:	a904      	add	r1, sp, #16
 804493a:	4630      	mov	r0, r6
 804493c:	f000 f880 	bl	8044a40 <_printf_i>
 8044940:	e7e4      	b.n	804490c <_vfiprintf_r+0x208>
 8044942:	bf00      	nop
 8044944:	08044ee4 	.word	0x08044ee4
 8044948:	08044f04 	.word	0x08044f04
 804494c:	08044ec4 	.word	0x08044ec4
 8044950:	08044f24 	.word	0x08044f24
 8044954:	08044f2e 	.word	0x08044f2e
 8044958:	00000000 	.word	0x00000000
 804495c:	080446df 	.word	0x080446df
 8044960:	08044f2a 	.word	0x08044f2a

08044964 <_printf_common>:
 8044964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8044968:	4616      	mov	r6, r2
 804496a:	4699      	mov	r9, r3
 804496c:	688a      	ldr	r2, [r1, #8]
 804496e:	690b      	ldr	r3, [r1, #16]
 8044970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8044974:	4293      	cmp	r3, r2
 8044976:	bfb8      	it	lt
 8044978:	4613      	movlt	r3, r2
 804497a:	6033      	str	r3, [r6, #0]
 804497c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8044980:	4607      	mov	r7, r0
 8044982:	460c      	mov	r4, r1
 8044984:	b10a      	cbz	r2, 804498a <_printf_common+0x26>
 8044986:	3301      	adds	r3, #1
 8044988:	6033      	str	r3, [r6, #0]
 804498a:	6823      	ldr	r3, [r4, #0]
 804498c:	0699      	lsls	r1, r3, #26
 804498e:	bf42      	ittt	mi
 8044990:	6833      	ldrmi	r3, [r6, #0]
 8044992:	3302      	addmi	r3, #2
 8044994:	6033      	strmi	r3, [r6, #0]
 8044996:	6825      	ldr	r5, [r4, #0]
 8044998:	f015 0506 	ands.w	r5, r5, #6
 804499c:	d106      	bne.n	80449ac <_printf_common+0x48>
 804499e:	f104 0a19 	add.w	sl, r4, #25
 80449a2:	68e3      	ldr	r3, [r4, #12]
 80449a4:	6832      	ldr	r2, [r6, #0]
 80449a6:	1a9b      	subs	r3, r3, r2
 80449a8:	42ab      	cmp	r3, r5
 80449aa:	dc26      	bgt.n	80449fa <_printf_common+0x96>
 80449ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80449b0:	1e13      	subs	r3, r2, #0
 80449b2:	6822      	ldr	r2, [r4, #0]
 80449b4:	bf18      	it	ne
 80449b6:	2301      	movne	r3, #1
 80449b8:	0692      	lsls	r2, r2, #26
 80449ba:	d42b      	bmi.n	8044a14 <_printf_common+0xb0>
 80449bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80449c0:	4649      	mov	r1, r9
 80449c2:	4638      	mov	r0, r7
 80449c4:	47c0      	blx	r8
 80449c6:	3001      	adds	r0, #1
 80449c8:	d01e      	beq.n	8044a08 <_printf_common+0xa4>
 80449ca:	6823      	ldr	r3, [r4, #0]
 80449cc:	68e5      	ldr	r5, [r4, #12]
 80449ce:	6832      	ldr	r2, [r6, #0]
 80449d0:	f003 0306 	and.w	r3, r3, #6
 80449d4:	2b04      	cmp	r3, #4
 80449d6:	bf08      	it	eq
 80449d8:	1aad      	subeq	r5, r5, r2
 80449da:	68a3      	ldr	r3, [r4, #8]
 80449dc:	6922      	ldr	r2, [r4, #16]
 80449de:	bf0c      	ite	eq
 80449e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80449e4:	2500      	movne	r5, #0
 80449e6:	4293      	cmp	r3, r2
 80449e8:	bfc4      	itt	gt
 80449ea:	1a9b      	subgt	r3, r3, r2
 80449ec:	18ed      	addgt	r5, r5, r3
 80449ee:	2600      	movs	r6, #0
 80449f0:	341a      	adds	r4, #26
 80449f2:	42b5      	cmp	r5, r6
 80449f4:	d11a      	bne.n	8044a2c <_printf_common+0xc8>
 80449f6:	2000      	movs	r0, #0
 80449f8:	e008      	b.n	8044a0c <_printf_common+0xa8>
 80449fa:	2301      	movs	r3, #1
 80449fc:	4652      	mov	r2, sl
 80449fe:	4649      	mov	r1, r9
 8044a00:	4638      	mov	r0, r7
 8044a02:	47c0      	blx	r8
 8044a04:	3001      	adds	r0, #1
 8044a06:	d103      	bne.n	8044a10 <_printf_common+0xac>
 8044a08:	f04f 30ff 	mov.w	r0, #4294967295
 8044a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044a10:	3501      	adds	r5, #1
 8044a12:	e7c6      	b.n	80449a2 <_printf_common+0x3e>
 8044a14:	18e1      	adds	r1, r4, r3
 8044a16:	1c5a      	adds	r2, r3, #1
 8044a18:	2030      	movs	r0, #48	; 0x30
 8044a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8044a1e:	4422      	add	r2, r4
 8044a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8044a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8044a28:	3302      	adds	r3, #2
 8044a2a:	e7c7      	b.n	80449bc <_printf_common+0x58>
 8044a2c:	2301      	movs	r3, #1
 8044a2e:	4622      	mov	r2, r4
 8044a30:	4649      	mov	r1, r9
 8044a32:	4638      	mov	r0, r7
 8044a34:	47c0      	blx	r8
 8044a36:	3001      	adds	r0, #1
 8044a38:	d0e6      	beq.n	8044a08 <_printf_common+0xa4>
 8044a3a:	3601      	adds	r6, #1
 8044a3c:	e7d9      	b.n	80449f2 <_printf_common+0x8e>
	...

08044a40 <_printf_i>:
 8044a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8044a44:	460c      	mov	r4, r1
 8044a46:	4691      	mov	r9, r2
 8044a48:	7e27      	ldrb	r7, [r4, #24]
 8044a4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8044a4c:	2f78      	cmp	r7, #120	; 0x78
 8044a4e:	4680      	mov	r8, r0
 8044a50:	469a      	mov	sl, r3
 8044a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8044a56:	d807      	bhi.n	8044a68 <_printf_i+0x28>
 8044a58:	2f62      	cmp	r7, #98	; 0x62
 8044a5a:	d80a      	bhi.n	8044a72 <_printf_i+0x32>
 8044a5c:	2f00      	cmp	r7, #0
 8044a5e:	f000 80d8 	beq.w	8044c12 <_printf_i+0x1d2>
 8044a62:	2f58      	cmp	r7, #88	; 0x58
 8044a64:	f000 80a3 	beq.w	8044bae <_printf_i+0x16e>
 8044a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8044a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8044a70:	e03a      	b.n	8044ae8 <_printf_i+0xa8>
 8044a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8044a76:	2b15      	cmp	r3, #21
 8044a78:	d8f6      	bhi.n	8044a68 <_printf_i+0x28>
 8044a7a:	a001      	add	r0, pc, #4	; (adr r0, 8044a80 <_printf_i+0x40>)
 8044a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8044a80:	08044ad9 	.word	0x08044ad9
 8044a84:	08044aed 	.word	0x08044aed
 8044a88:	08044a69 	.word	0x08044a69
 8044a8c:	08044a69 	.word	0x08044a69
 8044a90:	08044a69 	.word	0x08044a69
 8044a94:	08044a69 	.word	0x08044a69
 8044a98:	08044aed 	.word	0x08044aed
 8044a9c:	08044a69 	.word	0x08044a69
 8044aa0:	08044a69 	.word	0x08044a69
 8044aa4:	08044a69 	.word	0x08044a69
 8044aa8:	08044a69 	.word	0x08044a69
 8044aac:	08044bf9 	.word	0x08044bf9
 8044ab0:	08044b1d 	.word	0x08044b1d
 8044ab4:	08044bdb 	.word	0x08044bdb
 8044ab8:	08044a69 	.word	0x08044a69
 8044abc:	08044a69 	.word	0x08044a69
 8044ac0:	08044c1b 	.word	0x08044c1b
 8044ac4:	08044a69 	.word	0x08044a69
 8044ac8:	08044b1d 	.word	0x08044b1d
 8044acc:	08044a69 	.word	0x08044a69
 8044ad0:	08044a69 	.word	0x08044a69
 8044ad4:	08044be3 	.word	0x08044be3
 8044ad8:	680b      	ldr	r3, [r1, #0]
 8044ada:	1d1a      	adds	r2, r3, #4
 8044adc:	681b      	ldr	r3, [r3, #0]
 8044ade:	600a      	str	r2, [r1, #0]
 8044ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8044ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8044ae8:	2301      	movs	r3, #1
 8044aea:	e0a3      	b.n	8044c34 <_printf_i+0x1f4>
 8044aec:	6825      	ldr	r5, [r4, #0]
 8044aee:	6808      	ldr	r0, [r1, #0]
 8044af0:	062e      	lsls	r6, r5, #24
 8044af2:	f100 0304 	add.w	r3, r0, #4
 8044af6:	d50a      	bpl.n	8044b0e <_printf_i+0xce>
 8044af8:	6805      	ldr	r5, [r0, #0]
 8044afa:	600b      	str	r3, [r1, #0]
 8044afc:	2d00      	cmp	r5, #0
 8044afe:	da03      	bge.n	8044b08 <_printf_i+0xc8>
 8044b00:	232d      	movs	r3, #45	; 0x2d
 8044b02:	426d      	negs	r5, r5
 8044b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044b08:	485e      	ldr	r0, [pc, #376]	; (8044c84 <_printf_i+0x244>)
 8044b0a:	230a      	movs	r3, #10
 8044b0c:	e019      	b.n	8044b42 <_printf_i+0x102>
 8044b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8044b12:	6805      	ldr	r5, [r0, #0]
 8044b14:	600b      	str	r3, [r1, #0]
 8044b16:	bf18      	it	ne
 8044b18:	b22d      	sxthne	r5, r5
 8044b1a:	e7ef      	b.n	8044afc <_printf_i+0xbc>
 8044b1c:	680b      	ldr	r3, [r1, #0]
 8044b1e:	6825      	ldr	r5, [r4, #0]
 8044b20:	1d18      	adds	r0, r3, #4
 8044b22:	6008      	str	r0, [r1, #0]
 8044b24:	0628      	lsls	r0, r5, #24
 8044b26:	d501      	bpl.n	8044b2c <_printf_i+0xec>
 8044b28:	681d      	ldr	r5, [r3, #0]
 8044b2a:	e002      	b.n	8044b32 <_printf_i+0xf2>
 8044b2c:	0669      	lsls	r1, r5, #25
 8044b2e:	d5fb      	bpl.n	8044b28 <_printf_i+0xe8>
 8044b30:	881d      	ldrh	r5, [r3, #0]
 8044b32:	4854      	ldr	r0, [pc, #336]	; (8044c84 <_printf_i+0x244>)
 8044b34:	2f6f      	cmp	r7, #111	; 0x6f
 8044b36:	bf0c      	ite	eq
 8044b38:	2308      	moveq	r3, #8
 8044b3a:	230a      	movne	r3, #10
 8044b3c:	2100      	movs	r1, #0
 8044b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8044b42:	6866      	ldr	r6, [r4, #4]
 8044b44:	60a6      	str	r6, [r4, #8]
 8044b46:	2e00      	cmp	r6, #0
 8044b48:	bfa2      	ittt	ge
 8044b4a:	6821      	ldrge	r1, [r4, #0]
 8044b4c:	f021 0104 	bicge.w	r1, r1, #4
 8044b50:	6021      	strge	r1, [r4, #0]
 8044b52:	b90d      	cbnz	r5, 8044b58 <_printf_i+0x118>
 8044b54:	2e00      	cmp	r6, #0
 8044b56:	d04d      	beq.n	8044bf4 <_printf_i+0x1b4>
 8044b58:	4616      	mov	r6, r2
 8044b5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8044b5e:	fb03 5711 	mls	r7, r3, r1, r5
 8044b62:	5dc7      	ldrb	r7, [r0, r7]
 8044b64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8044b68:	462f      	mov	r7, r5
 8044b6a:	42bb      	cmp	r3, r7
 8044b6c:	460d      	mov	r5, r1
 8044b6e:	d9f4      	bls.n	8044b5a <_printf_i+0x11a>
 8044b70:	2b08      	cmp	r3, #8
 8044b72:	d10b      	bne.n	8044b8c <_printf_i+0x14c>
 8044b74:	6823      	ldr	r3, [r4, #0]
 8044b76:	07df      	lsls	r7, r3, #31
 8044b78:	d508      	bpl.n	8044b8c <_printf_i+0x14c>
 8044b7a:	6923      	ldr	r3, [r4, #16]
 8044b7c:	6861      	ldr	r1, [r4, #4]
 8044b7e:	4299      	cmp	r1, r3
 8044b80:	bfde      	ittt	le
 8044b82:	2330      	movle	r3, #48	; 0x30
 8044b84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8044b88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8044b8c:	1b92      	subs	r2, r2, r6
 8044b8e:	6122      	str	r2, [r4, #16]
 8044b90:	f8cd a000 	str.w	sl, [sp]
 8044b94:	464b      	mov	r3, r9
 8044b96:	aa03      	add	r2, sp, #12
 8044b98:	4621      	mov	r1, r4
 8044b9a:	4640      	mov	r0, r8
 8044b9c:	f7ff fee2 	bl	8044964 <_printf_common>
 8044ba0:	3001      	adds	r0, #1
 8044ba2:	d14c      	bne.n	8044c3e <_printf_i+0x1fe>
 8044ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8044ba8:	b004      	add	sp, #16
 8044baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044bae:	4835      	ldr	r0, [pc, #212]	; (8044c84 <_printf_i+0x244>)
 8044bb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8044bb4:	6823      	ldr	r3, [r4, #0]
 8044bb6:	680e      	ldr	r6, [r1, #0]
 8044bb8:	061f      	lsls	r7, r3, #24
 8044bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8044bbe:	600e      	str	r6, [r1, #0]
 8044bc0:	d514      	bpl.n	8044bec <_printf_i+0x1ac>
 8044bc2:	07d9      	lsls	r1, r3, #31
 8044bc4:	bf44      	itt	mi
 8044bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8044bca:	6023      	strmi	r3, [r4, #0]
 8044bcc:	b91d      	cbnz	r5, 8044bd6 <_printf_i+0x196>
 8044bce:	6823      	ldr	r3, [r4, #0]
 8044bd0:	f023 0320 	bic.w	r3, r3, #32
 8044bd4:	6023      	str	r3, [r4, #0]
 8044bd6:	2310      	movs	r3, #16
 8044bd8:	e7b0      	b.n	8044b3c <_printf_i+0xfc>
 8044bda:	6823      	ldr	r3, [r4, #0]
 8044bdc:	f043 0320 	orr.w	r3, r3, #32
 8044be0:	6023      	str	r3, [r4, #0]
 8044be2:	2378      	movs	r3, #120	; 0x78
 8044be4:	4828      	ldr	r0, [pc, #160]	; (8044c88 <_printf_i+0x248>)
 8044be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8044bea:	e7e3      	b.n	8044bb4 <_printf_i+0x174>
 8044bec:	065e      	lsls	r6, r3, #25
 8044bee:	bf48      	it	mi
 8044bf0:	b2ad      	uxthmi	r5, r5
 8044bf2:	e7e6      	b.n	8044bc2 <_printf_i+0x182>
 8044bf4:	4616      	mov	r6, r2
 8044bf6:	e7bb      	b.n	8044b70 <_printf_i+0x130>
 8044bf8:	680b      	ldr	r3, [r1, #0]
 8044bfa:	6826      	ldr	r6, [r4, #0]
 8044bfc:	6960      	ldr	r0, [r4, #20]
 8044bfe:	1d1d      	adds	r5, r3, #4
 8044c00:	600d      	str	r5, [r1, #0]
 8044c02:	0635      	lsls	r5, r6, #24
 8044c04:	681b      	ldr	r3, [r3, #0]
 8044c06:	d501      	bpl.n	8044c0c <_printf_i+0x1cc>
 8044c08:	6018      	str	r0, [r3, #0]
 8044c0a:	e002      	b.n	8044c12 <_printf_i+0x1d2>
 8044c0c:	0671      	lsls	r1, r6, #25
 8044c0e:	d5fb      	bpl.n	8044c08 <_printf_i+0x1c8>
 8044c10:	8018      	strh	r0, [r3, #0]
 8044c12:	2300      	movs	r3, #0
 8044c14:	6123      	str	r3, [r4, #16]
 8044c16:	4616      	mov	r6, r2
 8044c18:	e7ba      	b.n	8044b90 <_printf_i+0x150>
 8044c1a:	680b      	ldr	r3, [r1, #0]
 8044c1c:	1d1a      	adds	r2, r3, #4
 8044c1e:	600a      	str	r2, [r1, #0]
 8044c20:	681e      	ldr	r6, [r3, #0]
 8044c22:	6862      	ldr	r2, [r4, #4]
 8044c24:	2100      	movs	r1, #0
 8044c26:	4630      	mov	r0, r6
 8044c28:	f7fb fb0a 	bl	8040240 <memchr>
 8044c2c:	b108      	cbz	r0, 8044c32 <_printf_i+0x1f2>
 8044c2e:	1b80      	subs	r0, r0, r6
 8044c30:	6060      	str	r0, [r4, #4]
 8044c32:	6863      	ldr	r3, [r4, #4]
 8044c34:	6123      	str	r3, [r4, #16]
 8044c36:	2300      	movs	r3, #0
 8044c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044c3c:	e7a8      	b.n	8044b90 <_printf_i+0x150>
 8044c3e:	6923      	ldr	r3, [r4, #16]
 8044c40:	4632      	mov	r2, r6
 8044c42:	4649      	mov	r1, r9
 8044c44:	4640      	mov	r0, r8
 8044c46:	47d0      	blx	sl
 8044c48:	3001      	adds	r0, #1
 8044c4a:	d0ab      	beq.n	8044ba4 <_printf_i+0x164>
 8044c4c:	6823      	ldr	r3, [r4, #0]
 8044c4e:	079b      	lsls	r3, r3, #30
 8044c50:	d413      	bmi.n	8044c7a <_printf_i+0x23a>
 8044c52:	68e0      	ldr	r0, [r4, #12]
 8044c54:	9b03      	ldr	r3, [sp, #12]
 8044c56:	4298      	cmp	r0, r3
 8044c58:	bfb8      	it	lt
 8044c5a:	4618      	movlt	r0, r3
 8044c5c:	e7a4      	b.n	8044ba8 <_printf_i+0x168>
 8044c5e:	2301      	movs	r3, #1
 8044c60:	4632      	mov	r2, r6
 8044c62:	4649      	mov	r1, r9
 8044c64:	4640      	mov	r0, r8
 8044c66:	47d0      	blx	sl
 8044c68:	3001      	adds	r0, #1
 8044c6a:	d09b      	beq.n	8044ba4 <_printf_i+0x164>
 8044c6c:	3501      	adds	r5, #1
 8044c6e:	68e3      	ldr	r3, [r4, #12]
 8044c70:	9903      	ldr	r1, [sp, #12]
 8044c72:	1a5b      	subs	r3, r3, r1
 8044c74:	42ab      	cmp	r3, r5
 8044c76:	dcf2      	bgt.n	8044c5e <_printf_i+0x21e>
 8044c78:	e7eb      	b.n	8044c52 <_printf_i+0x212>
 8044c7a:	2500      	movs	r5, #0
 8044c7c:	f104 0619 	add.w	r6, r4, #25
 8044c80:	e7f5      	b.n	8044c6e <_printf_i+0x22e>
 8044c82:	bf00      	nop
 8044c84:	08044f35 	.word	0x08044f35
 8044c88:	08044f46 	.word	0x08044f46

08044c8c <_sbrk_r>:
 8044c8c:	b538      	push	{r3, r4, r5, lr}
 8044c8e:	4d06      	ldr	r5, [pc, #24]	; (8044ca8 <_sbrk_r+0x1c>)
 8044c90:	2300      	movs	r3, #0
 8044c92:	4604      	mov	r4, r0
 8044c94:	4608      	mov	r0, r1
 8044c96:	602b      	str	r3, [r5, #0]
 8044c98:	f7fc f802 	bl	8040ca0 <_sbrk>
 8044c9c:	1c43      	adds	r3, r0, #1
 8044c9e:	d102      	bne.n	8044ca6 <_sbrk_r+0x1a>
 8044ca0:	682b      	ldr	r3, [r5, #0]
 8044ca2:	b103      	cbz	r3, 8044ca6 <_sbrk_r+0x1a>
 8044ca4:	6023      	str	r3, [r4, #0]
 8044ca6:	bd38      	pop	{r3, r4, r5, pc}
 8044ca8:	200001d0 	.word	0x200001d0

08044cac <__sread>:
 8044cac:	b510      	push	{r4, lr}
 8044cae:	460c      	mov	r4, r1
 8044cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044cb4:	f000 f8a0 	bl	8044df8 <_read_r>
 8044cb8:	2800      	cmp	r0, #0
 8044cba:	bfab      	itete	ge
 8044cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8044cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8044cc0:	181b      	addge	r3, r3, r0
 8044cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8044cc6:	bfac      	ite	ge
 8044cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8044cca:	81a3      	strhlt	r3, [r4, #12]
 8044ccc:	bd10      	pop	{r4, pc}

08044cce <__swrite>:
 8044cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044cd2:	461f      	mov	r7, r3
 8044cd4:	898b      	ldrh	r3, [r1, #12]
 8044cd6:	05db      	lsls	r3, r3, #23
 8044cd8:	4605      	mov	r5, r0
 8044cda:	460c      	mov	r4, r1
 8044cdc:	4616      	mov	r6, r2
 8044cde:	d505      	bpl.n	8044cec <__swrite+0x1e>
 8044ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044ce4:	2302      	movs	r3, #2
 8044ce6:	2200      	movs	r2, #0
 8044ce8:	f000 f868 	bl	8044dbc <_lseek_r>
 8044cec:	89a3      	ldrh	r3, [r4, #12]
 8044cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8044cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8044cf6:	81a3      	strh	r3, [r4, #12]
 8044cf8:	4632      	mov	r2, r6
 8044cfa:	463b      	mov	r3, r7
 8044cfc:	4628      	mov	r0, r5
 8044cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8044d02:	f000 b817 	b.w	8044d34 <_write_r>

08044d06 <__sseek>:
 8044d06:	b510      	push	{r4, lr}
 8044d08:	460c      	mov	r4, r1
 8044d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044d0e:	f000 f855 	bl	8044dbc <_lseek_r>
 8044d12:	1c43      	adds	r3, r0, #1
 8044d14:	89a3      	ldrh	r3, [r4, #12]
 8044d16:	bf15      	itete	ne
 8044d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8044d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8044d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8044d22:	81a3      	strheq	r3, [r4, #12]
 8044d24:	bf18      	it	ne
 8044d26:	81a3      	strhne	r3, [r4, #12]
 8044d28:	bd10      	pop	{r4, pc}

08044d2a <__sclose>:
 8044d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044d2e:	f000 b813 	b.w	8044d58 <_close_r>
	...

08044d34 <_write_r>:
 8044d34:	b538      	push	{r3, r4, r5, lr}
 8044d36:	4d07      	ldr	r5, [pc, #28]	; (8044d54 <_write_r+0x20>)
 8044d38:	4604      	mov	r4, r0
 8044d3a:	4608      	mov	r0, r1
 8044d3c:	4611      	mov	r1, r2
 8044d3e:	2200      	movs	r2, #0
 8044d40:	602a      	str	r2, [r5, #0]
 8044d42:	461a      	mov	r2, r3
 8044d44:	f7fb ff5b 	bl	8040bfe <_write>
 8044d48:	1c43      	adds	r3, r0, #1
 8044d4a:	d102      	bne.n	8044d52 <_write_r+0x1e>
 8044d4c:	682b      	ldr	r3, [r5, #0]
 8044d4e:	b103      	cbz	r3, 8044d52 <_write_r+0x1e>
 8044d50:	6023      	str	r3, [r4, #0]
 8044d52:	bd38      	pop	{r3, r4, r5, pc}
 8044d54:	200001d0 	.word	0x200001d0

08044d58 <_close_r>:
 8044d58:	b538      	push	{r3, r4, r5, lr}
 8044d5a:	4d06      	ldr	r5, [pc, #24]	; (8044d74 <_close_r+0x1c>)
 8044d5c:	2300      	movs	r3, #0
 8044d5e:	4604      	mov	r4, r0
 8044d60:	4608      	mov	r0, r1
 8044d62:	602b      	str	r3, [r5, #0]
 8044d64:	f7fb ff67 	bl	8040c36 <_close>
 8044d68:	1c43      	adds	r3, r0, #1
 8044d6a:	d102      	bne.n	8044d72 <_close_r+0x1a>
 8044d6c:	682b      	ldr	r3, [r5, #0]
 8044d6e:	b103      	cbz	r3, 8044d72 <_close_r+0x1a>
 8044d70:	6023      	str	r3, [r4, #0]
 8044d72:	bd38      	pop	{r3, r4, r5, pc}
 8044d74:	200001d0 	.word	0x200001d0

08044d78 <_fstat_r>:
 8044d78:	b538      	push	{r3, r4, r5, lr}
 8044d7a:	4d07      	ldr	r5, [pc, #28]	; (8044d98 <_fstat_r+0x20>)
 8044d7c:	2300      	movs	r3, #0
 8044d7e:	4604      	mov	r4, r0
 8044d80:	4608      	mov	r0, r1
 8044d82:	4611      	mov	r1, r2
 8044d84:	602b      	str	r3, [r5, #0]
 8044d86:	f7fb ff62 	bl	8040c4e <_fstat>
 8044d8a:	1c43      	adds	r3, r0, #1
 8044d8c:	d102      	bne.n	8044d94 <_fstat_r+0x1c>
 8044d8e:	682b      	ldr	r3, [r5, #0]
 8044d90:	b103      	cbz	r3, 8044d94 <_fstat_r+0x1c>
 8044d92:	6023      	str	r3, [r4, #0]
 8044d94:	bd38      	pop	{r3, r4, r5, pc}
 8044d96:	bf00      	nop
 8044d98:	200001d0 	.word	0x200001d0

08044d9c <_isatty_r>:
 8044d9c:	b538      	push	{r3, r4, r5, lr}
 8044d9e:	4d06      	ldr	r5, [pc, #24]	; (8044db8 <_isatty_r+0x1c>)
 8044da0:	2300      	movs	r3, #0
 8044da2:	4604      	mov	r4, r0
 8044da4:	4608      	mov	r0, r1
 8044da6:	602b      	str	r3, [r5, #0]
 8044da8:	f7fb ff61 	bl	8040c6e <_isatty>
 8044dac:	1c43      	adds	r3, r0, #1
 8044dae:	d102      	bne.n	8044db6 <_isatty_r+0x1a>
 8044db0:	682b      	ldr	r3, [r5, #0]
 8044db2:	b103      	cbz	r3, 8044db6 <_isatty_r+0x1a>
 8044db4:	6023      	str	r3, [r4, #0]
 8044db6:	bd38      	pop	{r3, r4, r5, pc}
 8044db8:	200001d0 	.word	0x200001d0

08044dbc <_lseek_r>:
 8044dbc:	b538      	push	{r3, r4, r5, lr}
 8044dbe:	4d07      	ldr	r5, [pc, #28]	; (8044ddc <_lseek_r+0x20>)
 8044dc0:	4604      	mov	r4, r0
 8044dc2:	4608      	mov	r0, r1
 8044dc4:	4611      	mov	r1, r2
 8044dc6:	2200      	movs	r2, #0
 8044dc8:	602a      	str	r2, [r5, #0]
 8044dca:	461a      	mov	r2, r3
 8044dcc:	f7fb ff5a 	bl	8040c84 <_lseek>
 8044dd0:	1c43      	adds	r3, r0, #1
 8044dd2:	d102      	bne.n	8044dda <_lseek_r+0x1e>
 8044dd4:	682b      	ldr	r3, [r5, #0]
 8044dd6:	b103      	cbz	r3, 8044dda <_lseek_r+0x1e>
 8044dd8:	6023      	str	r3, [r4, #0]
 8044dda:	bd38      	pop	{r3, r4, r5, pc}
 8044ddc:	200001d0 	.word	0x200001d0

08044de0 <__malloc_lock>:
 8044de0:	4801      	ldr	r0, [pc, #4]	; (8044de8 <__malloc_lock+0x8>)
 8044de2:	f7ff bb55 	b.w	8044490 <__retarget_lock_acquire_recursive>
 8044de6:	bf00      	nop
 8044de8:	200001c8 	.word	0x200001c8

08044dec <__malloc_unlock>:
 8044dec:	4801      	ldr	r0, [pc, #4]	; (8044df4 <__malloc_unlock+0x8>)
 8044dee:	f7ff bb50 	b.w	8044492 <__retarget_lock_release_recursive>
 8044df2:	bf00      	nop
 8044df4:	200001c8 	.word	0x200001c8

08044df8 <_read_r>:
 8044df8:	b538      	push	{r3, r4, r5, lr}
 8044dfa:	4d07      	ldr	r5, [pc, #28]	; (8044e18 <_read_r+0x20>)
 8044dfc:	4604      	mov	r4, r0
 8044dfe:	4608      	mov	r0, r1
 8044e00:	4611      	mov	r1, r2
 8044e02:	2200      	movs	r2, #0
 8044e04:	602a      	str	r2, [r5, #0]
 8044e06:	461a      	mov	r2, r3
 8044e08:	f7fb fedc 	bl	8040bc4 <_read>
 8044e0c:	1c43      	adds	r3, r0, #1
 8044e0e:	d102      	bne.n	8044e16 <_read_r+0x1e>
 8044e10:	682b      	ldr	r3, [r5, #0]
 8044e12:	b103      	cbz	r3, 8044e16 <_read_r+0x1e>
 8044e14:	6023      	str	r3, [r4, #0]
 8044e16:	bd38      	pop	{r3, r4, r5, pc}
 8044e18:	200001d0 	.word	0x200001d0

08044e1c <_init>:
 8044e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044e1e:	bf00      	nop
 8044e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044e22:	bc08      	pop	{r3}
 8044e24:	469e      	mov	lr, r3
 8044e26:	4770      	bx	lr

08044e28 <_fini>:
 8044e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044e2a:	bf00      	nop
 8044e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044e2e:	bc08      	pop	{r3}
 8044e30:	469e      	mov	lr, r3
 8044e32:	4770      	bx	lr
