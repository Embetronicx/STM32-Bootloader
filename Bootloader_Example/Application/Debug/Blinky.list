
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003944  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08043b44  08043b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043c14  08043c14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08043c14  08043c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043c1c  08043c1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043c1c  08043c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043c20  08043c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08043c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08043c94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08043c94  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097a2  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bb  00000000  00000000  00029840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002b878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277c6  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000881c  00000000  00000000  0005371e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d82  00000000  00000000  0005bf3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014dcbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e0  00000000  00000000  0014dd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20000070 	.word	0x20000070
 804021c:	00000000 	.word	0x00000000
 8040220:	08043b2c 	.word	0x08043b2c

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	20000074 	.word	0x20000074
 804023c:	08043b2c 	.word	0x08043b2c

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b96e 	b.w	80405d4 <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9d08      	ldr	r5, [sp, #32]
 8040316:	4604      	mov	r4, r0
 8040318:	468c      	mov	ip, r1
 804031a:	2b00      	cmp	r3, #0
 804031c:	f040 8083 	bne.w	8040426 <__udivmoddi4+0x116>
 8040320:	428a      	cmp	r2, r1
 8040322:	4617      	mov	r7, r2
 8040324:	d947      	bls.n	80403b6 <__udivmoddi4+0xa6>
 8040326:	fab2 f282 	clz	r2, r2
 804032a:	b142      	cbz	r2, 804033e <__udivmoddi4+0x2e>
 804032c:	f1c2 0020 	rsb	r0, r2, #32
 8040330:	fa24 f000 	lsr.w	r0, r4, r0
 8040334:	4091      	lsls	r1, r2
 8040336:	4097      	lsls	r7, r2
 8040338:	ea40 0c01 	orr.w	ip, r0, r1
 804033c:	4094      	lsls	r4, r2
 804033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8040342:	0c23      	lsrs	r3, r4, #16
 8040344:	fbbc f6f8 	udiv	r6, ip, r8
 8040348:	fa1f fe87 	uxth.w	lr, r7
 804034c:	fb08 c116 	mls	r1, r8, r6, ip
 8040350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040354:	fb06 f10e 	mul.w	r1, r6, lr
 8040358:	4299      	cmp	r1, r3
 804035a:	d909      	bls.n	8040370 <__udivmoddi4+0x60>
 804035c:	18fb      	adds	r3, r7, r3
 804035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8040362:	f080 8119 	bcs.w	8040598 <__udivmoddi4+0x288>
 8040366:	4299      	cmp	r1, r3
 8040368:	f240 8116 	bls.w	8040598 <__udivmoddi4+0x288>
 804036c:	3e02      	subs	r6, #2
 804036e:	443b      	add	r3, r7
 8040370:	1a5b      	subs	r3, r3, r1
 8040372:	b2a4      	uxth	r4, r4
 8040374:	fbb3 f0f8 	udiv	r0, r3, r8
 8040378:	fb08 3310 	mls	r3, r8, r0, r3
 804037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040380:	fb00 fe0e 	mul.w	lr, r0, lr
 8040384:	45a6      	cmp	lr, r4
 8040386:	d909      	bls.n	804039c <__udivmoddi4+0x8c>
 8040388:	193c      	adds	r4, r7, r4
 804038a:	f100 33ff 	add.w	r3, r0, #4294967295
 804038e:	f080 8105 	bcs.w	804059c <__udivmoddi4+0x28c>
 8040392:	45a6      	cmp	lr, r4
 8040394:	f240 8102 	bls.w	804059c <__udivmoddi4+0x28c>
 8040398:	3802      	subs	r0, #2
 804039a:	443c      	add	r4, r7
 804039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80403a0:	eba4 040e 	sub.w	r4, r4, lr
 80403a4:	2600      	movs	r6, #0
 80403a6:	b11d      	cbz	r5, 80403b0 <__udivmoddi4+0xa0>
 80403a8:	40d4      	lsrs	r4, r2
 80403aa:	2300      	movs	r3, #0
 80403ac:	e9c5 4300 	strd	r4, r3, [r5]
 80403b0:	4631      	mov	r1, r6
 80403b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403b6:	b902      	cbnz	r2, 80403ba <__udivmoddi4+0xaa>
 80403b8:	deff      	udf	#255	; 0xff
 80403ba:	fab2 f282 	clz	r2, r2
 80403be:	2a00      	cmp	r2, #0
 80403c0:	d150      	bne.n	8040464 <__udivmoddi4+0x154>
 80403c2:	1bcb      	subs	r3, r1, r7
 80403c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403c8:	fa1f f887 	uxth.w	r8, r7
 80403cc:	2601      	movs	r6, #1
 80403ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80403d2:	0c21      	lsrs	r1, r4, #16
 80403d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80403d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80403dc:	fb08 f30c 	mul.w	r3, r8, ip
 80403e0:	428b      	cmp	r3, r1
 80403e2:	d907      	bls.n	80403f4 <__udivmoddi4+0xe4>
 80403e4:	1879      	adds	r1, r7, r1
 80403e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80403ea:	d202      	bcs.n	80403f2 <__udivmoddi4+0xe2>
 80403ec:	428b      	cmp	r3, r1
 80403ee:	f200 80e9 	bhi.w	80405c4 <__udivmoddi4+0x2b4>
 80403f2:	4684      	mov	ip, r0
 80403f4:	1ac9      	subs	r1, r1, r3
 80403f6:	b2a3      	uxth	r3, r4
 80403f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80403fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8040400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040404:	fb08 f800 	mul.w	r8, r8, r0
 8040408:	45a0      	cmp	r8, r4
 804040a:	d907      	bls.n	804041c <__udivmoddi4+0x10c>
 804040c:	193c      	adds	r4, r7, r4
 804040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8040412:	d202      	bcs.n	804041a <__udivmoddi4+0x10a>
 8040414:	45a0      	cmp	r8, r4
 8040416:	f200 80d9 	bhi.w	80405cc <__udivmoddi4+0x2bc>
 804041a:	4618      	mov	r0, r3
 804041c:	eba4 0408 	sub.w	r4, r4, r8
 8040420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040424:	e7bf      	b.n	80403a6 <__udivmoddi4+0x96>
 8040426:	428b      	cmp	r3, r1
 8040428:	d909      	bls.n	804043e <__udivmoddi4+0x12e>
 804042a:	2d00      	cmp	r5, #0
 804042c:	f000 80b1 	beq.w	8040592 <__udivmoddi4+0x282>
 8040430:	2600      	movs	r6, #0
 8040432:	e9c5 0100 	strd	r0, r1, [r5]
 8040436:	4630      	mov	r0, r6
 8040438:	4631      	mov	r1, r6
 804043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804043e:	fab3 f683 	clz	r6, r3
 8040442:	2e00      	cmp	r6, #0
 8040444:	d14a      	bne.n	80404dc <__udivmoddi4+0x1cc>
 8040446:	428b      	cmp	r3, r1
 8040448:	d302      	bcc.n	8040450 <__udivmoddi4+0x140>
 804044a:	4282      	cmp	r2, r0
 804044c:	f200 80b8 	bhi.w	80405c0 <__udivmoddi4+0x2b0>
 8040450:	1a84      	subs	r4, r0, r2
 8040452:	eb61 0103 	sbc.w	r1, r1, r3
 8040456:	2001      	movs	r0, #1
 8040458:	468c      	mov	ip, r1
 804045a:	2d00      	cmp	r5, #0
 804045c:	d0a8      	beq.n	80403b0 <__udivmoddi4+0xa0>
 804045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8040462:	e7a5      	b.n	80403b0 <__udivmoddi4+0xa0>
 8040464:	f1c2 0320 	rsb	r3, r2, #32
 8040468:	fa20 f603 	lsr.w	r6, r0, r3
 804046c:	4097      	lsls	r7, r2
 804046e:	fa01 f002 	lsl.w	r0, r1, r2
 8040472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040476:	40d9      	lsrs	r1, r3
 8040478:	4330      	orrs	r0, r6
 804047a:	0c03      	lsrs	r3, r0, #16
 804047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8040480:	fa1f f887 	uxth.w	r8, r7
 8040484:	fb0e 1116 	mls	r1, lr, r6, r1
 8040488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804048c:	fb06 f108 	mul.w	r1, r6, r8
 8040490:	4299      	cmp	r1, r3
 8040492:	fa04 f402 	lsl.w	r4, r4, r2
 8040496:	d909      	bls.n	80404ac <__udivmoddi4+0x19c>
 8040498:	18fb      	adds	r3, r7, r3
 804049a:	f106 3cff 	add.w	ip, r6, #4294967295
 804049e:	f080 808d 	bcs.w	80405bc <__udivmoddi4+0x2ac>
 80404a2:	4299      	cmp	r1, r3
 80404a4:	f240 808a 	bls.w	80405bc <__udivmoddi4+0x2ac>
 80404a8:	3e02      	subs	r6, #2
 80404aa:	443b      	add	r3, r7
 80404ac:	1a5b      	subs	r3, r3, r1
 80404ae:	b281      	uxth	r1, r0
 80404b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80404b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80404b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404bc:	fb00 f308 	mul.w	r3, r0, r8
 80404c0:	428b      	cmp	r3, r1
 80404c2:	d907      	bls.n	80404d4 <__udivmoddi4+0x1c4>
 80404c4:	1879      	adds	r1, r7, r1
 80404c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80404ca:	d273      	bcs.n	80405b4 <__udivmoddi4+0x2a4>
 80404cc:	428b      	cmp	r3, r1
 80404ce:	d971      	bls.n	80405b4 <__udivmoddi4+0x2a4>
 80404d0:	3802      	subs	r0, #2
 80404d2:	4439      	add	r1, r7
 80404d4:	1acb      	subs	r3, r1, r3
 80404d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80404da:	e778      	b.n	80403ce <__udivmoddi4+0xbe>
 80404dc:	f1c6 0c20 	rsb	ip, r6, #32
 80404e0:	fa03 f406 	lsl.w	r4, r3, r6
 80404e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80404e8:	431c      	orrs	r4, r3
 80404ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80404ee:	fa01 f306 	lsl.w	r3, r1, r6
 80404f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80404f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80404fa:	431f      	orrs	r7, r3
 80404fc:	0c3b      	lsrs	r3, r7, #16
 80404fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8040502:	fa1f f884 	uxth.w	r8, r4
 8040506:	fb0e 1119 	mls	r1, lr, r9, r1
 804050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 804050e:	fb09 fa08 	mul.w	sl, r9, r8
 8040512:	458a      	cmp	sl, r1
 8040514:	fa02 f206 	lsl.w	r2, r2, r6
 8040518:	fa00 f306 	lsl.w	r3, r0, r6
 804051c:	d908      	bls.n	8040530 <__udivmoddi4+0x220>
 804051e:	1861      	adds	r1, r4, r1
 8040520:	f109 30ff 	add.w	r0, r9, #4294967295
 8040524:	d248      	bcs.n	80405b8 <__udivmoddi4+0x2a8>
 8040526:	458a      	cmp	sl, r1
 8040528:	d946      	bls.n	80405b8 <__udivmoddi4+0x2a8>
 804052a:	f1a9 0902 	sub.w	r9, r9, #2
 804052e:	4421      	add	r1, r4
 8040530:	eba1 010a 	sub.w	r1, r1, sl
 8040534:	b2bf      	uxth	r7, r7
 8040536:	fbb1 f0fe 	udiv	r0, r1, lr
 804053a:	fb0e 1110 	mls	r1, lr, r0, r1
 804053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8040542:	fb00 f808 	mul.w	r8, r0, r8
 8040546:	45b8      	cmp	r8, r7
 8040548:	d907      	bls.n	804055a <__udivmoddi4+0x24a>
 804054a:	19e7      	adds	r7, r4, r7
 804054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8040550:	d22e      	bcs.n	80405b0 <__udivmoddi4+0x2a0>
 8040552:	45b8      	cmp	r8, r7
 8040554:	d92c      	bls.n	80405b0 <__udivmoddi4+0x2a0>
 8040556:	3802      	subs	r0, #2
 8040558:	4427      	add	r7, r4
 804055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 804055e:	eba7 0708 	sub.w	r7, r7, r8
 8040562:	fba0 8902 	umull	r8, r9, r0, r2
 8040566:	454f      	cmp	r7, r9
 8040568:	46c6      	mov	lr, r8
 804056a:	4649      	mov	r1, r9
 804056c:	d31a      	bcc.n	80405a4 <__udivmoddi4+0x294>
 804056e:	d017      	beq.n	80405a0 <__udivmoddi4+0x290>
 8040570:	b15d      	cbz	r5, 804058a <__udivmoddi4+0x27a>
 8040572:	ebb3 020e 	subs.w	r2, r3, lr
 8040576:	eb67 0701 	sbc.w	r7, r7, r1
 804057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 804057e:	40f2      	lsrs	r2, r6
 8040580:	ea4c 0202 	orr.w	r2, ip, r2
 8040584:	40f7      	lsrs	r7, r6
 8040586:	e9c5 2700 	strd	r2, r7, [r5]
 804058a:	2600      	movs	r6, #0
 804058c:	4631      	mov	r1, r6
 804058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040592:	462e      	mov	r6, r5
 8040594:	4628      	mov	r0, r5
 8040596:	e70b      	b.n	80403b0 <__udivmoddi4+0xa0>
 8040598:	4606      	mov	r6, r0
 804059a:	e6e9      	b.n	8040370 <__udivmoddi4+0x60>
 804059c:	4618      	mov	r0, r3
 804059e:	e6fd      	b.n	804039c <__udivmoddi4+0x8c>
 80405a0:	4543      	cmp	r3, r8
 80405a2:	d2e5      	bcs.n	8040570 <__udivmoddi4+0x260>
 80405a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80405a8:	eb69 0104 	sbc.w	r1, r9, r4
 80405ac:	3801      	subs	r0, #1
 80405ae:	e7df      	b.n	8040570 <__udivmoddi4+0x260>
 80405b0:	4608      	mov	r0, r1
 80405b2:	e7d2      	b.n	804055a <__udivmoddi4+0x24a>
 80405b4:	4660      	mov	r0, ip
 80405b6:	e78d      	b.n	80404d4 <__udivmoddi4+0x1c4>
 80405b8:	4681      	mov	r9, r0
 80405ba:	e7b9      	b.n	8040530 <__udivmoddi4+0x220>
 80405bc:	4666      	mov	r6, ip
 80405be:	e775      	b.n	80404ac <__udivmoddi4+0x19c>
 80405c0:	4630      	mov	r0, r6
 80405c2:	e74a      	b.n	804045a <__udivmoddi4+0x14a>
 80405c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80405c8:	4439      	add	r1, r7
 80405ca:	e713      	b.n	80403f4 <__udivmoddi4+0xe4>
 80405cc:	3802      	subs	r0, #2
 80405ce:	443c      	add	r4, r7
 80405d0:	e724      	b.n	804041c <__udivmoddi4+0x10c>
 80405d2:	bf00      	nop

080405d4 <__aeabi_idiv0>:
 80405d4:	4770      	bx	lr
 80405d6:	bf00      	nop

080405d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405d8:	b580      	push	{r7, lr}
 80405da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405dc:	f000 fa99 	bl	8040b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405e0:	f000 f822 	bl	8040628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405e4:	f000 f8ca 	bl	804077c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80405e8:	f000 f898 	bl	804071c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d)\r\n", APP_Version[0], APP_Version[1] );
 80405ec:	2300      	movs	r3, #0
 80405ee:	2202      	movs	r2, #2
 80405f0:	4619      	mov	r1, r3
 80405f2:	480b      	ldr	r0, [pc, #44]	; (8040620 <main+0x48>)
 80405f4:	f002 fb44 	bl	8042c80 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET );
 80405f8:	2201      	movs	r2, #1
 80405fa:	2180      	movs	r1, #128	; 0x80
 80405fc:	4809      	ldr	r0, [pc, #36]	; (8040624 <main+0x4c>)
 80405fe:	f000 fd9b 	bl	8041138 <HAL_GPIO_WritePin>
  HAL_Delay(5000);    //5 Sec delay
 8040602:	f241 3088 	movw	r0, #5000	; 0x1388
 8040606:	f000 fae1 	bl	8040bcc <HAL_Delay>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_RESET );
 804060a:	2200      	movs	r2, #0
 804060c:	2180      	movs	r1, #128	; 0x80
 804060e:	4805      	ldr	r0, [pc, #20]	; (8040624 <main+0x4c>)
 8040610:	f000 fd92 	bl	8041138 <HAL_GPIO_WritePin>
	HAL_Delay(5000);	//5 Sec delay
 8040614:	f241 3088 	movw	r0, #5000	; 0x1388
 8040618:	f000 fad8 	bl	8040bcc <HAL_Delay>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET );
 804061c:	e7ec      	b.n	80405f8 <main+0x20>
 804061e:	bf00      	nop
 8040620:	08043b44 	.word	0x08043b44
 8040624:	40020400 	.word	0x40020400

08040628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040628:	b580      	push	{r7, lr}
 804062a:	b0b8      	sub	sp, #224	; 0xe0
 804062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804062e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040632:	2234      	movs	r2, #52	; 0x34
 8040634:	2100      	movs	r1, #0
 8040636:	4618      	mov	r0, r3
 8040638:	f002 fb1a 	bl	8042c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804063c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8040640:	2200      	movs	r2, #0
 8040642:	601a      	str	r2, [r3, #0]
 8040644:	605a      	str	r2, [r3, #4]
 8040646:	609a      	str	r2, [r3, #8]
 8040648:	60da      	str	r2, [r3, #12]
 804064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 804064c:	f107 0308 	add.w	r3, r7, #8
 8040650:	2290      	movs	r2, #144	; 0x90
 8040652:	2100      	movs	r1, #0
 8040654:	4618      	mov	r0, r3
 8040656:	f002 fb0b 	bl	8042c70 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 804065a:	4b2e      	ldr	r3, [pc, #184]	; (8040714 <SystemClock_Config+0xec>)
 804065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804065e:	4a2d      	ldr	r2, [pc, #180]	; (8040714 <SystemClock_Config+0xec>)
 8040660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040664:	6413      	str	r3, [r2, #64]	; 0x40
 8040666:	4b2b      	ldr	r3, [pc, #172]	; (8040714 <SystemClock_Config+0xec>)
 8040668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804066e:	607b      	str	r3, [r7, #4]
 8040670:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040672:	4b29      	ldr	r3, [pc, #164]	; (8040718 <SystemClock_Config+0xf0>)
 8040674:	681b      	ldr	r3, [r3, #0]
 8040676:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 804067a:	4a27      	ldr	r2, [pc, #156]	; (8040718 <SystemClock_Config+0xf0>)
 804067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040680:	6013      	str	r3, [r2, #0]
 8040682:	4b25      	ldr	r3, [pc, #148]	; (8040718 <SystemClock_Config+0xf0>)
 8040684:	681b      	ldr	r3, [r3, #0]
 8040686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 804068a:	603b      	str	r3, [r7, #0]
 804068c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804068e:	2302      	movs	r3, #2
 8040690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040694:	2301      	movs	r3, #1
 8040696:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804069a:	2310      	movs	r3, #16
 804069c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80406a0:	2300      	movs	r3, #0
 80406a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80406a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80406aa:	4618      	mov	r0, r3
 80406ac:	f000 fd5e 	bl	804116c <HAL_RCC_OscConfig>
 80406b0:	4603      	mov	r3, r0
 80406b2:	2b00      	cmp	r3, #0
 80406b4:	d001      	beq.n	80406ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80406b6:	f000 f8b1 	bl	804081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406ba:	230f      	movs	r3, #15
 80406bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80406c0:	2300      	movs	r3, #0
 80406c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80406c6:	2300      	movs	r3, #0
 80406c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80406cc:	2300      	movs	r3, #0
 80406ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80406d2:	2300      	movs	r3, #0
 80406d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80406d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80406dc:	2100      	movs	r1, #0
 80406de:	4618      	mov	r0, r3
 80406e0:	f000 fff2 	bl	80416c8 <HAL_RCC_ClockConfig>
 80406e4:	4603      	mov	r3, r0
 80406e6:	2b00      	cmp	r3, #0
 80406e8:	d001      	beq.n	80406ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80406ea:	f000 f897 	bl	804081c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80406ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80406f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80406f4:	2300      	movs	r3, #0
 80406f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80406f8:	f107 0308 	add.w	r3, r7, #8
 80406fc:	4618      	mov	r0, r3
 80406fe:	f001 f9b9 	bl	8041a74 <HAL_RCCEx_PeriphCLKConfig>
 8040702:	4603      	mov	r3, r0
 8040704:	2b00      	cmp	r3, #0
 8040706:	d001      	beq.n	804070c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8040708:	f000 f888 	bl	804081c <Error_Handler>
  }
}
 804070c:	bf00      	nop
 804070e:	37e0      	adds	r7, #224	; 0xe0
 8040710:	46bd      	mov	sp, r7
 8040712:	bd80      	pop	{r7, pc}
 8040714:	40023800 	.word	0x40023800
 8040718:	40007000 	.word	0x40007000

0804071c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 804071c:	b580      	push	{r7, lr}
 804071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040720:	4b14      	ldr	r3, [pc, #80]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040722:	4a15      	ldr	r2, [pc, #84]	; (8040778 <MX_USART3_UART_Init+0x5c>)
 8040724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040726:	4b13      	ldr	r3, [pc, #76]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 804072c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 804072e:	4b11      	ldr	r3, [pc, #68]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040730:	2200      	movs	r2, #0
 8040732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040734:	4b0f      	ldr	r3, [pc, #60]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040736:	2200      	movs	r2, #0
 8040738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 804073a:	4b0e      	ldr	r3, [pc, #56]	; (8040774 <MX_USART3_UART_Init+0x58>)
 804073c:	2200      	movs	r2, #0
 804073e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040740:	4b0c      	ldr	r3, [pc, #48]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040742:	220c      	movs	r2, #12
 8040744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040746:	4b0b      	ldr	r3, [pc, #44]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040748:	2200      	movs	r2, #0
 804074a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 804074c:	4b09      	ldr	r3, [pc, #36]	; (8040774 <MX_USART3_UART_Init+0x58>)
 804074e:	2200      	movs	r2, #0
 8040750:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040752:	4b08      	ldr	r3, [pc, #32]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040754:	2200      	movs	r2, #0
 8040756:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040758:	4b06      	ldr	r3, [pc, #24]	; (8040774 <MX_USART3_UART_Init+0x58>)
 804075a:	2200      	movs	r2, #0
 804075c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804075e:	4805      	ldr	r0, [pc, #20]	; (8040774 <MX_USART3_UART_Init+0x58>)
 8040760:	f001 fdb0 	bl	80422c4 <HAL_UART_Init>
 8040764:	4603      	mov	r3, r0
 8040766:	2b00      	cmp	r3, #0
 8040768:	d001      	beq.n	804076e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 804076a:	f000 f857 	bl	804081c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 804076e:	bf00      	nop
 8040770:	bd80      	pop	{r7, pc}
 8040772:	bf00      	nop
 8040774:	20000098 	.word	0x20000098
 8040778:	40004800 	.word	0x40004800

0804077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804077c:	b580      	push	{r7, lr}
 804077e:	b088      	sub	sp, #32
 8040780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040782:	f107 030c 	add.w	r3, r7, #12
 8040786:	2200      	movs	r2, #0
 8040788:	601a      	str	r2, [r3, #0]
 804078a:	605a      	str	r2, [r3, #4]
 804078c:	609a      	str	r2, [r3, #8]
 804078e:	60da      	str	r2, [r3, #12]
 8040790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040792:	4b17      	ldr	r3, [pc, #92]	; (80407f0 <MX_GPIO_Init+0x74>)
 8040794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040796:	4a16      	ldr	r2, [pc, #88]	; (80407f0 <MX_GPIO_Init+0x74>)
 8040798:	f043 0308 	orr.w	r3, r3, #8
 804079c:	6313      	str	r3, [r2, #48]	; 0x30
 804079e:	4b14      	ldr	r3, [pc, #80]	; (80407f0 <MX_GPIO_Init+0x74>)
 80407a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407a2:	f003 0308 	and.w	r3, r3, #8
 80407a6:	60bb      	str	r3, [r7, #8]
 80407a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80407aa:	4b11      	ldr	r3, [pc, #68]	; (80407f0 <MX_GPIO_Init+0x74>)
 80407ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ae:	4a10      	ldr	r2, [pc, #64]	; (80407f0 <MX_GPIO_Init+0x74>)
 80407b0:	f043 0302 	orr.w	r3, r3, #2
 80407b4:	6313      	str	r3, [r2, #48]	; 0x30
 80407b6:	4b0e      	ldr	r3, [pc, #56]	; (80407f0 <MX_GPIO_Init+0x74>)
 80407b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ba:	f003 0302 	and.w	r3, r3, #2
 80407be:	607b      	str	r3, [r7, #4]
 80407c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80407c2:	2200      	movs	r2, #0
 80407c4:	2180      	movs	r1, #128	; 0x80
 80407c6:	480b      	ldr	r0, [pc, #44]	; (80407f4 <MX_GPIO_Init+0x78>)
 80407c8:	f000 fcb6 	bl	8041138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80407cc:	2380      	movs	r3, #128	; 0x80
 80407ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407d0:	2301      	movs	r3, #1
 80407d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407d4:	2300      	movs	r3, #0
 80407d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407d8:	2300      	movs	r3, #0
 80407da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80407dc:	f107 030c 	add.w	r3, r7, #12
 80407e0:	4619      	mov	r1, r3
 80407e2:	4804      	ldr	r0, [pc, #16]	; (80407f4 <MX_GPIO_Init+0x78>)
 80407e4:	f000 fafc 	bl	8040de0 <HAL_GPIO_Init>

}
 80407e8:	bf00      	nop
 80407ea:	3720      	adds	r7, #32
 80407ec:	46bd      	mov	sp, r7
 80407ee:	bd80      	pop	{r7, pc}
 80407f0:	40023800 	.word	0x40023800
 80407f4:	40020400 	.word	0x40020400

080407f8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80407f8:	b580      	push	{r7, lr}
 80407fa:	b082      	sub	sp, #8
 80407fc:	af00      	add	r7, sp, #0
 80407fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040800:	1d39      	adds	r1, r7, #4
 8040802:	f04f 33ff 	mov.w	r3, #4294967295
 8040806:	2201      	movs	r2, #1
 8040808:	4803      	ldr	r0, [pc, #12]	; (8040818 <__io_putchar+0x20>)
 804080a:	f001 fda9 	bl	8042360 <HAL_UART_Transmit>

  return ch;
 804080e:	687b      	ldr	r3, [r7, #4]
}
 8040810:	4618      	mov	r0, r3
 8040812:	3708      	adds	r7, #8
 8040814:	46bd      	mov	sp, r7
 8040816:	bd80      	pop	{r7, pc}
 8040818:	20000098 	.word	0x20000098

0804081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804081c:	b480      	push	{r7}
 804081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040820:	b672      	cpsid	i
}
 8040822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040824:	e7fe      	b.n	8040824 <Error_Handler+0x8>
	...

08040828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040828:	b480      	push	{r7}
 804082a:	b083      	sub	sp, #12
 804082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 804082e:	4b0f      	ldr	r3, [pc, #60]	; (804086c <HAL_MspInit+0x44>)
 8040830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040832:	4a0e      	ldr	r2, [pc, #56]	; (804086c <HAL_MspInit+0x44>)
 8040834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040838:	6413      	str	r3, [r2, #64]	; 0x40
 804083a:	4b0c      	ldr	r3, [pc, #48]	; (804086c <HAL_MspInit+0x44>)
 804083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040842:	607b      	str	r3, [r7, #4]
 8040844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040846:	4b09      	ldr	r3, [pc, #36]	; (804086c <HAL_MspInit+0x44>)
 8040848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804084a:	4a08      	ldr	r2, [pc, #32]	; (804086c <HAL_MspInit+0x44>)
 804084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040850:	6453      	str	r3, [r2, #68]	; 0x44
 8040852:	4b06      	ldr	r3, [pc, #24]	; (804086c <HAL_MspInit+0x44>)
 8040854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804085a:	603b      	str	r3, [r7, #0]
 804085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804085e:	bf00      	nop
 8040860:	370c      	adds	r7, #12
 8040862:	46bd      	mov	sp, r7
 8040864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040868:	4770      	bx	lr
 804086a:	bf00      	nop
 804086c:	40023800 	.word	0x40023800

08040870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040870:	b580      	push	{r7, lr}
 8040872:	b08a      	sub	sp, #40	; 0x28
 8040874:	af00      	add	r7, sp, #0
 8040876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040878:	f107 0314 	add.w	r3, r7, #20
 804087c:	2200      	movs	r2, #0
 804087e:	601a      	str	r2, [r3, #0]
 8040880:	605a      	str	r2, [r3, #4]
 8040882:	609a      	str	r2, [r3, #8]
 8040884:	60da      	str	r2, [r3, #12]
 8040886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8040888:	687b      	ldr	r3, [r7, #4]
 804088a:	681b      	ldr	r3, [r3, #0]
 804088c:	4a17      	ldr	r2, [pc, #92]	; (80408ec <HAL_UART_MspInit+0x7c>)
 804088e:	4293      	cmp	r3, r2
 8040890:	d128      	bne.n	80408e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8040892:	4b17      	ldr	r3, [pc, #92]	; (80408f0 <HAL_UART_MspInit+0x80>)
 8040894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040896:	4a16      	ldr	r2, [pc, #88]	; (80408f0 <HAL_UART_MspInit+0x80>)
 8040898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804089c:	6413      	str	r3, [r2, #64]	; 0x40
 804089e:	4b14      	ldr	r3, [pc, #80]	; (80408f0 <HAL_UART_MspInit+0x80>)
 80408a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80408a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80408a6:	613b      	str	r3, [r7, #16]
 80408a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80408aa:	4b11      	ldr	r3, [pc, #68]	; (80408f0 <HAL_UART_MspInit+0x80>)
 80408ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ae:	4a10      	ldr	r2, [pc, #64]	; (80408f0 <HAL_UART_MspInit+0x80>)
 80408b0:	f043 0308 	orr.w	r3, r3, #8
 80408b4:	6313      	str	r3, [r2, #48]	; 0x30
 80408b6:	4b0e      	ldr	r3, [pc, #56]	; (80408f0 <HAL_UART_MspInit+0x80>)
 80408b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ba:	f003 0308 	and.w	r3, r3, #8
 80408be:	60fb      	str	r3, [r7, #12]
 80408c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80408c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80408c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408c8:	2302      	movs	r3, #2
 80408ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408cc:	2300      	movs	r3, #0
 80408ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80408d0:	2303      	movs	r3, #3
 80408d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80408d4:	2307      	movs	r3, #7
 80408d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80408d8:	f107 0314 	add.w	r3, r7, #20
 80408dc:	4619      	mov	r1, r3
 80408de:	4805      	ldr	r0, [pc, #20]	; (80408f4 <HAL_UART_MspInit+0x84>)
 80408e0:	f000 fa7e 	bl	8040de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80408e4:	bf00      	nop
 80408e6:	3728      	adds	r7, #40	; 0x28
 80408e8:	46bd      	mov	sp, r7
 80408ea:	bd80      	pop	{r7, pc}
 80408ec:	40004800 	.word	0x40004800
 80408f0:	40023800 	.word	0x40023800
 80408f4:	40020c00 	.word	0x40020c00

080408f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80408f8:	b480      	push	{r7}
 80408fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80408fc:	e7fe      	b.n	80408fc <NMI_Handler+0x4>

080408fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80408fe:	b480      	push	{r7}
 8040900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040902:	e7fe      	b.n	8040902 <HardFault_Handler+0x4>

08040904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040904:	b480      	push	{r7}
 8040906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040908:	e7fe      	b.n	8040908 <MemManage_Handler+0x4>

0804090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804090a:	b480      	push	{r7}
 804090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804090e:	e7fe      	b.n	804090e <BusFault_Handler+0x4>

08040910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040910:	b480      	push	{r7}
 8040912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040914:	e7fe      	b.n	8040914 <UsageFault_Handler+0x4>

08040916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040916:	b480      	push	{r7}
 8040918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804091a:	bf00      	nop
 804091c:	46bd      	mov	sp, r7
 804091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040922:	4770      	bx	lr

08040924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040924:	b480      	push	{r7}
 8040926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040928:	bf00      	nop
 804092a:	46bd      	mov	sp, r7
 804092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040930:	4770      	bx	lr

08040932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040932:	b480      	push	{r7}
 8040934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040936:	bf00      	nop
 8040938:	46bd      	mov	sp, r7
 804093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804093e:	4770      	bx	lr

08040940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040940:	b580      	push	{r7, lr}
 8040942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040944:	f000 f922 	bl	8040b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040948:	bf00      	nop
 804094a:	bd80      	pop	{r7, pc}

0804094c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 804094c:	b580      	push	{r7, lr}
 804094e:	b086      	sub	sp, #24
 8040950:	af00      	add	r7, sp, #0
 8040952:	60f8      	str	r0, [r7, #12]
 8040954:	60b9      	str	r1, [r7, #8]
 8040956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040958:	2300      	movs	r3, #0
 804095a:	617b      	str	r3, [r7, #20]
 804095c:	e00a      	b.n	8040974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 804095e:	f3af 8000 	nop.w
 8040962:	4601      	mov	r1, r0
 8040964:	68bb      	ldr	r3, [r7, #8]
 8040966:	1c5a      	adds	r2, r3, #1
 8040968:	60ba      	str	r2, [r7, #8]
 804096a:	b2ca      	uxtb	r2, r1
 804096c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804096e:	697b      	ldr	r3, [r7, #20]
 8040970:	3301      	adds	r3, #1
 8040972:	617b      	str	r3, [r7, #20]
 8040974:	697a      	ldr	r2, [r7, #20]
 8040976:	687b      	ldr	r3, [r7, #4]
 8040978:	429a      	cmp	r2, r3
 804097a:	dbf0      	blt.n	804095e <_read+0x12>
	}

return len;
 804097c:	687b      	ldr	r3, [r7, #4]
}
 804097e:	4618      	mov	r0, r3
 8040980:	3718      	adds	r7, #24
 8040982:	46bd      	mov	sp, r7
 8040984:	bd80      	pop	{r7, pc}

08040986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040986:	b580      	push	{r7, lr}
 8040988:	b086      	sub	sp, #24
 804098a:	af00      	add	r7, sp, #0
 804098c:	60f8      	str	r0, [r7, #12]
 804098e:	60b9      	str	r1, [r7, #8]
 8040990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040992:	2300      	movs	r3, #0
 8040994:	617b      	str	r3, [r7, #20]
 8040996:	e009      	b.n	80409ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8040998:	68bb      	ldr	r3, [r7, #8]
 804099a:	1c5a      	adds	r2, r3, #1
 804099c:	60ba      	str	r2, [r7, #8]
 804099e:	781b      	ldrb	r3, [r3, #0]
 80409a0:	4618      	mov	r0, r3
 80409a2:	f7ff ff29 	bl	80407f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80409a6:	697b      	ldr	r3, [r7, #20]
 80409a8:	3301      	adds	r3, #1
 80409aa:	617b      	str	r3, [r7, #20]
 80409ac:	697a      	ldr	r2, [r7, #20]
 80409ae:	687b      	ldr	r3, [r7, #4]
 80409b0:	429a      	cmp	r2, r3
 80409b2:	dbf1      	blt.n	8040998 <_write+0x12>
	}
	return len;
 80409b4:	687b      	ldr	r3, [r7, #4]
}
 80409b6:	4618      	mov	r0, r3
 80409b8:	3718      	adds	r7, #24
 80409ba:	46bd      	mov	sp, r7
 80409bc:	bd80      	pop	{r7, pc}

080409be <_close>:

int _close(int file)
{
 80409be:	b480      	push	{r7}
 80409c0:	b083      	sub	sp, #12
 80409c2:	af00      	add	r7, sp, #0
 80409c4:	6078      	str	r0, [r7, #4]
	return -1;
 80409c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80409ca:	4618      	mov	r0, r3
 80409cc:	370c      	adds	r7, #12
 80409ce:	46bd      	mov	sp, r7
 80409d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409d4:	4770      	bx	lr

080409d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80409d6:	b480      	push	{r7}
 80409d8:	b083      	sub	sp, #12
 80409da:	af00      	add	r7, sp, #0
 80409dc:	6078      	str	r0, [r7, #4]
 80409de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80409e0:	683b      	ldr	r3, [r7, #0]
 80409e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80409e6:	605a      	str	r2, [r3, #4]
	return 0;
 80409e8:	2300      	movs	r3, #0
}
 80409ea:	4618      	mov	r0, r3
 80409ec:	370c      	adds	r7, #12
 80409ee:	46bd      	mov	sp, r7
 80409f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409f4:	4770      	bx	lr

080409f6 <_isatty>:

int _isatty(int file)
{
 80409f6:	b480      	push	{r7}
 80409f8:	b083      	sub	sp, #12
 80409fa:	af00      	add	r7, sp, #0
 80409fc:	6078      	str	r0, [r7, #4]
	return 1;
 80409fe:	2301      	movs	r3, #1
}
 8040a00:	4618      	mov	r0, r3
 8040a02:	370c      	adds	r7, #12
 8040a04:	46bd      	mov	sp, r7
 8040a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a0a:	4770      	bx	lr

08040a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040a0c:	b480      	push	{r7}
 8040a0e:	b085      	sub	sp, #20
 8040a10:	af00      	add	r7, sp, #0
 8040a12:	60f8      	str	r0, [r7, #12]
 8040a14:	60b9      	str	r1, [r7, #8]
 8040a16:	607a      	str	r2, [r7, #4]
	return 0;
 8040a18:	2300      	movs	r3, #0
}
 8040a1a:	4618      	mov	r0, r3
 8040a1c:	3714      	adds	r7, #20
 8040a1e:	46bd      	mov	sp, r7
 8040a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a24:	4770      	bx	lr
	...

08040a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040a28:	b580      	push	{r7, lr}
 8040a2a:	b086      	sub	sp, #24
 8040a2c:	af00      	add	r7, sp, #0
 8040a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040a30:	4a14      	ldr	r2, [pc, #80]	; (8040a84 <_sbrk+0x5c>)
 8040a32:	4b15      	ldr	r3, [pc, #84]	; (8040a88 <_sbrk+0x60>)
 8040a34:	1ad3      	subs	r3, r2, r3
 8040a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040a38:	697b      	ldr	r3, [r7, #20]
 8040a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040a3c:	4b13      	ldr	r3, [pc, #76]	; (8040a8c <_sbrk+0x64>)
 8040a3e:	681b      	ldr	r3, [r3, #0]
 8040a40:	2b00      	cmp	r3, #0
 8040a42:	d102      	bne.n	8040a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040a44:	4b11      	ldr	r3, [pc, #68]	; (8040a8c <_sbrk+0x64>)
 8040a46:	4a12      	ldr	r2, [pc, #72]	; (8040a90 <_sbrk+0x68>)
 8040a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040a4a:	4b10      	ldr	r3, [pc, #64]	; (8040a8c <_sbrk+0x64>)
 8040a4c:	681a      	ldr	r2, [r3, #0]
 8040a4e:	687b      	ldr	r3, [r7, #4]
 8040a50:	4413      	add	r3, r2
 8040a52:	693a      	ldr	r2, [r7, #16]
 8040a54:	429a      	cmp	r2, r3
 8040a56:	d207      	bcs.n	8040a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040a58:	f002 f8e0 	bl	8042c1c <__errno>
 8040a5c:	4603      	mov	r3, r0
 8040a5e:	220c      	movs	r2, #12
 8040a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040a62:	f04f 33ff 	mov.w	r3, #4294967295
 8040a66:	e009      	b.n	8040a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040a68:	4b08      	ldr	r3, [pc, #32]	; (8040a8c <_sbrk+0x64>)
 8040a6a:	681b      	ldr	r3, [r3, #0]
 8040a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040a6e:	4b07      	ldr	r3, [pc, #28]	; (8040a8c <_sbrk+0x64>)
 8040a70:	681a      	ldr	r2, [r3, #0]
 8040a72:	687b      	ldr	r3, [r7, #4]
 8040a74:	4413      	add	r3, r2
 8040a76:	4a05      	ldr	r2, [pc, #20]	; (8040a8c <_sbrk+0x64>)
 8040a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040a7a:	68fb      	ldr	r3, [r7, #12]
}
 8040a7c:	4618      	mov	r0, r3
 8040a7e:	3718      	adds	r7, #24
 8040a80:	46bd      	mov	sp, r7
 8040a82:	bd80      	pop	{r7, pc}
 8040a84:	20080000 	.word	0x20080000
 8040a88:	00000400 	.word	0x00000400
 8040a8c:	2000008c 	.word	0x2000008c
 8040a90:	20000130 	.word	0x20000130

08040a94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040a94:	b480      	push	{r7}
 8040a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040a98:	4b07      	ldr	r3, [pc, #28]	; (8040ab8 <SystemInit+0x24>)
 8040a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040a9e:	4a06      	ldr	r2, [pc, #24]	; (8040ab8 <SystemInit+0x24>)
 8040aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040aa8:	4b03      	ldr	r3, [pc, #12]	; (8040ab8 <SystemInit+0x24>)
 8040aaa:	4a04      	ldr	r2, [pc, #16]	; (8040abc <SystemInit+0x28>)
 8040aac:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040aae:	bf00      	nop
 8040ab0:	46bd      	mov	sp, r7
 8040ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ab6:	4770      	bx	lr
 8040ab8:	e000ed00 	.word	0xe000ed00
 8040abc:	08040000 	.word	0x08040000

08040ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040ac4:	480d      	ldr	r0, [pc, #52]	; (8040afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040ac6:	490e      	ldr	r1, [pc, #56]	; (8040b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040ac8:	4a0e      	ldr	r2, [pc, #56]	; (8040b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040acc:	e002      	b.n	8040ad4 <LoopCopyDataInit>

08040ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040ad2:	3304      	adds	r3, #4

08040ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040ad8:	d3f9      	bcc.n	8040ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040ada:	4a0b      	ldr	r2, [pc, #44]	; (8040b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040adc:	4c0b      	ldr	r4, [pc, #44]	; (8040b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8040ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040ae0:	e001      	b.n	8040ae6 <LoopFillZerobss>

08040ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040ae4:	3204      	adds	r2, #4

08040ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040ae8:	d3fb      	bcc.n	8040ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040aea:	f7ff ffd3 	bl	8040a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040aee:	f002 f89b 	bl	8042c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040af2:	f7ff fd71 	bl	80405d8 <main>
  bx  lr    
 8040af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040af8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8040b04:	08043c24 	.word	0x08043c24
  ldr r2, =_sbss
 8040b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8040b0c:	20000130 	.word	0x20000130

08040b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040b10:	e7fe      	b.n	8040b10 <ADC_IRQHandler>

08040b12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040b12:	b580      	push	{r7, lr}
 8040b14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040b16:	2003      	movs	r0, #3
 8040b18:	f000 f92e 	bl	8040d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040b1c:	2000      	movs	r0, #0
 8040b1e:	f000 f805 	bl	8040b2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8040b22:	f7ff fe81 	bl	8040828 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8040b26:	2300      	movs	r3, #0
}
 8040b28:	4618      	mov	r0, r3
 8040b2a:	bd80      	pop	{r7, pc}

08040b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b2c:	b580      	push	{r7, lr}
 8040b2e:	b082      	sub	sp, #8
 8040b30:	af00      	add	r7, sp, #0
 8040b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040b34:	4b12      	ldr	r3, [pc, #72]	; (8040b80 <HAL_InitTick+0x54>)
 8040b36:	681a      	ldr	r2, [r3, #0]
 8040b38:	4b12      	ldr	r3, [pc, #72]	; (8040b84 <HAL_InitTick+0x58>)
 8040b3a:	781b      	ldrb	r3, [r3, #0]
 8040b3c:	4619      	mov	r1, r3
 8040b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b4a:	4618      	mov	r0, r3
 8040b4c:	f000 f93b 	bl	8040dc6 <HAL_SYSTICK_Config>
 8040b50:	4603      	mov	r3, r0
 8040b52:	2b00      	cmp	r3, #0
 8040b54:	d001      	beq.n	8040b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040b56:	2301      	movs	r3, #1
 8040b58:	e00e      	b.n	8040b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b5a:	687b      	ldr	r3, [r7, #4]
 8040b5c:	2b0f      	cmp	r3, #15
 8040b5e:	d80a      	bhi.n	8040b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b60:	2200      	movs	r2, #0
 8040b62:	6879      	ldr	r1, [r7, #4]
 8040b64:	f04f 30ff 	mov.w	r0, #4294967295
 8040b68:	f000 f911 	bl	8040d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040b6c:	4a06      	ldr	r2, [pc, #24]	; (8040b88 <HAL_InitTick+0x5c>)
 8040b6e:	687b      	ldr	r3, [r7, #4]
 8040b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040b72:	2300      	movs	r3, #0
 8040b74:	e000      	b.n	8040b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040b76:	2301      	movs	r3, #1
}
 8040b78:	4618      	mov	r0, r3
 8040b7a:	3708      	adds	r7, #8
 8040b7c:	46bd      	mov	sp, r7
 8040b7e:	bd80      	pop	{r7, pc}
 8040b80:	20000000 	.word	0x20000000
 8040b84:	20000008 	.word	0x20000008
 8040b88:	20000004 	.word	0x20000004

08040b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b8c:	b480      	push	{r7}
 8040b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040b90:	4b06      	ldr	r3, [pc, #24]	; (8040bac <HAL_IncTick+0x20>)
 8040b92:	781b      	ldrb	r3, [r3, #0]
 8040b94:	461a      	mov	r2, r3
 8040b96:	4b06      	ldr	r3, [pc, #24]	; (8040bb0 <HAL_IncTick+0x24>)
 8040b98:	681b      	ldr	r3, [r3, #0]
 8040b9a:	4413      	add	r3, r2
 8040b9c:	4a04      	ldr	r2, [pc, #16]	; (8040bb0 <HAL_IncTick+0x24>)
 8040b9e:	6013      	str	r3, [r2, #0]
}
 8040ba0:	bf00      	nop
 8040ba2:	46bd      	mov	sp, r7
 8040ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ba8:	4770      	bx	lr
 8040baa:	bf00      	nop
 8040bac:	20000008 	.word	0x20000008
 8040bb0:	2000011c 	.word	0x2000011c

08040bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040bb4:	b480      	push	{r7}
 8040bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8040bb8:	4b03      	ldr	r3, [pc, #12]	; (8040bc8 <HAL_GetTick+0x14>)
 8040bba:	681b      	ldr	r3, [r3, #0]
}
 8040bbc:	4618      	mov	r0, r3
 8040bbe:	46bd      	mov	sp, r7
 8040bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bc4:	4770      	bx	lr
 8040bc6:	bf00      	nop
 8040bc8:	2000011c 	.word	0x2000011c

08040bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040bcc:	b580      	push	{r7, lr}
 8040bce:	b084      	sub	sp, #16
 8040bd0:	af00      	add	r7, sp, #0
 8040bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040bd4:	f7ff ffee 	bl	8040bb4 <HAL_GetTick>
 8040bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040bda:	687b      	ldr	r3, [r7, #4]
 8040bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040bde:	68fb      	ldr	r3, [r7, #12]
 8040be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040be4:	d005      	beq.n	8040bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040be6:	4b0a      	ldr	r3, [pc, #40]	; (8040c10 <HAL_Delay+0x44>)
 8040be8:	781b      	ldrb	r3, [r3, #0]
 8040bea:	461a      	mov	r2, r3
 8040bec:	68fb      	ldr	r3, [r7, #12]
 8040bee:	4413      	add	r3, r2
 8040bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040bf2:	bf00      	nop
 8040bf4:	f7ff ffde 	bl	8040bb4 <HAL_GetTick>
 8040bf8:	4602      	mov	r2, r0
 8040bfa:	68bb      	ldr	r3, [r7, #8]
 8040bfc:	1ad3      	subs	r3, r2, r3
 8040bfe:	68fa      	ldr	r2, [r7, #12]
 8040c00:	429a      	cmp	r2, r3
 8040c02:	d8f7      	bhi.n	8040bf4 <HAL_Delay+0x28>
  {
  }
}
 8040c04:	bf00      	nop
 8040c06:	bf00      	nop
 8040c08:	3710      	adds	r7, #16
 8040c0a:	46bd      	mov	sp, r7
 8040c0c:	bd80      	pop	{r7, pc}
 8040c0e:	bf00      	nop
 8040c10:	20000008 	.word	0x20000008

08040c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c14:	b480      	push	{r7}
 8040c16:	b085      	sub	sp, #20
 8040c18:	af00      	add	r7, sp, #0
 8040c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040c1c:	687b      	ldr	r3, [r7, #4]
 8040c1e:	f003 0307 	and.w	r3, r3, #7
 8040c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040c24:	4b0b      	ldr	r3, [pc, #44]	; (8040c54 <__NVIC_SetPriorityGrouping+0x40>)
 8040c26:	68db      	ldr	r3, [r3, #12]
 8040c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040c2a:	68ba      	ldr	r2, [r7, #8]
 8040c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040c30:	4013      	ands	r3, r2
 8040c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c34:	68fb      	ldr	r3, [r7, #12]
 8040c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c38:	68bb      	ldr	r3, [r7, #8]
 8040c3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040c3c:	4b06      	ldr	r3, [pc, #24]	; (8040c58 <__NVIC_SetPriorityGrouping+0x44>)
 8040c3e:	4313      	orrs	r3, r2
 8040c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c42:	4a04      	ldr	r2, [pc, #16]	; (8040c54 <__NVIC_SetPriorityGrouping+0x40>)
 8040c44:	68bb      	ldr	r3, [r7, #8]
 8040c46:	60d3      	str	r3, [r2, #12]
}
 8040c48:	bf00      	nop
 8040c4a:	3714      	adds	r7, #20
 8040c4c:	46bd      	mov	sp, r7
 8040c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c52:	4770      	bx	lr
 8040c54:	e000ed00 	.word	0xe000ed00
 8040c58:	05fa0000 	.word	0x05fa0000

08040c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040c5c:	b480      	push	{r7}
 8040c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c60:	4b04      	ldr	r3, [pc, #16]	; (8040c74 <__NVIC_GetPriorityGrouping+0x18>)
 8040c62:	68db      	ldr	r3, [r3, #12]
 8040c64:	0a1b      	lsrs	r3, r3, #8
 8040c66:	f003 0307 	and.w	r3, r3, #7
}
 8040c6a:	4618      	mov	r0, r3
 8040c6c:	46bd      	mov	sp, r7
 8040c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c72:	4770      	bx	lr
 8040c74:	e000ed00 	.word	0xe000ed00

08040c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c78:	b480      	push	{r7}
 8040c7a:	b083      	sub	sp, #12
 8040c7c:	af00      	add	r7, sp, #0
 8040c7e:	4603      	mov	r3, r0
 8040c80:	6039      	str	r1, [r7, #0]
 8040c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c88:	2b00      	cmp	r3, #0
 8040c8a:	db0a      	blt.n	8040ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c8c:	683b      	ldr	r3, [r7, #0]
 8040c8e:	b2da      	uxtb	r2, r3
 8040c90:	490c      	ldr	r1, [pc, #48]	; (8040cc4 <__NVIC_SetPriority+0x4c>)
 8040c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c96:	0112      	lsls	r2, r2, #4
 8040c98:	b2d2      	uxtb	r2, r2
 8040c9a:	440b      	add	r3, r1
 8040c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040ca0:	e00a      	b.n	8040cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040ca2:	683b      	ldr	r3, [r7, #0]
 8040ca4:	b2da      	uxtb	r2, r3
 8040ca6:	4908      	ldr	r1, [pc, #32]	; (8040cc8 <__NVIC_SetPriority+0x50>)
 8040ca8:	79fb      	ldrb	r3, [r7, #7]
 8040caa:	f003 030f 	and.w	r3, r3, #15
 8040cae:	3b04      	subs	r3, #4
 8040cb0:	0112      	lsls	r2, r2, #4
 8040cb2:	b2d2      	uxtb	r2, r2
 8040cb4:	440b      	add	r3, r1
 8040cb6:	761a      	strb	r2, [r3, #24]
}
 8040cb8:	bf00      	nop
 8040cba:	370c      	adds	r7, #12
 8040cbc:	46bd      	mov	sp, r7
 8040cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cc2:	4770      	bx	lr
 8040cc4:	e000e100 	.word	0xe000e100
 8040cc8:	e000ed00 	.word	0xe000ed00

08040ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040ccc:	b480      	push	{r7}
 8040cce:	b089      	sub	sp, #36	; 0x24
 8040cd0:	af00      	add	r7, sp, #0
 8040cd2:	60f8      	str	r0, [r7, #12]
 8040cd4:	60b9      	str	r1, [r7, #8]
 8040cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040cd8:	68fb      	ldr	r3, [r7, #12]
 8040cda:	f003 0307 	and.w	r3, r3, #7
 8040cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040ce0:	69fb      	ldr	r3, [r7, #28]
 8040ce2:	f1c3 0307 	rsb	r3, r3, #7
 8040ce6:	2b04      	cmp	r3, #4
 8040ce8:	bf28      	it	cs
 8040cea:	2304      	movcs	r3, #4
 8040cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040cee:	69fb      	ldr	r3, [r7, #28]
 8040cf0:	3304      	adds	r3, #4
 8040cf2:	2b06      	cmp	r3, #6
 8040cf4:	d902      	bls.n	8040cfc <NVIC_EncodePriority+0x30>
 8040cf6:	69fb      	ldr	r3, [r7, #28]
 8040cf8:	3b03      	subs	r3, #3
 8040cfa:	e000      	b.n	8040cfe <NVIC_EncodePriority+0x32>
 8040cfc:	2300      	movs	r3, #0
 8040cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d00:	f04f 32ff 	mov.w	r2, #4294967295
 8040d04:	69bb      	ldr	r3, [r7, #24]
 8040d06:	fa02 f303 	lsl.w	r3, r2, r3
 8040d0a:	43da      	mvns	r2, r3
 8040d0c:	68bb      	ldr	r3, [r7, #8]
 8040d0e:	401a      	ands	r2, r3
 8040d10:	697b      	ldr	r3, [r7, #20]
 8040d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040d14:	f04f 31ff 	mov.w	r1, #4294967295
 8040d18:	697b      	ldr	r3, [r7, #20]
 8040d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8040d1e:	43d9      	mvns	r1, r3
 8040d20:	687b      	ldr	r3, [r7, #4]
 8040d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d24:	4313      	orrs	r3, r2
         );
}
 8040d26:	4618      	mov	r0, r3
 8040d28:	3724      	adds	r7, #36	; 0x24
 8040d2a:	46bd      	mov	sp, r7
 8040d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d30:	4770      	bx	lr
	...

08040d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d34:	b580      	push	{r7, lr}
 8040d36:	b082      	sub	sp, #8
 8040d38:	af00      	add	r7, sp, #0
 8040d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d3c:	687b      	ldr	r3, [r7, #4]
 8040d3e:	3b01      	subs	r3, #1
 8040d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040d44:	d301      	bcc.n	8040d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d46:	2301      	movs	r3, #1
 8040d48:	e00f      	b.n	8040d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040d4a:	4a0a      	ldr	r2, [pc, #40]	; (8040d74 <SysTick_Config+0x40>)
 8040d4c:	687b      	ldr	r3, [r7, #4]
 8040d4e:	3b01      	subs	r3, #1
 8040d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040d52:	210f      	movs	r1, #15
 8040d54:	f04f 30ff 	mov.w	r0, #4294967295
 8040d58:	f7ff ff8e 	bl	8040c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d5c:	4b05      	ldr	r3, [pc, #20]	; (8040d74 <SysTick_Config+0x40>)
 8040d5e:	2200      	movs	r2, #0
 8040d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d62:	4b04      	ldr	r3, [pc, #16]	; (8040d74 <SysTick_Config+0x40>)
 8040d64:	2207      	movs	r2, #7
 8040d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d68:	2300      	movs	r3, #0
}
 8040d6a:	4618      	mov	r0, r3
 8040d6c:	3708      	adds	r7, #8
 8040d6e:	46bd      	mov	sp, r7
 8040d70:	bd80      	pop	{r7, pc}
 8040d72:	bf00      	nop
 8040d74:	e000e010 	.word	0xe000e010

08040d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d78:	b580      	push	{r7, lr}
 8040d7a:	b082      	sub	sp, #8
 8040d7c:	af00      	add	r7, sp, #0
 8040d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d80:	6878      	ldr	r0, [r7, #4]
 8040d82:	f7ff ff47 	bl	8040c14 <__NVIC_SetPriorityGrouping>
}
 8040d86:	bf00      	nop
 8040d88:	3708      	adds	r7, #8
 8040d8a:	46bd      	mov	sp, r7
 8040d8c:	bd80      	pop	{r7, pc}

08040d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040d8e:	b580      	push	{r7, lr}
 8040d90:	b086      	sub	sp, #24
 8040d92:	af00      	add	r7, sp, #0
 8040d94:	4603      	mov	r3, r0
 8040d96:	60b9      	str	r1, [r7, #8]
 8040d98:	607a      	str	r2, [r7, #4]
 8040d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040d9c:	2300      	movs	r3, #0
 8040d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040da0:	f7ff ff5c 	bl	8040c5c <__NVIC_GetPriorityGrouping>
 8040da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040da6:	687a      	ldr	r2, [r7, #4]
 8040da8:	68b9      	ldr	r1, [r7, #8]
 8040daa:	6978      	ldr	r0, [r7, #20]
 8040dac:	f7ff ff8e 	bl	8040ccc <NVIC_EncodePriority>
 8040db0:	4602      	mov	r2, r0
 8040db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040db6:	4611      	mov	r1, r2
 8040db8:	4618      	mov	r0, r3
 8040dba:	f7ff ff5d 	bl	8040c78 <__NVIC_SetPriority>
}
 8040dbe:	bf00      	nop
 8040dc0:	3718      	adds	r7, #24
 8040dc2:	46bd      	mov	sp, r7
 8040dc4:	bd80      	pop	{r7, pc}

08040dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040dc6:	b580      	push	{r7, lr}
 8040dc8:	b082      	sub	sp, #8
 8040dca:	af00      	add	r7, sp, #0
 8040dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040dce:	6878      	ldr	r0, [r7, #4]
 8040dd0:	f7ff ffb0 	bl	8040d34 <SysTick_Config>
 8040dd4:	4603      	mov	r3, r0
}
 8040dd6:	4618      	mov	r0, r3
 8040dd8:	3708      	adds	r7, #8
 8040dda:	46bd      	mov	sp, r7
 8040ddc:	bd80      	pop	{r7, pc}
	...

08040de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040de0:	b480      	push	{r7}
 8040de2:	b089      	sub	sp, #36	; 0x24
 8040de4:	af00      	add	r7, sp, #0
 8040de6:	6078      	str	r0, [r7, #4]
 8040de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8040dea:	2300      	movs	r3, #0
 8040dec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8040dee:	2300      	movs	r3, #0
 8040df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8040df2:	2300      	movs	r3, #0
 8040df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8040df6:	2300      	movs	r3, #0
 8040df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8040dfa:	2300      	movs	r3, #0
 8040dfc:	61fb      	str	r3, [r7, #28]
 8040dfe:	e175      	b.n	80410ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8040e00:	2201      	movs	r2, #1
 8040e02:	69fb      	ldr	r3, [r7, #28]
 8040e04:	fa02 f303 	lsl.w	r3, r2, r3
 8040e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040e0a:	683b      	ldr	r3, [r7, #0]
 8040e0c:	681b      	ldr	r3, [r3, #0]
 8040e0e:	697a      	ldr	r2, [r7, #20]
 8040e10:	4013      	ands	r3, r2
 8040e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040e14:	693a      	ldr	r2, [r7, #16]
 8040e16:	697b      	ldr	r3, [r7, #20]
 8040e18:	429a      	cmp	r2, r3
 8040e1a:	f040 8164 	bne.w	80410e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040e1e:	683b      	ldr	r3, [r7, #0]
 8040e20:	685b      	ldr	r3, [r3, #4]
 8040e22:	2b01      	cmp	r3, #1
 8040e24:	d00b      	beq.n	8040e3e <HAL_GPIO_Init+0x5e>
 8040e26:	683b      	ldr	r3, [r7, #0]
 8040e28:	685b      	ldr	r3, [r3, #4]
 8040e2a:	2b02      	cmp	r3, #2
 8040e2c:	d007      	beq.n	8040e3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040e2e:	683b      	ldr	r3, [r7, #0]
 8040e30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040e32:	2b11      	cmp	r3, #17
 8040e34:	d003      	beq.n	8040e3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040e36:	683b      	ldr	r3, [r7, #0]
 8040e38:	685b      	ldr	r3, [r3, #4]
 8040e3a:	2b12      	cmp	r3, #18
 8040e3c:	d130      	bne.n	8040ea0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040e3e:	687b      	ldr	r3, [r7, #4]
 8040e40:	689b      	ldr	r3, [r3, #8]
 8040e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8040e44:	69fb      	ldr	r3, [r7, #28]
 8040e46:	005b      	lsls	r3, r3, #1
 8040e48:	2203      	movs	r2, #3
 8040e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8040e4e:	43db      	mvns	r3, r3
 8040e50:	69ba      	ldr	r2, [r7, #24]
 8040e52:	4013      	ands	r3, r2
 8040e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8040e56:	683b      	ldr	r3, [r7, #0]
 8040e58:	68da      	ldr	r2, [r3, #12]
 8040e5a:	69fb      	ldr	r3, [r7, #28]
 8040e5c:	005b      	lsls	r3, r3, #1
 8040e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8040e62:	69ba      	ldr	r2, [r7, #24]
 8040e64:	4313      	orrs	r3, r2
 8040e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040e68:	687b      	ldr	r3, [r7, #4]
 8040e6a:	69ba      	ldr	r2, [r7, #24]
 8040e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040e6e:	687b      	ldr	r3, [r7, #4]
 8040e70:	685b      	ldr	r3, [r3, #4]
 8040e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040e74:	2201      	movs	r2, #1
 8040e76:	69fb      	ldr	r3, [r7, #28]
 8040e78:	fa02 f303 	lsl.w	r3, r2, r3
 8040e7c:	43db      	mvns	r3, r3
 8040e7e:	69ba      	ldr	r2, [r7, #24]
 8040e80:	4013      	ands	r3, r2
 8040e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8040e84:	683b      	ldr	r3, [r7, #0]
 8040e86:	685b      	ldr	r3, [r3, #4]
 8040e88:	091b      	lsrs	r3, r3, #4
 8040e8a:	f003 0201 	and.w	r2, r3, #1
 8040e8e:	69fb      	ldr	r3, [r7, #28]
 8040e90:	fa02 f303 	lsl.w	r3, r2, r3
 8040e94:	69ba      	ldr	r2, [r7, #24]
 8040e96:	4313      	orrs	r3, r2
 8040e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040e9a:	687b      	ldr	r3, [r7, #4]
 8040e9c:	69ba      	ldr	r2, [r7, #24]
 8040e9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040ea0:	687b      	ldr	r3, [r7, #4]
 8040ea2:	68db      	ldr	r3, [r3, #12]
 8040ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8040ea6:	69fb      	ldr	r3, [r7, #28]
 8040ea8:	005b      	lsls	r3, r3, #1
 8040eaa:	2203      	movs	r2, #3
 8040eac:	fa02 f303 	lsl.w	r3, r2, r3
 8040eb0:	43db      	mvns	r3, r3
 8040eb2:	69ba      	ldr	r2, [r7, #24]
 8040eb4:	4013      	ands	r3, r2
 8040eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8040eb8:	683b      	ldr	r3, [r7, #0]
 8040eba:	689a      	ldr	r2, [r3, #8]
 8040ebc:	69fb      	ldr	r3, [r7, #28]
 8040ebe:	005b      	lsls	r3, r3, #1
 8040ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8040ec4:	69ba      	ldr	r2, [r7, #24]
 8040ec6:	4313      	orrs	r3, r2
 8040ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8040eca:	687b      	ldr	r3, [r7, #4]
 8040ecc:	69ba      	ldr	r2, [r7, #24]
 8040ece:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040ed0:	683b      	ldr	r3, [r7, #0]
 8040ed2:	685b      	ldr	r3, [r3, #4]
 8040ed4:	2b02      	cmp	r3, #2
 8040ed6:	d003      	beq.n	8040ee0 <HAL_GPIO_Init+0x100>
 8040ed8:	683b      	ldr	r3, [r7, #0]
 8040eda:	685b      	ldr	r3, [r3, #4]
 8040edc:	2b12      	cmp	r3, #18
 8040ede:	d123      	bne.n	8040f28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8040ee0:	69fb      	ldr	r3, [r7, #28]
 8040ee2:	08da      	lsrs	r2, r3, #3
 8040ee4:	687b      	ldr	r3, [r7, #4]
 8040ee6:	3208      	adds	r2, #8
 8040ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8040eee:	69fb      	ldr	r3, [r7, #28]
 8040ef0:	f003 0307 	and.w	r3, r3, #7
 8040ef4:	009b      	lsls	r3, r3, #2
 8040ef6:	220f      	movs	r2, #15
 8040ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8040efc:	43db      	mvns	r3, r3
 8040efe:	69ba      	ldr	r2, [r7, #24]
 8040f00:	4013      	ands	r3, r2
 8040f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8040f04:	683b      	ldr	r3, [r7, #0]
 8040f06:	691a      	ldr	r2, [r3, #16]
 8040f08:	69fb      	ldr	r3, [r7, #28]
 8040f0a:	f003 0307 	and.w	r3, r3, #7
 8040f0e:	009b      	lsls	r3, r3, #2
 8040f10:	fa02 f303 	lsl.w	r3, r2, r3
 8040f14:	69ba      	ldr	r2, [r7, #24]
 8040f16:	4313      	orrs	r3, r2
 8040f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8040f1a:	69fb      	ldr	r3, [r7, #28]
 8040f1c:	08da      	lsrs	r2, r3, #3
 8040f1e:	687b      	ldr	r3, [r7, #4]
 8040f20:	3208      	adds	r2, #8
 8040f22:	69b9      	ldr	r1, [r7, #24]
 8040f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040f28:	687b      	ldr	r3, [r7, #4]
 8040f2a:	681b      	ldr	r3, [r3, #0]
 8040f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8040f2e:	69fb      	ldr	r3, [r7, #28]
 8040f30:	005b      	lsls	r3, r3, #1
 8040f32:	2203      	movs	r2, #3
 8040f34:	fa02 f303 	lsl.w	r3, r2, r3
 8040f38:	43db      	mvns	r3, r3
 8040f3a:	69ba      	ldr	r2, [r7, #24]
 8040f3c:	4013      	ands	r3, r2
 8040f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8040f40:	683b      	ldr	r3, [r7, #0]
 8040f42:	685b      	ldr	r3, [r3, #4]
 8040f44:	f003 0203 	and.w	r2, r3, #3
 8040f48:	69fb      	ldr	r3, [r7, #28]
 8040f4a:	005b      	lsls	r3, r3, #1
 8040f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8040f50:	69ba      	ldr	r2, [r7, #24]
 8040f52:	4313      	orrs	r3, r2
 8040f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040f56:	687b      	ldr	r3, [r7, #4]
 8040f58:	69ba      	ldr	r2, [r7, #24]
 8040f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040f5c:	683b      	ldr	r3, [r7, #0]
 8040f5e:	685b      	ldr	r3, [r3, #4]
 8040f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040f64:	2b00      	cmp	r3, #0
 8040f66:	f000 80be 	beq.w	80410e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040f6a:	4b66      	ldr	r3, [pc, #408]	; (8041104 <HAL_GPIO_Init+0x324>)
 8040f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f6e:	4a65      	ldr	r2, [pc, #404]	; (8041104 <HAL_GPIO_Init+0x324>)
 8040f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040f74:	6453      	str	r3, [r2, #68]	; 0x44
 8040f76:	4b63      	ldr	r3, [pc, #396]	; (8041104 <HAL_GPIO_Init+0x324>)
 8040f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040f7e:	60fb      	str	r3, [r7, #12]
 8040f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8040f82:	4a61      	ldr	r2, [pc, #388]	; (8041108 <HAL_GPIO_Init+0x328>)
 8040f84:	69fb      	ldr	r3, [r7, #28]
 8040f86:	089b      	lsrs	r3, r3, #2
 8040f88:	3302      	adds	r3, #2
 8040f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8040f90:	69fb      	ldr	r3, [r7, #28]
 8040f92:	f003 0303 	and.w	r3, r3, #3
 8040f96:	009b      	lsls	r3, r3, #2
 8040f98:	220f      	movs	r2, #15
 8040f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8040f9e:	43db      	mvns	r3, r3
 8040fa0:	69ba      	ldr	r2, [r7, #24]
 8040fa2:	4013      	ands	r3, r2
 8040fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8040fa6:	687b      	ldr	r3, [r7, #4]
 8040fa8:	4a58      	ldr	r2, [pc, #352]	; (804110c <HAL_GPIO_Init+0x32c>)
 8040faa:	4293      	cmp	r3, r2
 8040fac:	d037      	beq.n	804101e <HAL_GPIO_Init+0x23e>
 8040fae:	687b      	ldr	r3, [r7, #4]
 8040fb0:	4a57      	ldr	r2, [pc, #348]	; (8041110 <HAL_GPIO_Init+0x330>)
 8040fb2:	4293      	cmp	r3, r2
 8040fb4:	d031      	beq.n	804101a <HAL_GPIO_Init+0x23a>
 8040fb6:	687b      	ldr	r3, [r7, #4]
 8040fb8:	4a56      	ldr	r2, [pc, #344]	; (8041114 <HAL_GPIO_Init+0x334>)
 8040fba:	4293      	cmp	r3, r2
 8040fbc:	d02b      	beq.n	8041016 <HAL_GPIO_Init+0x236>
 8040fbe:	687b      	ldr	r3, [r7, #4]
 8040fc0:	4a55      	ldr	r2, [pc, #340]	; (8041118 <HAL_GPIO_Init+0x338>)
 8040fc2:	4293      	cmp	r3, r2
 8040fc4:	d025      	beq.n	8041012 <HAL_GPIO_Init+0x232>
 8040fc6:	687b      	ldr	r3, [r7, #4]
 8040fc8:	4a54      	ldr	r2, [pc, #336]	; (804111c <HAL_GPIO_Init+0x33c>)
 8040fca:	4293      	cmp	r3, r2
 8040fcc:	d01f      	beq.n	804100e <HAL_GPIO_Init+0x22e>
 8040fce:	687b      	ldr	r3, [r7, #4]
 8040fd0:	4a53      	ldr	r2, [pc, #332]	; (8041120 <HAL_GPIO_Init+0x340>)
 8040fd2:	4293      	cmp	r3, r2
 8040fd4:	d019      	beq.n	804100a <HAL_GPIO_Init+0x22a>
 8040fd6:	687b      	ldr	r3, [r7, #4]
 8040fd8:	4a52      	ldr	r2, [pc, #328]	; (8041124 <HAL_GPIO_Init+0x344>)
 8040fda:	4293      	cmp	r3, r2
 8040fdc:	d013      	beq.n	8041006 <HAL_GPIO_Init+0x226>
 8040fde:	687b      	ldr	r3, [r7, #4]
 8040fe0:	4a51      	ldr	r2, [pc, #324]	; (8041128 <HAL_GPIO_Init+0x348>)
 8040fe2:	4293      	cmp	r3, r2
 8040fe4:	d00d      	beq.n	8041002 <HAL_GPIO_Init+0x222>
 8040fe6:	687b      	ldr	r3, [r7, #4]
 8040fe8:	4a50      	ldr	r2, [pc, #320]	; (804112c <HAL_GPIO_Init+0x34c>)
 8040fea:	4293      	cmp	r3, r2
 8040fec:	d007      	beq.n	8040ffe <HAL_GPIO_Init+0x21e>
 8040fee:	687b      	ldr	r3, [r7, #4]
 8040ff0:	4a4f      	ldr	r2, [pc, #316]	; (8041130 <HAL_GPIO_Init+0x350>)
 8040ff2:	4293      	cmp	r3, r2
 8040ff4:	d101      	bne.n	8040ffa <HAL_GPIO_Init+0x21a>
 8040ff6:	2309      	movs	r3, #9
 8040ff8:	e012      	b.n	8041020 <HAL_GPIO_Init+0x240>
 8040ffa:	230a      	movs	r3, #10
 8040ffc:	e010      	b.n	8041020 <HAL_GPIO_Init+0x240>
 8040ffe:	2308      	movs	r3, #8
 8041000:	e00e      	b.n	8041020 <HAL_GPIO_Init+0x240>
 8041002:	2307      	movs	r3, #7
 8041004:	e00c      	b.n	8041020 <HAL_GPIO_Init+0x240>
 8041006:	2306      	movs	r3, #6
 8041008:	e00a      	b.n	8041020 <HAL_GPIO_Init+0x240>
 804100a:	2305      	movs	r3, #5
 804100c:	e008      	b.n	8041020 <HAL_GPIO_Init+0x240>
 804100e:	2304      	movs	r3, #4
 8041010:	e006      	b.n	8041020 <HAL_GPIO_Init+0x240>
 8041012:	2303      	movs	r3, #3
 8041014:	e004      	b.n	8041020 <HAL_GPIO_Init+0x240>
 8041016:	2302      	movs	r3, #2
 8041018:	e002      	b.n	8041020 <HAL_GPIO_Init+0x240>
 804101a:	2301      	movs	r3, #1
 804101c:	e000      	b.n	8041020 <HAL_GPIO_Init+0x240>
 804101e:	2300      	movs	r3, #0
 8041020:	69fa      	ldr	r2, [r7, #28]
 8041022:	f002 0203 	and.w	r2, r2, #3
 8041026:	0092      	lsls	r2, r2, #2
 8041028:	4093      	lsls	r3, r2
 804102a:	69ba      	ldr	r2, [r7, #24]
 804102c:	4313      	orrs	r3, r2
 804102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8041030:	4935      	ldr	r1, [pc, #212]	; (8041108 <HAL_GPIO_Init+0x328>)
 8041032:	69fb      	ldr	r3, [r7, #28]
 8041034:	089b      	lsrs	r3, r3, #2
 8041036:	3302      	adds	r3, #2
 8041038:	69ba      	ldr	r2, [r7, #24]
 804103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804103e:	4b3d      	ldr	r3, [pc, #244]	; (8041134 <HAL_GPIO_Init+0x354>)
 8041040:	681b      	ldr	r3, [r3, #0]
 8041042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041044:	693b      	ldr	r3, [r7, #16]
 8041046:	43db      	mvns	r3, r3
 8041048:	69ba      	ldr	r2, [r7, #24]
 804104a:	4013      	ands	r3, r2
 804104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 804104e:	683b      	ldr	r3, [r7, #0]
 8041050:	685b      	ldr	r3, [r3, #4]
 8041052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041056:	2b00      	cmp	r3, #0
 8041058:	d003      	beq.n	8041062 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 804105a:	69ba      	ldr	r2, [r7, #24]
 804105c:	693b      	ldr	r3, [r7, #16]
 804105e:	4313      	orrs	r3, r2
 8041060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041062:	4a34      	ldr	r2, [pc, #208]	; (8041134 <HAL_GPIO_Init+0x354>)
 8041064:	69bb      	ldr	r3, [r7, #24]
 8041066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8041068:	4b32      	ldr	r3, [pc, #200]	; (8041134 <HAL_GPIO_Init+0x354>)
 804106a:	685b      	ldr	r3, [r3, #4]
 804106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804106e:	693b      	ldr	r3, [r7, #16]
 8041070:	43db      	mvns	r3, r3
 8041072:	69ba      	ldr	r2, [r7, #24]
 8041074:	4013      	ands	r3, r2
 8041076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041078:	683b      	ldr	r3, [r7, #0]
 804107a:	685b      	ldr	r3, [r3, #4]
 804107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041080:	2b00      	cmp	r3, #0
 8041082:	d003      	beq.n	804108c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041084:	69ba      	ldr	r2, [r7, #24]
 8041086:	693b      	ldr	r3, [r7, #16]
 8041088:	4313      	orrs	r3, r2
 804108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 804108c:	4a29      	ldr	r2, [pc, #164]	; (8041134 <HAL_GPIO_Init+0x354>)
 804108e:	69bb      	ldr	r3, [r7, #24]
 8041090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041092:	4b28      	ldr	r3, [pc, #160]	; (8041134 <HAL_GPIO_Init+0x354>)
 8041094:	689b      	ldr	r3, [r3, #8]
 8041096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041098:	693b      	ldr	r3, [r7, #16]
 804109a:	43db      	mvns	r3, r3
 804109c:	69ba      	ldr	r2, [r7, #24]
 804109e:	4013      	ands	r3, r2
 80410a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80410a2:	683b      	ldr	r3, [r7, #0]
 80410a4:	685b      	ldr	r3, [r3, #4]
 80410a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80410aa:	2b00      	cmp	r3, #0
 80410ac:	d003      	beq.n	80410b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80410ae:	69ba      	ldr	r2, [r7, #24]
 80410b0:	693b      	ldr	r3, [r7, #16]
 80410b2:	4313      	orrs	r3, r2
 80410b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80410b6:	4a1f      	ldr	r2, [pc, #124]	; (8041134 <HAL_GPIO_Init+0x354>)
 80410b8:	69bb      	ldr	r3, [r7, #24]
 80410ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80410bc:	4b1d      	ldr	r3, [pc, #116]	; (8041134 <HAL_GPIO_Init+0x354>)
 80410be:	68db      	ldr	r3, [r3, #12]
 80410c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80410c2:	693b      	ldr	r3, [r7, #16]
 80410c4:	43db      	mvns	r3, r3
 80410c6:	69ba      	ldr	r2, [r7, #24]
 80410c8:	4013      	ands	r3, r2
 80410ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80410cc:	683b      	ldr	r3, [r7, #0]
 80410ce:	685b      	ldr	r3, [r3, #4]
 80410d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80410d4:	2b00      	cmp	r3, #0
 80410d6:	d003      	beq.n	80410e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80410d8:	69ba      	ldr	r2, [r7, #24]
 80410da:	693b      	ldr	r3, [r7, #16]
 80410dc:	4313      	orrs	r3, r2
 80410de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80410e0:	4a14      	ldr	r2, [pc, #80]	; (8041134 <HAL_GPIO_Init+0x354>)
 80410e2:	69bb      	ldr	r3, [r7, #24]
 80410e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80410e6:	69fb      	ldr	r3, [r7, #28]
 80410e8:	3301      	adds	r3, #1
 80410ea:	61fb      	str	r3, [r7, #28]
 80410ec:	69fb      	ldr	r3, [r7, #28]
 80410ee:	2b0f      	cmp	r3, #15
 80410f0:	f67f ae86 	bls.w	8040e00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80410f4:	bf00      	nop
 80410f6:	bf00      	nop
 80410f8:	3724      	adds	r7, #36	; 0x24
 80410fa:	46bd      	mov	sp, r7
 80410fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041100:	4770      	bx	lr
 8041102:	bf00      	nop
 8041104:	40023800 	.word	0x40023800
 8041108:	40013800 	.word	0x40013800
 804110c:	40020000 	.word	0x40020000
 8041110:	40020400 	.word	0x40020400
 8041114:	40020800 	.word	0x40020800
 8041118:	40020c00 	.word	0x40020c00
 804111c:	40021000 	.word	0x40021000
 8041120:	40021400 	.word	0x40021400
 8041124:	40021800 	.word	0x40021800
 8041128:	40021c00 	.word	0x40021c00
 804112c:	40022000 	.word	0x40022000
 8041130:	40022400 	.word	0x40022400
 8041134:	40013c00 	.word	0x40013c00

08041138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041138:	b480      	push	{r7}
 804113a:	b083      	sub	sp, #12
 804113c:	af00      	add	r7, sp, #0
 804113e:	6078      	str	r0, [r7, #4]
 8041140:	460b      	mov	r3, r1
 8041142:	807b      	strh	r3, [r7, #2]
 8041144:	4613      	mov	r3, r2
 8041146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041148:	787b      	ldrb	r3, [r7, #1]
 804114a:	2b00      	cmp	r3, #0
 804114c:	d003      	beq.n	8041156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804114e:	887a      	ldrh	r2, [r7, #2]
 8041150:	687b      	ldr	r3, [r7, #4]
 8041152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041154:	e003      	b.n	804115e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8041156:	887b      	ldrh	r3, [r7, #2]
 8041158:	041a      	lsls	r2, r3, #16
 804115a:	687b      	ldr	r3, [r7, #4]
 804115c:	619a      	str	r2, [r3, #24]
}
 804115e:	bf00      	nop
 8041160:	370c      	adds	r7, #12
 8041162:	46bd      	mov	sp, r7
 8041164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041168:	4770      	bx	lr
	...

0804116c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 804116c:	b580      	push	{r7, lr}
 804116e:	b086      	sub	sp, #24
 8041170:	af00      	add	r7, sp, #0
 8041172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8041174:	2300      	movs	r3, #0
 8041176:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041178:	687b      	ldr	r3, [r7, #4]
 804117a:	2b00      	cmp	r3, #0
 804117c:	d101      	bne.n	8041182 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 804117e:	2301      	movs	r3, #1
 8041180:	e29b      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041182:	687b      	ldr	r3, [r7, #4]
 8041184:	681b      	ldr	r3, [r3, #0]
 8041186:	f003 0301 	and.w	r3, r3, #1
 804118a:	2b00      	cmp	r3, #0
 804118c:	f000 8087 	beq.w	804129e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041190:	4b96      	ldr	r3, [pc, #600]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041192:	689b      	ldr	r3, [r3, #8]
 8041194:	f003 030c 	and.w	r3, r3, #12
 8041198:	2b04      	cmp	r3, #4
 804119a:	d00c      	beq.n	80411b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804119c:	4b93      	ldr	r3, [pc, #588]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804119e:	689b      	ldr	r3, [r3, #8]
 80411a0:	f003 030c 	and.w	r3, r3, #12
 80411a4:	2b08      	cmp	r3, #8
 80411a6:	d112      	bne.n	80411ce <HAL_RCC_OscConfig+0x62>
 80411a8:	4b90      	ldr	r3, [pc, #576]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411aa:	685b      	ldr	r3, [r3, #4]
 80411ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80411b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80411b4:	d10b      	bne.n	80411ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80411b6:	4b8d      	ldr	r3, [pc, #564]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411b8:	681b      	ldr	r3, [r3, #0]
 80411ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411be:	2b00      	cmp	r3, #0
 80411c0:	d06c      	beq.n	804129c <HAL_RCC_OscConfig+0x130>
 80411c2:	687b      	ldr	r3, [r7, #4]
 80411c4:	685b      	ldr	r3, [r3, #4]
 80411c6:	2b00      	cmp	r3, #0
 80411c8:	d168      	bne.n	804129c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80411ca:	2301      	movs	r3, #1
 80411cc:	e275      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80411ce:	687b      	ldr	r3, [r7, #4]
 80411d0:	685b      	ldr	r3, [r3, #4]
 80411d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80411d6:	d106      	bne.n	80411e6 <HAL_RCC_OscConfig+0x7a>
 80411d8:	4b84      	ldr	r3, [pc, #528]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411da:	681b      	ldr	r3, [r3, #0]
 80411dc:	4a83      	ldr	r2, [pc, #524]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80411e2:	6013      	str	r3, [r2, #0]
 80411e4:	e02e      	b.n	8041244 <HAL_RCC_OscConfig+0xd8>
 80411e6:	687b      	ldr	r3, [r7, #4]
 80411e8:	685b      	ldr	r3, [r3, #4]
 80411ea:	2b00      	cmp	r3, #0
 80411ec:	d10c      	bne.n	8041208 <HAL_RCC_OscConfig+0x9c>
 80411ee:	4b7f      	ldr	r3, [pc, #508]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411f0:	681b      	ldr	r3, [r3, #0]
 80411f2:	4a7e      	ldr	r2, [pc, #504]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80411f8:	6013      	str	r3, [r2, #0]
 80411fa:	4b7c      	ldr	r3, [pc, #496]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80411fc:	681b      	ldr	r3, [r3, #0]
 80411fe:	4a7b      	ldr	r2, [pc, #492]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041204:	6013      	str	r3, [r2, #0]
 8041206:	e01d      	b.n	8041244 <HAL_RCC_OscConfig+0xd8>
 8041208:	687b      	ldr	r3, [r7, #4]
 804120a:	685b      	ldr	r3, [r3, #4]
 804120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041210:	d10c      	bne.n	804122c <HAL_RCC_OscConfig+0xc0>
 8041212:	4b76      	ldr	r3, [pc, #472]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041214:	681b      	ldr	r3, [r3, #0]
 8041216:	4a75      	ldr	r2, [pc, #468]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804121c:	6013      	str	r3, [r2, #0]
 804121e:	4b73      	ldr	r3, [pc, #460]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041220:	681b      	ldr	r3, [r3, #0]
 8041222:	4a72      	ldr	r2, [pc, #456]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041228:	6013      	str	r3, [r2, #0]
 804122a:	e00b      	b.n	8041244 <HAL_RCC_OscConfig+0xd8>
 804122c:	4b6f      	ldr	r3, [pc, #444]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804122e:	681b      	ldr	r3, [r3, #0]
 8041230:	4a6e      	ldr	r2, [pc, #440]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041236:	6013      	str	r3, [r2, #0]
 8041238:	4b6c      	ldr	r3, [pc, #432]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804123a:	681b      	ldr	r3, [r3, #0]
 804123c:	4a6b      	ldr	r2, [pc, #428]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041244:	687b      	ldr	r3, [r7, #4]
 8041246:	685b      	ldr	r3, [r3, #4]
 8041248:	2b00      	cmp	r3, #0
 804124a:	d013      	beq.n	8041274 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804124c:	f7ff fcb2 	bl	8040bb4 <HAL_GetTick>
 8041250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041252:	e008      	b.n	8041266 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041254:	f7ff fcae 	bl	8040bb4 <HAL_GetTick>
 8041258:	4602      	mov	r2, r0
 804125a:	693b      	ldr	r3, [r7, #16]
 804125c:	1ad3      	subs	r3, r2, r3
 804125e:	2b64      	cmp	r3, #100	; 0x64
 8041260:	d901      	bls.n	8041266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041262:	2303      	movs	r3, #3
 8041264:	e229      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041266:	4b61      	ldr	r3, [pc, #388]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041268:	681b      	ldr	r3, [r3, #0]
 804126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804126e:	2b00      	cmp	r3, #0
 8041270:	d0f0      	beq.n	8041254 <HAL_RCC_OscConfig+0xe8>
 8041272:	e014      	b.n	804129e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041274:	f7ff fc9e 	bl	8040bb4 <HAL_GetTick>
 8041278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804127a:	e008      	b.n	804128e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804127c:	f7ff fc9a 	bl	8040bb4 <HAL_GetTick>
 8041280:	4602      	mov	r2, r0
 8041282:	693b      	ldr	r3, [r7, #16]
 8041284:	1ad3      	subs	r3, r2, r3
 8041286:	2b64      	cmp	r3, #100	; 0x64
 8041288:	d901      	bls.n	804128e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 804128a:	2303      	movs	r3, #3
 804128c:	e215      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804128e:	4b57      	ldr	r3, [pc, #348]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041290:	681b      	ldr	r3, [r3, #0]
 8041292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041296:	2b00      	cmp	r3, #0
 8041298:	d1f0      	bne.n	804127c <HAL_RCC_OscConfig+0x110>
 804129a:	e000      	b.n	804129e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804129e:	687b      	ldr	r3, [r7, #4]
 80412a0:	681b      	ldr	r3, [r3, #0]
 80412a2:	f003 0302 	and.w	r3, r3, #2
 80412a6:	2b00      	cmp	r3, #0
 80412a8:	d069      	beq.n	804137e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80412aa:	4b50      	ldr	r3, [pc, #320]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80412ac:	689b      	ldr	r3, [r3, #8]
 80412ae:	f003 030c 	and.w	r3, r3, #12
 80412b2:	2b00      	cmp	r3, #0
 80412b4:	d00b      	beq.n	80412ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80412b6:	4b4d      	ldr	r3, [pc, #308]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80412b8:	689b      	ldr	r3, [r3, #8]
 80412ba:	f003 030c 	and.w	r3, r3, #12
 80412be:	2b08      	cmp	r3, #8
 80412c0:	d11c      	bne.n	80412fc <HAL_RCC_OscConfig+0x190>
 80412c2:	4b4a      	ldr	r3, [pc, #296]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80412c4:	685b      	ldr	r3, [r3, #4]
 80412c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80412ca:	2b00      	cmp	r3, #0
 80412cc:	d116      	bne.n	80412fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80412ce:	4b47      	ldr	r3, [pc, #284]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80412d0:	681b      	ldr	r3, [r3, #0]
 80412d2:	f003 0302 	and.w	r3, r3, #2
 80412d6:	2b00      	cmp	r3, #0
 80412d8:	d005      	beq.n	80412e6 <HAL_RCC_OscConfig+0x17a>
 80412da:	687b      	ldr	r3, [r7, #4]
 80412dc:	68db      	ldr	r3, [r3, #12]
 80412de:	2b01      	cmp	r3, #1
 80412e0:	d001      	beq.n	80412e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80412e2:	2301      	movs	r3, #1
 80412e4:	e1e9      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80412e6:	4b41      	ldr	r3, [pc, #260]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80412e8:	681b      	ldr	r3, [r3, #0]
 80412ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80412ee:	687b      	ldr	r3, [r7, #4]
 80412f0:	691b      	ldr	r3, [r3, #16]
 80412f2:	00db      	lsls	r3, r3, #3
 80412f4:	493d      	ldr	r1, [pc, #244]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80412f6:	4313      	orrs	r3, r2
 80412f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80412fa:	e040      	b.n	804137e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80412fc:	687b      	ldr	r3, [r7, #4]
 80412fe:	68db      	ldr	r3, [r3, #12]
 8041300:	2b00      	cmp	r3, #0
 8041302:	d023      	beq.n	804134c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041304:	4b39      	ldr	r3, [pc, #228]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041306:	681b      	ldr	r3, [r3, #0]
 8041308:	4a38      	ldr	r2, [pc, #224]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804130a:	f043 0301 	orr.w	r3, r3, #1
 804130e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041310:	f7ff fc50 	bl	8040bb4 <HAL_GetTick>
 8041314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041316:	e008      	b.n	804132a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041318:	f7ff fc4c 	bl	8040bb4 <HAL_GetTick>
 804131c:	4602      	mov	r2, r0
 804131e:	693b      	ldr	r3, [r7, #16]
 8041320:	1ad3      	subs	r3, r2, r3
 8041322:	2b02      	cmp	r3, #2
 8041324:	d901      	bls.n	804132a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8041326:	2303      	movs	r3, #3
 8041328:	e1c7      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804132a:	4b30      	ldr	r3, [pc, #192]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804132c:	681b      	ldr	r3, [r3, #0]
 804132e:	f003 0302 	and.w	r3, r3, #2
 8041332:	2b00      	cmp	r3, #0
 8041334:	d0f0      	beq.n	8041318 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041336:	4b2d      	ldr	r3, [pc, #180]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041338:	681b      	ldr	r3, [r3, #0]
 804133a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804133e:	687b      	ldr	r3, [r7, #4]
 8041340:	691b      	ldr	r3, [r3, #16]
 8041342:	00db      	lsls	r3, r3, #3
 8041344:	4929      	ldr	r1, [pc, #164]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041346:	4313      	orrs	r3, r2
 8041348:	600b      	str	r3, [r1, #0]
 804134a:	e018      	b.n	804137e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804134c:	4b27      	ldr	r3, [pc, #156]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 804134e:	681b      	ldr	r3, [r3, #0]
 8041350:	4a26      	ldr	r2, [pc, #152]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041352:	f023 0301 	bic.w	r3, r3, #1
 8041356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041358:	f7ff fc2c 	bl	8040bb4 <HAL_GetTick>
 804135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804135e:	e008      	b.n	8041372 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041360:	f7ff fc28 	bl	8040bb4 <HAL_GetTick>
 8041364:	4602      	mov	r2, r0
 8041366:	693b      	ldr	r3, [r7, #16]
 8041368:	1ad3      	subs	r3, r2, r3
 804136a:	2b02      	cmp	r3, #2
 804136c:	d901      	bls.n	8041372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804136e:	2303      	movs	r3, #3
 8041370:	e1a3      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041372:	4b1e      	ldr	r3, [pc, #120]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041374:	681b      	ldr	r3, [r3, #0]
 8041376:	f003 0302 	and.w	r3, r3, #2
 804137a:	2b00      	cmp	r3, #0
 804137c:	d1f0      	bne.n	8041360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804137e:	687b      	ldr	r3, [r7, #4]
 8041380:	681b      	ldr	r3, [r3, #0]
 8041382:	f003 0308 	and.w	r3, r3, #8
 8041386:	2b00      	cmp	r3, #0
 8041388:	d038      	beq.n	80413fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 804138a:	687b      	ldr	r3, [r7, #4]
 804138c:	695b      	ldr	r3, [r3, #20]
 804138e:	2b00      	cmp	r3, #0
 8041390:	d019      	beq.n	80413c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041392:	4b16      	ldr	r3, [pc, #88]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041396:	4a15      	ldr	r2, [pc, #84]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 8041398:	f043 0301 	orr.w	r3, r3, #1
 804139c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804139e:	f7ff fc09 	bl	8040bb4 <HAL_GetTick>
 80413a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413a4:	e008      	b.n	80413b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80413a6:	f7ff fc05 	bl	8040bb4 <HAL_GetTick>
 80413aa:	4602      	mov	r2, r0
 80413ac:	693b      	ldr	r3, [r7, #16]
 80413ae:	1ad3      	subs	r3, r2, r3
 80413b0:	2b02      	cmp	r3, #2
 80413b2:	d901      	bls.n	80413b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80413b4:	2303      	movs	r3, #3
 80413b6:	e180      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413b8:	4b0c      	ldr	r3, [pc, #48]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80413ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413bc:	f003 0302 	and.w	r3, r3, #2
 80413c0:	2b00      	cmp	r3, #0
 80413c2:	d0f0      	beq.n	80413a6 <HAL_RCC_OscConfig+0x23a>
 80413c4:	e01a      	b.n	80413fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80413c6:	4b09      	ldr	r3, [pc, #36]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80413c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413ca:	4a08      	ldr	r2, [pc, #32]	; (80413ec <HAL_RCC_OscConfig+0x280>)
 80413cc:	f023 0301 	bic.w	r3, r3, #1
 80413d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413d2:	f7ff fbef 	bl	8040bb4 <HAL_GetTick>
 80413d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80413d8:	e00a      	b.n	80413f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80413da:	f7ff fbeb 	bl	8040bb4 <HAL_GetTick>
 80413de:	4602      	mov	r2, r0
 80413e0:	693b      	ldr	r3, [r7, #16]
 80413e2:	1ad3      	subs	r3, r2, r3
 80413e4:	2b02      	cmp	r3, #2
 80413e6:	d903      	bls.n	80413f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80413e8:	2303      	movs	r3, #3
 80413ea:	e166      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
 80413ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80413f0:	4b92      	ldr	r3, [pc, #584]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80413f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413f4:	f003 0302 	and.w	r3, r3, #2
 80413f8:	2b00      	cmp	r3, #0
 80413fa:	d1ee      	bne.n	80413da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80413fc:	687b      	ldr	r3, [r7, #4]
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	f003 0304 	and.w	r3, r3, #4
 8041404:	2b00      	cmp	r3, #0
 8041406:	f000 80a4 	beq.w	8041552 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 804140a:	4b8c      	ldr	r3, [pc, #560]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041412:	2b00      	cmp	r3, #0
 8041414:	d10d      	bne.n	8041432 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8041416:	4b89      	ldr	r3, [pc, #548]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804141a:	4a88      	ldr	r2, [pc, #544]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041420:	6413      	str	r3, [r2, #64]	; 0x40
 8041422:	4b86      	ldr	r3, [pc, #536]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804142a:	60bb      	str	r3, [r7, #8]
 804142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804142e:	2301      	movs	r3, #1
 8041430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041432:	4b83      	ldr	r3, [pc, #524]	; (8041640 <HAL_RCC_OscConfig+0x4d4>)
 8041434:	681b      	ldr	r3, [r3, #0]
 8041436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804143a:	2b00      	cmp	r3, #0
 804143c:	d118      	bne.n	8041470 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 804143e:	4b80      	ldr	r3, [pc, #512]	; (8041640 <HAL_RCC_OscConfig+0x4d4>)
 8041440:	681b      	ldr	r3, [r3, #0]
 8041442:	4a7f      	ldr	r2, [pc, #508]	; (8041640 <HAL_RCC_OscConfig+0x4d4>)
 8041444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804144a:	f7ff fbb3 	bl	8040bb4 <HAL_GetTick>
 804144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041450:	e008      	b.n	8041464 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041452:	f7ff fbaf 	bl	8040bb4 <HAL_GetTick>
 8041456:	4602      	mov	r2, r0
 8041458:	693b      	ldr	r3, [r7, #16]
 804145a:	1ad3      	subs	r3, r2, r3
 804145c:	2b64      	cmp	r3, #100	; 0x64
 804145e:	d901      	bls.n	8041464 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8041460:	2303      	movs	r3, #3
 8041462:	e12a      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041464:	4b76      	ldr	r3, [pc, #472]	; (8041640 <HAL_RCC_OscConfig+0x4d4>)
 8041466:	681b      	ldr	r3, [r3, #0]
 8041468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804146c:	2b00      	cmp	r3, #0
 804146e:	d0f0      	beq.n	8041452 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041470:	687b      	ldr	r3, [r7, #4]
 8041472:	689b      	ldr	r3, [r3, #8]
 8041474:	2b01      	cmp	r3, #1
 8041476:	d106      	bne.n	8041486 <HAL_RCC_OscConfig+0x31a>
 8041478:	4b70      	ldr	r3, [pc, #448]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804147c:	4a6f      	ldr	r2, [pc, #444]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804147e:	f043 0301 	orr.w	r3, r3, #1
 8041482:	6713      	str	r3, [r2, #112]	; 0x70
 8041484:	e02d      	b.n	80414e2 <HAL_RCC_OscConfig+0x376>
 8041486:	687b      	ldr	r3, [r7, #4]
 8041488:	689b      	ldr	r3, [r3, #8]
 804148a:	2b00      	cmp	r3, #0
 804148c:	d10c      	bne.n	80414a8 <HAL_RCC_OscConfig+0x33c>
 804148e:	4b6b      	ldr	r3, [pc, #428]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041492:	4a6a      	ldr	r2, [pc, #424]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041494:	f023 0301 	bic.w	r3, r3, #1
 8041498:	6713      	str	r3, [r2, #112]	; 0x70
 804149a:	4b68      	ldr	r3, [pc, #416]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804149e:	4a67      	ldr	r2, [pc, #412]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414a0:	f023 0304 	bic.w	r3, r3, #4
 80414a4:	6713      	str	r3, [r2, #112]	; 0x70
 80414a6:	e01c      	b.n	80414e2 <HAL_RCC_OscConfig+0x376>
 80414a8:	687b      	ldr	r3, [r7, #4]
 80414aa:	689b      	ldr	r3, [r3, #8]
 80414ac:	2b05      	cmp	r3, #5
 80414ae:	d10c      	bne.n	80414ca <HAL_RCC_OscConfig+0x35e>
 80414b0:	4b62      	ldr	r3, [pc, #392]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414b4:	4a61      	ldr	r2, [pc, #388]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414b6:	f043 0304 	orr.w	r3, r3, #4
 80414ba:	6713      	str	r3, [r2, #112]	; 0x70
 80414bc:	4b5f      	ldr	r3, [pc, #380]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414c0:	4a5e      	ldr	r2, [pc, #376]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414c2:	f043 0301 	orr.w	r3, r3, #1
 80414c6:	6713      	str	r3, [r2, #112]	; 0x70
 80414c8:	e00b      	b.n	80414e2 <HAL_RCC_OscConfig+0x376>
 80414ca:	4b5c      	ldr	r3, [pc, #368]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414ce:	4a5b      	ldr	r2, [pc, #364]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414d0:	f023 0301 	bic.w	r3, r3, #1
 80414d4:	6713      	str	r3, [r2, #112]	; 0x70
 80414d6:	4b59      	ldr	r3, [pc, #356]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414da:	4a58      	ldr	r2, [pc, #352]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80414dc:	f023 0304 	bic.w	r3, r3, #4
 80414e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80414e2:	687b      	ldr	r3, [r7, #4]
 80414e4:	689b      	ldr	r3, [r3, #8]
 80414e6:	2b00      	cmp	r3, #0
 80414e8:	d015      	beq.n	8041516 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80414ea:	f7ff fb63 	bl	8040bb4 <HAL_GetTick>
 80414ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80414f0:	e00a      	b.n	8041508 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80414f2:	f7ff fb5f 	bl	8040bb4 <HAL_GetTick>
 80414f6:	4602      	mov	r2, r0
 80414f8:	693b      	ldr	r3, [r7, #16]
 80414fa:	1ad3      	subs	r3, r2, r3
 80414fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8041500:	4293      	cmp	r3, r2
 8041502:	d901      	bls.n	8041508 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8041504:	2303      	movs	r3, #3
 8041506:	e0d8      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041508:	4b4c      	ldr	r3, [pc, #304]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804150c:	f003 0302 	and.w	r3, r3, #2
 8041510:	2b00      	cmp	r3, #0
 8041512:	d0ee      	beq.n	80414f2 <HAL_RCC_OscConfig+0x386>
 8041514:	e014      	b.n	8041540 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041516:	f7ff fb4d 	bl	8040bb4 <HAL_GetTick>
 804151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804151c:	e00a      	b.n	8041534 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804151e:	f7ff fb49 	bl	8040bb4 <HAL_GetTick>
 8041522:	4602      	mov	r2, r0
 8041524:	693b      	ldr	r3, [r7, #16]
 8041526:	1ad3      	subs	r3, r2, r3
 8041528:	f241 3288 	movw	r2, #5000	; 0x1388
 804152c:	4293      	cmp	r3, r2
 804152e:	d901      	bls.n	8041534 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8041530:	2303      	movs	r3, #3
 8041532:	e0c2      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041534:	4b41      	ldr	r3, [pc, #260]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041538:	f003 0302 	and.w	r3, r3, #2
 804153c:	2b00      	cmp	r3, #0
 804153e:	d1ee      	bne.n	804151e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041540:	7dfb      	ldrb	r3, [r7, #23]
 8041542:	2b01      	cmp	r3, #1
 8041544:	d105      	bne.n	8041552 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041546:	4b3d      	ldr	r3, [pc, #244]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804154a:	4a3c      	ldr	r2, [pc, #240]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041550:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041552:	687b      	ldr	r3, [r7, #4]
 8041554:	699b      	ldr	r3, [r3, #24]
 8041556:	2b00      	cmp	r3, #0
 8041558:	f000 80ae 	beq.w	80416b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804155c:	4b37      	ldr	r3, [pc, #220]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804155e:	689b      	ldr	r3, [r3, #8]
 8041560:	f003 030c 	and.w	r3, r3, #12
 8041564:	2b08      	cmp	r3, #8
 8041566:	d06d      	beq.n	8041644 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041568:	687b      	ldr	r3, [r7, #4]
 804156a:	699b      	ldr	r3, [r3, #24]
 804156c:	2b02      	cmp	r3, #2
 804156e:	d14b      	bne.n	8041608 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041570:	4b32      	ldr	r3, [pc, #200]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041572:	681b      	ldr	r3, [r3, #0]
 8041574:	4a31      	ldr	r2, [pc, #196]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804157a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804157c:	f7ff fb1a 	bl	8040bb4 <HAL_GetTick>
 8041580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041582:	e008      	b.n	8041596 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041584:	f7ff fb16 	bl	8040bb4 <HAL_GetTick>
 8041588:	4602      	mov	r2, r0
 804158a:	693b      	ldr	r3, [r7, #16]
 804158c:	1ad3      	subs	r3, r2, r3
 804158e:	2b02      	cmp	r3, #2
 8041590:	d901      	bls.n	8041596 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8041592:	2303      	movs	r3, #3
 8041594:	e091      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041596:	4b29      	ldr	r3, [pc, #164]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041598:	681b      	ldr	r3, [r3, #0]
 804159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804159e:	2b00      	cmp	r3, #0
 80415a0:	d1f0      	bne.n	8041584 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80415a2:	687b      	ldr	r3, [r7, #4]
 80415a4:	69da      	ldr	r2, [r3, #28]
 80415a6:	687b      	ldr	r3, [r7, #4]
 80415a8:	6a1b      	ldr	r3, [r3, #32]
 80415aa:	431a      	orrs	r2, r3
 80415ac:	687b      	ldr	r3, [r7, #4]
 80415ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80415b0:	019b      	lsls	r3, r3, #6
 80415b2:	431a      	orrs	r2, r3
 80415b4:	687b      	ldr	r3, [r7, #4]
 80415b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80415b8:	085b      	lsrs	r3, r3, #1
 80415ba:	3b01      	subs	r3, #1
 80415bc:	041b      	lsls	r3, r3, #16
 80415be:	431a      	orrs	r2, r3
 80415c0:	687b      	ldr	r3, [r7, #4]
 80415c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80415c4:	061b      	lsls	r3, r3, #24
 80415c6:	431a      	orrs	r2, r3
 80415c8:	687b      	ldr	r3, [r7, #4]
 80415ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415cc:	071b      	lsls	r3, r3, #28
 80415ce:	491b      	ldr	r1, [pc, #108]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80415d0:	4313      	orrs	r3, r2
 80415d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80415d4:	4b19      	ldr	r3, [pc, #100]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80415d6:	681b      	ldr	r3, [r3, #0]
 80415d8:	4a18      	ldr	r2, [pc, #96]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80415da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80415de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415e0:	f7ff fae8 	bl	8040bb4 <HAL_GetTick>
 80415e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80415e6:	e008      	b.n	80415fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80415e8:	f7ff fae4 	bl	8040bb4 <HAL_GetTick>
 80415ec:	4602      	mov	r2, r0
 80415ee:	693b      	ldr	r3, [r7, #16]
 80415f0:	1ad3      	subs	r3, r2, r3
 80415f2:	2b02      	cmp	r3, #2
 80415f4:	d901      	bls.n	80415fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80415f6:	2303      	movs	r3, #3
 80415f8:	e05f      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80415fa:	4b10      	ldr	r3, [pc, #64]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 80415fc:	681b      	ldr	r3, [r3, #0]
 80415fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041602:	2b00      	cmp	r3, #0
 8041604:	d0f0      	beq.n	80415e8 <HAL_RCC_OscConfig+0x47c>
 8041606:	e057      	b.n	80416b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041608:	4b0c      	ldr	r3, [pc, #48]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804160a:	681b      	ldr	r3, [r3, #0]
 804160c:	4a0b      	ldr	r2, [pc, #44]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 804160e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041614:	f7ff face 	bl	8040bb4 <HAL_GetTick>
 8041618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804161a:	e008      	b.n	804162e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804161c:	f7ff faca 	bl	8040bb4 <HAL_GetTick>
 8041620:	4602      	mov	r2, r0
 8041622:	693b      	ldr	r3, [r7, #16]
 8041624:	1ad3      	subs	r3, r2, r3
 8041626:	2b02      	cmp	r3, #2
 8041628:	d901      	bls.n	804162e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 804162a:	2303      	movs	r3, #3
 804162c:	e045      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804162e:	4b03      	ldr	r3, [pc, #12]	; (804163c <HAL_RCC_OscConfig+0x4d0>)
 8041630:	681b      	ldr	r3, [r3, #0]
 8041632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041636:	2b00      	cmp	r3, #0
 8041638:	d1f0      	bne.n	804161c <HAL_RCC_OscConfig+0x4b0>
 804163a:	e03d      	b.n	80416b8 <HAL_RCC_OscConfig+0x54c>
 804163c:	40023800 	.word	0x40023800
 8041640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8041644:	4b1f      	ldr	r3, [pc, #124]	; (80416c4 <HAL_RCC_OscConfig+0x558>)
 8041646:	685b      	ldr	r3, [r3, #4]
 8041648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804164a:	687b      	ldr	r3, [r7, #4]
 804164c:	699b      	ldr	r3, [r3, #24]
 804164e:	2b01      	cmp	r3, #1
 8041650:	d030      	beq.n	80416b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041652:	68fb      	ldr	r3, [r7, #12]
 8041654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8041658:	687b      	ldr	r3, [r7, #4]
 804165a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804165c:	429a      	cmp	r2, r3
 804165e:	d129      	bne.n	80416b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8041660:	68fb      	ldr	r3, [r7, #12]
 8041662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8041666:	687b      	ldr	r3, [r7, #4]
 8041668:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804166a:	429a      	cmp	r2, r3
 804166c:	d122      	bne.n	80416b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804166e:	68fa      	ldr	r2, [r7, #12]
 8041670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8041674:	4013      	ands	r3, r2
 8041676:	687a      	ldr	r2, [r7, #4]
 8041678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804167a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804167c:	4293      	cmp	r3, r2
 804167e:	d119      	bne.n	80416b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8041680:	68fb      	ldr	r3, [r7, #12]
 8041682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8041686:	687b      	ldr	r3, [r7, #4]
 8041688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804168a:	085b      	lsrs	r3, r3, #1
 804168c:	3b01      	subs	r3, #1
 804168e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041690:	429a      	cmp	r2, r3
 8041692:	d10f      	bne.n	80416b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041694:	68fb      	ldr	r3, [r7, #12]
 8041696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 804169a:	687b      	ldr	r3, [r7, #4]
 804169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804169e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80416a0:	429a      	cmp	r2, r3
 80416a2:	d107      	bne.n	80416b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80416a4:	68fb      	ldr	r3, [r7, #12]
 80416a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80416aa:	687b      	ldr	r3, [r7, #4]
 80416ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80416b0:	429a      	cmp	r2, r3
 80416b2:	d001      	beq.n	80416b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80416b4:	2301      	movs	r3, #1
 80416b6:	e000      	b.n	80416ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80416b8:	2300      	movs	r3, #0
}
 80416ba:	4618      	mov	r0, r3
 80416bc:	3718      	adds	r7, #24
 80416be:	46bd      	mov	sp, r7
 80416c0:	bd80      	pop	{r7, pc}
 80416c2:	bf00      	nop
 80416c4:	40023800 	.word	0x40023800

080416c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80416c8:	b580      	push	{r7, lr}
 80416ca:	b084      	sub	sp, #16
 80416cc:	af00      	add	r7, sp, #0
 80416ce:	6078      	str	r0, [r7, #4]
 80416d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80416d2:	2300      	movs	r3, #0
 80416d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80416d6:	687b      	ldr	r3, [r7, #4]
 80416d8:	2b00      	cmp	r3, #0
 80416da:	d101      	bne.n	80416e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80416dc:	2301      	movs	r3, #1
 80416de:	e0d0      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80416e0:	4b6a      	ldr	r3, [pc, #424]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 80416e2:	681b      	ldr	r3, [r3, #0]
 80416e4:	f003 030f 	and.w	r3, r3, #15
 80416e8:	683a      	ldr	r2, [r7, #0]
 80416ea:	429a      	cmp	r2, r3
 80416ec:	d910      	bls.n	8041710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80416ee:	4b67      	ldr	r3, [pc, #412]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 80416f0:	681b      	ldr	r3, [r3, #0]
 80416f2:	f023 020f 	bic.w	r2, r3, #15
 80416f6:	4965      	ldr	r1, [pc, #404]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 80416f8:	683b      	ldr	r3, [r7, #0]
 80416fa:	4313      	orrs	r3, r2
 80416fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80416fe:	4b63      	ldr	r3, [pc, #396]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 8041700:	681b      	ldr	r3, [r3, #0]
 8041702:	f003 030f 	and.w	r3, r3, #15
 8041706:	683a      	ldr	r2, [r7, #0]
 8041708:	429a      	cmp	r2, r3
 804170a:	d001      	beq.n	8041710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 804170c:	2301      	movs	r3, #1
 804170e:	e0b8      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041710:	687b      	ldr	r3, [r7, #4]
 8041712:	681b      	ldr	r3, [r3, #0]
 8041714:	f003 0302 	and.w	r3, r3, #2
 8041718:	2b00      	cmp	r3, #0
 804171a:	d020      	beq.n	804175e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804171c:	687b      	ldr	r3, [r7, #4]
 804171e:	681b      	ldr	r3, [r3, #0]
 8041720:	f003 0304 	and.w	r3, r3, #4
 8041724:	2b00      	cmp	r3, #0
 8041726:	d005      	beq.n	8041734 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041728:	4b59      	ldr	r3, [pc, #356]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804172a:	689b      	ldr	r3, [r3, #8]
 804172c:	4a58      	ldr	r2, [pc, #352]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804172e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8041732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041734:	687b      	ldr	r3, [r7, #4]
 8041736:	681b      	ldr	r3, [r3, #0]
 8041738:	f003 0308 	and.w	r3, r3, #8
 804173c:	2b00      	cmp	r3, #0
 804173e:	d005      	beq.n	804174c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041740:	4b53      	ldr	r3, [pc, #332]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041742:	689b      	ldr	r3, [r3, #8]
 8041744:	4a52      	ldr	r2, [pc, #328]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 804174a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804174c:	4b50      	ldr	r3, [pc, #320]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804174e:	689b      	ldr	r3, [r3, #8]
 8041750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041754:	687b      	ldr	r3, [r7, #4]
 8041756:	689b      	ldr	r3, [r3, #8]
 8041758:	494d      	ldr	r1, [pc, #308]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804175a:	4313      	orrs	r3, r2
 804175c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804175e:	687b      	ldr	r3, [r7, #4]
 8041760:	681b      	ldr	r3, [r3, #0]
 8041762:	f003 0301 	and.w	r3, r3, #1
 8041766:	2b00      	cmp	r3, #0
 8041768:	d040      	beq.n	80417ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804176a:	687b      	ldr	r3, [r7, #4]
 804176c:	685b      	ldr	r3, [r3, #4]
 804176e:	2b01      	cmp	r3, #1
 8041770:	d107      	bne.n	8041782 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041772:	4b47      	ldr	r3, [pc, #284]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041774:	681b      	ldr	r3, [r3, #0]
 8041776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804177a:	2b00      	cmp	r3, #0
 804177c:	d115      	bne.n	80417aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804177e:	2301      	movs	r3, #1
 8041780:	e07f      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041782:	687b      	ldr	r3, [r7, #4]
 8041784:	685b      	ldr	r3, [r3, #4]
 8041786:	2b02      	cmp	r3, #2
 8041788:	d107      	bne.n	804179a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804178a:	4b41      	ldr	r3, [pc, #260]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804178c:	681b      	ldr	r3, [r3, #0]
 804178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041792:	2b00      	cmp	r3, #0
 8041794:	d109      	bne.n	80417aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8041796:	2301      	movs	r3, #1
 8041798:	e073      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804179a:	4b3d      	ldr	r3, [pc, #244]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804179c:	681b      	ldr	r3, [r3, #0]
 804179e:	f003 0302 	and.w	r3, r3, #2
 80417a2:	2b00      	cmp	r3, #0
 80417a4:	d101      	bne.n	80417aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80417a6:	2301      	movs	r3, #1
 80417a8:	e06b      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80417aa:	4b39      	ldr	r3, [pc, #228]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 80417ac:	689b      	ldr	r3, [r3, #8]
 80417ae:	f023 0203 	bic.w	r2, r3, #3
 80417b2:	687b      	ldr	r3, [r7, #4]
 80417b4:	685b      	ldr	r3, [r3, #4]
 80417b6:	4936      	ldr	r1, [pc, #216]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 80417b8:	4313      	orrs	r3, r2
 80417ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80417bc:	f7ff f9fa 	bl	8040bb4 <HAL_GetTick>
 80417c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417c2:	e00a      	b.n	80417da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80417c4:	f7ff f9f6 	bl	8040bb4 <HAL_GetTick>
 80417c8:	4602      	mov	r2, r0
 80417ca:	68fb      	ldr	r3, [r7, #12]
 80417cc:	1ad3      	subs	r3, r2, r3
 80417ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80417d2:	4293      	cmp	r3, r2
 80417d4:	d901      	bls.n	80417da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80417d6:	2303      	movs	r3, #3
 80417d8:	e053      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417da:	4b2d      	ldr	r3, [pc, #180]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 80417dc:	689b      	ldr	r3, [r3, #8]
 80417de:	f003 020c 	and.w	r2, r3, #12
 80417e2:	687b      	ldr	r3, [r7, #4]
 80417e4:	685b      	ldr	r3, [r3, #4]
 80417e6:	009b      	lsls	r3, r3, #2
 80417e8:	429a      	cmp	r2, r3
 80417ea:	d1eb      	bne.n	80417c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80417ec:	4b27      	ldr	r3, [pc, #156]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 80417ee:	681b      	ldr	r3, [r3, #0]
 80417f0:	f003 030f 	and.w	r3, r3, #15
 80417f4:	683a      	ldr	r2, [r7, #0]
 80417f6:	429a      	cmp	r2, r3
 80417f8:	d210      	bcs.n	804181c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80417fa:	4b24      	ldr	r3, [pc, #144]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 80417fc:	681b      	ldr	r3, [r3, #0]
 80417fe:	f023 020f 	bic.w	r2, r3, #15
 8041802:	4922      	ldr	r1, [pc, #136]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 8041804:	683b      	ldr	r3, [r7, #0]
 8041806:	4313      	orrs	r3, r2
 8041808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804180a:	4b20      	ldr	r3, [pc, #128]	; (804188c <HAL_RCC_ClockConfig+0x1c4>)
 804180c:	681b      	ldr	r3, [r3, #0]
 804180e:	f003 030f 	and.w	r3, r3, #15
 8041812:	683a      	ldr	r2, [r7, #0]
 8041814:	429a      	cmp	r2, r3
 8041816:	d001      	beq.n	804181c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8041818:	2301      	movs	r3, #1
 804181a:	e032      	b.n	8041882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804181c:	687b      	ldr	r3, [r7, #4]
 804181e:	681b      	ldr	r3, [r3, #0]
 8041820:	f003 0304 	and.w	r3, r3, #4
 8041824:	2b00      	cmp	r3, #0
 8041826:	d008      	beq.n	804183a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041828:	4b19      	ldr	r3, [pc, #100]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 804182a:	689b      	ldr	r3, [r3, #8]
 804182c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8041830:	687b      	ldr	r3, [r7, #4]
 8041832:	68db      	ldr	r3, [r3, #12]
 8041834:	4916      	ldr	r1, [pc, #88]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041836:	4313      	orrs	r3, r2
 8041838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804183a:	687b      	ldr	r3, [r7, #4]
 804183c:	681b      	ldr	r3, [r3, #0]
 804183e:	f003 0308 	and.w	r3, r3, #8
 8041842:	2b00      	cmp	r3, #0
 8041844:	d009      	beq.n	804185a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8041846:	4b12      	ldr	r3, [pc, #72]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041848:	689b      	ldr	r3, [r3, #8]
 804184a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804184e:	687b      	ldr	r3, [r7, #4]
 8041850:	691b      	ldr	r3, [r3, #16]
 8041852:	00db      	lsls	r3, r3, #3
 8041854:	490e      	ldr	r1, [pc, #56]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041856:	4313      	orrs	r3, r2
 8041858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 804185a:	f000 f821 	bl	80418a0 <HAL_RCC_GetSysClockFreq>
 804185e:	4602      	mov	r2, r0
 8041860:	4b0b      	ldr	r3, [pc, #44]	; (8041890 <HAL_RCC_ClockConfig+0x1c8>)
 8041862:	689b      	ldr	r3, [r3, #8]
 8041864:	091b      	lsrs	r3, r3, #4
 8041866:	f003 030f 	and.w	r3, r3, #15
 804186a:	490a      	ldr	r1, [pc, #40]	; (8041894 <HAL_RCC_ClockConfig+0x1cc>)
 804186c:	5ccb      	ldrb	r3, [r1, r3]
 804186e:	fa22 f303 	lsr.w	r3, r2, r3
 8041872:	4a09      	ldr	r2, [pc, #36]	; (8041898 <HAL_RCC_ClockConfig+0x1d0>)
 8041874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8041876:	4b09      	ldr	r3, [pc, #36]	; (804189c <HAL_RCC_ClockConfig+0x1d4>)
 8041878:	681b      	ldr	r3, [r3, #0]
 804187a:	4618      	mov	r0, r3
 804187c:	f7ff f956 	bl	8040b2c <HAL_InitTick>

  return HAL_OK;
 8041880:	2300      	movs	r3, #0
}
 8041882:	4618      	mov	r0, r3
 8041884:	3710      	adds	r7, #16
 8041886:	46bd      	mov	sp, r7
 8041888:	bd80      	pop	{r7, pc}
 804188a:	bf00      	nop
 804188c:	40023c00 	.word	0x40023c00
 8041890:	40023800 	.word	0x40023800
 8041894:	08043b64 	.word	0x08043b64
 8041898:	20000000 	.word	0x20000000
 804189c:	20000004 	.word	0x20000004

080418a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80418a0:	b5b0      	push	{r4, r5, r7, lr}
 80418a2:	b084      	sub	sp, #16
 80418a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80418a6:	2100      	movs	r1, #0
 80418a8:	6079      	str	r1, [r7, #4]
 80418aa:	2100      	movs	r1, #0
 80418ac:	60f9      	str	r1, [r7, #12]
 80418ae:	2100      	movs	r1, #0
 80418b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80418b2:	2100      	movs	r1, #0
 80418b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80418b6:	4952      	ldr	r1, [pc, #328]	; (8041a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80418b8:	6889      	ldr	r1, [r1, #8]
 80418ba:	f001 010c 	and.w	r1, r1, #12
 80418be:	2908      	cmp	r1, #8
 80418c0:	d00d      	beq.n	80418de <HAL_RCC_GetSysClockFreq+0x3e>
 80418c2:	2908      	cmp	r1, #8
 80418c4:	f200 8094 	bhi.w	80419f0 <HAL_RCC_GetSysClockFreq+0x150>
 80418c8:	2900      	cmp	r1, #0
 80418ca:	d002      	beq.n	80418d2 <HAL_RCC_GetSysClockFreq+0x32>
 80418cc:	2904      	cmp	r1, #4
 80418ce:	d003      	beq.n	80418d8 <HAL_RCC_GetSysClockFreq+0x38>
 80418d0:	e08e      	b.n	80419f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80418d2:	4b4c      	ldr	r3, [pc, #304]	; (8041a04 <HAL_RCC_GetSysClockFreq+0x164>)
 80418d4:	60bb      	str	r3, [r7, #8]
      break;
 80418d6:	e08e      	b.n	80419f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80418d8:	4b4b      	ldr	r3, [pc, #300]	; (8041a08 <HAL_RCC_GetSysClockFreq+0x168>)
 80418da:	60bb      	str	r3, [r7, #8]
      break;
 80418dc:	e08b      	b.n	80419f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80418de:	4948      	ldr	r1, [pc, #288]	; (8041a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80418e0:	6849      	ldr	r1, [r1, #4]
 80418e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80418e6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80418e8:	4945      	ldr	r1, [pc, #276]	; (8041a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80418ea:	6849      	ldr	r1, [r1, #4]
 80418ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80418f0:	2900      	cmp	r1, #0
 80418f2:	d024      	beq.n	804193e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80418f4:	4942      	ldr	r1, [pc, #264]	; (8041a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80418f6:	6849      	ldr	r1, [r1, #4]
 80418f8:	0989      	lsrs	r1, r1, #6
 80418fa:	4608      	mov	r0, r1
 80418fc:	f04f 0100 	mov.w	r1, #0
 8041900:	f240 14ff 	movw	r4, #511	; 0x1ff
 8041904:	f04f 0500 	mov.w	r5, #0
 8041908:	ea00 0204 	and.w	r2, r0, r4
 804190c:	ea01 0305 	and.w	r3, r1, r5
 8041910:	493d      	ldr	r1, [pc, #244]	; (8041a08 <HAL_RCC_GetSysClockFreq+0x168>)
 8041912:	fb01 f003 	mul.w	r0, r1, r3
 8041916:	2100      	movs	r1, #0
 8041918:	fb01 f102 	mul.w	r1, r1, r2
 804191c:	1844      	adds	r4, r0, r1
 804191e:	493a      	ldr	r1, [pc, #232]	; (8041a08 <HAL_RCC_GetSysClockFreq+0x168>)
 8041920:	fba2 0101 	umull	r0, r1, r2, r1
 8041924:	1863      	adds	r3, r4, r1
 8041926:	4619      	mov	r1, r3
 8041928:	687b      	ldr	r3, [r7, #4]
 804192a:	461a      	mov	r2, r3
 804192c:	f04f 0300 	mov.w	r3, #0
 8041930:	f7fe fcd6 	bl	80402e0 <__aeabi_uldivmod>
 8041934:	4602      	mov	r2, r0
 8041936:	460b      	mov	r3, r1
 8041938:	4613      	mov	r3, r2
 804193a:	60fb      	str	r3, [r7, #12]
 804193c:	e04a      	b.n	80419d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804193e:	4b30      	ldr	r3, [pc, #192]	; (8041a00 <HAL_RCC_GetSysClockFreq+0x160>)
 8041940:	685b      	ldr	r3, [r3, #4]
 8041942:	099b      	lsrs	r3, r3, #6
 8041944:	461a      	mov	r2, r3
 8041946:	f04f 0300 	mov.w	r3, #0
 804194a:	f240 10ff 	movw	r0, #511	; 0x1ff
 804194e:	f04f 0100 	mov.w	r1, #0
 8041952:	ea02 0400 	and.w	r4, r2, r0
 8041956:	ea03 0501 	and.w	r5, r3, r1
 804195a:	4620      	mov	r0, r4
 804195c:	4629      	mov	r1, r5
 804195e:	f04f 0200 	mov.w	r2, #0
 8041962:	f04f 0300 	mov.w	r3, #0
 8041966:	014b      	lsls	r3, r1, #5
 8041968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 804196c:	0142      	lsls	r2, r0, #5
 804196e:	4610      	mov	r0, r2
 8041970:	4619      	mov	r1, r3
 8041972:	1b00      	subs	r0, r0, r4
 8041974:	eb61 0105 	sbc.w	r1, r1, r5
 8041978:	f04f 0200 	mov.w	r2, #0
 804197c:	f04f 0300 	mov.w	r3, #0
 8041980:	018b      	lsls	r3, r1, #6
 8041982:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8041986:	0182      	lsls	r2, r0, #6
 8041988:	1a12      	subs	r2, r2, r0
 804198a:	eb63 0301 	sbc.w	r3, r3, r1
 804198e:	f04f 0000 	mov.w	r0, #0
 8041992:	f04f 0100 	mov.w	r1, #0
 8041996:	00d9      	lsls	r1, r3, #3
 8041998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 804199c:	00d0      	lsls	r0, r2, #3
 804199e:	4602      	mov	r2, r0
 80419a0:	460b      	mov	r3, r1
 80419a2:	1912      	adds	r2, r2, r4
 80419a4:	eb45 0303 	adc.w	r3, r5, r3
 80419a8:	f04f 0000 	mov.w	r0, #0
 80419ac:	f04f 0100 	mov.w	r1, #0
 80419b0:	0299      	lsls	r1, r3, #10
 80419b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80419b6:	0290      	lsls	r0, r2, #10
 80419b8:	4602      	mov	r2, r0
 80419ba:	460b      	mov	r3, r1
 80419bc:	4610      	mov	r0, r2
 80419be:	4619      	mov	r1, r3
 80419c0:	687b      	ldr	r3, [r7, #4]
 80419c2:	461a      	mov	r2, r3
 80419c4:	f04f 0300 	mov.w	r3, #0
 80419c8:	f7fe fc8a 	bl	80402e0 <__aeabi_uldivmod>
 80419cc:	4602      	mov	r2, r0
 80419ce:	460b      	mov	r3, r1
 80419d0:	4613      	mov	r3, r2
 80419d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80419d4:	4b0a      	ldr	r3, [pc, #40]	; (8041a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80419d6:	685b      	ldr	r3, [r3, #4]
 80419d8:	0c1b      	lsrs	r3, r3, #16
 80419da:	f003 0303 	and.w	r3, r3, #3
 80419de:	3301      	adds	r3, #1
 80419e0:	005b      	lsls	r3, r3, #1
 80419e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80419e4:	68fa      	ldr	r2, [r7, #12]
 80419e6:	683b      	ldr	r3, [r7, #0]
 80419e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80419ec:	60bb      	str	r3, [r7, #8]
      break;
 80419ee:	e002      	b.n	80419f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80419f0:	4b04      	ldr	r3, [pc, #16]	; (8041a04 <HAL_RCC_GetSysClockFreq+0x164>)
 80419f2:	60bb      	str	r3, [r7, #8]
      break;
 80419f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80419f6:	68bb      	ldr	r3, [r7, #8]
}
 80419f8:	4618      	mov	r0, r3
 80419fa:	3710      	adds	r7, #16
 80419fc:	46bd      	mov	sp, r7
 80419fe:	bdb0      	pop	{r4, r5, r7, pc}
 8041a00:	40023800 	.word	0x40023800
 8041a04:	00f42400 	.word	0x00f42400
 8041a08:	017d7840 	.word	0x017d7840

08041a0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041a0c:	b480      	push	{r7}
 8041a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041a10:	4b03      	ldr	r3, [pc, #12]	; (8041a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8041a12:	681b      	ldr	r3, [r3, #0]
}
 8041a14:	4618      	mov	r0, r3
 8041a16:	46bd      	mov	sp, r7
 8041a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a1c:	4770      	bx	lr
 8041a1e:	bf00      	nop
 8041a20:	20000000 	.word	0x20000000

08041a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041a24:	b580      	push	{r7, lr}
 8041a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041a28:	f7ff fff0 	bl	8041a0c <HAL_RCC_GetHCLKFreq>
 8041a2c:	4602      	mov	r2, r0
 8041a2e:	4b05      	ldr	r3, [pc, #20]	; (8041a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041a30:	689b      	ldr	r3, [r3, #8]
 8041a32:	0a9b      	lsrs	r3, r3, #10
 8041a34:	f003 0307 	and.w	r3, r3, #7
 8041a38:	4903      	ldr	r1, [pc, #12]	; (8041a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041a3a:	5ccb      	ldrb	r3, [r1, r3]
 8041a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041a40:	4618      	mov	r0, r3
 8041a42:	bd80      	pop	{r7, pc}
 8041a44:	40023800 	.word	0x40023800
 8041a48:	08043b74 	.word	0x08043b74

08041a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041a4c:	b580      	push	{r7, lr}
 8041a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041a50:	f7ff ffdc 	bl	8041a0c <HAL_RCC_GetHCLKFreq>
 8041a54:	4602      	mov	r2, r0
 8041a56:	4b05      	ldr	r3, [pc, #20]	; (8041a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8041a58:	689b      	ldr	r3, [r3, #8]
 8041a5a:	0b5b      	lsrs	r3, r3, #13
 8041a5c:	f003 0307 	and.w	r3, r3, #7
 8041a60:	4903      	ldr	r1, [pc, #12]	; (8041a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8041a62:	5ccb      	ldrb	r3, [r1, r3]
 8041a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041a68:	4618      	mov	r0, r3
 8041a6a:	bd80      	pop	{r7, pc}
 8041a6c:	40023800 	.word	0x40023800
 8041a70:	08043b74 	.word	0x08043b74

08041a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041a74:	b580      	push	{r7, lr}
 8041a76:	b088      	sub	sp, #32
 8041a78:	af00      	add	r7, sp, #0
 8041a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8041a7c:	2300      	movs	r3, #0
 8041a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8041a80:	2300      	movs	r3, #0
 8041a82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8041a84:	2300      	movs	r3, #0
 8041a86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8041a88:	2300      	movs	r3, #0
 8041a8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8041a8c:	2300      	movs	r3, #0
 8041a8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8041a90:	687b      	ldr	r3, [r7, #4]
 8041a92:	681b      	ldr	r3, [r3, #0]
 8041a94:	f003 0301 	and.w	r3, r3, #1
 8041a98:	2b00      	cmp	r3, #0
 8041a9a:	d012      	beq.n	8041ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8041a9c:	4b69      	ldr	r3, [pc, #420]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041a9e:	689b      	ldr	r3, [r3, #8]
 8041aa0:	4a68      	ldr	r2, [pc, #416]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041aa2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8041aa6:	6093      	str	r3, [r2, #8]
 8041aa8:	4b66      	ldr	r3, [pc, #408]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041aaa:	689a      	ldr	r2, [r3, #8]
 8041aac:	687b      	ldr	r3, [r7, #4]
 8041aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041ab0:	4964      	ldr	r1, [pc, #400]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ab2:	4313      	orrs	r3, r2
 8041ab4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8041ab6:	687b      	ldr	r3, [r7, #4]
 8041ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041aba:	2b00      	cmp	r3, #0
 8041abc:	d101      	bne.n	8041ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8041abe:	2301      	movs	r3, #1
 8041ac0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8041ac2:	687b      	ldr	r3, [r7, #4]
 8041ac4:	681b      	ldr	r3, [r3, #0]
 8041ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041aca:	2b00      	cmp	r3, #0
 8041acc:	d017      	beq.n	8041afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041ace:	4b5d      	ldr	r3, [pc, #372]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041ad8:	687b      	ldr	r3, [r7, #4]
 8041ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041adc:	4959      	ldr	r1, [pc, #356]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ade:	4313      	orrs	r3, r2
 8041ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8041ae4:	687b      	ldr	r3, [r7, #4]
 8041ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8041aec:	d101      	bne.n	8041af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8041aee:	2301      	movs	r3, #1
 8041af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8041af2:	687b      	ldr	r3, [r7, #4]
 8041af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041af6:	2b00      	cmp	r3, #0
 8041af8:	d101      	bne.n	8041afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8041afa:	2301      	movs	r3, #1
 8041afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8041afe:	687b      	ldr	r3, [r7, #4]
 8041b00:	681b      	ldr	r3, [r3, #0]
 8041b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041b06:	2b00      	cmp	r3, #0
 8041b08:	d017      	beq.n	8041b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041b0a:	4b4e      	ldr	r3, [pc, #312]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041b14:	687b      	ldr	r3, [r7, #4]
 8041b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b18:	494a      	ldr	r1, [pc, #296]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b1a:	4313      	orrs	r3, r2
 8041b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8041b20:	687b      	ldr	r3, [r7, #4]
 8041b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041b28:	d101      	bne.n	8041b2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8041b2a:	2301      	movs	r3, #1
 8041b2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8041b2e:	687b      	ldr	r3, [r7, #4]
 8041b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b32:	2b00      	cmp	r3, #0
 8041b34:	d101      	bne.n	8041b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8041b36:	2301      	movs	r3, #1
 8041b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8041b3a:	687b      	ldr	r3, [r7, #4]
 8041b3c:	681b      	ldr	r3, [r3, #0]
 8041b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041b42:	2b00      	cmp	r3, #0
 8041b44:	d001      	beq.n	8041b4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8041b46:	2301      	movs	r3, #1
 8041b48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8041b4a:	687b      	ldr	r3, [r7, #4]
 8041b4c:	681b      	ldr	r3, [r3, #0]
 8041b4e:	f003 0320 	and.w	r3, r3, #32
 8041b52:	2b00      	cmp	r3, #0
 8041b54:	f000 808b 	beq.w	8041c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8041b58:	4b3a      	ldr	r3, [pc, #232]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b5c:	4a39      	ldr	r2, [pc, #228]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041b62:	6413      	str	r3, [r2, #64]	; 0x40
 8041b64:	4b37      	ldr	r3, [pc, #220]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041b6c:	60bb      	str	r3, [r7, #8]
 8041b6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041b70:	4b35      	ldr	r3, [pc, #212]	; (8041c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041b72:	681b      	ldr	r3, [r3, #0]
 8041b74:	4a34      	ldr	r2, [pc, #208]	; (8041c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041b7c:	f7ff f81a 	bl	8040bb4 <HAL_GetTick>
 8041b80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041b82:	e008      	b.n	8041b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041b84:	f7ff f816 	bl	8040bb4 <HAL_GetTick>
 8041b88:	4602      	mov	r2, r0
 8041b8a:	697b      	ldr	r3, [r7, #20]
 8041b8c:	1ad3      	subs	r3, r2, r3
 8041b8e:	2b64      	cmp	r3, #100	; 0x64
 8041b90:	d901      	bls.n	8041b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8041b92:	2303      	movs	r3, #3
 8041b94:	e38f      	b.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041b96:	4b2c      	ldr	r3, [pc, #176]	; (8041c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041b98:	681b      	ldr	r3, [r3, #0]
 8041b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041b9e:	2b00      	cmp	r3, #0
 8041ba0:	d0f0      	beq.n	8041b84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8041ba2:	4b28      	ldr	r3, [pc, #160]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041baa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8041bac:	693b      	ldr	r3, [r7, #16]
 8041bae:	2b00      	cmp	r3, #0
 8041bb0:	d035      	beq.n	8041c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8041bb2:	687b      	ldr	r3, [r7, #4]
 8041bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041bba:	693a      	ldr	r2, [r7, #16]
 8041bbc:	429a      	cmp	r2, r3
 8041bbe:	d02e      	beq.n	8041c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8041bc0:	4b20      	ldr	r3, [pc, #128]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041bc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8041bca:	4b1e      	ldr	r3, [pc, #120]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bce:	4a1d      	ldr	r2, [pc, #116]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041bd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8041bd6:	4b1b      	ldr	r3, [pc, #108]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bda:	4a1a      	ldr	r2, [pc, #104]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041be0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8041be2:	4a18      	ldr	r2, [pc, #96]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041be4:	693b      	ldr	r3, [r7, #16]
 8041be6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8041be8:	4b16      	ldr	r3, [pc, #88]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bec:	f003 0301 	and.w	r3, r3, #1
 8041bf0:	2b01      	cmp	r3, #1
 8041bf2:	d114      	bne.n	8041c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041bf4:	f7fe ffde 	bl	8040bb4 <HAL_GetTick>
 8041bf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041bfa:	e00a      	b.n	8041c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041bfc:	f7fe ffda 	bl	8040bb4 <HAL_GetTick>
 8041c00:	4602      	mov	r2, r0
 8041c02:	697b      	ldr	r3, [r7, #20]
 8041c04:	1ad3      	subs	r3, r2, r3
 8041c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c0a:	4293      	cmp	r3, r2
 8041c0c:	d901      	bls.n	8041c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8041c0e:	2303      	movs	r3, #3
 8041c10:	e351      	b.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c12:	4b0c      	ldr	r3, [pc, #48]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c16:	f003 0302 	and.w	r3, r3, #2
 8041c1a:	2b00      	cmp	r3, #0
 8041c1c:	d0ee      	beq.n	8041bfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041c1e:	687b      	ldr	r3, [r7, #4]
 8041c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041c2a:	d111      	bne.n	8041c50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8041c2c:	4b05      	ldr	r3, [pc, #20]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c2e:	689b      	ldr	r3, [r3, #8]
 8041c30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8041c34:	687b      	ldr	r3, [r7, #4]
 8041c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8041c38:	4b04      	ldr	r3, [pc, #16]	; (8041c4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8041c3a:	400b      	ands	r3, r1
 8041c3c:	4901      	ldr	r1, [pc, #4]	; (8041c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c3e:	4313      	orrs	r3, r2
 8041c40:	608b      	str	r3, [r1, #8]
 8041c42:	e00b      	b.n	8041c5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8041c44:	40023800 	.word	0x40023800
 8041c48:	40007000 	.word	0x40007000
 8041c4c:	0ffffcff 	.word	0x0ffffcff
 8041c50:	4bb3      	ldr	r3, [pc, #716]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c52:	689b      	ldr	r3, [r3, #8]
 8041c54:	4ab2      	ldr	r2, [pc, #712]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8041c5a:	6093      	str	r3, [r2, #8]
 8041c5c:	4bb0      	ldr	r3, [pc, #704]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8041c60:	687b      	ldr	r3, [r7, #4]
 8041c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8041c68:	49ad      	ldr	r1, [pc, #692]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c6a:	4313      	orrs	r3, r2
 8041c6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	681b      	ldr	r3, [r3, #0]
 8041c72:	f003 0310 	and.w	r3, r3, #16
 8041c76:	2b00      	cmp	r3, #0
 8041c78:	d010      	beq.n	8041c9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8041c7a:	4ba9      	ldr	r3, [pc, #676]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041c80:	4aa7      	ldr	r2, [pc, #668]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8041c8a:	4ba5      	ldr	r3, [pc, #660]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8041c90:	687b      	ldr	r3, [r7, #4]
 8041c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041c94:	49a2      	ldr	r1, [pc, #648]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041c96:	4313      	orrs	r3, r2
 8041c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041c9c:	687b      	ldr	r3, [r7, #4]
 8041c9e:	681b      	ldr	r3, [r3, #0]
 8041ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041ca4:	2b00      	cmp	r3, #0
 8041ca6:	d00a      	beq.n	8041cbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041ca8:	4b9d      	ldr	r3, [pc, #628]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041cae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041cb6:	499a      	ldr	r1, [pc, #616]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041cb8:	4313      	orrs	r3, r2
 8041cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041cbe:	687b      	ldr	r3, [r7, #4]
 8041cc0:	681b      	ldr	r3, [r3, #0]
 8041cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041cc6:	2b00      	cmp	r3, #0
 8041cc8:	d00a      	beq.n	8041ce0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041cca:	4b95      	ldr	r3, [pc, #596]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8041cd4:	687b      	ldr	r3, [r7, #4]
 8041cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041cd8:	4991      	ldr	r1, [pc, #580]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041cda:	4313      	orrs	r3, r2
 8041cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041ce0:	687b      	ldr	r3, [r7, #4]
 8041ce2:	681b      	ldr	r3, [r3, #0]
 8041ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041ce8:	2b00      	cmp	r3, #0
 8041cea:	d00a      	beq.n	8041d02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041cec:	4b8c      	ldr	r3, [pc, #560]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041cf6:	687b      	ldr	r3, [r7, #4]
 8041cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041cfa:	4989      	ldr	r1, [pc, #548]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041cfc:	4313      	orrs	r3, r2
 8041cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8041d02:	687b      	ldr	r3, [r7, #4]
 8041d04:	681b      	ldr	r3, [r3, #0]
 8041d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d0a:	2b00      	cmp	r3, #0
 8041d0c:	d00a      	beq.n	8041d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041d0e:	4b84      	ldr	r3, [pc, #528]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041d1c:	4980      	ldr	r1, [pc, #512]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d1e:	4313      	orrs	r3, r2
 8041d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041d24:	687b      	ldr	r3, [r7, #4]
 8041d26:	681b      	ldr	r3, [r3, #0]
 8041d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041d2c:	2b00      	cmp	r3, #0
 8041d2e:	d00a      	beq.n	8041d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041d30:	4b7b      	ldr	r3, [pc, #492]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d36:	f023 0203 	bic.w	r2, r3, #3
 8041d3a:	687b      	ldr	r3, [r7, #4]
 8041d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041d3e:	4978      	ldr	r1, [pc, #480]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d40:	4313      	orrs	r3, r2
 8041d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8041d46:	687b      	ldr	r3, [r7, #4]
 8041d48:	681b      	ldr	r3, [r3, #0]
 8041d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041d4e:	2b00      	cmp	r3, #0
 8041d50:	d00a      	beq.n	8041d68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041d52:	4b73      	ldr	r3, [pc, #460]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d58:	f023 020c 	bic.w	r2, r3, #12
 8041d5c:	687b      	ldr	r3, [r7, #4]
 8041d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041d60:	496f      	ldr	r1, [pc, #444]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d62:	4313      	orrs	r3, r2
 8041d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8041d68:	687b      	ldr	r3, [r7, #4]
 8041d6a:	681b      	ldr	r3, [r3, #0]
 8041d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041d70:	2b00      	cmp	r3, #0
 8041d72:	d00a      	beq.n	8041d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8041d74:	4b6a      	ldr	r3, [pc, #424]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8041d7e:	687b      	ldr	r3, [r7, #4]
 8041d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041d82:	4967      	ldr	r1, [pc, #412]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d84:	4313      	orrs	r3, r2
 8041d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041d8a:	687b      	ldr	r3, [r7, #4]
 8041d8c:	681b      	ldr	r3, [r3, #0]
 8041d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041d92:	2b00      	cmp	r3, #0
 8041d94:	d00a      	beq.n	8041dac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8041d96:	4b62      	ldr	r3, [pc, #392]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8041da0:	687b      	ldr	r3, [r7, #4]
 8041da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041da4:	495e      	ldr	r1, [pc, #376]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041da6:	4313      	orrs	r3, r2
 8041da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041dac:	687b      	ldr	r3, [r7, #4]
 8041dae:	681b      	ldr	r3, [r3, #0]
 8041db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041db4:	2b00      	cmp	r3, #0
 8041db6:	d00a      	beq.n	8041dce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8041db8:	4b59      	ldr	r3, [pc, #356]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041dc2:	687b      	ldr	r3, [r7, #4]
 8041dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041dc6:	4956      	ldr	r1, [pc, #344]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041dc8:	4313      	orrs	r3, r2
 8041dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8041dce:	687b      	ldr	r3, [r7, #4]
 8041dd0:	681b      	ldr	r3, [r3, #0]
 8041dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041dd6:	2b00      	cmp	r3, #0
 8041dd8:	d00a      	beq.n	8041df0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8041dda:	4b51      	ldr	r3, [pc, #324]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041de0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8041de4:	687b      	ldr	r3, [r7, #4]
 8041de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041de8:	494d      	ldr	r1, [pc, #308]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041dea:	4313      	orrs	r3, r2
 8041dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8041df0:	687b      	ldr	r3, [r7, #4]
 8041df2:	681b      	ldr	r3, [r3, #0]
 8041df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041df8:	2b00      	cmp	r3, #0
 8041dfa:	d00a      	beq.n	8041e12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8041dfc:	4b48      	ldr	r3, [pc, #288]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8041e06:	687b      	ldr	r3, [r7, #4]
 8041e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041e0a:	4945      	ldr	r1, [pc, #276]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e0c:	4313      	orrs	r3, r2
 8041e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8041e12:	687b      	ldr	r3, [r7, #4]
 8041e14:	681b      	ldr	r3, [r3, #0]
 8041e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041e1a:	2b00      	cmp	r3, #0
 8041e1c:	d00a      	beq.n	8041e34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8041e1e:	4b40      	ldr	r3, [pc, #256]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8041e28:	687b      	ldr	r3, [r7, #4]
 8041e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041e2c:	493c      	ldr	r1, [pc, #240]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e2e:	4313      	orrs	r3, r2
 8041e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8041e34:	687b      	ldr	r3, [r7, #4]
 8041e36:	681b      	ldr	r3, [r3, #0]
 8041e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041e3c:	2b00      	cmp	r3, #0
 8041e3e:	d00a      	beq.n	8041e56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8041e40:	4b37      	ldr	r3, [pc, #220]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8041e4a:	687b      	ldr	r3, [r7, #4]
 8041e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041e4e:	4934      	ldr	r1, [pc, #208]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e50:	4313      	orrs	r3, r2
 8041e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8041e56:	687b      	ldr	r3, [r7, #4]
 8041e58:	681b      	ldr	r3, [r3, #0]
 8041e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041e5e:	2b00      	cmp	r3, #0
 8041e60:	d011      	beq.n	8041e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8041e62:	4b2f      	ldr	r3, [pc, #188]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8041e6c:	687b      	ldr	r3, [r7, #4]
 8041e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041e70:	492b      	ldr	r1, [pc, #172]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041e72:	4313      	orrs	r3, r2
 8041e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8041e78:	687b      	ldr	r3, [r7, #4]
 8041e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041e80:	d101      	bne.n	8041e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8041e82:	2301      	movs	r3, #1
 8041e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8041e86:	687b      	ldr	r3, [r7, #4]
 8041e88:	681b      	ldr	r3, [r3, #0]
 8041e8a:	f003 0308 	and.w	r3, r3, #8
 8041e8e:	2b00      	cmp	r3, #0
 8041e90:	d001      	beq.n	8041e96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8041e92:	2301      	movs	r3, #1
 8041e94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8041e96:	687b      	ldr	r3, [r7, #4]
 8041e98:	681b      	ldr	r3, [r3, #0]
 8041e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041e9e:	2b00      	cmp	r3, #0
 8041ea0:	d00a      	beq.n	8041eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8041ea2:	4b1f      	ldr	r3, [pc, #124]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ea8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8041eac:	687b      	ldr	r3, [r7, #4]
 8041eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041eb0:	491b      	ldr	r1, [pc, #108]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041eb2:	4313      	orrs	r3, r2
 8041eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8041eb8:	687b      	ldr	r3, [r7, #4]
 8041eba:	681b      	ldr	r3, [r3, #0]
 8041ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8041ec0:	2b00      	cmp	r3, #0
 8041ec2:	d00b      	beq.n	8041edc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041ec4:	4b16      	ldr	r3, [pc, #88]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041eca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8041ece:	687b      	ldr	r3, [r7, #4]
 8041ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041ed4:	4912      	ldr	r1, [pc, #72]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041ed6:	4313      	orrs	r3, r2
 8041ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8041edc:	687b      	ldr	r3, [r7, #4]
 8041ede:	681b      	ldr	r3, [r3, #0]
 8041ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8041ee4:	2b00      	cmp	r3, #0
 8041ee6:	d00b      	beq.n	8041f00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8041ee8:	4b0d      	ldr	r3, [pc, #52]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041eee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8041ef2:	687b      	ldr	r3, [r7, #4]
 8041ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041ef8:	4909      	ldr	r1, [pc, #36]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041efa:	4313      	orrs	r3, r2
 8041efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041f00:	687b      	ldr	r3, [r7, #4]
 8041f02:	681b      	ldr	r3, [r3, #0]
 8041f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041f08:	2b00      	cmp	r3, #0
 8041f0a:	d00f      	beq.n	8041f2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041f0c:	4b04      	ldr	r3, [pc, #16]	; (8041f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8041f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8041f16:	687b      	ldr	r3, [r7, #4]
 8041f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041f1c:	e002      	b.n	8041f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8041f1e:	bf00      	nop
 8041f20:	40023800 	.word	0x40023800
 8041f24:	4986      	ldr	r1, [pc, #536]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f26:	4313      	orrs	r3, r2
 8041f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8041f2c:	687b      	ldr	r3, [r7, #4]
 8041f2e:	681b      	ldr	r3, [r3, #0]
 8041f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041f34:	2b00      	cmp	r3, #0
 8041f36:	d00b      	beq.n	8041f50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041f38:	4b81      	ldr	r3, [pc, #516]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8041f42:	687b      	ldr	r3, [r7, #4]
 8041f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f48:	497d      	ldr	r1, [pc, #500]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f4a:	4313      	orrs	r3, r2
 8041f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8041f50:	69fb      	ldr	r3, [r7, #28]
 8041f52:	2b01      	cmp	r3, #1
 8041f54:	d006      	beq.n	8041f64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8041f56:	687b      	ldr	r3, [r7, #4]
 8041f58:	681b      	ldr	r3, [r3, #0]
 8041f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041f5e:	2b00      	cmp	r3, #0
 8041f60:	f000 80d6 	beq.w	8042110 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8041f64:	4b76      	ldr	r3, [pc, #472]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f66:	681b      	ldr	r3, [r3, #0]
 8041f68:	4a75      	ldr	r2, [pc, #468]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041f70:	f7fe fe20 	bl	8040bb4 <HAL_GetTick>
 8041f74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041f76:	e008      	b.n	8041f8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8041f78:	f7fe fe1c 	bl	8040bb4 <HAL_GetTick>
 8041f7c:	4602      	mov	r2, r0
 8041f7e:	697b      	ldr	r3, [r7, #20]
 8041f80:	1ad3      	subs	r3, r2, r3
 8041f82:	2b64      	cmp	r3, #100	; 0x64
 8041f84:	d901      	bls.n	8041f8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8041f86:	2303      	movs	r3, #3
 8041f88:	e195      	b.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041f8a:	4b6d      	ldr	r3, [pc, #436]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f8c:	681b      	ldr	r3, [r3, #0]
 8041f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041f92:	2b00      	cmp	r3, #0
 8041f94:	d1f0      	bne.n	8041f78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8041f96:	687b      	ldr	r3, [r7, #4]
 8041f98:	681b      	ldr	r3, [r3, #0]
 8041f9a:	f003 0301 	and.w	r3, r3, #1
 8041f9e:	2b00      	cmp	r3, #0
 8041fa0:	d021      	beq.n	8041fe6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8041fa2:	687b      	ldr	r3, [r7, #4]
 8041fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041fa6:	2b00      	cmp	r3, #0
 8041fa8:	d11d      	bne.n	8041fe6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8041faa:	4b65      	ldr	r3, [pc, #404]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041fb0:	0c1b      	lsrs	r3, r3, #16
 8041fb2:	f003 0303 	and.w	r3, r3, #3
 8041fb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8041fb8:	4b61      	ldr	r3, [pc, #388]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041fbe:	0e1b      	lsrs	r3, r3, #24
 8041fc0:	f003 030f 	and.w	r3, r3, #15
 8041fc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8041fc6:	687b      	ldr	r3, [r7, #4]
 8041fc8:	685b      	ldr	r3, [r3, #4]
 8041fca:	019a      	lsls	r2, r3, #6
 8041fcc:	693b      	ldr	r3, [r7, #16]
 8041fce:	041b      	lsls	r3, r3, #16
 8041fd0:	431a      	orrs	r2, r3
 8041fd2:	68fb      	ldr	r3, [r7, #12]
 8041fd4:	061b      	lsls	r3, r3, #24
 8041fd6:	431a      	orrs	r2, r3
 8041fd8:	687b      	ldr	r3, [r7, #4]
 8041fda:	689b      	ldr	r3, [r3, #8]
 8041fdc:	071b      	lsls	r3, r3, #28
 8041fde:	4958      	ldr	r1, [pc, #352]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fe0:	4313      	orrs	r3, r2
 8041fe2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8041fe6:	687b      	ldr	r3, [r7, #4]
 8041fe8:	681b      	ldr	r3, [r3, #0]
 8041fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041fee:	2b00      	cmp	r3, #0
 8041ff0:	d004      	beq.n	8041ffc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8041ff2:	687b      	ldr	r3, [r7, #4]
 8041ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8041ffa:	d00a      	beq.n	8042012 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8041ffc:	687b      	ldr	r3, [r7, #4]
 8041ffe:	681b      	ldr	r3, [r3, #0]
 8042000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042004:	2b00      	cmp	r3, #0
 8042006:	d02e      	beq.n	8042066 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042008:	687b      	ldr	r3, [r7, #4]
 804200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804200c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042010:	d129      	bne.n	8042066 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8042012:	4b4b      	ldr	r3, [pc, #300]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042018:	0c1b      	lsrs	r3, r3, #16
 804201a:	f003 0303 	and.w	r3, r3, #3
 804201e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042020:	4b47      	ldr	r3, [pc, #284]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042026:	0f1b      	lsrs	r3, r3, #28
 8042028:	f003 0307 	and.w	r3, r3, #7
 804202c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 804202e:	687b      	ldr	r3, [r7, #4]
 8042030:	685b      	ldr	r3, [r3, #4]
 8042032:	019a      	lsls	r2, r3, #6
 8042034:	693b      	ldr	r3, [r7, #16]
 8042036:	041b      	lsls	r3, r3, #16
 8042038:	431a      	orrs	r2, r3
 804203a:	687b      	ldr	r3, [r7, #4]
 804203c:	68db      	ldr	r3, [r3, #12]
 804203e:	061b      	lsls	r3, r3, #24
 8042040:	431a      	orrs	r2, r3
 8042042:	68fb      	ldr	r3, [r7, #12]
 8042044:	071b      	lsls	r3, r3, #28
 8042046:	493e      	ldr	r1, [pc, #248]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042048:	4313      	orrs	r3, r2
 804204a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 804204e:	4b3c      	ldr	r3, [pc, #240]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042054:	f023 021f 	bic.w	r2, r3, #31
 8042058:	687b      	ldr	r3, [r7, #4]
 804205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804205c:	3b01      	subs	r3, #1
 804205e:	4938      	ldr	r1, [pc, #224]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042060:	4313      	orrs	r3, r2
 8042062:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042066:	687b      	ldr	r3, [r7, #4]
 8042068:	681b      	ldr	r3, [r3, #0]
 804206a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804206e:	2b00      	cmp	r3, #0
 8042070:	d01d      	beq.n	80420ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042072:	4b33      	ldr	r3, [pc, #204]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042078:	0e1b      	lsrs	r3, r3, #24
 804207a:	f003 030f 	and.w	r3, r3, #15
 804207e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042080:	4b2f      	ldr	r3, [pc, #188]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042086:	0f1b      	lsrs	r3, r3, #28
 8042088:	f003 0307 	and.w	r3, r3, #7
 804208c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 804208e:	687b      	ldr	r3, [r7, #4]
 8042090:	685b      	ldr	r3, [r3, #4]
 8042092:	019a      	lsls	r2, r3, #6
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	691b      	ldr	r3, [r3, #16]
 8042098:	041b      	lsls	r3, r3, #16
 804209a:	431a      	orrs	r2, r3
 804209c:	693b      	ldr	r3, [r7, #16]
 804209e:	061b      	lsls	r3, r3, #24
 80420a0:	431a      	orrs	r2, r3
 80420a2:	68fb      	ldr	r3, [r7, #12]
 80420a4:	071b      	lsls	r3, r3, #28
 80420a6:	4926      	ldr	r1, [pc, #152]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420a8:	4313      	orrs	r3, r2
 80420aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80420ae:	687b      	ldr	r3, [r7, #4]
 80420b0:	681b      	ldr	r3, [r3, #0]
 80420b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80420b6:	2b00      	cmp	r3, #0
 80420b8:	d011      	beq.n	80420de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80420ba:	687b      	ldr	r3, [r7, #4]
 80420bc:	685b      	ldr	r3, [r3, #4]
 80420be:	019a      	lsls	r2, r3, #6
 80420c0:	687b      	ldr	r3, [r7, #4]
 80420c2:	691b      	ldr	r3, [r3, #16]
 80420c4:	041b      	lsls	r3, r3, #16
 80420c6:	431a      	orrs	r2, r3
 80420c8:	687b      	ldr	r3, [r7, #4]
 80420ca:	68db      	ldr	r3, [r3, #12]
 80420cc:	061b      	lsls	r3, r3, #24
 80420ce:	431a      	orrs	r2, r3
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	689b      	ldr	r3, [r3, #8]
 80420d4:	071b      	lsls	r3, r3, #28
 80420d6:	491a      	ldr	r1, [pc, #104]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420d8:	4313      	orrs	r3, r2
 80420da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80420de:	4b18      	ldr	r3, [pc, #96]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420e0:	681b      	ldr	r3, [r3, #0]
 80420e2:	4a17      	ldr	r2, [pc, #92]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80420e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80420ea:	f7fe fd63 	bl	8040bb4 <HAL_GetTick>
 80420ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80420f0:	e008      	b.n	8042104 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80420f2:	f7fe fd5f 	bl	8040bb4 <HAL_GetTick>
 80420f6:	4602      	mov	r2, r0
 80420f8:	697b      	ldr	r3, [r7, #20]
 80420fa:	1ad3      	subs	r3, r2, r3
 80420fc:	2b64      	cmp	r3, #100	; 0x64
 80420fe:	d901      	bls.n	8042104 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042100:	2303      	movs	r3, #3
 8042102:	e0d8      	b.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042104:	4b0e      	ldr	r3, [pc, #56]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042106:	681b      	ldr	r3, [r3, #0]
 8042108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804210c:	2b00      	cmp	r3, #0
 804210e:	d0f0      	beq.n	80420f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8042110:	69bb      	ldr	r3, [r7, #24]
 8042112:	2b01      	cmp	r3, #1
 8042114:	f040 80ce 	bne.w	80422b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042118:	4b09      	ldr	r3, [pc, #36]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804211a:	681b      	ldr	r3, [r3, #0]
 804211c:	4a08      	ldr	r2, [pc, #32]	; (8042140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042124:	f7fe fd46 	bl	8040bb4 <HAL_GetTick>
 8042128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 804212a:	e00b      	b.n	8042144 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 804212c:	f7fe fd42 	bl	8040bb4 <HAL_GetTick>
 8042130:	4602      	mov	r2, r0
 8042132:	697b      	ldr	r3, [r7, #20]
 8042134:	1ad3      	subs	r3, r2, r3
 8042136:	2b64      	cmp	r3, #100	; 0x64
 8042138:	d904      	bls.n	8042144 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804213a:	2303      	movs	r3, #3
 804213c:	e0bb      	b.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 804213e:	bf00      	nop
 8042140:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042144:	4b5e      	ldr	r3, [pc, #376]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042146:	681b      	ldr	r3, [r3, #0]
 8042148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804214c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042150:	d0ec      	beq.n	804212c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8042152:	687b      	ldr	r3, [r7, #4]
 8042154:	681b      	ldr	r3, [r3, #0]
 8042156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804215a:	2b00      	cmp	r3, #0
 804215c:	d003      	beq.n	8042166 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 804215e:	687b      	ldr	r3, [r7, #4]
 8042160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042162:	2b00      	cmp	r3, #0
 8042164:	d009      	beq.n	804217a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	681b      	ldr	r3, [r3, #0]
 804216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804216e:	2b00      	cmp	r3, #0
 8042170:	d02e      	beq.n	80421d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042172:	687b      	ldr	r3, [r7, #4]
 8042174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042176:	2b00      	cmp	r3, #0
 8042178:	d12a      	bne.n	80421d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 804217a:	4b51      	ldr	r3, [pc, #324]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042180:	0c1b      	lsrs	r3, r3, #16
 8042182:	f003 0303 	and.w	r3, r3, #3
 8042186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8042188:	4b4d      	ldr	r3, [pc, #308]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804218e:	0f1b      	lsrs	r3, r3, #28
 8042190:	f003 0307 	and.w	r3, r3, #7
 8042194:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8042196:	687b      	ldr	r3, [r7, #4]
 8042198:	695b      	ldr	r3, [r3, #20]
 804219a:	019a      	lsls	r2, r3, #6
 804219c:	693b      	ldr	r3, [r7, #16]
 804219e:	041b      	lsls	r3, r3, #16
 80421a0:	431a      	orrs	r2, r3
 80421a2:	687b      	ldr	r3, [r7, #4]
 80421a4:	699b      	ldr	r3, [r3, #24]
 80421a6:	061b      	lsls	r3, r3, #24
 80421a8:	431a      	orrs	r2, r3
 80421aa:	68fb      	ldr	r3, [r7, #12]
 80421ac:	071b      	lsls	r3, r3, #28
 80421ae:	4944      	ldr	r1, [pc, #272]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421b0:	4313      	orrs	r3, r2
 80421b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80421b6:	4b42      	ldr	r3, [pc, #264]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80421bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80421c0:	687b      	ldr	r3, [r7, #4]
 80421c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80421c4:	3b01      	subs	r3, #1
 80421c6:	021b      	lsls	r3, r3, #8
 80421c8:	493d      	ldr	r1, [pc, #244]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421ca:	4313      	orrs	r3, r2
 80421cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80421d0:	687b      	ldr	r3, [r7, #4]
 80421d2:	681b      	ldr	r3, [r3, #0]
 80421d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80421d8:	2b00      	cmp	r3, #0
 80421da:	d022      	beq.n	8042222 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80421dc:	687b      	ldr	r3, [r7, #4]
 80421de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80421e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80421e4:	d11d      	bne.n	8042222 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80421e6:	4b36      	ldr	r3, [pc, #216]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421ec:	0e1b      	lsrs	r3, r3, #24
 80421ee:	f003 030f 	and.w	r3, r3, #15
 80421f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80421f4:	4b32      	ldr	r3, [pc, #200]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421fa:	0f1b      	lsrs	r3, r3, #28
 80421fc:	f003 0307 	and.w	r3, r3, #7
 8042200:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8042202:	687b      	ldr	r3, [r7, #4]
 8042204:	695b      	ldr	r3, [r3, #20]
 8042206:	019a      	lsls	r2, r3, #6
 8042208:	687b      	ldr	r3, [r7, #4]
 804220a:	6a1b      	ldr	r3, [r3, #32]
 804220c:	041b      	lsls	r3, r3, #16
 804220e:	431a      	orrs	r2, r3
 8042210:	693b      	ldr	r3, [r7, #16]
 8042212:	061b      	lsls	r3, r3, #24
 8042214:	431a      	orrs	r2, r3
 8042216:	68fb      	ldr	r3, [r7, #12]
 8042218:	071b      	lsls	r3, r3, #28
 804221a:	4929      	ldr	r1, [pc, #164]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804221c:	4313      	orrs	r3, r2
 804221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8042222:	687b      	ldr	r3, [r7, #4]
 8042224:	681b      	ldr	r3, [r3, #0]
 8042226:	f003 0308 	and.w	r3, r3, #8
 804222a:	2b00      	cmp	r3, #0
 804222c:	d028      	beq.n	8042280 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804222e:	4b24      	ldr	r3, [pc, #144]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042234:	0e1b      	lsrs	r3, r3, #24
 8042236:	f003 030f 	and.w	r3, r3, #15
 804223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 804223c:	4b20      	ldr	r3, [pc, #128]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042242:	0c1b      	lsrs	r3, r3, #16
 8042244:	f003 0303 	and.w	r3, r3, #3
 8042248:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 804224a:	687b      	ldr	r3, [r7, #4]
 804224c:	695b      	ldr	r3, [r3, #20]
 804224e:	019a      	lsls	r2, r3, #6
 8042250:	68fb      	ldr	r3, [r7, #12]
 8042252:	041b      	lsls	r3, r3, #16
 8042254:	431a      	orrs	r2, r3
 8042256:	693b      	ldr	r3, [r7, #16]
 8042258:	061b      	lsls	r3, r3, #24
 804225a:	431a      	orrs	r2, r3
 804225c:	687b      	ldr	r3, [r7, #4]
 804225e:	69db      	ldr	r3, [r3, #28]
 8042260:	071b      	lsls	r3, r3, #28
 8042262:	4917      	ldr	r1, [pc, #92]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042264:	4313      	orrs	r3, r2
 8042266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 804226a:	4b15      	ldr	r3, [pc, #84]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804226c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042274:	687b      	ldr	r3, [r7, #4]
 8042276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042278:	4911      	ldr	r1, [pc, #68]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804227a:	4313      	orrs	r3, r2
 804227c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8042280:	4b0f      	ldr	r3, [pc, #60]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042282:	681b      	ldr	r3, [r3, #0]
 8042284:	4a0e      	ldr	r2, [pc, #56]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804228a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804228c:	f7fe fc92 	bl	8040bb4 <HAL_GetTick>
 8042290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8042292:	e008      	b.n	80422a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042294:	f7fe fc8e 	bl	8040bb4 <HAL_GetTick>
 8042298:	4602      	mov	r2, r0
 804229a:	697b      	ldr	r3, [r7, #20]
 804229c:	1ad3      	subs	r3, r2, r3
 804229e:	2b64      	cmp	r3, #100	; 0x64
 80422a0:	d901      	bls.n	80422a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80422a2:	2303      	movs	r3, #3
 80422a4:	e007      	b.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80422a6:	4b06      	ldr	r3, [pc, #24]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422a8:	681b      	ldr	r3, [r3, #0]
 80422aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80422ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80422b2:	d1ef      	bne.n	8042294 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80422b4:	2300      	movs	r3, #0
}
 80422b6:	4618      	mov	r0, r3
 80422b8:	3720      	adds	r7, #32
 80422ba:	46bd      	mov	sp, r7
 80422bc:	bd80      	pop	{r7, pc}
 80422be:	bf00      	nop
 80422c0:	40023800 	.word	0x40023800

080422c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80422c4:	b580      	push	{r7, lr}
 80422c6:	b082      	sub	sp, #8
 80422c8:	af00      	add	r7, sp, #0
 80422ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80422cc:	687b      	ldr	r3, [r7, #4]
 80422ce:	2b00      	cmp	r3, #0
 80422d0:	d101      	bne.n	80422d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80422d2:	2301      	movs	r3, #1
 80422d4:	e040      	b.n	8042358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80422d6:	687b      	ldr	r3, [r7, #4]
 80422d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80422da:	2b00      	cmp	r3, #0
 80422dc:	d106      	bne.n	80422ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80422de:	687b      	ldr	r3, [r7, #4]
 80422e0:	2200      	movs	r2, #0
 80422e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80422e6:	6878      	ldr	r0, [r7, #4]
 80422e8:	f7fe fac2 	bl	8040870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80422ec:	687b      	ldr	r3, [r7, #4]
 80422ee:	2224      	movs	r2, #36	; 0x24
 80422f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80422f2:	687b      	ldr	r3, [r7, #4]
 80422f4:	681b      	ldr	r3, [r3, #0]
 80422f6:	681a      	ldr	r2, [r3, #0]
 80422f8:	687b      	ldr	r3, [r7, #4]
 80422fa:	681b      	ldr	r3, [r3, #0]
 80422fc:	f022 0201 	bic.w	r2, r2, #1
 8042300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042302:	6878      	ldr	r0, [r7, #4]
 8042304:	f000 f8c0 	bl	8042488 <UART_SetConfig>
 8042308:	4603      	mov	r3, r0
 804230a:	2b01      	cmp	r3, #1
 804230c:	d101      	bne.n	8042312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 804230e:	2301      	movs	r3, #1
 8042310:	e022      	b.n	8042358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042312:	687b      	ldr	r3, [r7, #4]
 8042314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042316:	2b00      	cmp	r3, #0
 8042318:	d002      	beq.n	8042320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 804231a:	6878      	ldr	r0, [r7, #4]
 804231c:	f000 fb16 	bl	804294c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042320:	687b      	ldr	r3, [r7, #4]
 8042322:	681b      	ldr	r3, [r3, #0]
 8042324:	685a      	ldr	r2, [r3, #4]
 8042326:	687b      	ldr	r3, [r7, #4]
 8042328:	681b      	ldr	r3, [r3, #0]
 804232a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804232e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	681b      	ldr	r3, [r3, #0]
 8042334:	689a      	ldr	r2, [r3, #8]
 8042336:	687b      	ldr	r3, [r7, #4]
 8042338:	681b      	ldr	r3, [r3, #0]
 804233a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804233e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042340:	687b      	ldr	r3, [r7, #4]
 8042342:	681b      	ldr	r3, [r3, #0]
 8042344:	681a      	ldr	r2, [r3, #0]
 8042346:	687b      	ldr	r3, [r7, #4]
 8042348:	681b      	ldr	r3, [r3, #0]
 804234a:	f042 0201 	orr.w	r2, r2, #1
 804234e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042350:	6878      	ldr	r0, [r7, #4]
 8042352:	f000 fb9d 	bl	8042a90 <UART_CheckIdleState>
 8042356:	4603      	mov	r3, r0
}
 8042358:	4618      	mov	r0, r3
 804235a:	3708      	adds	r7, #8
 804235c:	46bd      	mov	sp, r7
 804235e:	bd80      	pop	{r7, pc}

08042360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8042360:	b580      	push	{r7, lr}
 8042362:	b08a      	sub	sp, #40	; 0x28
 8042364:	af02      	add	r7, sp, #8
 8042366:	60f8      	str	r0, [r7, #12]
 8042368:	60b9      	str	r1, [r7, #8]
 804236a:	603b      	str	r3, [r7, #0]
 804236c:	4613      	mov	r3, r2
 804236e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8042370:	68fb      	ldr	r3, [r7, #12]
 8042372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042374:	2b20      	cmp	r3, #32
 8042376:	f040 8081 	bne.w	804247c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 804237a:	68bb      	ldr	r3, [r7, #8]
 804237c:	2b00      	cmp	r3, #0
 804237e:	d002      	beq.n	8042386 <HAL_UART_Transmit+0x26>
 8042380:	88fb      	ldrh	r3, [r7, #6]
 8042382:	2b00      	cmp	r3, #0
 8042384:	d101      	bne.n	804238a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8042386:	2301      	movs	r3, #1
 8042388:	e079      	b.n	804247e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 804238a:	68fb      	ldr	r3, [r7, #12]
 804238c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8042390:	2b01      	cmp	r3, #1
 8042392:	d101      	bne.n	8042398 <HAL_UART_Transmit+0x38>
 8042394:	2302      	movs	r3, #2
 8042396:	e072      	b.n	804247e <HAL_UART_Transmit+0x11e>
 8042398:	68fb      	ldr	r3, [r7, #12]
 804239a:	2201      	movs	r2, #1
 804239c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80423a0:	68fb      	ldr	r3, [r7, #12]
 80423a2:	2200      	movs	r2, #0
 80423a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80423a8:	68fb      	ldr	r3, [r7, #12]
 80423aa:	2221      	movs	r2, #33	; 0x21
 80423ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80423ae:	f7fe fc01 	bl	8040bb4 <HAL_GetTick>
 80423b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80423b4:	68fb      	ldr	r3, [r7, #12]
 80423b6:	88fa      	ldrh	r2, [r7, #6]
 80423b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80423bc:	68fb      	ldr	r3, [r7, #12]
 80423be:	88fa      	ldrh	r2, [r7, #6]
 80423c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80423c4:	68fb      	ldr	r3, [r7, #12]
 80423c6:	689b      	ldr	r3, [r3, #8]
 80423c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80423cc:	d108      	bne.n	80423e0 <HAL_UART_Transmit+0x80>
 80423ce:	68fb      	ldr	r3, [r7, #12]
 80423d0:	691b      	ldr	r3, [r3, #16]
 80423d2:	2b00      	cmp	r3, #0
 80423d4:	d104      	bne.n	80423e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80423d6:	2300      	movs	r3, #0
 80423d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80423da:	68bb      	ldr	r3, [r7, #8]
 80423dc:	61bb      	str	r3, [r7, #24]
 80423de:	e003      	b.n	80423e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80423e0:	68bb      	ldr	r3, [r7, #8]
 80423e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80423e4:	2300      	movs	r3, #0
 80423e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80423e8:	68fb      	ldr	r3, [r7, #12]
 80423ea:	2200      	movs	r2, #0
 80423ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80423f0:	e02c      	b.n	804244c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80423f2:	683b      	ldr	r3, [r7, #0]
 80423f4:	9300      	str	r3, [sp, #0]
 80423f6:	697b      	ldr	r3, [r7, #20]
 80423f8:	2200      	movs	r2, #0
 80423fa:	2180      	movs	r1, #128	; 0x80
 80423fc:	68f8      	ldr	r0, [r7, #12]
 80423fe:	f000 fb90 	bl	8042b22 <UART_WaitOnFlagUntilTimeout>
 8042402:	4603      	mov	r3, r0
 8042404:	2b00      	cmp	r3, #0
 8042406:	d001      	beq.n	804240c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8042408:	2303      	movs	r3, #3
 804240a:	e038      	b.n	804247e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 804240c:	69fb      	ldr	r3, [r7, #28]
 804240e:	2b00      	cmp	r3, #0
 8042410:	d10b      	bne.n	804242a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8042412:	69bb      	ldr	r3, [r7, #24]
 8042414:	881b      	ldrh	r3, [r3, #0]
 8042416:	461a      	mov	r2, r3
 8042418:	68fb      	ldr	r3, [r7, #12]
 804241a:	681b      	ldr	r3, [r3, #0]
 804241c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8042422:	69bb      	ldr	r3, [r7, #24]
 8042424:	3302      	adds	r3, #2
 8042426:	61bb      	str	r3, [r7, #24]
 8042428:	e007      	b.n	804243a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 804242a:	69fb      	ldr	r3, [r7, #28]
 804242c:	781a      	ldrb	r2, [r3, #0]
 804242e:	68fb      	ldr	r3, [r7, #12]
 8042430:	681b      	ldr	r3, [r3, #0]
 8042432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8042434:	69fb      	ldr	r3, [r7, #28]
 8042436:	3301      	adds	r3, #1
 8042438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804243a:	68fb      	ldr	r3, [r7, #12]
 804243c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8042440:	b29b      	uxth	r3, r3
 8042442:	3b01      	subs	r3, #1
 8042444:	b29a      	uxth	r2, r3
 8042446:	68fb      	ldr	r3, [r7, #12]
 8042448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 804244c:	68fb      	ldr	r3, [r7, #12]
 804244e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8042452:	b29b      	uxth	r3, r3
 8042454:	2b00      	cmp	r3, #0
 8042456:	d1cc      	bne.n	80423f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8042458:	683b      	ldr	r3, [r7, #0]
 804245a:	9300      	str	r3, [sp, #0]
 804245c:	697b      	ldr	r3, [r7, #20]
 804245e:	2200      	movs	r2, #0
 8042460:	2140      	movs	r1, #64	; 0x40
 8042462:	68f8      	ldr	r0, [r7, #12]
 8042464:	f000 fb5d 	bl	8042b22 <UART_WaitOnFlagUntilTimeout>
 8042468:	4603      	mov	r3, r0
 804246a:	2b00      	cmp	r3, #0
 804246c:	d001      	beq.n	8042472 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 804246e:	2303      	movs	r3, #3
 8042470:	e005      	b.n	804247e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8042472:	68fb      	ldr	r3, [r7, #12]
 8042474:	2220      	movs	r2, #32
 8042476:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8042478:	2300      	movs	r3, #0
 804247a:	e000      	b.n	804247e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 804247c:	2302      	movs	r3, #2
  }
}
 804247e:	4618      	mov	r0, r3
 8042480:	3720      	adds	r7, #32
 8042482:	46bd      	mov	sp, r7
 8042484:	bd80      	pop	{r7, pc}
	...

08042488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8042488:	b580      	push	{r7, lr}
 804248a:	b088      	sub	sp, #32
 804248c:	af00      	add	r7, sp, #0
 804248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8042490:	2300      	movs	r3, #0
 8042492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8042494:	687b      	ldr	r3, [r7, #4]
 8042496:	689a      	ldr	r2, [r3, #8]
 8042498:	687b      	ldr	r3, [r7, #4]
 804249a:	691b      	ldr	r3, [r3, #16]
 804249c:	431a      	orrs	r2, r3
 804249e:	687b      	ldr	r3, [r7, #4]
 80424a0:	695b      	ldr	r3, [r3, #20]
 80424a2:	431a      	orrs	r2, r3
 80424a4:	687b      	ldr	r3, [r7, #4]
 80424a6:	69db      	ldr	r3, [r3, #28]
 80424a8:	4313      	orrs	r3, r2
 80424aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80424ac:	687b      	ldr	r3, [r7, #4]
 80424ae:	681b      	ldr	r3, [r3, #0]
 80424b0:	681a      	ldr	r2, [r3, #0]
 80424b2:	4ba7      	ldr	r3, [pc, #668]	; (8042750 <UART_SetConfig+0x2c8>)
 80424b4:	4013      	ands	r3, r2
 80424b6:	687a      	ldr	r2, [r7, #4]
 80424b8:	6812      	ldr	r2, [r2, #0]
 80424ba:	6979      	ldr	r1, [r7, #20]
 80424bc:	430b      	orrs	r3, r1
 80424be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80424c0:	687b      	ldr	r3, [r7, #4]
 80424c2:	681b      	ldr	r3, [r3, #0]
 80424c4:	685b      	ldr	r3, [r3, #4]
 80424c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80424ca:	687b      	ldr	r3, [r7, #4]
 80424cc:	68da      	ldr	r2, [r3, #12]
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	681b      	ldr	r3, [r3, #0]
 80424d2:	430a      	orrs	r2, r1
 80424d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80424d6:	687b      	ldr	r3, [r7, #4]
 80424d8:	699b      	ldr	r3, [r3, #24]
 80424da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80424dc:	687b      	ldr	r3, [r7, #4]
 80424de:	6a1b      	ldr	r3, [r3, #32]
 80424e0:	697a      	ldr	r2, [r7, #20]
 80424e2:	4313      	orrs	r3, r2
 80424e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80424e6:	687b      	ldr	r3, [r7, #4]
 80424e8:	681b      	ldr	r3, [r3, #0]
 80424ea:	689b      	ldr	r3, [r3, #8]
 80424ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	681b      	ldr	r3, [r3, #0]
 80424f4:	697a      	ldr	r2, [r7, #20]
 80424f6:	430a      	orrs	r2, r1
 80424f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80424fa:	687b      	ldr	r3, [r7, #4]
 80424fc:	681b      	ldr	r3, [r3, #0]
 80424fe:	4a95      	ldr	r2, [pc, #596]	; (8042754 <UART_SetConfig+0x2cc>)
 8042500:	4293      	cmp	r3, r2
 8042502:	d120      	bne.n	8042546 <UART_SetConfig+0xbe>
 8042504:	4b94      	ldr	r3, [pc, #592]	; (8042758 <UART_SetConfig+0x2d0>)
 8042506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804250a:	f003 0303 	and.w	r3, r3, #3
 804250e:	2b03      	cmp	r3, #3
 8042510:	d816      	bhi.n	8042540 <UART_SetConfig+0xb8>
 8042512:	a201      	add	r2, pc, #4	; (adr r2, 8042518 <UART_SetConfig+0x90>)
 8042514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042518:	08042529 	.word	0x08042529
 804251c:	08042535 	.word	0x08042535
 8042520:	0804252f 	.word	0x0804252f
 8042524:	0804253b 	.word	0x0804253b
 8042528:	2301      	movs	r3, #1
 804252a:	77fb      	strb	r3, [r7, #31]
 804252c:	e14f      	b.n	80427ce <UART_SetConfig+0x346>
 804252e:	2302      	movs	r3, #2
 8042530:	77fb      	strb	r3, [r7, #31]
 8042532:	e14c      	b.n	80427ce <UART_SetConfig+0x346>
 8042534:	2304      	movs	r3, #4
 8042536:	77fb      	strb	r3, [r7, #31]
 8042538:	e149      	b.n	80427ce <UART_SetConfig+0x346>
 804253a:	2308      	movs	r3, #8
 804253c:	77fb      	strb	r3, [r7, #31]
 804253e:	e146      	b.n	80427ce <UART_SetConfig+0x346>
 8042540:	2310      	movs	r3, #16
 8042542:	77fb      	strb	r3, [r7, #31]
 8042544:	e143      	b.n	80427ce <UART_SetConfig+0x346>
 8042546:	687b      	ldr	r3, [r7, #4]
 8042548:	681b      	ldr	r3, [r3, #0]
 804254a:	4a84      	ldr	r2, [pc, #528]	; (804275c <UART_SetConfig+0x2d4>)
 804254c:	4293      	cmp	r3, r2
 804254e:	d132      	bne.n	80425b6 <UART_SetConfig+0x12e>
 8042550:	4b81      	ldr	r3, [pc, #516]	; (8042758 <UART_SetConfig+0x2d0>)
 8042552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042556:	f003 030c 	and.w	r3, r3, #12
 804255a:	2b0c      	cmp	r3, #12
 804255c:	d828      	bhi.n	80425b0 <UART_SetConfig+0x128>
 804255e:	a201      	add	r2, pc, #4	; (adr r2, 8042564 <UART_SetConfig+0xdc>)
 8042560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042564:	08042599 	.word	0x08042599
 8042568:	080425b1 	.word	0x080425b1
 804256c:	080425b1 	.word	0x080425b1
 8042570:	080425b1 	.word	0x080425b1
 8042574:	080425a5 	.word	0x080425a5
 8042578:	080425b1 	.word	0x080425b1
 804257c:	080425b1 	.word	0x080425b1
 8042580:	080425b1 	.word	0x080425b1
 8042584:	0804259f 	.word	0x0804259f
 8042588:	080425b1 	.word	0x080425b1
 804258c:	080425b1 	.word	0x080425b1
 8042590:	080425b1 	.word	0x080425b1
 8042594:	080425ab 	.word	0x080425ab
 8042598:	2300      	movs	r3, #0
 804259a:	77fb      	strb	r3, [r7, #31]
 804259c:	e117      	b.n	80427ce <UART_SetConfig+0x346>
 804259e:	2302      	movs	r3, #2
 80425a0:	77fb      	strb	r3, [r7, #31]
 80425a2:	e114      	b.n	80427ce <UART_SetConfig+0x346>
 80425a4:	2304      	movs	r3, #4
 80425a6:	77fb      	strb	r3, [r7, #31]
 80425a8:	e111      	b.n	80427ce <UART_SetConfig+0x346>
 80425aa:	2308      	movs	r3, #8
 80425ac:	77fb      	strb	r3, [r7, #31]
 80425ae:	e10e      	b.n	80427ce <UART_SetConfig+0x346>
 80425b0:	2310      	movs	r3, #16
 80425b2:	77fb      	strb	r3, [r7, #31]
 80425b4:	e10b      	b.n	80427ce <UART_SetConfig+0x346>
 80425b6:	687b      	ldr	r3, [r7, #4]
 80425b8:	681b      	ldr	r3, [r3, #0]
 80425ba:	4a69      	ldr	r2, [pc, #420]	; (8042760 <UART_SetConfig+0x2d8>)
 80425bc:	4293      	cmp	r3, r2
 80425be:	d120      	bne.n	8042602 <UART_SetConfig+0x17a>
 80425c0:	4b65      	ldr	r3, [pc, #404]	; (8042758 <UART_SetConfig+0x2d0>)
 80425c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80425c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80425ca:	2b30      	cmp	r3, #48	; 0x30
 80425cc:	d013      	beq.n	80425f6 <UART_SetConfig+0x16e>
 80425ce:	2b30      	cmp	r3, #48	; 0x30
 80425d0:	d814      	bhi.n	80425fc <UART_SetConfig+0x174>
 80425d2:	2b20      	cmp	r3, #32
 80425d4:	d009      	beq.n	80425ea <UART_SetConfig+0x162>
 80425d6:	2b20      	cmp	r3, #32
 80425d8:	d810      	bhi.n	80425fc <UART_SetConfig+0x174>
 80425da:	2b00      	cmp	r3, #0
 80425dc:	d002      	beq.n	80425e4 <UART_SetConfig+0x15c>
 80425de:	2b10      	cmp	r3, #16
 80425e0:	d006      	beq.n	80425f0 <UART_SetConfig+0x168>
 80425e2:	e00b      	b.n	80425fc <UART_SetConfig+0x174>
 80425e4:	2300      	movs	r3, #0
 80425e6:	77fb      	strb	r3, [r7, #31]
 80425e8:	e0f1      	b.n	80427ce <UART_SetConfig+0x346>
 80425ea:	2302      	movs	r3, #2
 80425ec:	77fb      	strb	r3, [r7, #31]
 80425ee:	e0ee      	b.n	80427ce <UART_SetConfig+0x346>
 80425f0:	2304      	movs	r3, #4
 80425f2:	77fb      	strb	r3, [r7, #31]
 80425f4:	e0eb      	b.n	80427ce <UART_SetConfig+0x346>
 80425f6:	2308      	movs	r3, #8
 80425f8:	77fb      	strb	r3, [r7, #31]
 80425fa:	e0e8      	b.n	80427ce <UART_SetConfig+0x346>
 80425fc:	2310      	movs	r3, #16
 80425fe:	77fb      	strb	r3, [r7, #31]
 8042600:	e0e5      	b.n	80427ce <UART_SetConfig+0x346>
 8042602:	687b      	ldr	r3, [r7, #4]
 8042604:	681b      	ldr	r3, [r3, #0]
 8042606:	4a57      	ldr	r2, [pc, #348]	; (8042764 <UART_SetConfig+0x2dc>)
 8042608:	4293      	cmp	r3, r2
 804260a:	d120      	bne.n	804264e <UART_SetConfig+0x1c6>
 804260c:	4b52      	ldr	r3, [pc, #328]	; (8042758 <UART_SetConfig+0x2d0>)
 804260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042616:	2bc0      	cmp	r3, #192	; 0xc0
 8042618:	d013      	beq.n	8042642 <UART_SetConfig+0x1ba>
 804261a:	2bc0      	cmp	r3, #192	; 0xc0
 804261c:	d814      	bhi.n	8042648 <UART_SetConfig+0x1c0>
 804261e:	2b80      	cmp	r3, #128	; 0x80
 8042620:	d009      	beq.n	8042636 <UART_SetConfig+0x1ae>
 8042622:	2b80      	cmp	r3, #128	; 0x80
 8042624:	d810      	bhi.n	8042648 <UART_SetConfig+0x1c0>
 8042626:	2b00      	cmp	r3, #0
 8042628:	d002      	beq.n	8042630 <UART_SetConfig+0x1a8>
 804262a:	2b40      	cmp	r3, #64	; 0x40
 804262c:	d006      	beq.n	804263c <UART_SetConfig+0x1b4>
 804262e:	e00b      	b.n	8042648 <UART_SetConfig+0x1c0>
 8042630:	2300      	movs	r3, #0
 8042632:	77fb      	strb	r3, [r7, #31]
 8042634:	e0cb      	b.n	80427ce <UART_SetConfig+0x346>
 8042636:	2302      	movs	r3, #2
 8042638:	77fb      	strb	r3, [r7, #31]
 804263a:	e0c8      	b.n	80427ce <UART_SetConfig+0x346>
 804263c:	2304      	movs	r3, #4
 804263e:	77fb      	strb	r3, [r7, #31]
 8042640:	e0c5      	b.n	80427ce <UART_SetConfig+0x346>
 8042642:	2308      	movs	r3, #8
 8042644:	77fb      	strb	r3, [r7, #31]
 8042646:	e0c2      	b.n	80427ce <UART_SetConfig+0x346>
 8042648:	2310      	movs	r3, #16
 804264a:	77fb      	strb	r3, [r7, #31]
 804264c:	e0bf      	b.n	80427ce <UART_SetConfig+0x346>
 804264e:	687b      	ldr	r3, [r7, #4]
 8042650:	681b      	ldr	r3, [r3, #0]
 8042652:	4a45      	ldr	r2, [pc, #276]	; (8042768 <UART_SetConfig+0x2e0>)
 8042654:	4293      	cmp	r3, r2
 8042656:	d125      	bne.n	80426a4 <UART_SetConfig+0x21c>
 8042658:	4b3f      	ldr	r3, [pc, #252]	; (8042758 <UART_SetConfig+0x2d0>)
 804265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042666:	d017      	beq.n	8042698 <UART_SetConfig+0x210>
 8042668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804266c:	d817      	bhi.n	804269e <UART_SetConfig+0x216>
 804266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042672:	d00b      	beq.n	804268c <UART_SetConfig+0x204>
 8042674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042678:	d811      	bhi.n	804269e <UART_SetConfig+0x216>
 804267a:	2b00      	cmp	r3, #0
 804267c:	d003      	beq.n	8042686 <UART_SetConfig+0x1fe>
 804267e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042682:	d006      	beq.n	8042692 <UART_SetConfig+0x20a>
 8042684:	e00b      	b.n	804269e <UART_SetConfig+0x216>
 8042686:	2300      	movs	r3, #0
 8042688:	77fb      	strb	r3, [r7, #31]
 804268a:	e0a0      	b.n	80427ce <UART_SetConfig+0x346>
 804268c:	2302      	movs	r3, #2
 804268e:	77fb      	strb	r3, [r7, #31]
 8042690:	e09d      	b.n	80427ce <UART_SetConfig+0x346>
 8042692:	2304      	movs	r3, #4
 8042694:	77fb      	strb	r3, [r7, #31]
 8042696:	e09a      	b.n	80427ce <UART_SetConfig+0x346>
 8042698:	2308      	movs	r3, #8
 804269a:	77fb      	strb	r3, [r7, #31]
 804269c:	e097      	b.n	80427ce <UART_SetConfig+0x346>
 804269e:	2310      	movs	r3, #16
 80426a0:	77fb      	strb	r3, [r7, #31]
 80426a2:	e094      	b.n	80427ce <UART_SetConfig+0x346>
 80426a4:	687b      	ldr	r3, [r7, #4]
 80426a6:	681b      	ldr	r3, [r3, #0]
 80426a8:	4a30      	ldr	r2, [pc, #192]	; (804276c <UART_SetConfig+0x2e4>)
 80426aa:	4293      	cmp	r3, r2
 80426ac:	d125      	bne.n	80426fa <UART_SetConfig+0x272>
 80426ae:	4b2a      	ldr	r3, [pc, #168]	; (8042758 <UART_SetConfig+0x2d0>)
 80426b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80426b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426bc:	d017      	beq.n	80426ee <UART_SetConfig+0x266>
 80426be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426c2:	d817      	bhi.n	80426f4 <UART_SetConfig+0x26c>
 80426c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426c8:	d00b      	beq.n	80426e2 <UART_SetConfig+0x25a>
 80426ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426ce:	d811      	bhi.n	80426f4 <UART_SetConfig+0x26c>
 80426d0:	2b00      	cmp	r3, #0
 80426d2:	d003      	beq.n	80426dc <UART_SetConfig+0x254>
 80426d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80426d8:	d006      	beq.n	80426e8 <UART_SetConfig+0x260>
 80426da:	e00b      	b.n	80426f4 <UART_SetConfig+0x26c>
 80426dc:	2301      	movs	r3, #1
 80426de:	77fb      	strb	r3, [r7, #31]
 80426e0:	e075      	b.n	80427ce <UART_SetConfig+0x346>
 80426e2:	2302      	movs	r3, #2
 80426e4:	77fb      	strb	r3, [r7, #31]
 80426e6:	e072      	b.n	80427ce <UART_SetConfig+0x346>
 80426e8:	2304      	movs	r3, #4
 80426ea:	77fb      	strb	r3, [r7, #31]
 80426ec:	e06f      	b.n	80427ce <UART_SetConfig+0x346>
 80426ee:	2308      	movs	r3, #8
 80426f0:	77fb      	strb	r3, [r7, #31]
 80426f2:	e06c      	b.n	80427ce <UART_SetConfig+0x346>
 80426f4:	2310      	movs	r3, #16
 80426f6:	77fb      	strb	r3, [r7, #31]
 80426f8:	e069      	b.n	80427ce <UART_SetConfig+0x346>
 80426fa:	687b      	ldr	r3, [r7, #4]
 80426fc:	681b      	ldr	r3, [r3, #0]
 80426fe:	4a1c      	ldr	r2, [pc, #112]	; (8042770 <UART_SetConfig+0x2e8>)
 8042700:	4293      	cmp	r3, r2
 8042702:	d137      	bne.n	8042774 <UART_SetConfig+0x2ec>
 8042704:	4b14      	ldr	r3, [pc, #80]	; (8042758 <UART_SetConfig+0x2d0>)
 8042706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804270a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 804270e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042712:	d017      	beq.n	8042744 <UART_SetConfig+0x2bc>
 8042714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042718:	d817      	bhi.n	804274a <UART_SetConfig+0x2c2>
 804271a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804271e:	d00b      	beq.n	8042738 <UART_SetConfig+0x2b0>
 8042720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042724:	d811      	bhi.n	804274a <UART_SetConfig+0x2c2>
 8042726:	2b00      	cmp	r3, #0
 8042728:	d003      	beq.n	8042732 <UART_SetConfig+0x2aa>
 804272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804272e:	d006      	beq.n	804273e <UART_SetConfig+0x2b6>
 8042730:	e00b      	b.n	804274a <UART_SetConfig+0x2c2>
 8042732:	2300      	movs	r3, #0
 8042734:	77fb      	strb	r3, [r7, #31]
 8042736:	e04a      	b.n	80427ce <UART_SetConfig+0x346>
 8042738:	2302      	movs	r3, #2
 804273a:	77fb      	strb	r3, [r7, #31]
 804273c:	e047      	b.n	80427ce <UART_SetConfig+0x346>
 804273e:	2304      	movs	r3, #4
 8042740:	77fb      	strb	r3, [r7, #31]
 8042742:	e044      	b.n	80427ce <UART_SetConfig+0x346>
 8042744:	2308      	movs	r3, #8
 8042746:	77fb      	strb	r3, [r7, #31]
 8042748:	e041      	b.n	80427ce <UART_SetConfig+0x346>
 804274a:	2310      	movs	r3, #16
 804274c:	77fb      	strb	r3, [r7, #31]
 804274e:	e03e      	b.n	80427ce <UART_SetConfig+0x346>
 8042750:	efff69f3 	.word	0xefff69f3
 8042754:	40011000 	.word	0x40011000
 8042758:	40023800 	.word	0x40023800
 804275c:	40004400 	.word	0x40004400
 8042760:	40004800 	.word	0x40004800
 8042764:	40004c00 	.word	0x40004c00
 8042768:	40005000 	.word	0x40005000
 804276c:	40011400 	.word	0x40011400
 8042770:	40007800 	.word	0x40007800
 8042774:	687b      	ldr	r3, [r7, #4]
 8042776:	681b      	ldr	r3, [r3, #0]
 8042778:	4a71      	ldr	r2, [pc, #452]	; (8042940 <UART_SetConfig+0x4b8>)
 804277a:	4293      	cmp	r3, r2
 804277c:	d125      	bne.n	80427ca <UART_SetConfig+0x342>
 804277e:	4b71      	ldr	r3, [pc, #452]	; (8042944 <UART_SetConfig+0x4bc>)
 8042780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8042788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 804278c:	d017      	beq.n	80427be <UART_SetConfig+0x336>
 804278e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8042792:	d817      	bhi.n	80427c4 <UART_SetConfig+0x33c>
 8042794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042798:	d00b      	beq.n	80427b2 <UART_SetConfig+0x32a>
 804279a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804279e:	d811      	bhi.n	80427c4 <UART_SetConfig+0x33c>
 80427a0:	2b00      	cmp	r3, #0
 80427a2:	d003      	beq.n	80427ac <UART_SetConfig+0x324>
 80427a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80427a8:	d006      	beq.n	80427b8 <UART_SetConfig+0x330>
 80427aa:	e00b      	b.n	80427c4 <UART_SetConfig+0x33c>
 80427ac:	2300      	movs	r3, #0
 80427ae:	77fb      	strb	r3, [r7, #31]
 80427b0:	e00d      	b.n	80427ce <UART_SetConfig+0x346>
 80427b2:	2302      	movs	r3, #2
 80427b4:	77fb      	strb	r3, [r7, #31]
 80427b6:	e00a      	b.n	80427ce <UART_SetConfig+0x346>
 80427b8:	2304      	movs	r3, #4
 80427ba:	77fb      	strb	r3, [r7, #31]
 80427bc:	e007      	b.n	80427ce <UART_SetConfig+0x346>
 80427be:	2308      	movs	r3, #8
 80427c0:	77fb      	strb	r3, [r7, #31]
 80427c2:	e004      	b.n	80427ce <UART_SetConfig+0x346>
 80427c4:	2310      	movs	r3, #16
 80427c6:	77fb      	strb	r3, [r7, #31]
 80427c8:	e001      	b.n	80427ce <UART_SetConfig+0x346>
 80427ca:	2310      	movs	r3, #16
 80427cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80427ce:	687b      	ldr	r3, [r7, #4]
 80427d0:	69db      	ldr	r3, [r3, #28]
 80427d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80427d6:	d15b      	bne.n	8042890 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80427d8:	7ffb      	ldrb	r3, [r7, #31]
 80427da:	2b08      	cmp	r3, #8
 80427dc:	d827      	bhi.n	804282e <UART_SetConfig+0x3a6>
 80427de:	a201      	add	r2, pc, #4	; (adr r2, 80427e4 <UART_SetConfig+0x35c>)
 80427e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80427e4:	08042809 	.word	0x08042809
 80427e8:	08042811 	.word	0x08042811
 80427ec:	08042819 	.word	0x08042819
 80427f0:	0804282f 	.word	0x0804282f
 80427f4:	0804281f 	.word	0x0804281f
 80427f8:	0804282f 	.word	0x0804282f
 80427fc:	0804282f 	.word	0x0804282f
 8042800:	0804282f 	.word	0x0804282f
 8042804:	08042827 	.word	0x08042827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042808:	f7ff f90c 	bl	8041a24 <HAL_RCC_GetPCLK1Freq>
 804280c:	61b8      	str	r0, [r7, #24]
        break;
 804280e:	e013      	b.n	8042838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042810:	f7ff f91c 	bl	8041a4c <HAL_RCC_GetPCLK2Freq>
 8042814:	61b8      	str	r0, [r7, #24]
        break;
 8042816:	e00f      	b.n	8042838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042818:	4b4b      	ldr	r3, [pc, #300]	; (8042948 <UART_SetConfig+0x4c0>)
 804281a:	61bb      	str	r3, [r7, #24]
        break;
 804281c:	e00c      	b.n	8042838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804281e:	f7ff f83f 	bl	80418a0 <HAL_RCC_GetSysClockFreq>
 8042822:	61b8      	str	r0, [r7, #24]
        break;
 8042824:	e008      	b.n	8042838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804282a:	61bb      	str	r3, [r7, #24]
        break;
 804282c:	e004      	b.n	8042838 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 804282e:	2300      	movs	r3, #0
 8042830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042832:	2301      	movs	r3, #1
 8042834:	77bb      	strb	r3, [r7, #30]
        break;
 8042836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042838:	69bb      	ldr	r3, [r7, #24]
 804283a:	2b00      	cmp	r3, #0
 804283c:	d074      	beq.n	8042928 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 804283e:	69bb      	ldr	r3, [r7, #24]
 8042840:	005a      	lsls	r2, r3, #1
 8042842:	687b      	ldr	r3, [r7, #4]
 8042844:	685b      	ldr	r3, [r3, #4]
 8042846:	085b      	lsrs	r3, r3, #1
 8042848:	441a      	add	r2, r3
 804284a:	687b      	ldr	r3, [r7, #4]
 804284c:	685b      	ldr	r3, [r3, #4]
 804284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8042852:	b29b      	uxth	r3, r3
 8042854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042856:	693b      	ldr	r3, [r7, #16]
 8042858:	2b0f      	cmp	r3, #15
 804285a:	d916      	bls.n	804288a <UART_SetConfig+0x402>
 804285c:	693b      	ldr	r3, [r7, #16]
 804285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042862:	d212      	bcs.n	804288a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042864:	693b      	ldr	r3, [r7, #16]
 8042866:	b29b      	uxth	r3, r3
 8042868:	f023 030f 	bic.w	r3, r3, #15
 804286c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804286e:	693b      	ldr	r3, [r7, #16]
 8042870:	085b      	lsrs	r3, r3, #1
 8042872:	b29b      	uxth	r3, r3
 8042874:	f003 0307 	and.w	r3, r3, #7
 8042878:	b29a      	uxth	r2, r3
 804287a:	89fb      	ldrh	r3, [r7, #14]
 804287c:	4313      	orrs	r3, r2
 804287e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8042880:	687b      	ldr	r3, [r7, #4]
 8042882:	681b      	ldr	r3, [r3, #0]
 8042884:	89fa      	ldrh	r2, [r7, #14]
 8042886:	60da      	str	r2, [r3, #12]
 8042888:	e04e      	b.n	8042928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 804288a:	2301      	movs	r3, #1
 804288c:	77bb      	strb	r3, [r7, #30]
 804288e:	e04b      	b.n	8042928 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8042890:	7ffb      	ldrb	r3, [r7, #31]
 8042892:	2b08      	cmp	r3, #8
 8042894:	d827      	bhi.n	80428e6 <UART_SetConfig+0x45e>
 8042896:	a201      	add	r2, pc, #4	; (adr r2, 804289c <UART_SetConfig+0x414>)
 8042898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804289c:	080428c1 	.word	0x080428c1
 80428a0:	080428c9 	.word	0x080428c9
 80428a4:	080428d1 	.word	0x080428d1
 80428a8:	080428e7 	.word	0x080428e7
 80428ac:	080428d7 	.word	0x080428d7
 80428b0:	080428e7 	.word	0x080428e7
 80428b4:	080428e7 	.word	0x080428e7
 80428b8:	080428e7 	.word	0x080428e7
 80428bc:	080428df 	.word	0x080428df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80428c0:	f7ff f8b0 	bl	8041a24 <HAL_RCC_GetPCLK1Freq>
 80428c4:	61b8      	str	r0, [r7, #24]
        break;
 80428c6:	e013      	b.n	80428f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80428c8:	f7ff f8c0 	bl	8041a4c <HAL_RCC_GetPCLK2Freq>
 80428cc:	61b8      	str	r0, [r7, #24]
        break;
 80428ce:	e00f      	b.n	80428f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80428d0:	4b1d      	ldr	r3, [pc, #116]	; (8042948 <UART_SetConfig+0x4c0>)
 80428d2:	61bb      	str	r3, [r7, #24]
        break;
 80428d4:	e00c      	b.n	80428f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80428d6:	f7fe ffe3 	bl	80418a0 <HAL_RCC_GetSysClockFreq>
 80428da:	61b8      	str	r0, [r7, #24]
        break;
 80428dc:	e008      	b.n	80428f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80428de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80428e2:	61bb      	str	r3, [r7, #24]
        break;
 80428e4:	e004      	b.n	80428f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80428e6:	2300      	movs	r3, #0
 80428e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80428ea:	2301      	movs	r3, #1
 80428ec:	77bb      	strb	r3, [r7, #30]
        break;
 80428ee:	bf00      	nop
    }

    if (pclk != 0U)
 80428f0:	69bb      	ldr	r3, [r7, #24]
 80428f2:	2b00      	cmp	r3, #0
 80428f4:	d018      	beq.n	8042928 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80428f6:	687b      	ldr	r3, [r7, #4]
 80428f8:	685b      	ldr	r3, [r3, #4]
 80428fa:	085a      	lsrs	r2, r3, #1
 80428fc:	69bb      	ldr	r3, [r7, #24]
 80428fe:	441a      	add	r2, r3
 8042900:	687b      	ldr	r3, [r7, #4]
 8042902:	685b      	ldr	r3, [r3, #4]
 8042904:	fbb2 f3f3 	udiv	r3, r2, r3
 8042908:	b29b      	uxth	r3, r3
 804290a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804290c:	693b      	ldr	r3, [r7, #16]
 804290e:	2b0f      	cmp	r3, #15
 8042910:	d908      	bls.n	8042924 <UART_SetConfig+0x49c>
 8042912:	693b      	ldr	r3, [r7, #16]
 8042914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042918:	d204      	bcs.n	8042924 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 804291a:	687b      	ldr	r3, [r7, #4]
 804291c:	681b      	ldr	r3, [r3, #0]
 804291e:	693a      	ldr	r2, [r7, #16]
 8042920:	60da      	str	r2, [r3, #12]
 8042922:	e001      	b.n	8042928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8042924:	2301      	movs	r3, #1
 8042926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042928:	687b      	ldr	r3, [r7, #4]
 804292a:	2200      	movs	r2, #0
 804292c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 804292e:	687b      	ldr	r3, [r7, #4]
 8042930:	2200      	movs	r2, #0
 8042932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8042934:	7fbb      	ldrb	r3, [r7, #30]
}
 8042936:	4618      	mov	r0, r3
 8042938:	3720      	adds	r7, #32
 804293a:	46bd      	mov	sp, r7
 804293c:	bd80      	pop	{r7, pc}
 804293e:	bf00      	nop
 8042940:	40007c00 	.word	0x40007c00
 8042944:	40023800 	.word	0x40023800
 8042948:	00f42400 	.word	0x00f42400

0804294c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 804294c:	b480      	push	{r7}
 804294e:	b083      	sub	sp, #12
 8042950:	af00      	add	r7, sp, #0
 8042952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042954:	687b      	ldr	r3, [r7, #4]
 8042956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042958:	f003 0301 	and.w	r3, r3, #1
 804295c:	2b00      	cmp	r3, #0
 804295e:	d00a      	beq.n	8042976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042960:	687b      	ldr	r3, [r7, #4]
 8042962:	681b      	ldr	r3, [r3, #0]
 8042964:	685b      	ldr	r3, [r3, #4]
 8042966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804296a:	687b      	ldr	r3, [r7, #4]
 804296c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804296e:	687b      	ldr	r3, [r7, #4]
 8042970:	681b      	ldr	r3, [r3, #0]
 8042972:	430a      	orrs	r2, r1
 8042974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042976:	687b      	ldr	r3, [r7, #4]
 8042978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804297a:	f003 0302 	and.w	r3, r3, #2
 804297e:	2b00      	cmp	r3, #0
 8042980:	d00a      	beq.n	8042998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042982:	687b      	ldr	r3, [r7, #4]
 8042984:	681b      	ldr	r3, [r3, #0]
 8042986:	685b      	ldr	r3, [r3, #4]
 8042988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 804298c:	687b      	ldr	r3, [r7, #4]
 804298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8042990:	687b      	ldr	r3, [r7, #4]
 8042992:	681b      	ldr	r3, [r3, #0]
 8042994:	430a      	orrs	r2, r1
 8042996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042998:	687b      	ldr	r3, [r7, #4]
 804299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804299c:	f003 0304 	and.w	r3, r3, #4
 80429a0:	2b00      	cmp	r3, #0
 80429a2:	d00a      	beq.n	80429ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80429a4:	687b      	ldr	r3, [r7, #4]
 80429a6:	681b      	ldr	r3, [r3, #0]
 80429a8:	685b      	ldr	r3, [r3, #4]
 80429aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80429ae:	687b      	ldr	r3, [r7, #4]
 80429b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80429b2:	687b      	ldr	r3, [r7, #4]
 80429b4:	681b      	ldr	r3, [r3, #0]
 80429b6:	430a      	orrs	r2, r1
 80429b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80429ba:	687b      	ldr	r3, [r7, #4]
 80429bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429be:	f003 0308 	and.w	r3, r3, #8
 80429c2:	2b00      	cmp	r3, #0
 80429c4:	d00a      	beq.n	80429dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80429c6:	687b      	ldr	r3, [r7, #4]
 80429c8:	681b      	ldr	r3, [r3, #0]
 80429ca:	685b      	ldr	r3, [r3, #4]
 80429cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80429d0:	687b      	ldr	r3, [r7, #4]
 80429d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80429d4:	687b      	ldr	r3, [r7, #4]
 80429d6:	681b      	ldr	r3, [r3, #0]
 80429d8:	430a      	orrs	r2, r1
 80429da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80429dc:	687b      	ldr	r3, [r7, #4]
 80429de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429e0:	f003 0310 	and.w	r3, r3, #16
 80429e4:	2b00      	cmp	r3, #0
 80429e6:	d00a      	beq.n	80429fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80429e8:	687b      	ldr	r3, [r7, #4]
 80429ea:	681b      	ldr	r3, [r3, #0]
 80429ec:	689b      	ldr	r3, [r3, #8]
 80429ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80429f2:	687b      	ldr	r3, [r7, #4]
 80429f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80429f6:	687b      	ldr	r3, [r7, #4]
 80429f8:	681b      	ldr	r3, [r3, #0]
 80429fa:	430a      	orrs	r2, r1
 80429fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80429fe:	687b      	ldr	r3, [r7, #4]
 8042a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a02:	f003 0320 	and.w	r3, r3, #32
 8042a06:	2b00      	cmp	r3, #0
 8042a08:	d00a      	beq.n	8042a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042a0a:	687b      	ldr	r3, [r7, #4]
 8042a0c:	681b      	ldr	r3, [r3, #0]
 8042a0e:	689b      	ldr	r3, [r3, #8]
 8042a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042a14:	687b      	ldr	r3, [r7, #4]
 8042a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042a18:	687b      	ldr	r3, [r7, #4]
 8042a1a:	681b      	ldr	r3, [r3, #0]
 8042a1c:	430a      	orrs	r2, r1
 8042a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042a20:	687b      	ldr	r3, [r7, #4]
 8042a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042a28:	2b00      	cmp	r3, #0
 8042a2a:	d01a      	beq.n	8042a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042a2c:	687b      	ldr	r3, [r7, #4]
 8042a2e:	681b      	ldr	r3, [r3, #0]
 8042a30:	685b      	ldr	r3, [r3, #4]
 8042a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042a36:	687b      	ldr	r3, [r7, #4]
 8042a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042a3a:	687b      	ldr	r3, [r7, #4]
 8042a3c:	681b      	ldr	r3, [r3, #0]
 8042a3e:	430a      	orrs	r2, r1
 8042a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042a42:	687b      	ldr	r3, [r7, #4]
 8042a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042a4a:	d10a      	bne.n	8042a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042a4c:	687b      	ldr	r3, [r7, #4]
 8042a4e:	681b      	ldr	r3, [r3, #0]
 8042a50:	685b      	ldr	r3, [r3, #4]
 8042a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8042a56:	687b      	ldr	r3, [r7, #4]
 8042a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042a5a:	687b      	ldr	r3, [r7, #4]
 8042a5c:	681b      	ldr	r3, [r3, #0]
 8042a5e:	430a      	orrs	r2, r1
 8042a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042a62:	687b      	ldr	r3, [r7, #4]
 8042a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042a6a:	2b00      	cmp	r3, #0
 8042a6c:	d00a      	beq.n	8042a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042a6e:	687b      	ldr	r3, [r7, #4]
 8042a70:	681b      	ldr	r3, [r3, #0]
 8042a72:	685b      	ldr	r3, [r3, #4]
 8042a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8042a78:	687b      	ldr	r3, [r7, #4]
 8042a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8042a7c:	687b      	ldr	r3, [r7, #4]
 8042a7e:	681b      	ldr	r3, [r3, #0]
 8042a80:	430a      	orrs	r2, r1
 8042a82:	605a      	str	r2, [r3, #4]
  }
}
 8042a84:	bf00      	nop
 8042a86:	370c      	adds	r7, #12
 8042a88:	46bd      	mov	sp, r7
 8042a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a8e:	4770      	bx	lr

08042a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042a90:	b580      	push	{r7, lr}
 8042a92:	b086      	sub	sp, #24
 8042a94:	af02      	add	r7, sp, #8
 8042a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042a98:	687b      	ldr	r3, [r7, #4]
 8042a9a:	2200      	movs	r2, #0
 8042a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042aa0:	f7fe f888 	bl	8040bb4 <HAL_GetTick>
 8042aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042aa6:	687b      	ldr	r3, [r7, #4]
 8042aa8:	681b      	ldr	r3, [r3, #0]
 8042aaa:	681b      	ldr	r3, [r3, #0]
 8042aac:	f003 0308 	and.w	r3, r3, #8
 8042ab0:	2b08      	cmp	r3, #8
 8042ab2:	d10e      	bne.n	8042ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042ab8:	9300      	str	r3, [sp, #0]
 8042aba:	68fb      	ldr	r3, [r7, #12]
 8042abc:	2200      	movs	r2, #0
 8042abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042ac2:	6878      	ldr	r0, [r7, #4]
 8042ac4:	f000 f82d 	bl	8042b22 <UART_WaitOnFlagUntilTimeout>
 8042ac8:	4603      	mov	r3, r0
 8042aca:	2b00      	cmp	r3, #0
 8042acc:	d001      	beq.n	8042ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042ace:	2303      	movs	r3, #3
 8042ad0:	e023      	b.n	8042b1a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042ad2:	687b      	ldr	r3, [r7, #4]
 8042ad4:	681b      	ldr	r3, [r3, #0]
 8042ad6:	681b      	ldr	r3, [r3, #0]
 8042ad8:	f003 0304 	and.w	r3, r3, #4
 8042adc:	2b04      	cmp	r3, #4
 8042ade:	d10e      	bne.n	8042afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042ae4:	9300      	str	r3, [sp, #0]
 8042ae6:	68fb      	ldr	r3, [r7, #12]
 8042ae8:	2200      	movs	r2, #0
 8042aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8042aee:	6878      	ldr	r0, [r7, #4]
 8042af0:	f000 f817 	bl	8042b22 <UART_WaitOnFlagUntilTimeout>
 8042af4:	4603      	mov	r3, r0
 8042af6:	2b00      	cmp	r3, #0
 8042af8:	d001      	beq.n	8042afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042afa:	2303      	movs	r3, #3
 8042afc:	e00d      	b.n	8042b1a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042afe:	687b      	ldr	r3, [r7, #4]
 8042b00:	2220      	movs	r2, #32
 8042b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8042b04:	687b      	ldr	r3, [r7, #4]
 8042b06:	2220      	movs	r2, #32
 8042b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	2200      	movs	r2, #0
 8042b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8042b10:	687b      	ldr	r3, [r7, #4]
 8042b12:	2200      	movs	r2, #0
 8042b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8042b18:	2300      	movs	r3, #0
}
 8042b1a:	4618      	mov	r0, r3
 8042b1c:	3710      	adds	r7, #16
 8042b1e:	46bd      	mov	sp, r7
 8042b20:	bd80      	pop	{r7, pc}

08042b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042b22:	b580      	push	{r7, lr}
 8042b24:	b084      	sub	sp, #16
 8042b26:	af00      	add	r7, sp, #0
 8042b28:	60f8      	str	r0, [r7, #12]
 8042b2a:	60b9      	str	r1, [r7, #8]
 8042b2c:	603b      	str	r3, [r7, #0]
 8042b2e:	4613      	mov	r3, r2
 8042b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042b32:	e05e      	b.n	8042bf2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042b34:	69bb      	ldr	r3, [r7, #24]
 8042b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042b3a:	d05a      	beq.n	8042bf2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042b3c:	f7fe f83a 	bl	8040bb4 <HAL_GetTick>
 8042b40:	4602      	mov	r2, r0
 8042b42:	683b      	ldr	r3, [r7, #0]
 8042b44:	1ad3      	subs	r3, r2, r3
 8042b46:	69ba      	ldr	r2, [r7, #24]
 8042b48:	429a      	cmp	r2, r3
 8042b4a:	d302      	bcc.n	8042b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8042b4c:	69bb      	ldr	r3, [r7, #24]
 8042b4e:	2b00      	cmp	r3, #0
 8042b50:	d11b      	bne.n	8042b8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042b52:	68fb      	ldr	r3, [r7, #12]
 8042b54:	681b      	ldr	r3, [r3, #0]
 8042b56:	681a      	ldr	r2, [r3, #0]
 8042b58:	68fb      	ldr	r3, [r7, #12]
 8042b5a:	681b      	ldr	r3, [r3, #0]
 8042b5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042b60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042b62:	68fb      	ldr	r3, [r7, #12]
 8042b64:	681b      	ldr	r3, [r3, #0]
 8042b66:	689a      	ldr	r2, [r3, #8]
 8042b68:	68fb      	ldr	r3, [r7, #12]
 8042b6a:	681b      	ldr	r3, [r3, #0]
 8042b6c:	f022 0201 	bic.w	r2, r2, #1
 8042b70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8042b72:	68fb      	ldr	r3, [r7, #12]
 8042b74:	2220      	movs	r2, #32
 8042b76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8042b78:	68fb      	ldr	r3, [r7, #12]
 8042b7a:	2220      	movs	r2, #32
 8042b7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8042b7e:	68fb      	ldr	r3, [r7, #12]
 8042b80:	2200      	movs	r2, #0
 8042b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8042b86:	2303      	movs	r3, #3
 8042b88:	e043      	b.n	8042c12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8042b8a:	68fb      	ldr	r3, [r7, #12]
 8042b8c:	681b      	ldr	r3, [r3, #0]
 8042b8e:	681b      	ldr	r3, [r3, #0]
 8042b90:	f003 0304 	and.w	r3, r3, #4
 8042b94:	2b00      	cmp	r3, #0
 8042b96:	d02c      	beq.n	8042bf2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042b98:	68fb      	ldr	r3, [r7, #12]
 8042b9a:	681b      	ldr	r3, [r3, #0]
 8042b9c:	69db      	ldr	r3, [r3, #28]
 8042b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042ba6:	d124      	bne.n	8042bf2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042ba8:	68fb      	ldr	r3, [r7, #12]
 8042baa:	681b      	ldr	r3, [r3, #0]
 8042bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042bb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042bb2:	68fb      	ldr	r3, [r7, #12]
 8042bb4:	681b      	ldr	r3, [r3, #0]
 8042bb6:	681a      	ldr	r2, [r3, #0]
 8042bb8:	68fb      	ldr	r3, [r7, #12]
 8042bba:	681b      	ldr	r3, [r3, #0]
 8042bbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042bc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042bc2:	68fb      	ldr	r3, [r7, #12]
 8042bc4:	681b      	ldr	r3, [r3, #0]
 8042bc6:	689a      	ldr	r2, [r3, #8]
 8042bc8:	68fb      	ldr	r3, [r7, #12]
 8042bca:	681b      	ldr	r3, [r3, #0]
 8042bcc:	f022 0201 	bic.w	r2, r2, #1
 8042bd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8042bd2:	68fb      	ldr	r3, [r7, #12]
 8042bd4:	2220      	movs	r2, #32
 8042bd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8042bd8:	68fb      	ldr	r3, [r7, #12]
 8042bda:	2220      	movs	r2, #32
 8042bdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042bde:	68fb      	ldr	r3, [r7, #12]
 8042be0:	2220      	movs	r2, #32
 8042be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042be6:	68fb      	ldr	r3, [r7, #12]
 8042be8:	2200      	movs	r2, #0
 8042bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8042bee:	2303      	movs	r3, #3
 8042bf0:	e00f      	b.n	8042c12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042bf2:	68fb      	ldr	r3, [r7, #12]
 8042bf4:	681b      	ldr	r3, [r3, #0]
 8042bf6:	69da      	ldr	r2, [r3, #28]
 8042bf8:	68bb      	ldr	r3, [r7, #8]
 8042bfa:	4013      	ands	r3, r2
 8042bfc:	68ba      	ldr	r2, [r7, #8]
 8042bfe:	429a      	cmp	r2, r3
 8042c00:	bf0c      	ite	eq
 8042c02:	2301      	moveq	r3, #1
 8042c04:	2300      	movne	r3, #0
 8042c06:	b2db      	uxtb	r3, r3
 8042c08:	461a      	mov	r2, r3
 8042c0a:	79fb      	ldrb	r3, [r7, #7]
 8042c0c:	429a      	cmp	r2, r3
 8042c0e:	d091      	beq.n	8042b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042c10:	2300      	movs	r3, #0
}
 8042c12:	4618      	mov	r0, r3
 8042c14:	3710      	adds	r7, #16
 8042c16:	46bd      	mov	sp, r7
 8042c18:	bd80      	pop	{r7, pc}
	...

08042c1c <__errno>:
 8042c1c:	4b01      	ldr	r3, [pc, #4]	; (8042c24 <__errno+0x8>)
 8042c1e:	6818      	ldr	r0, [r3, #0]
 8042c20:	4770      	bx	lr
 8042c22:	bf00      	nop
 8042c24:	2000000c 	.word	0x2000000c

08042c28 <__libc_init_array>:
 8042c28:	b570      	push	{r4, r5, r6, lr}
 8042c2a:	4d0d      	ldr	r5, [pc, #52]	; (8042c60 <__libc_init_array+0x38>)
 8042c2c:	4c0d      	ldr	r4, [pc, #52]	; (8042c64 <__libc_init_array+0x3c>)
 8042c2e:	1b64      	subs	r4, r4, r5
 8042c30:	10a4      	asrs	r4, r4, #2
 8042c32:	2600      	movs	r6, #0
 8042c34:	42a6      	cmp	r6, r4
 8042c36:	d109      	bne.n	8042c4c <__libc_init_array+0x24>
 8042c38:	4d0b      	ldr	r5, [pc, #44]	; (8042c68 <__libc_init_array+0x40>)
 8042c3a:	4c0c      	ldr	r4, [pc, #48]	; (8042c6c <__libc_init_array+0x44>)
 8042c3c:	f000 ff76 	bl	8043b2c <_init>
 8042c40:	1b64      	subs	r4, r4, r5
 8042c42:	10a4      	asrs	r4, r4, #2
 8042c44:	2600      	movs	r6, #0
 8042c46:	42a6      	cmp	r6, r4
 8042c48:	d105      	bne.n	8042c56 <__libc_init_array+0x2e>
 8042c4a:	bd70      	pop	{r4, r5, r6, pc}
 8042c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8042c50:	4798      	blx	r3
 8042c52:	3601      	adds	r6, #1
 8042c54:	e7ee      	b.n	8042c34 <__libc_init_array+0xc>
 8042c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8042c5a:	4798      	blx	r3
 8042c5c:	3601      	adds	r6, #1
 8042c5e:	e7f2      	b.n	8042c46 <__libc_init_array+0x1e>
 8042c60:	08043c1c 	.word	0x08043c1c
 8042c64:	08043c1c 	.word	0x08043c1c
 8042c68:	08043c1c 	.word	0x08043c1c
 8042c6c:	08043c20 	.word	0x08043c20

08042c70 <memset>:
 8042c70:	4402      	add	r2, r0
 8042c72:	4603      	mov	r3, r0
 8042c74:	4293      	cmp	r3, r2
 8042c76:	d100      	bne.n	8042c7a <memset+0xa>
 8042c78:	4770      	bx	lr
 8042c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8042c7e:	e7f9      	b.n	8042c74 <memset+0x4>

08042c80 <iprintf>:
 8042c80:	b40f      	push	{r0, r1, r2, r3}
 8042c82:	4b0a      	ldr	r3, [pc, #40]	; (8042cac <iprintf+0x2c>)
 8042c84:	b513      	push	{r0, r1, r4, lr}
 8042c86:	681c      	ldr	r4, [r3, #0]
 8042c88:	b124      	cbz	r4, 8042c94 <iprintf+0x14>
 8042c8a:	69a3      	ldr	r3, [r4, #24]
 8042c8c:	b913      	cbnz	r3, 8042c94 <iprintf+0x14>
 8042c8e:	4620      	mov	r0, r4
 8042c90:	f000 f866 	bl	8042d60 <__sinit>
 8042c94:	ab05      	add	r3, sp, #20
 8042c96:	9a04      	ldr	r2, [sp, #16]
 8042c98:	68a1      	ldr	r1, [r4, #8]
 8042c9a:	9301      	str	r3, [sp, #4]
 8042c9c:	4620      	mov	r0, r4
 8042c9e:	f000 f983 	bl	8042fa8 <_vfiprintf_r>
 8042ca2:	b002      	add	sp, #8
 8042ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042ca8:	b004      	add	sp, #16
 8042caa:	4770      	bx	lr
 8042cac:	2000000c 	.word	0x2000000c

08042cb0 <std>:
 8042cb0:	2300      	movs	r3, #0
 8042cb2:	b510      	push	{r4, lr}
 8042cb4:	4604      	mov	r4, r0
 8042cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8042cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8042cbe:	6083      	str	r3, [r0, #8]
 8042cc0:	8181      	strh	r1, [r0, #12]
 8042cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8042cc4:	81c2      	strh	r2, [r0, #14]
 8042cc6:	6183      	str	r3, [r0, #24]
 8042cc8:	4619      	mov	r1, r3
 8042cca:	2208      	movs	r2, #8
 8042ccc:	305c      	adds	r0, #92	; 0x5c
 8042cce:	f7ff ffcf 	bl	8042c70 <memset>
 8042cd2:	4b05      	ldr	r3, [pc, #20]	; (8042ce8 <std+0x38>)
 8042cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8042cd6:	4b05      	ldr	r3, [pc, #20]	; (8042cec <std+0x3c>)
 8042cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8042cda:	4b05      	ldr	r3, [pc, #20]	; (8042cf0 <std+0x40>)
 8042cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8042cde:	4b05      	ldr	r3, [pc, #20]	; (8042cf4 <std+0x44>)
 8042ce0:	6224      	str	r4, [r4, #32]
 8042ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8042ce4:	bd10      	pop	{r4, pc}
 8042ce6:	bf00      	nop
 8042ce8:	08043551 	.word	0x08043551
 8042cec:	08043573 	.word	0x08043573
 8042cf0:	080435ab 	.word	0x080435ab
 8042cf4:	080435cf 	.word	0x080435cf

08042cf8 <_cleanup_r>:
 8042cf8:	4901      	ldr	r1, [pc, #4]	; (8042d00 <_cleanup_r+0x8>)
 8042cfa:	f000 b8af 	b.w	8042e5c <_fwalk_reent>
 8042cfe:	bf00      	nop
 8042d00:	080438a9 	.word	0x080438a9

08042d04 <__sfmoreglue>:
 8042d04:	b570      	push	{r4, r5, r6, lr}
 8042d06:	1e4a      	subs	r2, r1, #1
 8042d08:	2568      	movs	r5, #104	; 0x68
 8042d0a:	4355      	muls	r5, r2
 8042d0c:	460e      	mov	r6, r1
 8042d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8042d12:	f000 f8c5 	bl	8042ea0 <_malloc_r>
 8042d16:	4604      	mov	r4, r0
 8042d18:	b140      	cbz	r0, 8042d2c <__sfmoreglue+0x28>
 8042d1a:	2100      	movs	r1, #0
 8042d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8042d20:	300c      	adds	r0, #12
 8042d22:	60a0      	str	r0, [r4, #8]
 8042d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8042d28:	f7ff ffa2 	bl	8042c70 <memset>
 8042d2c:	4620      	mov	r0, r4
 8042d2e:	bd70      	pop	{r4, r5, r6, pc}

08042d30 <__sfp_lock_acquire>:
 8042d30:	4801      	ldr	r0, [pc, #4]	; (8042d38 <__sfp_lock_acquire+0x8>)
 8042d32:	f000 b8b3 	b.w	8042e9c <__retarget_lock_acquire_recursive>
 8042d36:	bf00      	nop
 8042d38:	20000128 	.word	0x20000128

08042d3c <__sfp_lock_release>:
 8042d3c:	4801      	ldr	r0, [pc, #4]	; (8042d44 <__sfp_lock_release+0x8>)
 8042d3e:	f000 b8ae 	b.w	8042e9e <__retarget_lock_release_recursive>
 8042d42:	bf00      	nop
 8042d44:	20000128 	.word	0x20000128

08042d48 <__sinit_lock_acquire>:
 8042d48:	4801      	ldr	r0, [pc, #4]	; (8042d50 <__sinit_lock_acquire+0x8>)
 8042d4a:	f000 b8a7 	b.w	8042e9c <__retarget_lock_acquire_recursive>
 8042d4e:	bf00      	nop
 8042d50:	20000123 	.word	0x20000123

08042d54 <__sinit_lock_release>:
 8042d54:	4801      	ldr	r0, [pc, #4]	; (8042d5c <__sinit_lock_release+0x8>)
 8042d56:	f000 b8a2 	b.w	8042e9e <__retarget_lock_release_recursive>
 8042d5a:	bf00      	nop
 8042d5c:	20000123 	.word	0x20000123

08042d60 <__sinit>:
 8042d60:	b510      	push	{r4, lr}
 8042d62:	4604      	mov	r4, r0
 8042d64:	f7ff fff0 	bl	8042d48 <__sinit_lock_acquire>
 8042d68:	69a3      	ldr	r3, [r4, #24]
 8042d6a:	b11b      	cbz	r3, 8042d74 <__sinit+0x14>
 8042d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042d70:	f7ff bff0 	b.w	8042d54 <__sinit_lock_release>
 8042d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8042d78:	6523      	str	r3, [r4, #80]	; 0x50
 8042d7a:	4b13      	ldr	r3, [pc, #76]	; (8042dc8 <__sinit+0x68>)
 8042d7c:	4a13      	ldr	r2, [pc, #76]	; (8042dcc <__sinit+0x6c>)
 8042d7e:	681b      	ldr	r3, [r3, #0]
 8042d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8042d82:	42a3      	cmp	r3, r4
 8042d84:	bf04      	itt	eq
 8042d86:	2301      	moveq	r3, #1
 8042d88:	61a3      	streq	r3, [r4, #24]
 8042d8a:	4620      	mov	r0, r4
 8042d8c:	f000 f820 	bl	8042dd0 <__sfp>
 8042d90:	6060      	str	r0, [r4, #4]
 8042d92:	4620      	mov	r0, r4
 8042d94:	f000 f81c 	bl	8042dd0 <__sfp>
 8042d98:	60a0      	str	r0, [r4, #8]
 8042d9a:	4620      	mov	r0, r4
 8042d9c:	f000 f818 	bl	8042dd0 <__sfp>
 8042da0:	2200      	movs	r2, #0
 8042da2:	60e0      	str	r0, [r4, #12]
 8042da4:	2104      	movs	r1, #4
 8042da6:	6860      	ldr	r0, [r4, #4]
 8042da8:	f7ff ff82 	bl	8042cb0 <std>
 8042dac:	68a0      	ldr	r0, [r4, #8]
 8042dae:	2201      	movs	r2, #1
 8042db0:	2109      	movs	r1, #9
 8042db2:	f7ff ff7d 	bl	8042cb0 <std>
 8042db6:	68e0      	ldr	r0, [r4, #12]
 8042db8:	2202      	movs	r2, #2
 8042dba:	2112      	movs	r1, #18
 8042dbc:	f7ff ff78 	bl	8042cb0 <std>
 8042dc0:	2301      	movs	r3, #1
 8042dc2:	61a3      	str	r3, [r4, #24]
 8042dc4:	e7d2      	b.n	8042d6c <__sinit+0xc>
 8042dc6:	bf00      	nop
 8042dc8:	08043b7c 	.word	0x08043b7c
 8042dcc:	08042cf9 	.word	0x08042cf9

08042dd0 <__sfp>:
 8042dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042dd2:	4607      	mov	r7, r0
 8042dd4:	f7ff ffac 	bl	8042d30 <__sfp_lock_acquire>
 8042dd8:	4b1e      	ldr	r3, [pc, #120]	; (8042e54 <__sfp+0x84>)
 8042dda:	681e      	ldr	r6, [r3, #0]
 8042ddc:	69b3      	ldr	r3, [r6, #24]
 8042dde:	b913      	cbnz	r3, 8042de6 <__sfp+0x16>
 8042de0:	4630      	mov	r0, r6
 8042de2:	f7ff ffbd 	bl	8042d60 <__sinit>
 8042de6:	3648      	adds	r6, #72	; 0x48
 8042de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8042dec:	3b01      	subs	r3, #1
 8042dee:	d503      	bpl.n	8042df8 <__sfp+0x28>
 8042df0:	6833      	ldr	r3, [r6, #0]
 8042df2:	b30b      	cbz	r3, 8042e38 <__sfp+0x68>
 8042df4:	6836      	ldr	r6, [r6, #0]
 8042df6:	e7f7      	b.n	8042de8 <__sfp+0x18>
 8042df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8042dfc:	b9d5      	cbnz	r5, 8042e34 <__sfp+0x64>
 8042dfe:	4b16      	ldr	r3, [pc, #88]	; (8042e58 <__sfp+0x88>)
 8042e00:	60e3      	str	r3, [r4, #12]
 8042e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8042e06:	6665      	str	r5, [r4, #100]	; 0x64
 8042e08:	f000 f847 	bl	8042e9a <__retarget_lock_init_recursive>
 8042e0c:	f7ff ff96 	bl	8042d3c <__sfp_lock_release>
 8042e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8042e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8042e18:	6025      	str	r5, [r4, #0]
 8042e1a:	61a5      	str	r5, [r4, #24]
 8042e1c:	2208      	movs	r2, #8
 8042e1e:	4629      	mov	r1, r5
 8042e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8042e24:	f7ff ff24 	bl	8042c70 <memset>
 8042e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8042e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8042e30:	4620      	mov	r0, r4
 8042e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042e34:	3468      	adds	r4, #104	; 0x68
 8042e36:	e7d9      	b.n	8042dec <__sfp+0x1c>
 8042e38:	2104      	movs	r1, #4
 8042e3a:	4638      	mov	r0, r7
 8042e3c:	f7ff ff62 	bl	8042d04 <__sfmoreglue>
 8042e40:	4604      	mov	r4, r0
 8042e42:	6030      	str	r0, [r6, #0]
 8042e44:	2800      	cmp	r0, #0
 8042e46:	d1d5      	bne.n	8042df4 <__sfp+0x24>
 8042e48:	f7ff ff78 	bl	8042d3c <__sfp_lock_release>
 8042e4c:	230c      	movs	r3, #12
 8042e4e:	603b      	str	r3, [r7, #0]
 8042e50:	e7ee      	b.n	8042e30 <__sfp+0x60>
 8042e52:	bf00      	nop
 8042e54:	08043b7c 	.word	0x08043b7c
 8042e58:	ffff0001 	.word	0xffff0001

08042e5c <_fwalk_reent>:
 8042e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8042e60:	4606      	mov	r6, r0
 8042e62:	4688      	mov	r8, r1
 8042e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8042e68:	2700      	movs	r7, #0
 8042e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8042e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8042e72:	d505      	bpl.n	8042e80 <_fwalk_reent+0x24>
 8042e74:	6824      	ldr	r4, [r4, #0]
 8042e76:	2c00      	cmp	r4, #0
 8042e78:	d1f7      	bne.n	8042e6a <_fwalk_reent+0xe>
 8042e7a:	4638      	mov	r0, r7
 8042e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8042e80:	89ab      	ldrh	r3, [r5, #12]
 8042e82:	2b01      	cmp	r3, #1
 8042e84:	d907      	bls.n	8042e96 <_fwalk_reent+0x3a>
 8042e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8042e8a:	3301      	adds	r3, #1
 8042e8c:	d003      	beq.n	8042e96 <_fwalk_reent+0x3a>
 8042e8e:	4629      	mov	r1, r5
 8042e90:	4630      	mov	r0, r6
 8042e92:	47c0      	blx	r8
 8042e94:	4307      	orrs	r7, r0
 8042e96:	3568      	adds	r5, #104	; 0x68
 8042e98:	e7e9      	b.n	8042e6e <_fwalk_reent+0x12>

08042e9a <__retarget_lock_init_recursive>:
 8042e9a:	4770      	bx	lr

08042e9c <__retarget_lock_acquire_recursive>:
 8042e9c:	4770      	bx	lr

08042e9e <__retarget_lock_release_recursive>:
 8042e9e:	4770      	bx	lr

08042ea0 <_malloc_r>:
 8042ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042ea2:	1ccd      	adds	r5, r1, #3
 8042ea4:	f025 0503 	bic.w	r5, r5, #3
 8042ea8:	3508      	adds	r5, #8
 8042eaa:	2d0c      	cmp	r5, #12
 8042eac:	bf38      	it	cc
 8042eae:	250c      	movcc	r5, #12
 8042eb0:	2d00      	cmp	r5, #0
 8042eb2:	4606      	mov	r6, r0
 8042eb4:	db01      	blt.n	8042eba <_malloc_r+0x1a>
 8042eb6:	42a9      	cmp	r1, r5
 8042eb8:	d903      	bls.n	8042ec2 <_malloc_r+0x22>
 8042eba:	230c      	movs	r3, #12
 8042ebc:	6033      	str	r3, [r6, #0]
 8042ebe:	2000      	movs	r0, #0
 8042ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042ec2:	f000 fda3 	bl	8043a0c <__malloc_lock>
 8042ec6:	4921      	ldr	r1, [pc, #132]	; (8042f4c <_malloc_r+0xac>)
 8042ec8:	680a      	ldr	r2, [r1, #0]
 8042eca:	4614      	mov	r4, r2
 8042ecc:	b99c      	cbnz	r4, 8042ef6 <_malloc_r+0x56>
 8042ece:	4f20      	ldr	r7, [pc, #128]	; (8042f50 <_malloc_r+0xb0>)
 8042ed0:	683b      	ldr	r3, [r7, #0]
 8042ed2:	b923      	cbnz	r3, 8042ede <_malloc_r+0x3e>
 8042ed4:	4621      	mov	r1, r4
 8042ed6:	4630      	mov	r0, r6
 8042ed8:	f000 fb2a 	bl	8043530 <_sbrk_r>
 8042edc:	6038      	str	r0, [r7, #0]
 8042ede:	4629      	mov	r1, r5
 8042ee0:	4630      	mov	r0, r6
 8042ee2:	f000 fb25 	bl	8043530 <_sbrk_r>
 8042ee6:	1c43      	adds	r3, r0, #1
 8042ee8:	d123      	bne.n	8042f32 <_malloc_r+0x92>
 8042eea:	230c      	movs	r3, #12
 8042eec:	6033      	str	r3, [r6, #0]
 8042eee:	4630      	mov	r0, r6
 8042ef0:	f000 fd92 	bl	8043a18 <__malloc_unlock>
 8042ef4:	e7e3      	b.n	8042ebe <_malloc_r+0x1e>
 8042ef6:	6823      	ldr	r3, [r4, #0]
 8042ef8:	1b5b      	subs	r3, r3, r5
 8042efa:	d417      	bmi.n	8042f2c <_malloc_r+0x8c>
 8042efc:	2b0b      	cmp	r3, #11
 8042efe:	d903      	bls.n	8042f08 <_malloc_r+0x68>
 8042f00:	6023      	str	r3, [r4, #0]
 8042f02:	441c      	add	r4, r3
 8042f04:	6025      	str	r5, [r4, #0]
 8042f06:	e004      	b.n	8042f12 <_malloc_r+0x72>
 8042f08:	6863      	ldr	r3, [r4, #4]
 8042f0a:	42a2      	cmp	r2, r4
 8042f0c:	bf0c      	ite	eq
 8042f0e:	600b      	streq	r3, [r1, #0]
 8042f10:	6053      	strne	r3, [r2, #4]
 8042f12:	4630      	mov	r0, r6
 8042f14:	f000 fd80 	bl	8043a18 <__malloc_unlock>
 8042f18:	f104 000b 	add.w	r0, r4, #11
 8042f1c:	1d23      	adds	r3, r4, #4
 8042f1e:	f020 0007 	bic.w	r0, r0, #7
 8042f22:	1ac2      	subs	r2, r0, r3
 8042f24:	d0cc      	beq.n	8042ec0 <_malloc_r+0x20>
 8042f26:	1a1b      	subs	r3, r3, r0
 8042f28:	50a3      	str	r3, [r4, r2]
 8042f2a:	e7c9      	b.n	8042ec0 <_malloc_r+0x20>
 8042f2c:	4622      	mov	r2, r4
 8042f2e:	6864      	ldr	r4, [r4, #4]
 8042f30:	e7cc      	b.n	8042ecc <_malloc_r+0x2c>
 8042f32:	1cc4      	adds	r4, r0, #3
 8042f34:	f024 0403 	bic.w	r4, r4, #3
 8042f38:	42a0      	cmp	r0, r4
 8042f3a:	d0e3      	beq.n	8042f04 <_malloc_r+0x64>
 8042f3c:	1a21      	subs	r1, r4, r0
 8042f3e:	4630      	mov	r0, r6
 8042f40:	f000 faf6 	bl	8043530 <_sbrk_r>
 8042f44:	3001      	adds	r0, #1
 8042f46:	d1dd      	bne.n	8042f04 <_malloc_r+0x64>
 8042f48:	e7cf      	b.n	8042eea <_malloc_r+0x4a>
 8042f4a:	bf00      	nop
 8042f4c:	20000090 	.word	0x20000090
 8042f50:	20000094 	.word	0x20000094

08042f54 <__sfputc_r>:
 8042f54:	6893      	ldr	r3, [r2, #8]
 8042f56:	3b01      	subs	r3, #1
 8042f58:	2b00      	cmp	r3, #0
 8042f5a:	b410      	push	{r4}
 8042f5c:	6093      	str	r3, [r2, #8]
 8042f5e:	da08      	bge.n	8042f72 <__sfputc_r+0x1e>
 8042f60:	6994      	ldr	r4, [r2, #24]
 8042f62:	42a3      	cmp	r3, r4
 8042f64:	db01      	blt.n	8042f6a <__sfputc_r+0x16>
 8042f66:	290a      	cmp	r1, #10
 8042f68:	d103      	bne.n	8042f72 <__sfputc_r+0x1e>
 8042f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8042f6e:	f000 bb33 	b.w	80435d8 <__swbuf_r>
 8042f72:	6813      	ldr	r3, [r2, #0]
 8042f74:	1c58      	adds	r0, r3, #1
 8042f76:	6010      	str	r0, [r2, #0]
 8042f78:	7019      	strb	r1, [r3, #0]
 8042f7a:	4608      	mov	r0, r1
 8042f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8042f80:	4770      	bx	lr

08042f82 <__sfputs_r>:
 8042f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042f84:	4606      	mov	r6, r0
 8042f86:	460f      	mov	r7, r1
 8042f88:	4614      	mov	r4, r2
 8042f8a:	18d5      	adds	r5, r2, r3
 8042f8c:	42ac      	cmp	r4, r5
 8042f8e:	d101      	bne.n	8042f94 <__sfputs_r+0x12>
 8042f90:	2000      	movs	r0, #0
 8042f92:	e007      	b.n	8042fa4 <__sfputs_r+0x22>
 8042f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8042f98:	463a      	mov	r2, r7
 8042f9a:	4630      	mov	r0, r6
 8042f9c:	f7ff ffda 	bl	8042f54 <__sfputc_r>
 8042fa0:	1c43      	adds	r3, r0, #1
 8042fa2:	d1f3      	bne.n	8042f8c <__sfputs_r+0xa>
 8042fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08042fa8 <_vfiprintf_r>:
 8042fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042fac:	460d      	mov	r5, r1
 8042fae:	b09d      	sub	sp, #116	; 0x74
 8042fb0:	4614      	mov	r4, r2
 8042fb2:	4698      	mov	r8, r3
 8042fb4:	4606      	mov	r6, r0
 8042fb6:	b118      	cbz	r0, 8042fc0 <_vfiprintf_r+0x18>
 8042fb8:	6983      	ldr	r3, [r0, #24]
 8042fba:	b90b      	cbnz	r3, 8042fc0 <_vfiprintf_r+0x18>
 8042fbc:	f7ff fed0 	bl	8042d60 <__sinit>
 8042fc0:	4b89      	ldr	r3, [pc, #548]	; (80431e8 <_vfiprintf_r+0x240>)
 8042fc2:	429d      	cmp	r5, r3
 8042fc4:	d11b      	bne.n	8042ffe <_vfiprintf_r+0x56>
 8042fc6:	6875      	ldr	r5, [r6, #4]
 8042fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8042fca:	07d9      	lsls	r1, r3, #31
 8042fcc:	d405      	bmi.n	8042fda <_vfiprintf_r+0x32>
 8042fce:	89ab      	ldrh	r3, [r5, #12]
 8042fd0:	059a      	lsls	r2, r3, #22
 8042fd2:	d402      	bmi.n	8042fda <_vfiprintf_r+0x32>
 8042fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8042fd6:	f7ff ff61 	bl	8042e9c <__retarget_lock_acquire_recursive>
 8042fda:	89ab      	ldrh	r3, [r5, #12]
 8042fdc:	071b      	lsls	r3, r3, #28
 8042fde:	d501      	bpl.n	8042fe4 <_vfiprintf_r+0x3c>
 8042fe0:	692b      	ldr	r3, [r5, #16]
 8042fe2:	b9eb      	cbnz	r3, 8043020 <_vfiprintf_r+0x78>
 8042fe4:	4629      	mov	r1, r5
 8042fe6:	4630      	mov	r0, r6
 8042fe8:	f000 fb5a 	bl	80436a0 <__swsetup_r>
 8042fec:	b1c0      	cbz	r0, 8043020 <_vfiprintf_r+0x78>
 8042fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8042ff0:	07dc      	lsls	r4, r3, #31
 8042ff2:	d50e      	bpl.n	8043012 <_vfiprintf_r+0x6a>
 8042ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8042ff8:	b01d      	add	sp, #116	; 0x74
 8042ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042ffe:	4b7b      	ldr	r3, [pc, #492]	; (80431ec <_vfiprintf_r+0x244>)
 8043000:	429d      	cmp	r5, r3
 8043002:	d101      	bne.n	8043008 <_vfiprintf_r+0x60>
 8043004:	68b5      	ldr	r5, [r6, #8]
 8043006:	e7df      	b.n	8042fc8 <_vfiprintf_r+0x20>
 8043008:	4b79      	ldr	r3, [pc, #484]	; (80431f0 <_vfiprintf_r+0x248>)
 804300a:	429d      	cmp	r5, r3
 804300c:	bf08      	it	eq
 804300e:	68f5      	ldreq	r5, [r6, #12]
 8043010:	e7da      	b.n	8042fc8 <_vfiprintf_r+0x20>
 8043012:	89ab      	ldrh	r3, [r5, #12]
 8043014:	0598      	lsls	r0, r3, #22
 8043016:	d4ed      	bmi.n	8042ff4 <_vfiprintf_r+0x4c>
 8043018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804301a:	f7ff ff40 	bl	8042e9e <__retarget_lock_release_recursive>
 804301e:	e7e9      	b.n	8042ff4 <_vfiprintf_r+0x4c>
 8043020:	2300      	movs	r3, #0
 8043022:	9309      	str	r3, [sp, #36]	; 0x24
 8043024:	2320      	movs	r3, #32
 8043026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804302a:	f8cd 800c 	str.w	r8, [sp, #12]
 804302e:	2330      	movs	r3, #48	; 0x30
 8043030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80431f4 <_vfiprintf_r+0x24c>
 8043034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8043038:	f04f 0901 	mov.w	r9, #1
 804303c:	4623      	mov	r3, r4
 804303e:	469a      	mov	sl, r3
 8043040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8043044:	b10a      	cbz	r2, 804304a <_vfiprintf_r+0xa2>
 8043046:	2a25      	cmp	r2, #37	; 0x25
 8043048:	d1f9      	bne.n	804303e <_vfiprintf_r+0x96>
 804304a:	ebba 0b04 	subs.w	fp, sl, r4
 804304e:	d00b      	beq.n	8043068 <_vfiprintf_r+0xc0>
 8043050:	465b      	mov	r3, fp
 8043052:	4622      	mov	r2, r4
 8043054:	4629      	mov	r1, r5
 8043056:	4630      	mov	r0, r6
 8043058:	f7ff ff93 	bl	8042f82 <__sfputs_r>
 804305c:	3001      	adds	r0, #1
 804305e:	f000 80aa 	beq.w	80431b6 <_vfiprintf_r+0x20e>
 8043062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8043064:	445a      	add	r2, fp
 8043066:	9209      	str	r2, [sp, #36]	; 0x24
 8043068:	f89a 3000 	ldrb.w	r3, [sl]
 804306c:	2b00      	cmp	r3, #0
 804306e:	f000 80a2 	beq.w	80431b6 <_vfiprintf_r+0x20e>
 8043072:	2300      	movs	r3, #0
 8043074:	f04f 32ff 	mov.w	r2, #4294967295
 8043078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804307c:	f10a 0a01 	add.w	sl, sl, #1
 8043080:	9304      	str	r3, [sp, #16]
 8043082:	9307      	str	r3, [sp, #28]
 8043084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8043088:	931a      	str	r3, [sp, #104]	; 0x68
 804308a:	4654      	mov	r4, sl
 804308c:	2205      	movs	r2, #5
 804308e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043092:	4858      	ldr	r0, [pc, #352]	; (80431f4 <_vfiprintf_r+0x24c>)
 8043094:	f7fd f8d4 	bl	8040240 <memchr>
 8043098:	9a04      	ldr	r2, [sp, #16]
 804309a:	b9d8      	cbnz	r0, 80430d4 <_vfiprintf_r+0x12c>
 804309c:	06d1      	lsls	r1, r2, #27
 804309e:	bf44      	itt	mi
 80430a0:	2320      	movmi	r3, #32
 80430a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80430a6:	0713      	lsls	r3, r2, #28
 80430a8:	bf44      	itt	mi
 80430aa:	232b      	movmi	r3, #43	; 0x2b
 80430ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80430b0:	f89a 3000 	ldrb.w	r3, [sl]
 80430b4:	2b2a      	cmp	r3, #42	; 0x2a
 80430b6:	d015      	beq.n	80430e4 <_vfiprintf_r+0x13c>
 80430b8:	9a07      	ldr	r2, [sp, #28]
 80430ba:	4654      	mov	r4, sl
 80430bc:	2000      	movs	r0, #0
 80430be:	f04f 0c0a 	mov.w	ip, #10
 80430c2:	4621      	mov	r1, r4
 80430c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80430c8:	3b30      	subs	r3, #48	; 0x30
 80430ca:	2b09      	cmp	r3, #9
 80430cc:	d94e      	bls.n	804316c <_vfiprintf_r+0x1c4>
 80430ce:	b1b0      	cbz	r0, 80430fe <_vfiprintf_r+0x156>
 80430d0:	9207      	str	r2, [sp, #28]
 80430d2:	e014      	b.n	80430fe <_vfiprintf_r+0x156>
 80430d4:	eba0 0308 	sub.w	r3, r0, r8
 80430d8:	fa09 f303 	lsl.w	r3, r9, r3
 80430dc:	4313      	orrs	r3, r2
 80430de:	9304      	str	r3, [sp, #16]
 80430e0:	46a2      	mov	sl, r4
 80430e2:	e7d2      	b.n	804308a <_vfiprintf_r+0xe2>
 80430e4:	9b03      	ldr	r3, [sp, #12]
 80430e6:	1d19      	adds	r1, r3, #4
 80430e8:	681b      	ldr	r3, [r3, #0]
 80430ea:	9103      	str	r1, [sp, #12]
 80430ec:	2b00      	cmp	r3, #0
 80430ee:	bfbb      	ittet	lt
 80430f0:	425b      	neglt	r3, r3
 80430f2:	f042 0202 	orrlt.w	r2, r2, #2
 80430f6:	9307      	strge	r3, [sp, #28]
 80430f8:	9307      	strlt	r3, [sp, #28]
 80430fa:	bfb8      	it	lt
 80430fc:	9204      	strlt	r2, [sp, #16]
 80430fe:	7823      	ldrb	r3, [r4, #0]
 8043100:	2b2e      	cmp	r3, #46	; 0x2e
 8043102:	d10c      	bne.n	804311e <_vfiprintf_r+0x176>
 8043104:	7863      	ldrb	r3, [r4, #1]
 8043106:	2b2a      	cmp	r3, #42	; 0x2a
 8043108:	d135      	bne.n	8043176 <_vfiprintf_r+0x1ce>
 804310a:	9b03      	ldr	r3, [sp, #12]
 804310c:	1d1a      	adds	r2, r3, #4
 804310e:	681b      	ldr	r3, [r3, #0]
 8043110:	9203      	str	r2, [sp, #12]
 8043112:	2b00      	cmp	r3, #0
 8043114:	bfb8      	it	lt
 8043116:	f04f 33ff 	movlt.w	r3, #4294967295
 804311a:	3402      	adds	r4, #2
 804311c:	9305      	str	r3, [sp, #20]
 804311e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8043204 <_vfiprintf_r+0x25c>
 8043122:	7821      	ldrb	r1, [r4, #0]
 8043124:	2203      	movs	r2, #3
 8043126:	4650      	mov	r0, sl
 8043128:	f7fd f88a 	bl	8040240 <memchr>
 804312c:	b140      	cbz	r0, 8043140 <_vfiprintf_r+0x198>
 804312e:	2340      	movs	r3, #64	; 0x40
 8043130:	eba0 000a 	sub.w	r0, r0, sl
 8043134:	fa03 f000 	lsl.w	r0, r3, r0
 8043138:	9b04      	ldr	r3, [sp, #16]
 804313a:	4303      	orrs	r3, r0
 804313c:	3401      	adds	r4, #1
 804313e:	9304      	str	r3, [sp, #16]
 8043140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043144:	482c      	ldr	r0, [pc, #176]	; (80431f8 <_vfiprintf_r+0x250>)
 8043146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804314a:	2206      	movs	r2, #6
 804314c:	f7fd f878 	bl	8040240 <memchr>
 8043150:	2800      	cmp	r0, #0
 8043152:	d03f      	beq.n	80431d4 <_vfiprintf_r+0x22c>
 8043154:	4b29      	ldr	r3, [pc, #164]	; (80431fc <_vfiprintf_r+0x254>)
 8043156:	bb1b      	cbnz	r3, 80431a0 <_vfiprintf_r+0x1f8>
 8043158:	9b03      	ldr	r3, [sp, #12]
 804315a:	3307      	adds	r3, #7
 804315c:	f023 0307 	bic.w	r3, r3, #7
 8043160:	3308      	adds	r3, #8
 8043162:	9303      	str	r3, [sp, #12]
 8043164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043166:	443b      	add	r3, r7
 8043168:	9309      	str	r3, [sp, #36]	; 0x24
 804316a:	e767      	b.n	804303c <_vfiprintf_r+0x94>
 804316c:	fb0c 3202 	mla	r2, ip, r2, r3
 8043170:	460c      	mov	r4, r1
 8043172:	2001      	movs	r0, #1
 8043174:	e7a5      	b.n	80430c2 <_vfiprintf_r+0x11a>
 8043176:	2300      	movs	r3, #0
 8043178:	3401      	adds	r4, #1
 804317a:	9305      	str	r3, [sp, #20]
 804317c:	4619      	mov	r1, r3
 804317e:	f04f 0c0a 	mov.w	ip, #10
 8043182:	4620      	mov	r0, r4
 8043184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8043188:	3a30      	subs	r2, #48	; 0x30
 804318a:	2a09      	cmp	r2, #9
 804318c:	d903      	bls.n	8043196 <_vfiprintf_r+0x1ee>
 804318e:	2b00      	cmp	r3, #0
 8043190:	d0c5      	beq.n	804311e <_vfiprintf_r+0x176>
 8043192:	9105      	str	r1, [sp, #20]
 8043194:	e7c3      	b.n	804311e <_vfiprintf_r+0x176>
 8043196:	fb0c 2101 	mla	r1, ip, r1, r2
 804319a:	4604      	mov	r4, r0
 804319c:	2301      	movs	r3, #1
 804319e:	e7f0      	b.n	8043182 <_vfiprintf_r+0x1da>
 80431a0:	ab03      	add	r3, sp, #12
 80431a2:	9300      	str	r3, [sp, #0]
 80431a4:	462a      	mov	r2, r5
 80431a6:	4b16      	ldr	r3, [pc, #88]	; (8043200 <_vfiprintf_r+0x258>)
 80431a8:	a904      	add	r1, sp, #16
 80431aa:	4630      	mov	r0, r6
 80431ac:	f3af 8000 	nop.w
 80431b0:	4607      	mov	r7, r0
 80431b2:	1c78      	adds	r0, r7, #1
 80431b4:	d1d6      	bne.n	8043164 <_vfiprintf_r+0x1bc>
 80431b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80431b8:	07d9      	lsls	r1, r3, #31
 80431ba:	d405      	bmi.n	80431c8 <_vfiprintf_r+0x220>
 80431bc:	89ab      	ldrh	r3, [r5, #12]
 80431be:	059a      	lsls	r2, r3, #22
 80431c0:	d402      	bmi.n	80431c8 <_vfiprintf_r+0x220>
 80431c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80431c4:	f7ff fe6b 	bl	8042e9e <__retarget_lock_release_recursive>
 80431c8:	89ab      	ldrh	r3, [r5, #12]
 80431ca:	065b      	lsls	r3, r3, #25
 80431cc:	f53f af12 	bmi.w	8042ff4 <_vfiprintf_r+0x4c>
 80431d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80431d2:	e711      	b.n	8042ff8 <_vfiprintf_r+0x50>
 80431d4:	ab03      	add	r3, sp, #12
 80431d6:	9300      	str	r3, [sp, #0]
 80431d8:	462a      	mov	r2, r5
 80431da:	4b09      	ldr	r3, [pc, #36]	; (8043200 <_vfiprintf_r+0x258>)
 80431dc:	a904      	add	r1, sp, #16
 80431de:	4630      	mov	r0, r6
 80431e0:	f000 f880 	bl	80432e4 <_printf_i>
 80431e4:	e7e4      	b.n	80431b0 <_vfiprintf_r+0x208>
 80431e6:	bf00      	nop
 80431e8:	08043ba0 	.word	0x08043ba0
 80431ec:	08043bc0 	.word	0x08043bc0
 80431f0:	08043b80 	.word	0x08043b80
 80431f4:	08043be0 	.word	0x08043be0
 80431f8:	08043bea 	.word	0x08043bea
 80431fc:	00000000 	.word	0x00000000
 8043200:	08042f83 	.word	0x08042f83
 8043204:	08043be6 	.word	0x08043be6

08043208 <_printf_common>:
 8043208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804320c:	4616      	mov	r6, r2
 804320e:	4699      	mov	r9, r3
 8043210:	688a      	ldr	r2, [r1, #8]
 8043212:	690b      	ldr	r3, [r1, #16]
 8043214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8043218:	4293      	cmp	r3, r2
 804321a:	bfb8      	it	lt
 804321c:	4613      	movlt	r3, r2
 804321e:	6033      	str	r3, [r6, #0]
 8043220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8043224:	4607      	mov	r7, r0
 8043226:	460c      	mov	r4, r1
 8043228:	b10a      	cbz	r2, 804322e <_printf_common+0x26>
 804322a:	3301      	adds	r3, #1
 804322c:	6033      	str	r3, [r6, #0]
 804322e:	6823      	ldr	r3, [r4, #0]
 8043230:	0699      	lsls	r1, r3, #26
 8043232:	bf42      	ittt	mi
 8043234:	6833      	ldrmi	r3, [r6, #0]
 8043236:	3302      	addmi	r3, #2
 8043238:	6033      	strmi	r3, [r6, #0]
 804323a:	6825      	ldr	r5, [r4, #0]
 804323c:	f015 0506 	ands.w	r5, r5, #6
 8043240:	d106      	bne.n	8043250 <_printf_common+0x48>
 8043242:	f104 0a19 	add.w	sl, r4, #25
 8043246:	68e3      	ldr	r3, [r4, #12]
 8043248:	6832      	ldr	r2, [r6, #0]
 804324a:	1a9b      	subs	r3, r3, r2
 804324c:	42ab      	cmp	r3, r5
 804324e:	dc26      	bgt.n	804329e <_printf_common+0x96>
 8043250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8043254:	1e13      	subs	r3, r2, #0
 8043256:	6822      	ldr	r2, [r4, #0]
 8043258:	bf18      	it	ne
 804325a:	2301      	movne	r3, #1
 804325c:	0692      	lsls	r2, r2, #26
 804325e:	d42b      	bmi.n	80432b8 <_printf_common+0xb0>
 8043260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8043264:	4649      	mov	r1, r9
 8043266:	4638      	mov	r0, r7
 8043268:	47c0      	blx	r8
 804326a:	3001      	adds	r0, #1
 804326c:	d01e      	beq.n	80432ac <_printf_common+0xa4>
 804326e:	6823      	ldr	r3, [r4, #0]
 8043270:	68e5      	ldr	r5, [r4, #12]
 8043272:	6832      	ldr	r2, [r6, #0]
 8043274:	f003 0306 	and.w	r3, r3, #6
 8043278:	2b04      	cmp	r3, #4
 804327a:	bf08      	it	eq
 804327c:	1aad      	subeq	r5, r5, r2
 804327e:	68a3      	ldr	r3, [r4, #8]
 8043280:	6922      	ldr	r2, [r4, #16]
 8043282:	bf0c      	ite	eq
 8043284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8043288:	2500      	movne	r5, #0
 804328a:	4293      	cmp	r3, r2
 804328c:	bfc4      	itt	gt
 804328e:	1a9b      	subgt	r3, r3, r2
 8043290:	18ed      	addgt	r5, r5, r3
 8043292:	2600      	movs	r6, #0
 8043294:	341a      	adds	r4, #26
 8043296:	42b5      	cmp	r5, r6
 8043298:	d11a      	bne.n	80432d0 <_printf_common+0xc8>
 804329a:	2000      	movs	r0, #0
 804329c:	e008      	b.n	80432b0 <_printf_common+0xa8>
 804329e:	2301      	movs	r3, #1
 80432a0:	4652      	mov	r2, sl
 80432a2:	4649      	mov	r1, r9
 80432a4:	4638      	mov	r0, r7
 80432a6:	47c0      	blx	r8
 80432a8:	3001      	adds	r0, #1
 80432aa:	d103      	bne.n	80432b4 <_printf_common+0xac>
 80432ac:	f04f 30ff 	mov.w	r0, #4294967295
 80432b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80432b4:	3501      	adds	r5, #1
 80432b6:	e7c6      	b.n	8043246 <_printf_common+0x3e>
 80432b8:	18e1      	adds	r1, r4, r3
 80432ba:	1c5a      	adds	r2, r3, #1
 80432bc:	2030      	movs	r0, #48	; 0x30
 80432be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80432c2:	4422      	add	r2, r4
 80432c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80432c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80432cc:	3302      	adds	r3, #2
 80432ce:	e7c7      	b.n	8043260 <_printf_common+0x58>
 80432d0:	2301      	movs	r3, #1
 80432d2:	4622      	mov	r2, r4
 80432d4:	4649      	mov	r1, r9
 80432d6:	4638      	mov	r0, r7
 80432d8:	47c0      	blx	r8
 80432da:	3001      	adds	r0, #1
 80432dc:	d0e6      	beq.n	80432ac <_printf_common+0xa4>
 80432de:	3601      	adds	r6, #1
 80432e0:	e7d9      	b.n	8043296 <_printf_common+0x8e>
	...

080432e4 <_printf_i>:
 80432e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80432e8:	460c      	mov	r4, r1
 80432ea:	4691      	mov	r9, r2
 80432ec:	7e27      	ldrb	r7, [r4, #24]
 80432ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80432f0:	2f78      	cmp	r7, #120	; 0x78
 80432f2:	4680      	mov	r8, r0
 80432f4:	469a      	mov	sl, r3
 80432f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80432fa:	d807      	bhi.n	804330c <_printf_i+0x28>
 80432fc:	2f62      	cmp	r7, #98	; 0x62
 80432fe:	d80a      	bhi.n	8043316 <_printf_i+0x32>
 8043300:	2f00      	cmp	r7, #0
 8043302:	f000 80d8 	beq.w	80434b6 <_printf_i+0x1d2>
 8043306:	2f58      	cmp	r7, #88	; 0x58
 8043308:	f000 80a3 	beq.w	8043452 <_printf_i+0x16e>
 804330c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8043310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8043314:	e03a      	b.n	804338c <_printf_i+0xa8>
 8043316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804331a:	2b15      	cmp	r3, #21
 804331c:	d8f6      	bhi.n	804330c <_printf_i+0x28>
 804331e:	a001      	add	r0, pc, #4	; (adr r0, 8043324 <_printf_i+0x40>)
 8043320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8043324:	0804337d 	.word	0x0804337d
 8043328:	08043391 	.word	0x08043391
 804332c:	0804330d 	.word	0x0804330d
 8043330:	0804330d 	.word	0x0804330d
 8043334:	0804330d 	.word	0x0804330d
 8043338:	0804330d 	.word	0x0804330d
 804333c:	08043391 	.word	0x08043391
 8043340:	0804330d 	.word	0x0804330d
 8043344:	0804330d 	.word	0x0804330d
 8043348:	0804330d 	.word	0x0804330d
 804334c:	0804330d 	.word	0x0804330d
 8043350:	0804349d 	.word	0x0804349d
 8043354:	080433c1 	.word	0x080433c1
 8043358:	0804347f 	.word	0x0804347f
 804335c:	0804330d 	.word	0x0804330d
 8043360:	0804330d 	.word	0x0804330d
 8043364:	080434bf 	.word	0x080434bf
 8043368:	0804330d 	.word	0x0804330d
 804336c:	080433c1 	.word	0x080433c1
 8043370:	0804330d 	.word	0x0804330d
 8043374:	0804330d 	.word	0x0804330d
 8043378:	08043487 	.word	0x08043487
 804337c:	680b      	ldr	r3, [r1, #0]
 804337e:	1d1a      	adds	r2, r3, #4
 8043380:	681b      	ldr	r3, [r3, #0]
 8043382:	600a      	str	r2, [r1, #0]
 8043384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8043388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804338c:	2301      	movs	r3, #1
 804338e:	e0a3      	b.n	80434d8 <_printf_i+0x1f4>
 8043390:	6825      	ldr	r5, [r4, #0]
 8043392:	6808      	ldr	r0, [r1, #0]
 8043394:	062e      	lsls	r6, r5, #24
 8043396:	f100 0304 	add.w	r3, r0, #4
 804339a:	d50a      	bpl.n	80433b2 <_printf_i+0xce>
 804339c:	6805      	ldr	r5, [r0, #0]
 804339e:	600b      	str	r3, [r1, #0]
 80433a0:	2d00      	cmp	r5, #0
 80433a2:	da03      	bge.n	80433ac <_printf_i+0xc8>
 80433a4:	232d      	movs	r3, #45	; 0x2d
 80433a6:	426d      	negs	r5, r5
 80433a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80433ac:	485e      	ldr	r0, [pc, #376]	; (8043528 <_printf_i+0x244>)
 80433ae:	230a      	movs	r3, #10
 80433b0:	e019      	b.n	80433e6 <_printf_i+0x102>
 80433b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80433b6:	6805      	ldr	r5, [r0, #0]
 80433b8:	600b      	str	r3, [r1, #0]
 80433ba:	bf18      	it	ne
 80433bc:	b22d      	sxthne	r5, r5
 80433be:	e7ef      	b.n	80433a0 <_printf_i+0xbc>
 80433c0:	680b      	ldr	r3, [r1, #0]
 80433c2:	6825      	ldr	r5, [r4, #0]
 80433c4:	1d18      	adds	r0, r3, #4
 80433c6:	6008      	str	r0, [r1, #0]
 80433c8:	0628      	lsls	r0, r5, #24
 80433ca:	d501      	bpl.n	80433d0 <_printf_i+0xec>
 80433cc:	681d      	ldr	r5, [r3, #0]
 80433ce:	e002      	b.n	80433d6 <_printf_i+0xf2>
 80433d0:	0669      	lsls	r1, r5, #25
 80433d2:	d5fb      	bpl.n	80433cc <_printf_i+0xe8>
 80433d4:	881d      	ldrh	r5, [r3, #0]
 80433d6:	4854      	ldr	r0, [pc, #336]	; (8043528 <_printf_i+0x244>)
 80433d8:	2f6f      	cmp	r7, #111	; 0x6f
 80433da:	bf0c      	ite	eq
 80433dc:	2308      	moveq	r3, #8
 80433de:	230a      	movne	r3, #10
 80433e0:	2100      	movs	r1, #0
 80433e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80433e6:	6866      	ldr	r6, [r4, #4]
 80433e8:	60a6      	str	r6, [r4, #8]
 80433ea:	2e00      	cmp	r6, #0
 80433ec:	bfa2      	ittt	ge
 80433ee:	6821      	ldrge	r1, [r4, #0]
 80433f0:	f021 0104 	bicge.w	r1, r1, #4
 80433f4:	6021      	strge	r1, [r4, #0]
 80433f6:	b90d      	cbnz	r5, 80433fc <_printf_i+0x118>
 80433f8:	2e00      	cmp	r6, #0
 80433fa:	d04d      	beq.n	8043498 <_printf_i+0x1b4>
 80433fc:	4616      	mov	r6, r2
 80433fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8043402:	fb03 5711 	mls	r7, r3, r1, r5
 8043406:	5dc7      	ldrb	r7, [r0, r7]
 8043408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 804340c:	462f      	mov	r7, r5
 804340e:	42bb      	cmp	r3, r7
 8043410:	460d      	mov	r5, r1
 8043412:	d9f4      	bls.n	80433fe <_printf_i+0x11a>
 8043414:	2b08      	cmp	r3, #8
 8043416:	d10b      	bne.n	8043430 <_printf_i+0x14c>
 8043418:	6823      	ldr	r3, [r4, #0]
 804341a:	07df      	lsls	r7, r3, #31
 804341c:	d508      	bpl.n	8043430 <_printf_i+0x14c>
 804341e:	6923      	ldr	r3, [r4, #16]
 8043420:	6861      	ldr	r1, [r4, #4]
 8043422:	4299      	cmp	r1, r3
 8043424:	bfde      	ittt	le
 8043426:	2330      	movle	r3, #48	; 0x30
 8043428:	f806 3c01 	strble.w	r3, [r6, #-1]
 804342c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8043430:	1b92      	subs	r2, r2, r6
 8043432:	6122      	str	r2, [r4, #16]
 8043434:	f8cd a000 	str.w	sl, [sp]
 8043438:	464b      	mov	r3, r9
 804343a:	aa03      	add	r2, sp, #12
 804343c:	4621      	mov	r1, r4
 804343e:	4640      	mov	r0, r8
 8043440:	f7ff fee2 	bl	8043208 <_printf_common>
 8043444:	3001      	adds	r0, #1
 8043446:	d14c      	bne.n	80434e2 <_printf_i+0x1fe>
 8043448:	f04f 30ff 	mov.w	r0, #4294967295
 804344c:	b004      	add	sp, #16
 804344e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043452:	4835      	ldr	r0, [pc, #212]	; (8043528 <_printf_i+0x244>)
 8043454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8043458:	6823      	ldr	r3, [r4, #0]
 804345a:	680e      	ldr	r6, [r1, #0]
 804345c:	061f      	lsls	r7, r3, #24
 804345e:	f856 5b04 	ldr.w	r5, [r6], #4
 8043462:	600e      	str	r6, [r1, #0]
 8043464:	d514      	bpl.n	8043490 <_printf_i+0x1ac>
 8043466:	07d9      	lsls	r1, r3, #31
 8043468:	bf44      	itt	mi
 804346a:	f043 0320 	orrmi.w	r3, r3, #32
 804346e:	6023      	strmi	r3, [r4, #0]
 8043470:	b91d      	cbnz	r5, 804347a <_printf_i+0x196>
 8043472:	6823      	ldr	r3, [r4, #0]
 8043474:	f023 0320 	bic.w	r3, r3, #32
 8043478:	6023      	str	r3, [r4, #0]
 804347a:	2310      	movs	r3, #16
 804347c:	e7b0      	b.n	80433e0 <_printf_i+0xfc>
 804347e:	6823      	ldr	r3, [r4, #0]
 8043480:	f043 0320 	orr.w	r3, r3, #32
 8043484:	6023      	str	r3, [r4, #0]
 8043486:	2378      	movs	r3, #120	; 0x78
 8043488:	4828      	ldr	r0, [pc, #160]	; (804352c <_printf_i+0x248>)
 804348a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804348e:	e7e3      	b.n	8043458 <_printf_i+0x174>
 8043490:	065e      	lsls	r6, r3, #25
 8043492:	bf48      	it	mi
 8043494:	b2ad      	uxthmi	r5, r5
 8043496:	e7e6      	b.n	8043466 <_printf_i+0x182>
 8043498:	4616      	mov	r6, r2
 804349a:	e7bb      	b.n	8043414 <_printf_i+0x130>
 804349c:	680b      	ldr	r3, [r1, #0]
 804349e:	6826      	ldr	r6, [r4, #0]
 80434a0:	6960      	ldr	r0, [r4, #20]
 80434a2:	1d1d      	adds	r5, r3, #4
 80434a4:	600d      	str	r5, [r1, #0]
 80434a6:	0635      	lsls	r5, r6, #24
 80434a8:	681b      	ldr	r3, [r3, #0]
 80434aa:	d501      	bpl.n	80434b0 <_printf_i+0x1cc>
 80434ac:	6018      	str	r0, [r3, #0]
 80434ae:	e002      	b.n	80434b6 <_printf_i+0x1d2>
 80434b0:	0671      	lsls	r1, r6, #25
 80434b2:	d5fb      	bpl.n	80434ac <_printf_i+0x1c8>
 80434b4:	8018      	strh	r0, [r3, #0]
 80434b6:	2300      	movs	r3, #0
 80434b8:	6123      	str	r3, [r4, #16]
 80434ba:	4616      	mov	r6, r2
 80434bc:	e7ba      	b.n	8043434 <_printf_i+0x150>
 80434be:	680b      	ldr	r3, [r1, #0]
 80434c0:	1d1a      	adds	r2, r3, #4
 80434c2:	600a      	str	r2, [r1, #0]
 80434c4:	681e      	ldr	r6, [r3, #0]
 80434c6:	6862      	ldr	r2, [r4, #4]
 80434c8:	2100      	movs	r1, #0
 80434ca:	4630      	mov	r0, r6
 80434cc:	f7fc feb8 	bl	8040240 <memchr>
 80434d0:	b108      	cbz	r0, 80434d6 <_printf_i+0x1f2>
 80434d2:	1b80      	subs	r0, r0, r6
 80434d4:	6060      	str	r0, [r4, #4]
 80434d6:	6863      	ldr	r3, [r4, #4]
 80434d8:	6123      	str	r3, [r4, #16]
 80434da:	2300      	movs	r3, #0
 80434dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80434e0:	e7a8      	b.n	8043434 <_printf_i+0x150>
 80434e2:	6923      	ldr	r3, [r4, #16]
 80434e4:	4632      	mov	r2, r6
 80434e6:	4649      	mov	r1, r9
 80434e8:	4640      	mov	r0, r8
 80434ea:	47d0      	blx	sl
 80434ec:	3001      	adds	r0, #1
 80434ee:	d0ab      	beq.n	8043448 <_printf_i+0x164>
 80434f0:	6823      	ldr	r3, [r4, #0]
 80434f2:	079b      	lsls	r3, r3, #30
 80434f4:	d413      	bmi.n	804351e <_printf_i+0x23a>
 80434f6:	68e0      	ldr	r0, [r4, #12]
 80434f8:	9b03      	ldr	r3, [sp, #12]
 80434fa:	4298      	cmp	r0, r3
 80434fc:	bfb8      	it	lt
 80434fe:	4618      	movlt	r0, r3
 8043500:	e7a4      	b.n	804344c <_printf_i+0x168>
 8043502:	2301      	movs	r3, #1
 8043504:	4632      	mov	r2, r6
 8043506:	4649      	mov	r1, r9
 8043508:	4640      	mov	r0, r8
 804350a:	47d0      	blx	sl
 804350c:	3001      	adds	r0, #1
 804350e:	d09b      	beq.n	8043448 <_printf_i+0x164>
 8043510:	3501      	adds	r5, #1
 8043512:	68e3      	ldr	r3, [r4, #12]
 8043514:	9903      	ldr	r1, [sp, #12]
 8043516:	1a5b      	subs	r3, r3, r1
 8043518:	42ab      	cmp	r3, r5
 804351a:	dcf2      	bgt.n	8043502 <_printf_i+0x21e>
 804351c:	e7eb      	b.n	80434f6 <_printf_i+0x212>
 804351e:	2500      	movs	r5, #0
 8043520:	f104 0619 	add.w	r6, r4, #25
 8043524:	e7f5      	b.n	8043512 <_printf_i+0x22e>
 8043526:	bf00      	nop
 8043528:	08043bf1 	.word	0x08043bf1
 804352c:	08043c02 	.word	0x08043c02

08043530 <_sbrk_r>:
 8043530:	b538      	push	{r3, r4, r5, lr}
 8043532:	4d06      	ldr	r5, [pc, #24]	; (804354c <_sbrk_r+0x1c>)
 8043534:	2300      	movs	r3, #0
 8043536:	4604      	mov	r4, r0
 8043538:	4608      	mov	r0, r1
 804353a:	602b      	str	r3, [r5, #0]
 804353c:	f7fd fa74 	bl	8040a28 <_sbrk>
 8043540:	1c43      	adds	r3, r0, #1
 8043542:	d102      	bne.n	804354a <_sbrk_r+0x1a>
 8043544:	682b      	ldr	r3, [r5, #0]
 8043546:	b103      	cbz	r3, 804354a <_sbrk_r+0x1a>
 8043548:	6023      	str	r3, [r4, #0]
 804354a:	bd38      	pop	{r3, r4, r5, pc}
 804354c:	2000012c 	.word	0x2000012c

08043550 <__sread>:
 8043550:	b510      	push	{r4, lr}
 8043552:	460c      	mov	r4, r1
 8043554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043558:	f000 fab4 	bl	8043ac4 <_read_r>
 804355c:	2800      	cmp	r0, #0
 804355e:	bfab      	itete	ge
 8043560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8043562:	89a3      	ldrhlt	r3, [r4, #12]
 8043564:	181b      	addge	r3, r3, r0
 8043566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804356a:	bfac      	ite	ge
 804356c:	6563      	strge	r3, [r4, #84]	; 0x54
 804356e:	81a3      	strhlt	r3, [r4, #12]
 8043570:	bd10      	pop	{r4, pc}

08043572 <__swrite>:
 8043572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8043576:	461f      	mov	r7, r3
 8043578:	898b      	ldrh	r3, [r1, #12]
 804357a:	05db      	lsls	r3, r3, #23
 804357c:	4605      	mov	r5, r0
 804357e:	460c      	mov	r4, r1
 8043580:	4616      	mov	r6, r2
 8043582:	d505      	bpl.n	8043590 <__swrite+0x1e>
 8043584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043588:	2302      	movs	r3, #2
 804358a:	2200      	movs	r2, #0
 804358c:	f000 f9c8 	bl	8043920 <_lseek_r>
 8043590:	89a3      	ldrh	r3, [r4, #12]
 8043592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8043596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804359a:	81a3      	strh	r3, [r4, #12]
 804359c:	4632      	mov	r2, r6
 804359e:	463b      	mov	r3, r7
 80435a0:	4628      	mov	r0, r5
 80435a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80435a6:	f000 b869 	b.w	804367c <_write_r>

080435aa <__sseek>:
 80435aa:	b510      	push	{r4, lr}
 80435ac:	460c      	mov	r4, r1
 80435ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80435b2:	f000 f9b5 	bl	8043920 <_lseek_r>
 80435b6:	1c43      	adds	r3, r0, #1
 80435b8:	89a3      	ldrh	r3, [r4, #12]
 80435ba:	bf15      	itete	ne
 80435bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80435be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80435c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80435c6:	81a3      	strheq	r3, [r4, #12]
 80435c8:	bf18      	it	ne
 80435ca:	81a3      	strhne	r3, [r4, #12]
 80435cc:	bd10      	pop	{r4, pc}

080435ce <__sclose>:
 80435ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80435d2:	f000 b8d3 	b.w	804377c <_close_r>
	...

080435d8 <__swbuf_r>:
 80435d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80435da:	460e      	mov	r6, r1
 80435dc:	4614      	mov	r4, r2
 80435de:	4605      	mov	r5, r0
 80435e0:	b118      	cbz	r0, 80435ea <__swbuf_r+0x12>
 80435e2:	6983      	ldr	r3, [r0, #24]
 80435e4:	b90b      	cbnz	r3, 80435ea <__swbuf_r+0x12>
 80435e6:	f7ff fbbb 	bl	8042d60 <__sinit>
 80435ea:	4b21      	ldr	r3, [pc, #132]	; (8043670 <__swbuf_r+0x98>)
 80435ec:	429c      	cmp	r4, r3
 80435ee:	d12b      	bne.n	8043648 <__swbuf_r+0x70>
 80435f0:	686c      	ldr	r4, [r5, #4]
 80435f2:	69a3      	ldr	r3, [r4, #24]
 80435f4:	60a3      	str	r3, [r4, #8]
 80435f6:	89a3      	ldrh	r3, [r4, #12]
 80435f8:	071a      	lsls	r2, r3, #28
 80435fa:	d52f      	bpl.n	804365c <__swbuf_r+0x84>
 80435fc:	6923      	ldr	r3, [r4, #16]
 80435fe:	b36b      	cbz	r3, 804365c <__swbuf_r+0x84>
 8043600:	6923      	ldr	r3, [r4, #16]
 8043602:	6820      	ldr	r0, [r4, #0]
 8043604:	1ac0      	subs	r0, r0, r3
 8043606:	6963      	ldr	r3, [r4, #20]
 8043608:	b2f6      	uxtb	r6, r6
 804360a:	4283      	cmp	r3, r0
 804360c:	4637      	mov	r7, r6
 804360e:	dc04      	bgt.n	804361a <__swbuf_r+0x42>
 8043610:	4621      	mov	r1, r4
 8043612:	4628      	mov	r0, r5
 8043614:	f000 f948 	bl	80438a8 <_fflush_r>
 8043618:	bb30      	cbnz	r0, 8043668 <__swbuf_r+0x90>
 804361a:	68a3      	ldr	r3, [r4, #8]
 804361c:	3b01      	subs	r3, #1
 804361e:	60a3      	str	r3, [r4, #8]
 8043620:	6823      	ldr	r3, [r4, #0]
 8043622:	1c5a      	adds	r2, r3, #1
 8043624:	6022      	str	r2, [r4, #0]
 8043626:	701e      	strb	r6, [r3, #0]
 8043628:	6963      	ldr	r3, [r4, #20]
 804362a:	3001      	adds	r0, #1
 804362c:	4283      	cmp	r3, r0
 804362e:	d004      	beq.n	804363a <__swbuf_r+0x62>
 8043630:	89a3      	ldrh	r3, [r4, #12]
 8043632:	07db      	lsls	r3, r3, #31
 8043634:	d506      	bpl.n	8043644 <__swbuf_r+0x6c>
 8043636:	2e0a      	cmp	r6, #10
 8043638:	d104      	bne.n	8043644 <__swbuf_r+0x6c>
 804363a:	4621      	mov	r1, r4
 804363c:	4628      	mov	r0, r5
 804363e:	f000 f933 	bl	80438a8 <_fflush_r>
 8043642:	b988      	cbnz	r0, 8043668 <__swbuf_r+0x90>
 8043644:	4638      	mov	r0, r7
 8043646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043648:	4b0a      	ldr	r3, [pc, #40]	; (8043674 <__swbuf_r+0x9c>)
 804364a:	429c      	cmp	r4, r3
 804364c:	d101      	bne.n	8043652 <__swbuf_r+0x7a>
 804364e:	68ac      	ldr	r4, [r5, #8]
 8043650:	e7cf      	b.n	80435f2 <__swbuf_r+0x1a>
 8043652:	4b09      	ldr	r3, [pc, #36]	; (8043678 <__swbuf_r+0xa0>)
 8043654:	429c      	cmp	r4, r3
 8043656:	bf08      	it	eq
 8043658:	68ec      	ldreq	r4, [r5, #12]
 804365a:	e7ca      	b.n	80435f2 <__swbuf_r+0x1a>
 804365c:	4621      	mov	r1, r4
 804365e:	4628      	mov	r0, r5
 8043660:	f000 f81e 	bl	80436a0 <__swsetup_r>
 8043664:	2800      	cmp	r0, #0
 8043666:	d0cb      	beq.n	8043600 <__swbuf_r+0x28>
 8043668:	f04f 37ff 	mov.w	r7, #4294967295
 804366c:	e7ea      	b.n	8043644 <__swbuf_r+0x6c>
 804366e:	bf00      	nop
 8043670:	08043ba0 	.word	0x08043ba0
 8043674:	08043bc0 	.word	0x08043bc0
 8043678:	08043b80 	.word	0x08043b80

0804367c <_write_r>:
 804367c:	b538      	push	{r3, r4, r5, lr}
 804367e:	4d07      	ldr	r5, [pc, #28]	; (804369c <_write_r+0x20>)
 8043680:	4604      	mov	r4, r0
 8043682:	4608      	mov	r0, r1
 8043684:	4611      	mov	r1, r2
 8043686:	2200      	movs	r2, #0
 8043688:	602a      	str	r2, [r5, #0]
 804368a:	461a      	mov	r2, r3
 804368c:	f7fd f97b 	bl	8040986 <_write>
 8043690:	1c43      	adds	r3, r0, #1
 8043692:	d102      	bne.n	804369a <_write_r+0x1e>
 8043694:	682b      	ldr	r3, [r5, #0]
 8043696:	b103      	cbz	r3, 804369a <_write_r+0x1e>
 8043698:	6023      	str	r3, [r4, #0]
 804369a:	bd38      	pop	{r3, r4, r5, pc}
 804369c:	2000012c 	.word	0x2000012c

080436a0 <__swsetup_r>:
 80436a0:	4b32      	ldr	r3, [pc, #200]	; (804376c <__swsetup_r+0xcc>)
 80436a2:	b570      	push	{r4, r5, r6, lr}
 80436a4:	681d      	ldr	r5, [r3, #0]
 80436a6:	4606      	mov	r6, r0
 80436a8:	460c      	mov	r4, r1
 80436aa:	b125      	cbz	r5, 80436b6 <__swsetup_r+0x16>
 80436ac:	69ab      	ldr	r3, [r5, #24]
 80436ae:	b913      	cbnz	r3, 80436b6 <__swsetup_r+0x16>
 80436b0:	4628      	mov	r0, r5
 80436b2:	f7ff fb55 	bl	8042d60 <__sinit>
 80436b6:	4b2e      	ldr	r3, [pc, #184]	; (8043770 <__swsetup_r+0xd0>)
 80436b8:	429c      	cmp	r4, r3
 80436ba:	d10f      	bne.n	80436dc <__swsetup_r+0x3c>
 80436bc:	686c      	ldr	r4, [r5, #4]
 80436be:	89a3      	ldrh	r3, [r4, #12]
 80436c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80436c4:	0719      	lsls	r1, r3, #28
 80436c6:	d42c      	bmi.n	8043722 <__swsetup_r+0x82>
 80436c8:	06dd      	lsls	r5, r3, #27
 80436ca:	d411      	bmi.n	80436f0 <__swsetup_r+0x50>
 80436cc:	2309      	movs	r3, #9
 80436ce:	6033      	str	r3, [r6, #0]
 80436d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80436d4:	81a3      	strh	r3, [r4, #12]
 80436d6:	f04f 30ff 	mov.w	r0, #4294967295
 80436da:	e03e      	b.n	804375a <__swsetup_r+0xba>
 80436dc:	4b25      	ldr	r3, [pc, #148]	; (8043774 <__swsetup_r+0xd4>)
 80436de:	429c      	cmp	r4, r3
 80436e0:	d101      	bne.n	80436e6 <__swsetup_r+0x46>
 80436e2:	68ac      	ldr	r4, [r5, #8]
 80436e4:	e7eb      	b.n	80436be <__swsetup_r+0x1e>
 80436e6:	4b24      	ldr	r3, [pc, #144]	; (8043778 <__swsetup_r+0xd8>)
 80436e8:	429c      	cmp	r4, r3
 80436ea:	bf08      	it	eq
 80436ec:	68ec      	ldreq	r4, [r5, #12]
 80436ee:	e7e6      	b.n	80436be <__swsetup_r+0x1e>
 80436f0:	0758      	lsls	r0, r3, #29
 80436f2:	d512      	bpl.n	804371a <__swsetup_r+0x7a>
 80436f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80436f6:	b141      	cbz	r1, 804370a <__swsetup_r+0x6a>
 80436f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80436fc:	4299      	cmp	r1, r3
 80436fe:	d002      	beq.n	8043706 <__swsetup_r+0x66>
 8043700:	4630      	mov	r0, r6
 8043702:	f000 f98f 	bl	8043a24 <_free_r>
 8043706:	2300      	movs	r3, #0
 8043708:	6363      	str	r3, [r4, #52]	; 0x34
 804370a:	89a3      	ldrh	r3, [r4, #12]
 804370c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8043710:	81a3      	strh	r3, [r4, #12]
 8043712:	2300      	movs	r3, #0
 8043714:	6063      	str	r3, [r4, #4]
 8043716:	6923      	ldr	r3, [r4, #16]
 8043718:	6023      	str	r3, [r4, #0]
 804371a:	89a3      	ldrh	r3, [r4, #12]
 804371c:	f043 0308 	orr.w	r3, r3, #8
 8043720:	81a3      	strh	r3, [r4, #12]
 8043722:	6923      	ldr	r3, [r4, #16]
 8043724:	b94b      	cbnz	r3, 804373a <__swsetup_r+0x9a>
 8043726:	89a3      	ldrh	r3, [r4, #12]
 8043728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804372c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043730:	d003      	beq.n	804373a <__swsetup_r+0x9a>
 8043732:	4621      	mov	r1, r4
 8043734:	4630      	mov	r0, r6
 8043736:	f000 f929 	bl	804398c <__smakebuf_r>
 804373a:	89a0      	ldrh	r0, [r4, #12]
 804373c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8043740:	f010 0301 	ands.w	r3, r0, #1
 8043744:	d00a      	beq.n	804375c <__swsetup_r+0xbc>
 8043746:	2300      	movs	r3, #0
 8043748:	60a3      	str	r3, [r4, #8]
 804374a:	6963      	ldr	r3, [r4, #20]
 804374c:	425b      	negs	r3, r3
 804374e:	61a3      	str	r3, [r4, #24]
 8043750:	6923      	ldr	r3, [r4, #16]
 8043752:	b943      	cbnz	r3, 8043766 <__swsetup_r+0xc6>
 8043754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8043758:	d1ba      	bne.n	80436d0 <__swsetup_r+0x30>
 804375a:	bd70      	pop	{r4, r5, r6, pc}
 804375c:	0781      	lsls	r1, r0, #30
 804375e:	bf58      	it	pl
 8043760:	6963      	ldrpl	r3, [r4, #20]
 8043762:	60a3      	str	r3, [r4, #8]
 8043764:	e7f4      	b.n	8043750 <__swsetup_r+0xb0>
 8043766:	2000      	movs	r0, #0
 8043768:	e7f7      	b.n	804375a <__swsetup_r+0xba>
 804376a:	bf00      	nop
 804376c:	2000000c 	.word	0x2000000c
 8043770:	08043ba0 	.word	0x08043ba0
 8043774:	08043bc0 	.word	0x08043bc0
 8043778:	08043b80 	.word	0x08043b80

0804377c <_close_r>:
 804377c:	b538      	push	{r3, r4, r5, lr}
 804377e:	4d06      	ldr	r5, [pc, #24]	; (8043798 <_close_r+0x1c>)
 8043780:	2300      	movs	r3, #0
 8043782:	4604      	mov	r4, r0
 8043784:	4608      	mov	r0, r1
 8043786:	602b      	str	r3, [r5, #0]
 8043788:	f7fd f919 	bl	80409be <_close>
 804378c:	1c43      	adds	r3, r0, #1
 804378e:	d102      	bne.n	8043796 <_close_r+0x1a>
 8043790:	682b      	ldr	r3, [r5, #0]
 8043792:	b103      	cbz	r3, 8043796 <_close_r+0x1a>
 8043794:	6023      	str	r3, [r4, #0]
 8043796:	bd38      	pop	{r3, r4, r5, pc}
 8043798:	2000012c 	.word	0x2000012c

0804379c <__sflush_r>:
 804379c:	898a      	ldrh	r2, [r1, #12]
 804379e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80437a2:	4605      	mov	r5, r0
 80437a4:	0710      	lsls	r0, r2, #28
 80437a6:	460c      	mov	r4, r1
 80437a8:	d458      	bmi.n	804385c <__sflush_r+0xc0>
 80437aa:	684b      	ldr	r3, [r1, #4]
 80437ac:	2b00      	cmp	r3, #0
 80437ae:	dc05      	bgt.n	80437bc <__sflush_r+0x20>
 80437b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80437b2:	2b00      	cmp	r3, #0
 80437b4:	dc02      	bgt.n	80437bc <__sflush_r+0x20>
 80437b6:	2000      	movs	r0, #0
 80437b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80437bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80437be:	2e00      	cmp	r6, #0
 80437c0:	d0f9      	beq.n	80437b6 <__sflush_r+0x1a>
 80437c2:	2300      	movs	r3, #0
 80437c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80437c8:	682f      	ldr	r7, [r5, #0]
 80437ca:	602b      	str	r3, [r5, #0]
 80437cc:	d032      	beq.n	8043834 <__sflush_r+0x98>
 80437ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80437d0:	89a3      	ldrh	r3, [r4, #12]
 80437d2:	075a      	lsls	r2, r3, #29
 80437d4:	d505      	bpl.n	80437e2 <__sflush_r+0x46>
 80437d6:	6863      	ldr	r3, [r4, #4]
 80437d8:	1ac0      	subs	r0, r0, r3
 80437da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80437dc:	b10b      	cbz	r3, 80437e2 <__sflush_r+0x46>
 80437de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80437e0:	1ac0      	subs	r0, r0, r3
 80437e2:	2300      	movs	r3, #0
 80437e4:	4602      	mov	r2, r0
 80437e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80437e8:	6a21      	ldr	r1, [r4, #32]
 80437ea:	4628      	mov	r0, r5
 80437ec:	47b0      	blx	r6
 80437ee:	1c43      	adds	r3, r0, #1
 80437f0:	89a3      	ldrh	r3, [r4, #12]
 80437f2:	d106      	bne.n	8043802 <__sflush_r+0x66>
 80437f4:	6829      	ldr	r1, [r5, #0]
 80437f6:	291d      	cmp	r1, #29
 80437f8:	d82c      	bhi.n	8043854 <__sflush_r+0xb8>
 80437fa:	4a2a      	ldr	r2, [pc, #168]	; (80438a4 <__sflush_r+0x108>)
 80437fc:	40ca      	lsrs	r2, r1
 80437fe:	07d6      	lsls	r6, r2, #31
 8043800:	d528      	bpl.n	8043854 <__sflush_r+0xb8>
 8043802:	2200      	movs	r2, #0
 8043804:	6062      	str	r2, [r4, #4]
 8043806:	04d9      	lsls	r1, r3, #19
 8043808:	6922      	ldr	r2, [r4, #16]
 804380a:	6022      	str	r2, [r4, #0]
 804380c:	d504      	bpl.n	8043818 <__sflush_r+0x7c>
 804380e:	1c42      	adds	r2, r0, #1
 8043810:	d101      	bne.n	8043816 <__sflush_r+0x7a>
 8043812:	682b      	ldr	r3, [r5, #0]
 8043814:	b903      	cbnz	r3, 8043818 <__sflush_r+0x7c>
 8043816:	6560      	str	r0, [r4, #84]	; 0x54
 8043818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804381a:	602f      	str	r7, [r5, #0]
 804381c:	2900      	cmp	r1, #0
 804381e:	d0ca      	beq.n	80437b6 <__sflush_r+0x1a>
 8043820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8043824:	4299      	cmp	r1, r3
 8043826:	d002      	beq.n	804382e <__sflush_r+0x92>
 8043828:	4628      	mov	r0, r5
 804382a:	f000 f8fb 	bl	8043a24 <_free_r>
 804382e:	2000      	movs	r0, #0
 8043830:	6360      	str	r0, [r4, #52]	; 0x34
 8043832:	e7c1      	b.n	80437b8 <__sflush_r+0x1c>
 8043834:	6a21      	ldr	r1, [r4, #32]
 8043836:	2301      	movs	r3, #1
 8043838:	4628      	mov	r0, r5
 804383a:	47b0      	blx	r6
 804383c:	1c41      	adds	r1, r0, #1
 804383e:	d1c7      	bne.n	80437d0 <__sflush_r+0x34>
 8043840:	682b      	ldr	r3, [r5, #0]
 8043842:	2b00      	cmp	r3, #0
 8043844:	d0c4      	beq.n	80437d0 <__sflush_r+0x34>
 8043846:	2b1d      	cmp	r3, #29
 8043848:	d001      	beq.n	804384e <__sflush_r+0xb2>
 804384a:	2b16      	cmp	r3, #22
 804384c:	d101      	bne.n	8043852 <__sflush_r+0xb6>
 804384e:	602f      	str	r7, [r5, #0]
 8043850:	e7b1      	b.n	80437b6 <__sflush_r+0x1a>
 8043852:	89a3      	ldrh	r3, [r4, #12]
 8043854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043858:	81a3      	strh	r3, [r4, #12]
 804385a:	e7ad      	b.n	80437b8 <__sflush_r+0x1c>
 804385c:	690f      	ldr	r7, [r1, #16]
 804385e:	2f00      	cmp	r7, #0
 8043860:	d0a9      	beq.n	80437b6 <__sflush_r+0x1a>
 8043862:	0793      	lsls	r3, r2, #30
 8043864:	680e      	ldr	r6, [r1, #0]
 8043866:	bf08      	it	eq
 8043868:	694b      	ldreq	r3, [r1, #20]
 804386a:	600f      	str	r7, [r1, #0]
 804386c:	bf18      	it	ne
 804386e:	2300      	movne	r3, #0
 8043870:	eba6 0807 	sub.w	r8, r6, r7
 8043874:	608b      	str	r3, [r1, #8]
 8043876:	f1b8 0f00 	cmp.w	r8, #0
 804387a:	dd9c      	ble.n	80437b6 <__sflush_r+0x1a>
 804387c:	6a21      	ldr	r1, [r4, #32]
 804387e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8043880:	4643      	mov	r3, r8
 8043882:	463a      	mov	r2, r7
 8043884:	4628      	mov	r0, r5
 8043886:	47b0      	blx	r6
 8043888:	2800      	cmp	r0, #0
 804388a:	dc06      	bgt.n	804389a <__sflush_r+0xfe>
 804388c:	89a3      	ldrh	r3, [r4, #12]
 804388e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043892:	81a3      	strh	r3, [r4, #12]
 8043894:	f04f 30ff 	mov.w	r0, #4294967295
 8043898:	e78e      	b.n	80437b8 <__sflush_r+0x1c>
 804389a:	4407      	add	r7, r0
 804389c:	eba8 0800 	sub.w	r8, r8, r0
 80438a0:	e7e9      	b.n	8043876 <__sflush_r+0xda>
 80438a2:	bf00      	nop
 80438a4:	20400001 	.word	0x20400001

080438a8 <_fflush_r>:
 80438a8:	b538      	push	{r3, r4, r5, lr}
 80438aa:	690b      	ldr	r3, [r1, #16]
 80438ac:	4605      	mov	r5, r0
 80438ae:	460c      	mov	r4, r1
 80438b0:	b913      	cbnz	r3, 80438b8 <_fflush_r+0x10>
 80438b2:	2500      	movs	r5, #0
 80438b4:	4628      	mov	r0, r5
 80438b6:	bd38      	pop	{r3, r4, r5, pc}
 80438b8:	b118      	cbz	r0, 80438c2 <_fflush_r+0x1a>
 80438ba:	6983      	ldr	r3, [r0, #24]
 80438bc:	b90b      	cbnz	r3, 80438c2 <_fflush_r+0x1a>
 80438be:	f7ff fa4f 	bl	8042d60 <__sinit>
 80438c2:	4b14      	ldr	r3, [pc, #80]	; (8043914 <_fflush_r+0x6c>)
 80438c4:	429c      	cmp	r4, r3
 80438c6:	d11b      	bne.n	8043900 <_fflush_r+0x58>
 80438c8:	686c      	ldr	r4, [r5, #4]
 80438ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80438ce:	2b00      	cmp	r3, #0
 80438d0:	d0ef      	beq.n	80438b2 <_fflush_r+0xa>
 80438d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80438d4:	07d0      	lsls	r0, r2, #31
 80438d6:	d404      	bmi.n	80438e2 <_fflush_r+0x3a>
 80438d8:	0599      	lsls	r1, r3, #22
 80438da:	d402      	bmi.n	80438e2 <_fflush_r+0x3a>
 80438dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80438de:	f7ff fadd 	bl	8042e9c <__retarget_lock_acquire_recursive>
 80438e2:	4628      	mov	r0, r5
 80438e4:	4621      	mov	r1, r4
 80438e6:	f7ff ff59 	bl	804379c <__sflush_r>
 80438ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80438ec:	07da      	lsls	r2, r3, #31
 80438ee:	4605      	mov	r5, r0
 80438f0:	d4e0      	bmi.n	80438b4 <_fflush_r+0xc>
 80438f2:	89a3      	ldrh	r3, [r4, #12]
 80438f4:	059b      	lsls	r3, r3, #22
 80438f6:	d4dd      	bmi.n	80438b4 <_fflush_r+0xc>
 80438f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80438fa:	f7ff fad0 	bl	8042e9e <__retarget_lock_release_recursive>
 80438fe:	e7d9      	b.n	80438b4 <_fflush_r+0xc>
 8043900:	4b05      	ldr	r3, [pc, #20]	; (8043918 <_fflush_r+0x70>)
 8043902:	429c      	cmp	r4, r3
 8043904:	d101      	bne.n	804390a <_fflush_r+0x62>
 8043906:	68ac      	ldr	r4, [r5, #8]
 8043908:	e7df      	b.n	80438ca <_fflush_r+0x22>
 804390a:	4b04      	ldr	r3, [pc, #16]	; (804391c <_fflush_r+0x74>)
 804390c:	429c      	cmp	r4, r3
 804390e:	bf08      	it	eq
 8043910:	68ec      	ldreq	r4, [r5, #12]
 8043912:	e7da      	b.n	80438ca <_fflush_r+0x22>
 8043914:	08043ba0 	.word	0x08043ba0
 8043918:	08043bc0 	.word	0x08043bc0
 804391c:	08043b80 	.word	0x08043b80

08043920 <_lseek_r>:
 8043920:	b538      	push	{r3, r4, r5, lr}
 8043922:	4d07      	ldr	r5, [pc, #28]	; (8043940 <_lseek_r+0x20>)
 8043924:	4604      	mov	r4, r0
 8043926:	4608      	mov	r0, r1
 8043928:	4611      	mov	r1, r2
 804392a:	2200      	movs	r2, #0
 804392c:	602a      	str	r2, [r5, #0]
 804392e:	461a      	mov	r2, r3
 8043930:	f7fd f86c 	bl	8040a0c <_lseek>
 8043934:	1c43      	adds	r3, r0, #1
 8043936:	d102      	bne.n	804393e <_lseek_r+0x1e>
 8043938:	682b      	ldr	r3, [r5, #0]
 804393a:	b103      	cbz	r3, 804393e <_lseek_r+0x1e>
 804393c:	6023      	str	r3, [r4, #0]
 804393e:	bd38      	pop	{r3, r4, r5, pc}
 8043940:	2000012c 	.word	0x2000012c

08043944 <__swhatbuf_r>:
 8043944:	b570      	push	{r4, r5, r6, lr}
 8043946:	460e      	mov	r6, r1
 8043948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804394c:	2900      	cmp	r1, #0
 804394e:	b096      	sub	sp, #88	; 0x58
 8043950:	4614      	mov	r4, r2
 8043952:	461d      	mov	r5, r3
 8043954:	da07      	bge.n	8043966 <__swhatbuf_r+0x22>
 8043956:	2300      	movs	r3, #0
 8043958:	602b      	str	r3, [r5, #0]
 804395a:	89b3      	ldrh	r3, [r6, #12]
 804395c:	061a      	lsls	r2, r3, #24
 804395e:	d410      	bmi.n	8043982 <__swhatbuf_r+0x3e>
 8043960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8043964:	e00e      	b.n	8043984 <__swhatbuf_r+0x40>
 8043966:	466a      	mov	r2, sp
 8043968:	f000 f8be 	bl	8043ae8 <_fstat_r>
 804396c:	2800      	cmp	r0, #0
 804396e:	dbf2      	blt.n	8043956 <__swhatbuf_r+0x12>
 8043970:	9a01      	ldr	r2, [sp, #4]
 8043972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8043976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804397a:	425a      	negs	r2, r3
 804397c:	415a      	adcs	r2, r3
 804397e:	602a      	str	r2, [r5, #0]
 8043980:	e7ee      	b.n	8043960 <__swhatbuf_r+0x1c>
 8043982:	2340      	movs	r3, #64	; 0x40
 8043984:	2000      	movs	r0, #0
 8043986:	6023      	str	r3, [r4, #0]
 8043988:	b016      	add	sp, #88	; 0x58
 804398a:	bd70      	pop	{r4, r5, r6, pc}

0804398c <__smakebuf_r>:
 804398c:	898b      	ldrh	r3, [r1, #12]
 804398e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8043990:	079d      	lsls	r5, r3, #30
 8043992:	4606      	mov	r6, r0
 8043994:	460c      	mov	r4, r1
 8043996:	d507      	bpl.n	80439a8 <__smakebuf_r+0x1c>
 8043998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804399c:	6023      	str	r3, [r4, #0]
 804399e:	6123      	str	r3, [r4, #16]
 80439a0:	2301      	movs	r3, #1
 80439a2:	6163      	str	r3, [r4, #20]
 80439a4:	b002      	add	sp, #8
 80439a6:	bd70      	pop	{r4, r5, r6, pc}
 80439a8:	ab01      	add	r3, sp, #4
 80439aa:	466a      	mov	r2, sp
 80439ac:	f7ff ffca 	bl	8043944 <__swhatbuf_r>
 80439b0:	9900      	ldr	r1, [sp, #0]
 80439b2:	4605      	mov	r5, r0
 80439b4:	4630      	mov	r0, r6
 80439b6:	f7ff fa73 	bl	8042ea0 <_malloc_r>
 80439ba:	b948      	cbnz	r0, 80439d0 <__smakebuf_r+0x44>
 80439bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80439c0:	059a      	lsls	r2, r3, #22
 80439c2:	d4ef      	bmi.n	80439a4 <__smakebuf_r+0x18>
 80439c4:	f023 0303 	bic.w	r3, r3, #3
 80439c8:	f043 0302 	orr.w	r3, r3, #2
 80439cc:	81a3      	strh	r3, [r4, #12]
 80439ce:	e7e3      	b.n	8043998 <__smakebuf_r+0xc>
 80439d0:	4b0d      	ldr	r3, [pc, #52]	; (8043a08 <__smakebuf_r+0x7c>)
 80439d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80439d4:	89a3      	ldrh	r3, [r4, #12]
 80439d6:	6020      	str	r0, [r4, #0]
 80439d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80439dc:	81a3      	strh	r3, [r4, #12]
 80439de:	9b00      	ldr	r3, [sp, #0]
 80439e0:	6163      	str	r3, [r4, #20]
 80439e2:	9b01      	ldr	r3, [sp, #4]
 80439e4:	6120      	str	r0, [r4, #16]
 80439e6:	b15b      	cbz	r3, 8043a00 <__smakebuf_r+0x74>
 80439e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80439ec:	4630      	mov	r0, r6
 80439ee:	f000 f88d 	bl	8043b0c <_isatty_r>
 80439f2:	b128      	cbz	r0, 8043a00 <__smakebuf_r+0x74>
 80439f4:	89a3      	ldrh	r3, [r4, #12]
 80439f6:	f023 0303 	bic.w	r3, r3, #3
 80439fa:	f043 0301 	orr.w	r3, r3, #1
 80439fe:	81a3      	strh	r3, [r4, #12]
 8043a00:	89a0      	ldrh	r0, [r4, #12]
 8043a02:	4305      	orrs	r5, r0
 8043a04:	81a5      	strh	r5, [r4, #12]
 8043a06:	e7cd      	b.n	80439a4 <__smakebuf_r+0x18>
 8043a08:	08042cf9 	.word	0x08042cf9

08043a0c <__malloc_lock>:
 8043a0c:	4801      	ldr	r0, [pc, #4]	; (8043a14 <__malloc_lock+0x8>)
 8043a0e:	f7ff ba45 	b.w	8042e9c <__retarget_lock_acquire_recursive>
 8043a12:	bf00      	nop
 8043a14:	20000124 	.word	0x20000124

08043a18 <__malloc_unlock>:
 8043a18:	4801      	ldr	r0, [pc, #4]	; (8043a20 <__malloc_unlock+0x8>)
 8043a1a:	f7ff ba40 	b.w	8042e9e <__retarget_lock_release_recursive>
 8043a1e:	bf00      	nop
 8043a20:	20000124 	.word	0x20000124

08043a24 <_free_r>:
 8043a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8043a26:	2900      	cmp	r1, #0
 8043a28:	d048      	beq.n	8043abc <_free_r+0x98>
 8043a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043a2e:	9001      	str	r0, [sp, #4]
 8043a30:	2b00      	cmp	r3, #0
 8043a32:	f1a1 0404 	sub.w	r4, r1, #4
 8043a36:	bfb8      	it	lt
 8043a38:	18e4      	addlt	r4, r4, r3
 8043a3a:	f7ff ffe7 	bl	8043a0c <__malloc_lock>
 8043a3e:	4a20      	ldr	r2, [pc, #128]	; (8043ac0 <_free_r+0x9c>)
 8043a40:	9801      	ldr	r0, [sp, #4]
 8043a42:	6813      	ldr	r3, [r2, #0]
 8043a44:	4615      	mov	r5, r2
 8043a46:	b933      	cbnz	r3, 8043a56 <_free_r+0x32>
 8043a48:	6063      	str	r3, [r4, #4]
 8043a4a:	6014      	str	r4, [r2, #0]
 8043a4c:	b003      	add	sp, #12
 8043a4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8043a52:	f7ff bfe1 	b.w	8043a18 <__malloc_unlock>
 8043a56:	42a3      	cmp	r3, r4
 8043a58:	d90b      	bls.n	8043a72 <_free_r+0x4e>
 8043a5a:	6821      	ldr	r1, [r4, #0]
 8043a5c:	1862      	adds	r2, r4, r1
 8043a5e:	4293      	cmp	r3, r2
 8043a60:	bf04      	itt	eq
 8043a62:	681a      	ldreq	r2, [r3, #0]
 8043a64:	685b      	ldreq	r3, [r3, #4]
 8043a66:	6063      	str	r3, [r4, #4]
 8043a68:	bf04      	itt	eq
 8043a6a:	1852      	addeq	r2, r2, r1
 8043a6c:	6022      	streq	r2, [r4, #0]
 8043a6e:	602c      	str	r4, [r5, #0]
 8043a70:	e7ec      	b.n	8043a4c <_free_r+0x28>
 8043a72:	461a      	mov	r2, r3
 8043a74:	685b      	ldr	r3, [r3, #4]
 8043a76:	b10b      	cbz	r3, 8043a7c <_free_r+0x58>
 8043a78:	42a3      	cmp	r3, r4
 8043a7a:	d9fa      	bls.n	8043a72 <_free_r+0x4e>
 8043a7c:	6811      	ldr	r1, [r2, #0]
 8043a7e:	1855      	adds	r5, r2, r1
 8043a80:	42a5      	cmp	r5, r4
 8043a82:	d10b      	bne.n	8043a9c <_free_r+0x78>
 8043a84:	6824      	ldr	r4, [r4, #0]
 8043a86:	4421      	add	r1, r4
 8043a88:	1854      	adds	r4, r2, r1
 8043a8a:	42a3      	cmp	r3, r4
 8043a8c:	6011      	str	r1, [r2, #0]
 8043a8e:	d1dd      	bne.n	8043a4c <_free_r+0x28>
 8043a90:	681c      	ldr	r4, [r3, #0]
 8043a92:	685b      	ldr	r3, [r3, #4]
 8043a94:	6053      	str	r3, [r2, #4]
 8043a96:	4421      	add	r1, r4
 8043a98:	6011      	str	r1, [r2, #0]
 8043a9a:	e7d7      	b.n	8043a4c <_free_r+0x28>
 8043a9c:	d902      	bls.n	8043aa4 <_free_r+0x80>
 8043a9e:	230c      	movs	r3, #12
 8043aa0:	6003      	str	r3, [r0, #0]
 8043aa2:	e7d3      	b.n	8043a4c <_free_r+0x28>
 8043aa4:	6825      	ldr	r5, [r4, #0]
 8043aa6:	1961      	adds	r1, r4, r5
 8043aa8:	428b      	cmp	r3, r1
 8043aaa:	bf04      	itt	eq
 8043aac:	6819      	ldreq	r1, [r3, #0]
 8043aae:	685b      	ldreq	r3, [r3, #4]
 8043ab0:	6063      	str	r3, [r4, #4]
 8043ab2:	bf04      	itt	eq
 8043ab4:	1949      	addeq	r1, r1, r5
 8043ab6:	6021      	streq	r1, [r4, #0]
 8043ab8:	6054      	str	r4, [r2, #4]
 8043aba:	e7c7      	b.n	8043a4c <_free_r+0x28>
 8043abc:	b003      	add	sp, #12
 8043abe:	bd30      	pop	{r4, r5, pc}
 8043ac0:	20000090 	.word	0x20000090

08043ac4 <_read_r>:
 8043ac4:	b538      	push	{r3, r4, r5, lr}
 8043ac6:	4d07      	ldr	r5, [pc, #28]	; (8043ae4 <_read_r+0x20>)
 8043ac8:	4604      	mov	r4, r0
 8043aca:	4608      	mov	r0, r1
 8043acc:	4611      	mov	r1, r2
 8043ace:	2200      	movs	r2, #0
 8043ad0:	602a      	str	r2, [r5, #0]
 8043ad2:	461a      	mov	r2, r3
 8043ad4:	f7fc ff3a 	bl	804094c <_read>
 8043ad8:	1c43      	adds	r3, r0, #1
 8043ada:	d102      	bne.n	8043ae2 <_read_r+0x1e>
 8043adc:	682b      	ldr	r3, [r5, #0]
 8043ade:	b103      	cbz	r3, 8043ae2 <_read_r+0x1e>
 8043ae0:	6023      	str	r3, [r4, #0]
 8043ae2:	bd38      	pop	{r3, r4, r5, pc}
 8043ae4:	2000012c 	.word	0x2000012c

08043ae8 <_fstat_r>:
 8043ae8:	b538      	push	{r3, r4, r5, lr}
 8043aea:	4d07      	ldr	r5, [pc, #28]	; (8043b08 <_fstat_r+0x20>)
 8043aec:	2300      	movs	r3, #0
 8043aee:	4604      	mov	r4, r0
 8043af0:	4608      	mov	r0, r1
 8043af2:	4611      	mov	r1, r2
 8043af4:	602b      	str	r3, [r5, #0]
 8043af6:	f7fc ff6e 	bl	80409d6 <_fstat>
 8043afa:	1c43      	adds	r3, r0, #1
 8043afc:	d102      	bne.n	8043b04 <_fstat_r+0x1c>
 8043afe:	682b      	ldr	r3, [r5, #0]
 8043b00:	b103      	cbz	r3, 8043b04 <_fstat_r+0x1c>
 8043b02:	6023      	str	r3, [r4, #0]
 8043b04:	bd38      	pop	{r3, r4, r5, pc}
 8043b06:	bf00      	nop
 8043b08:	2000012c 	.word	0x2000012c

08043b0c <_isatty_r>:
 8043b0c:	b538      	push	{r3, r4, r5, lr}
 8043b0e:	4d06      	ldr	r5, [pc, #24]	; (8043b28 <_isatty_r+0x1c>)
 8043b10:	2300      	movs	r3, #0
 8043b12:	4604      	mov	r4, r0
 8043b14:	4608      	mov	r0, r1
 8043b16:	602b      	str	r3, [r5, #0]
 8043b18:	f7fc ff6d 	bl	80409f6 <_isatty>
 8043b1c:	1c43      	adds	r3, r0, #1
 8043b1e:	d102      	bne.n	8043b26 <_isatty_r+0x1a>
 8043b20:	682b      	ldr	r3, [r5, #0]
 8043b22:	b103      	cbz	r3, 8043b26 <_isatty_r+0x1a>
 8043b24:	6023      	str	r3, [r4, #0]
 8043b26:	bd38      	pop	{r3, r4, r5, pc}
 8043b28:	2000012c 	.word	0x2000012c

08043b2c <_init>:
 8043b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043b2e:	bf00      	nop
 8043b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043b32:	bc08      	pop	{r3}
 8043b34:	469e      	mov	lr, r3
 8043b36:	4770      	bx	lr

08043b38 <_fini>:
 8043b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043b3a:	bf00      	nop
 8043b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043b3e:	bc08      	pop	{r3}
 8043b40:	469e      	mov	lr, r3
 8043b42:	4770      	bx	lr
